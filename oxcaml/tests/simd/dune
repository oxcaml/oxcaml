; Helpers

(library
 (name simd_test_helpers)
 (wrapped false)
 (modules test_helpers))

;; CR-someday mslater: with layout polymorphism, the tests could be
;; functorized instead concatenating files.


(rule
 (targets utils_u.ml)
 (deps unbox_types.ml utils.ml)
 (action
   (with-stdout-to
     utils_u.ml
    (cat "unbox_types.ml" "utils.ml")
 )))

(rule
 (targets builtins_u.ml)
 (deps unbox_types.ml builtins.ml)
 (action
   (with-stdout-to
     builtins_u.ml
    (cat "unbox_types.ml" "builtins.ml")
 )))

(rule
 (targets ops_u.ml)
 (deps ops.ml)
 (action
  (with-stdout-to
   ops_u.ml
   (progn
   (echo "module Builtins = Builtins_u\n\n")
   (echo "module Utils = Utils_u\n\n")
   (cat "ops.ml")))))

(rule
 (targets ops_float32x4_u.ml)
 (deps ops_float32x4.ml)
 (action
  (with-stdout-to
   ops_float32x4_u.ml
   (progn
   (echo "module Builtins = Builtins_u\n\n")
   (echo "module Utils = Utils_u\n\n")
   (cat "ops_float32x4.ml")))))

(rule
 (targets ops_float64x2_u.ml)
 (deps ops_float64x2.ml)
 (action
  (with-stdout-to
   ops_float64x2_u.ml
   (progn
   (echo "module Builtins = Builtins_u\n\n")
   (echo "module Utils = Utils_u\n\n")
   (cat "ops_float64x2.ml")))))

(rule
 (targets ops_int64x2_u.ml)
 (deps ops_int64x2.ml)
 (action
  (with-stdout-to
   ops_int64x2_u.ml
   (progn
   (echo "module Builtins = Builtins_u\n\n")
   (echo "module Utils = Utils_u\n\n")
   (cat "ops_int64x2.ml")))))

(rule
 (targets ops_int32x4_u.ml)
 (deps ops_int32x4.ml)
 (action
  (with-stdout-to
   ops_int32x4_u.ml
   (progn
   (echo "module Builtins = Builtins_u\n\n")
   (echo "module Utils = Utils_u\n\n")
   (cat "ops_int32x4.ml")))))

(rule
 (targets ops_int16x8_u.ml)
 (deps ops_int16x8.ml)
 (action
  (with-stdout-to
   ops_int16x8_u.ml
   (progn
   (echo "module Builtins = Builtins_u\n\n")
   (echo "module Utils = Utils_u\n\n")
   (cat "ops_int16x8.ml")))))

(rule
 (targets ops_int8x16_u.ml)
 (deps ops_int8x16.ml)
 (action
  (with-stdout-to
   ops_int8x16_u.ml
   (progn
   (echo "module Builtins = Builtins_u\n\n")
   (echo "module Utils = Utils_u\n\n")
   (cat "ops_int8x16.ml")))))

(library
 (name simd_test_builtins)
 (wrapped false)
 (libraries stdlib_stable stdlib_upstream_compatible)
 (modules utils utils_u float32_reference float64_reference builtins builtins_u))

(copy_files#
  (files "%{env:ARCH=amd64}/*.{ml,c}"))

; Stubs

(foreign_library
 (archive_name stubs)
 (language c)
 (names stubs stub_builtins)
 (flags
   (:standard
     (:include flags.sexp)))
 (include_dirs "../../../%{env:RUNTIME_DIR=runtime-dir-env-var-not-set}"))

(rule
 (targets flags.sexp)
 (enabled_if
  (and
   (= %{context_name} "main")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   flags.sexp
   (echo "-msse4.2"))))

(rule
 (targets flags.sexp)
 (enabled_if
  (and
   (= %{context_name} "main")
   (<> %{architecture} "amd64")))
 (action
  (with-stdout-to
   flags.sexp
   (echo "()"))))

(include dune.inc)

(rule (with-stdout-to dune.inc.gen (run ./gen/gen_dune.exe)))

(rule
 (alias  runtest)
 (action (diff dune.inc dune.inc.gen)))
