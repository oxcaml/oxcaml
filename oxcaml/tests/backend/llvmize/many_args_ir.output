source_filename = "many_args.ml"

define  oxcamlcc { { i64, i64 }, { i64 } } @camlMany_args__call_with_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca ptr addrspace(1)
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = load i64, ptr %ds
  %21 = add i64 %20, 576
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %ds
  %24 = add i64 %23, 584
  %25 = inttoptr i64 %24 to ptr
  %26 = load i64, ptr %ds
  %27 = add i64 %26, 592
  %28 = inttoptr i64 %27 to ptr
  %29 = load i64, ptr %ds
  %30 = add i64 %29, 600
  %31 = inttoptr i64 %30 to ptr
  %32 = alloca i64
  %33 = alloca i64
  br label %L1
L1:
  br label %L101
L101:
  %34 = load i64, ptr %4
  store i64 %34, ptr %14
  %35 = ptrtoint ptr @camlMany_args_defn to i64
  store i64 %35, ptr %15
  %36 = load i64, ptr %15
  %37 = inttoptr i64 %36 to ptr
  %38 = load ptr addrspace(1), ptr %37
  store ptr addrspace(1) %38, ptr %16
  %39 = load i64, ptr %14
  %40 = add i64 %39, 60
  store i64 %40, ptr %17
  store i64 7, ptr %18
  %41 = load i64, ptr %14
  store i64 %41, ptr %4
  %42 = load i64, ptr %14
  store i64 %42, ptr %5
  %43 = load i64, ptr %18
  store i64 %43, ptr %6
  %44 = load i64, ptr %14
  store i64 %44, ptr %7
  %45 = load i64, ptr %14
  store i64 %45, ptr %8
  %46 = load i64, ptr %14
  store i64 %46, ptr %9
  %47 = load i64, ptr %14
  store i64 %47, ptr %10
  %48 = load i64, ptr %14
  store i64 %48, ptr %11
  %49 = load i64, ptr %14
  store i64 %49, ptr %12
  %50 = load i64, ptr %14
  store i64 %50, ptr %13
  %51 = load i64, ptr %14
  store i64 %51, ptr %22
  %52 = load i64, ptr %14
  store i64 %52, ptr %25
  %53 = load i64, ptr %17
  store i64 %53, ptr %28
  %54 = load ptr addrspace(1), ptr %16
  store ptr addrspace(1) %54, ptr %31
  %55 = load i64, ptr %4
  %56 = load i64, ptr %5
  %57 = load i64, ptr %6
  %58 = load i64, ptr %7
  %59 = load i64, ptr %8
  %60 = load i64, ptr %9
  %61 = load i64, ptr %10
  %62 = load i64, ptr %11
  %63 = load i64, ptr %12
  %64 = load i64, ptr %13
  %65 = load i64, ptr %ds
  %66 = load i64, ptr %alloc
  %67 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply13(i64 %65, i64 %66, i64 %55, i64 %56, i64 %57, i64 %58, i64 %59, i64 %60, i64 %61, i64 %62, i64 %63, i64 %64) "statepoint-id"="0"
  %68 = extractvalue { { i64, i64 }, { i64 } } %67, 0, 0
  %69 = extractvalue { { i64, i64 }, { i64 } } %67, 0, 1
  store i64 %68, ptr %ds
  store i64 %69, ptr %alloc
  %70 = extractvalue { { i64, i64 }, { i64 } } %67, 1, 0
  store i64 %70, ptr %4
  br label %L103
L103:
  %71 = load i64, ptr %4
  store i64 %71, ptr %19
  %72 = load i64, ptr %19
  store i64 %72, ptr %32
  %73 = load i64, ptr %32
  %74 = add i64 %73, 2
  store i64 %74, ptr %33
  %75 = load i64, ptr %33
  store i64 %75, ptr %4
  %76 = load i64, ptr %4
  %77 = load i64, ptr %ds
  %78 = load i64, ptr %alloc
  %79 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %77, 0, 0
  %80 = insertvalue { { i64, i64 }, { i64 } } %79, i64 %78, 0, 1
  %81 = insertvalue { { i64, i64 }, { i64 } } %80, i64 %76, 1, 0
  ret { { i64, i64 }, { i64 } } %81
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlMany_args__entry(i64 %0, i64 %1) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca ptr addrspace(1)
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L111
L111:
  %8 = ptrtoint ptr @camlMany_args to i64
  store i64 %8, ptr %5
  %9 = load i64, ptr %5
  store i64 %9, ptr %6
  %10 = load i64, ptr %6
  %11 = inttoptr i64 %10 to ptr addrspace(1)
  store ptr addrspace(1) %11, ptr %4
  store i64 1, ptr %7
  %12 = load i64, ptr %7
  store i64 %12, ptr %3
  %13 = load ptr addrspace(1), ptr %3
  %14 = load i64, ptr %ds
  %15 = load i64, ptr %alloc
  %16 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %14, 0, 0
  %17 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %16, i64 %15, 0, 1
  %18 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %17, ptr addrspace(1) %13, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %18
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlMany_args__gc_roots = global { i64 } { i64 0 }, section ".data", align 8
@header.camlMany_args = global i64 1792, section ".data", align 8
@camlMany_args = global { ptr } { ptr @camlMany_args__call_with_1 }, section ".data", align 8
@header.camlMany_args__call_with_1 = global i64 3063, section ".data", align 8
@camlMany_args__call_with_1 = global { ptr, i64 } { ptr @camlMany_args__call_with_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@camlMany_args_defn = external global ptr
@caml_apply13 = external global ptr



!0 = !{ i32 1, !"oxcaml_module", !"Many_args" }
!llvm.module.flags = !{ !0 }
