source_filename = "tailcall.ml"

define  oxcamlcc { { i64, i64 }, { i64 } } @camlTailcall__fib_general_HIDE_STAMP(i64 %0, i64 %1, i64 %2, i64 %3, i64 %4) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %6 = alloca i64
  store i64 %2, ptr %6
  %7 = alloca i64
  store i64 %3, ptr %7
  %8 = alloca i64
  store i64 %4, ptr %8
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  br label %L1
L1:
  br label %L101
L101:
  %24 = load i64, ptr %6
  store i64 %24, ptr %9
  %25 = load i64, ptr %7
  store i64 %25, ptr %10
  %26 = load i64, ptr %8
  store i64 %26, ptr %11
  %27 = load i64, ptr %9
  store i64 %27, ptr %15
  %28 = load i64, ptr %10
  store i64 %28, ptr %16
  %29 = load i64, ptr %11
  store i64 %29, ptr %17
  %30 = load i64, ptr %15
  store i64 %30, ptr %12
  %31 = load i64, ptr %16
  store i64 %31, ptr %13
  %32 = load i64, ptr %17
  store i64 %32, ptr %14
  br label %L106
L106:
  %33 = load i64, ptr %14
  %34 = icmp slt i64 %33, 1
  br i1 %34, label %L108, label %L122
L122:
  %35 = load i64, ptr %14
  %36 = icmp sgt i64 %35, 1
  br i1 %36, label %L108, label %L118
L108:
  %37 = load i64, ptr %14
  %38 = icmp slt i64 %37, 3
  br i1 %38, label %L110, label %L123
L123:
  %39 = load i64, ptr %14
  %40 = icmp sgt i64 %39, 3
  br i1 %40, label %L110, label %L115
L110:
  %41 = load i64, ptr %14
  store i64 %41, ptr %18
  %42 = load i64, ptr %18
  %43 = add i64 %42, -2
  store i64 %43, ptr %18
  %44 = load i64, ptr %12
  store i64 %44, ptr %19
  %45 = load i64, ptr %19
  %46 = load i64, ptr %13
  %47 = add i64 %45, %46
  store i64 %47, ptr %19
  %48 = load i64, ptr %19
  store i64 %48, ptr %20
  %49 = load i64, ptr %20
  %50 = add i64 %49, -1
  store i64 %50, ptr %20
  %51 = load i64, ptr %13
  store i64 %51, ptr %21
  %52 = load i64, ptr %20
  store i64 %52, ptr %22
  %53 = load i64, ptr %18
  store i64 %53, ptr %23
  %54 = load i64, ptr %21
  store i64 %54, ptr %12
  %55 = load i64, ptr %22
  store i64 %55, ptr %13
  %56 = load i64, ptr %23
  store i64 %56, ptr %14
  br label %L106
L115:
  %57 = load i64, ptr %13
  store i64 %57, ptr %6
  %58 = load i64, ptr %6
  %59 = load i64, ptr %ds
  %60 = load i64, ptr %alloc
  %61 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %59, 0, 0
  %62 = insertvalue { { i64, i64 }, { i64 } } %61, i64 %60, 0, 1
  %63 = insertvalue { { i64, i64 }, { i64 } } %62, i64 %58, 1, 0
  ret { { i64, i64 }, { i64 } } %63
L118:
  %64 = load i64, ptr %12
  store i64 %64, ptr %6
  %65 = load i64, ptr %6
  %66 = load i64, ptr %ds
  %67 = load i64, ptr %alloc
  %68 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %66, 0, 0
  %69 = insertvalue { { i64, i64 }, { i64 } } %68, i64 %67, 0, 1
  %70 = insertvalue { { i64, i64 }, { i64 } } %69, i64 %65, 1, 0
  ret { { i64, i64 }, { i64 } } %70
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlTailcall__collatz_odd_HIDE_STAMP(i64 %0, i64 %1, i64 %2, i64 %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  br label %L1
L1:
  br label %L125
L125:
  %20 = load i64, ptr %5
  store i64 %20, ptr %7
  %21 = load i64, ptr %6
  store i64 %21, ptr %8
  %22 = load i64, ptr %7
  %23 = icmp slt i64 %22, 3
  br i1 %23, label %L129, label %L148
L148:
  %24 = load i64, ptr %7
  %25 = icmp sgt i64 %24, 3
  br i1 %25, label %L129, label %L127
L127:
  %26 = load i64, ptr %8
  store i64 %26, ptr %5
  %27 = load i64, ptr %5
  %28 = load i64, ptr %ds
  %29 = load i64, ptr %alloc
  %30 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %28, 0, 0
  %31 = insertvalue { { i64, i64 }, { i64 } } %30, i64 %29, 0, 1
  %32 = insertvalue { { i64, i64 }, { i64 } } %31, i64 %27, 1, 0
  ret { { i64, i64 }, { i64 } } %32
L129:
  %33 = load i64, ptr %7
  store i64 %33, ptr %9
  %34 = load i64, ptr %9
  %35 = ashr i64 %34, 1
  store i64 %35, ptr %9
  %36 = load i64, ptr %9
  store i64 %36, ptr %10
  store i64 -2, ptr %11
  %37 = load i64, ptr %10
  store i64 %37, ptr %12
  %38 = load i64, ptr %12
  %39 = lshr i64 %38, 63
  store i64 %39, ptr %12
  %40 = load i64, ptr %10
  store i64 %40, ptr %13
  %41 = load i64, ptr %13
  %42 = load i64, ptr %12
  %43 = add i64 %41, %42
  store i64 %43, ptr %13
  %44 = load i64, ptr %13
  store i64 %44, ptr %14
  %45 = load i64, ptr %14
  %46 = load i64, ptr %11
  %47 = and i64 %45, %46
  store i64 %47, ptr %14
  %48 = load i64, ptr %10
  store i64 %48, ptr %15
  %49 = load i64, ptr %15
  %50 = load i64, ptr %14
  %51 = sub i64 %49, %50
  store i64 %51, ptr %15
  %52 = load i64, ptr %15
  store i64 %52, ptr %16
  %53 = load i64, ptr %16
  %54 = shl i64 %53, 1
  store i64 %54, ptr %16
  %55 = load i64, ptr %16
  store i64 %55, ptr %17
  %56 = load i64, ptr %17
  %57 = add i64 %56, 1
  store i64 %57, ptr %17
  %58 = load i64, ptr %17
  %59 = icmp slt i64 %58, 3
  br i1 %59, label %L143, label %L149
L149:
  %60 = load i64, ptr %17
  %61 = icmp sgt i64 %60, 3
  br i1 %61, label %L143, label %L138
L138:
  %62 = load i64, ptr %8
  store i64 %62, ptr %18
  %63 = load i64, ptr %18
  %64 = add i64 %63, 2
  store i64 %64, ptr %18
  %65 = load i64, ptr %7
  store i64 %65, ptr %19
  %66 = load i64, ptr %19
  %67 = mul i64 %66, 3
  store i64 %67, ptr %19
  %68 = load i64, ptr %19
  store i64 %68, ptr %5
  %69 = load i64, ptr %18
  store i64 %69, ptr %6
  br label %L125
L143:
  %70 = load i64, ptr %7
  store i64 %70, ptr %5
  %71 = load i64, ptr %8
  store i64 %71, ptr %6
  %72 = load i64, ptr %5
  %73 = load i64, ptr %6
  %74 = load i64, ptr %ds
  %75 = load i64, ptr %alloc
  %76 = musttail call oxcamlcc { { i64, i64 }, { i64 } } @camlTailcall__collatz_even_HIDE_STAMP(i64 %74, i64 %75, i64 %72, i64 %73) "gc-leaf-function"="true" "statepoint-id"="0"
  ret { { i64, i64 }, { i64 } } %76
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlTailcall__collatz_even_HIDE_STAMP(i64 %0, i64 %1, i64 %2, i64 %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  br label %L1
L1:
  br label %L151
L151:
  %26 = load i64, ptr %5
  store i64 %26, ptr %7
  %27 = load i64, ptr %6
  store i64 %27, ptr %8
  %28 = load i64, ptr %7
  %29 = icmp slt i64 %28, 3
  br i1 %29, label %L155, label %L179
L179:
  %30 = load i64, ptr %7
  %31 = icmp sgt i64 %30, 3
  br i1 %31, label %L155, label %L153
L153:
  %32 = load i64, ptr %8
  store i64 %32, ptr %5
  %33 = load i64, ptr %5
  %34 = load i64, ptr %ds
  %35 = load i64, ptr %alloc
  %36 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %34, 0, 0
  %37 = insertvalue { { i64, i64 }, { i64 } } %36, i64 %35, 0, 1
  %38 = insertvalue { { i64, i64 }, { i64 } } %37, i64 %33, 1, 0
  ret { { i64, i64 }, { i64 } } %38
L155:
  %39 = load i64, ptr %7
  store i64 %39, ptr %9
  %40 = load i64, ptr %9
  %41 = ashr i64 %40, 1
  store i64 %41, ptr %9
  %42 = load i64, ptr %9
  store i64 %42, ptr %10
  store i64 -2, ptr %11
  %43 = load i64, ptr %10
  store i64 %43, ptr %12
  %44 = load i64, ptr %12
  %45 = lshr i64 %44, 63
  store i64 %45, ptr %12
  %46 = load i64, ptr %10
  store i64 %46, ptr %13
  %47 = load i64, ptr %13
  %48 = load i64, ptr %12
  %49 = add i64 %47, %48
  store i64 %49, ptr %13
  %50 = load i64, ptr %13
  store i64 %50, ptr %14
  %51 = load i64, ptr %14
  %52 = load i64, ptr %11
  %53 = and i64 %51, %52
  store i64 %53, ptr %14
  %54 = load i64, ptr %10
  store i64 %54, ptr %15
  %55 = load i64, ptr %15
  %56 = load i64, ptr %14
  %57 = sub i64 %55, %56
  store i64 %57, ptr %15
  %58 = load i64, ptr %15
  store i64 %58, ptr %16
  %59 = load i64, ptr %16
  %60 = shl i64 %59, 1
  store i64 %60, ptr %16
  %61 = load i64, ptr %16
  store i64 %61, ptr %17
  %62 = load i64, ptr %17
  %63 = add i64 %62, 1
  store i64 %63, ptr %17
  %64 = load i64, ptr %17
  %65 = icmp slt i64 %64, 1
  br i1 %65, label %L174, label %L180
L180:
  %66 = load i64, ptr %17
  %67 = icmp sgt i64 %66, 1
  br i1 %67, label %L174, label %L164
L164:
  %68 = load i64, ptr %8
  store i64 %68, ptr %18
  %69 = load i64, ptr %18
  %70 = add i64 %69, 2
  store i64 %70, ptr %18
  %71 = load i64, ptr %7
  store i64 %71, ptr %19
  %72 = load i64, ptr %19
  %73 = ashr i64 %72, 1
  store i64 %73, ptr %19
  %74 = load i64, ptr %19
  store i64 %74, ptr %20
  %75 = load i64, ptr %20
  store i64 %75, ptr %21
  %76 = load i64, ptr %21
  %77 = lshr i64 %76, 63
  store i64 %77, ptr %21
  %78 = load i64, ptr %20
  store i64 %78, ptr %22
  %79 = load i64, ptr %22
  %80 = load i64, ptr %21
  %81 = add i64 %79, %80
  store i64 %81, ptr %22
  %82 = load i64, ptr %22
  store i64 %82, ptr %23
  %83 = load i64, ptr %23
  %84 = ashr i64 %83, 1
  store i64 %84, ptr %23
  %85 = load i64, ptr %23
  store i64 %85, ptr %24
  %86 = load i64, ptr %24
  %87 = shl i64 %86, 1
  store i64 %87, ptr %24
  %88 = load i64, ptr %24
  store i64 %88, ptr %25
  %89 = load i64, ptr %25
  %90 = add i64 %89, 1
  store i64 %90, ptr %25
  %91 = load i64, ptr %25
  store i64 %91, ptr %5
  %92 = load i64, ptr %18
  store i64 %92, ptr %6
  br label %L151
L174:
  %93 = load i64, ptr %7
  store i64 %93, ptr %5
  %94 = load i64, ptr %8
  store i64 %94, ptr %6
  %95 = load i64, ptr %5
  %96 = load i64, ptr %6
  %97 = load i64, ptr %ds
  %98 = load i64, ptr %alloc
  %99 = musttail call oxcamlcc { { i64, i64 }, { i64 } } @camlTailcall__collatz_odd_HIDE_STAMP(i64 %97, i64 %98, i64 %95, i64 %96) "gc-leaf-function"="true" "statepoint-id"="0"
  ret { { i64, i64 }, { i64 } } %99
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlTailcall__tail_call_outside_HIDE_STAMP(i64 %0, i64 %1, i64 %2, ptr addrspace(1) %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca ptr addrspace(1)
  store ptr addrspace(1) %3, ptr %6
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca ptr addrspace(1)
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  br label %L1
L1:
  br label %L182
L182:
  %17 = load i64, ptr %5
  store i64 %17, ptr %10
  %18 = load ptr addrspace(1), ptr %6
  store ptr addrspace(1) %18, ptr %11
  %19 = ptrtoint ptr @camlTailcall2 to i64
  store i64 %19, ptr %12
  %20 = load i64, ptr %12
  %21 = inttoptr i64 %20 to ptr
  %22 = load ptr addrspace(1), ptr %21
  store ptr addrspace(1) %22, ptr %13
  %23 = load i64, ptr %10
  store i64 %23, ptr %14
  %24 = load i64, ptr %14
  %25 = shl i64 %24, 1
  store i64 %25, ptr %14
  %26 = load i64, ptr %14
  store i64 %26, ptr %15
  %27 = load i64, ptr %15
  %28 = add i64 %27, -1
  store i64 %28, ptr %15
  %29 = load i64, ptr %10
  store i64 %29, ptr %16
  %30 = load i64, ptr %16
  %31 = add i64 %30, 2
  store i64 %31, ptr %16
  %32 = load i64, ptr %16
  store i64 %32, ptr %5
  %33 = load i64, ptr %15
  store i64 %33, ptr %7
  %34 = load ptr addrspace(1), ptr %11
  store ptr addrspace(1) %34, ptr %8
  %35 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %35, ptr %9
  %36 = load i64, ptr %5
  %37 = load i64, ptr %7
  %38 = load ptr addrspace(1), ptr %8
  %39 = load ptr addrspace(1), ptr %9
  %40 = load i64, ptr %ds
  %41 = load i64, ptr %alloc
  %42 = musttail call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply3(i64 %40, i64 %41, i64 %36, i64 %37, ptr addrspace(1) %38, ptr addrspace(1) %39) "gc-leaf-function"="true" "statepoint-id"="0"
  ret { { i64, i64 }, { i64 } } %42
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlTailcall__tail_call_outside_prologue_HIDE_STAMP(i64 %0, i64 %1, i64 %2, ptr addrspace(1) %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca ptr addrspace(1)
  store ptr addrspace(1) %3, ptr %6
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca ptr addrspace(1)
  %14 = alloca ptr addrspace(1)
  %15 = alloca ptr addrspace(1)
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca ptr addrspace(1)
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  br label %L1
L1:
  br label %L190
L190:
  %25 = load i64, ptr %5
  store i64 %25, ptr %10
  %26 = load ptr addrspace(1), ptr %6
  store ptr addrspace(1) %26, ptr %11
  %27 = ptrtoint ptr @camlTailcall2 to i64
  store i64 %27, ptr %12
  %28 = load i64, ptr %12
  %29 = inttoptr i64 %28 to ptr addrspace(1)
  store ptr addrspace(1) %29, ptr %13
  %30 = load ptr addrspace(1), ptr %13
  %31 = getelementptr i8, ptr addrspace(1) %30, i64 8
  store ptr addrspace(1) %31, ptr %13
  %32 = load ptr addrspace(1), ptr %13
  %33 = load ptr addrspace(1), ptr addrspace(1) %32
  store ptr addrspace(1) %33, ptr %14
  %34 = load ptr addrspace(1), ptr %14
  store ptr addrspace(1) %34, ptr %15
  store i64 1, ptr %16
  %35 = load ptr addrspace(1), ptr %15
  %36 = load i64, ptr addrspace(1) %35
  store i64 %36, ptr %17
  %37 = load i64, ptr %16
  store i64 %37, ptr %5
  %38 = load ptr addrspace(1), ptr %15
  store ptr addrspace(1) %38, ptr %6
  %39 = load i64, ptr %5
  %40 = load ptr addrspace(1), ptr %6
  %41 = load i64, ptr %ds
  %42 = load i64, ptr %alloc
  %43 = load ptr, ptr %17
  %44 = call oxcamlcc { { i64, i64 }, { i64 } } %43(i64 %41, i64 %42, i64 %39, ptr addrspace(1) %40) "statepoint-id"="0"
  %45 = extractvalue { { i64, i64 }, { i64 } } %44, 0, 0
  %46 = extractvalue { { i64, i64 }, { i64 } } %44, 0, 1
  store i64 %45, ptr %ds
  store i64 %46, ptr %alloc
  %47 = extractvalue { { i64, i64 }, { i64 } } %44, 1, 0
  store i64 %47, ptr %5
  br label %L194
L194:
  %48 = load i64, ptr %5
  store i64 %48, ptr %18
  %49 = load i64, ptr %18
  store i64 %49, ptr %19
  %50 = ptrtoint ptr @camlTailcall2 to i64
  store i64 %50, ptr %20
  %51 = load i64, ptr %20
  %52 = inttoptr i64 %51 to ptr
  %53 = load ptr addrspace(1), ptr %52
  store ptr addrspace(1) %53, ptr %21
  %54 = load i64, ptr %10
  store i64 %54, ptr %22
  %55 = load i64, ptr %22
  %56 = shl i64 %55, 1
  store i64 %56, ptr %22
  %57 = load i64, ptr %22
  store i64 %57, ptr %23
  %58 = load i64, ptr %23
  %59 = add i64 %58, -1
  store i64 %59, ptr %23
  %60 = load i64, ptr %10
  store i64 %60, ptr %24
  %61 = load i64, ptr %24
  %62 = add i64 %61, 2
  store i64 %62, ptr %24
  %63 = load i64, ptr %24
  store i64 %63, ptr %5
  %64 = load i64, ptr %23
  store i64 %64, ptr %7
  %65 = load ptr addrspace(1), ptr %11
  store ptr addrspace(1) %65, ptr %8
  %66 = load ptr addrspace(1), ptr %21
  store ptr addrspace(1) %66, ptr %9
  %67 = load i64, ptr %5
  %68 = load i64, ptr %7
  %69 = load ptr addrspace(1), ptr %8
  %70 = load ptr addrspace(1), ptr %9
  %71 = load i64, ptr %ds
  %72 = load i64, ptr %alloc
  %73 = musttail call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply3(i64 %71, i64 %72, i64 %67, i64 %68, ptr addrspace(1) %69, ptr addrspace(1) %70) "gc-leaf-function"="true" "statepoint-id"="0"
  ret { { i64, i64 }, { i64 } } %73
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlTailcall__entry(i64 %0, i64 %1) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca ptr addrspace(1)
  %4 = alloca i64
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca ptr addrspace(1)
  %32 = alloca ptr addrspace(1)
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca ptr addrspace(1)
  %44 = alloca ptr addrspace(1)
  %45 = alloca i64
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca i64
  %49 = alloca ptr addrspace(1)
  %50 = alloca i64
  %51 = alloca i64
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca ptr addrspace(1)
  %57 = alloca ptr addrspace(1)
  %58 = alloca ptr addrspace(1)
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca i64
  %62 = alloca i64
  %63 = alloca i64
  %64 = alloca ptr addrspace(1)
  %65 = alloca i64
  %66 = alloca i64
  %67 = alloca i64
  %68 = alloca i64
  %69 = alloca i64
  %70 = alloca i64
  %71 = alloca i64
  %72 = alloca i64
  br label %L1
L1:
  br label %L211
L211:
  store i64 11, ptr %14
  store i64 15, ptr %15
  store i64 7, ptr %16
  %73 = load i64, ptr %16
  store i64 %73, ptr %17
  %74 = load i64, ptr %15
  store i64 %74, ptr %18
  %75 = load i64, ptr %14
  store i64 %75, ptr %19
  %76 = load i64, ptr %17
  store i64 %76, ptr %11
  %77 = load i64, ptr %18
  store i64 %77, ptr %12
  %78 = load i64, ptr %19
  store i64 %78, ptr %13
  br label %L213
L213:
  %79 = load i64, ptr %13
  %80 = icmp slt i64 %79, 1
  br i1 %80, label %L215, label %L250
L250:
  %81 = load i64, ptr %13
  %82 = icmp sgt i64 %81, 1
  br i1 %82, label %L215, label %L225
L215:
  %83 = load i64, ptr %13
  %84 = icmp slt i64 %83, 3
  br i1 %84, label %L217, label %L251
L251:
  %85 = load i64, ptr %13
  %86 = icmp sgt i64 %85, 3
  br i1 %86, label %L217, label %L222
L217:
  %87 = load i64, ptr %13
  store i64 %87, ptr %20
  %88 = load i64, ptr %20
  %89 = add i64 %88, -2
  store i64 %89, ptr %20
  %90 = load i64, ptr %11
  store i64 %90, ptr %21
  %91 = load i64, ptr %21
  %92 = load i64, ptr %12
  %93 = add i64 %91, %92
  store i64 %93, ptr %21
  %94 = load i64, ptr %21
  store i64 %94, ptr %22
  %95 = load i64, ptr %22
  %96 = add i64 %95, -1
  store i64 %96, ptr %22
  %97 = load i64, ptr %12
  store i64 %97, ptr %23
  %98 = load i64, ptr %22
  store i64 %98, ptr %24
  %99 = load i64, ptr %20
  store i64 %99, ptr %25
  %100 = load i64, ptr %23
  store i64 %100, ptr %11
  %101 = load i64, ptr %24
  store i64 %101, ptr %12
  %102 = load i64, ptr %25
  store i64 %102, ptr %13
  br label %L213
L222:
  %103 = load i64, ptr %12
  store i64 %103, ptr %26
  %104 = load i64, ptr %26
  store i64 %104, ptr %10
  br label %L229
L225:
  %105 = load i64, ptr %11
  store i64 %105, ptr %27
  %106 = load i64, ptr %27
  store i64 %106, ptr %10
  br label %L229
L229:
  %107 = ptrtoint ptr @camlTailcall__const_block89 to i64
  store i64 %107, ptr %28
  store i64 1, ptr %29
  %108 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %108, ptr %30
  %109 = load i64, ptr %30
  store i64 %109, ptr %4
  %110 = load i64, ptr %29
  store i64 %110, ptr %6
  %111 = load i64, ptr %28
  store i64 %111, ptr %7
  %112 = load i64, ptr %4
  %113 = load i64, ptr %6
  %114 = load i64, ptr %7
  %115 = load i64, ptr %ds
  %116 = load i64, ptr %alloc
  %117 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %115, i64 %116, i64 %112, i64 %113, i64 %114) "statepoint-id"="0"
  %118 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %117, 0, 0
  %119 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %117, 0, 1
  store i64 %118, ptr %ds
  store i64 %119, ptr %alloc
  %120 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %117, 1, 0
  store ptr addrspace(1) %120, ptr %3
  br label %L231
L231:
  %121 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %121, ptr %31
  %122 = load ptr addrspace(1), ptr %31
  store ptr addrspace(1) %122, ptr %32
  %123 = load ptr addrspace(1), ptr %32
  %124 = load i64, ptr addrspace(1) %123
  store i64 %124, ptr %33
  %125 = load i64, ptr %10
  store i64 %125, ptr %4
  %126 = load ptr addrspace(1), ptr %32
  store ptr addrspace(1) %126, ptr %5
  %127 = load i64, ptr %4
  %128 = load ptr addrspace(1), ptr %5
  %129 = load i64, ptr %ds
  %130 = load i64, ptr %alloc
  %131 = load ptr, ptr %33
  %132 = call oxcamlcc { { i64, i64 }, { i64 } } %131(i64 %129, i64 %130, i64 %127, ptr addrspace(1) %128) "statepoint-id"="0"
  %133 = extractvalue { { i64, i64 }, { i64 } } %132, 0, 0
  %134 = extractvalue { { i64, i64 }, { i64 } } %132, 0, 1
  store i64 %133, ptr %ds
  store i64 %134, ptr %alloc
  %135 = extractvalue { { i64, i64 }, { i64 } } %132, 1, 0
  store i64 %135, ptr %4
  br label %L232
L232:
  %136 = load i64, ptr %4
  store i64 %136, ptr %34
  %137 = load i64, ptr %34
  store i64 %137, ptr %35
  store i64 1, ptr %36
  store i64 55, ptr %37
  %138 = load i64, ptr %37
  store i64 %138, ptr %4
  %139 = load i64, ptr %36
  store i64 %139, ptr %6
  %140 = load i64, ptr %4
  %141 = load i64, ptr %6
  %142 = load i64, ptr %ds
  %143 = load i64, ptr %alloc
  %144 = call oxcamlcc { { i64, i64 }, { i64 } } @camlTailcall__collatz_odd_HIDE_STAMP(i64 %142, i64 %143, i64 %140, i64 %141) "statepoint-id"="0"
  %145 = extractvalue { { i64, i64 }, { i64 } } %144, 0, 0
  %146 = extractvalue { { i64, i64 }, { i64 } } %144, 0, 1
  store i64 %145, ptr %ds
  store i64 %146, ptr %alloc
  %147 = extractvalue { { i64, i64 }, { i64 } } %144, 1, 0
  store i64 %147, ptr %4
  br label %L234
L234:
  %148 = load i64, ptr %4
  store i64 %148, ptr %38
  %149 = load i64, ptr %38
  store i64 %149, ptr %39
  %150 = ptrtoint ptr @camlTailcall__const_block101 to i64
  store i64 %150, ptr %40
  store i64 1, ptr %41
  %151 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %151, ptr %42
  %152 = load i64, ptr %42
  store i64 %152, ptr %4
  %153 = load i64, ptr %41
  store i64 %153, ptr %6
  %154 = load i64, ptr %40
  store i64 %154, ptr %7
  %155 = load i64, ptr %4
  %156 = load i64, ptr %6
  %157 = load i64, ptr %7
  %158 = load i64, ptr %ds
  %159 = load i64, ptr %alloc
  %160 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %158, i64 %159, i64 %155, i64 %156, i64 %157) "statepoint-id"="0"
  %161 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %160, 0, 0
  %162 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %160, 0, 1
  store i64 %161, ptr %ds
  store i64 %162, ptr %alloc
  %163 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %160, 1, 0
  store ptr addrspace(1) %163, ptr %3
  br label %L235
L235:
  %164 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %164, ptr %43
  %165 = load ptr addrspace(1), ptr %43
  store ptr addrspace(1) %165, ptr %44
  %166 = load ptr addrspace(1), ptr %44
  %167 = load i64, ptr addrspace(1) %166
  store i64 %167, ptr %45
  %168 = load i64, ptr %39
  store i64 %168, ptr %4
  %169 = load ptr addrspace(1), ptr %44
  store ptr addrspace(1) %169, ptr %5
  %170 = load i64, ptr %4
  %171 = load ptr addrspace(1), ptr %5
  %172 = load i64, ptr %ds
  %173 = load i64, ptr %alloc
  %174 = load ptr, ptr %45
  %175 = call oxcamlcc { { i64, i64 }, { i64 } } %174(i64 %172, i64 %173, i64 %170, ptr addrspace(1) %171) "statepoint-id"="0"
  %176 = extractvalue { { i64, i64 }, { i64 } } %175, 0, 0
  %177 = extractvalue { { i64, i64 }, { i64 } } %175, 0, 1
  store i64 %176, ptr %ds
  store i64 %177, ptr %alloc
  %178 = extractvalue { { i64, i64 }, { i64 } } %175, 1, 0
  store i64 %178, ptr %4
  br label %L236
L236:
  %179 = load i64, ptr %4
  store i64 %179, ptr %46
  %180 = load i64, ptr %46
  store i64 %180, ptr %47
  %181 = ptrtoint ptr @camlTailcall2 to i64
  store i64 %181, ptr %48
  %182 = load i64, ptr %48
  %183 = inttoptr i64 %182 to ptr
  %184 = load ptr addrspace(1), ptr %183
  store ptr addrspace(1) %184, ptr %49
  %185 = ptrtoint ptr @camlTailcall__float108 to i64
  store i64 %185, ptr %50
  store i64 149, ptr %51
  store i64 77, ptr %52
  %186 = load i64, ptr %52
  store i64 %186, ptr %4
  %187 = load i64, ptr %51
  store i64 %187, ptr %6
  %188 = load i64, ptr %50
  store i64 %188, ptr %7
  %189 = load ptr addrspace(1), ptr %49
  store ptr addrspace(1) %189, ptr %8
  %190 = load i64, ptr %4
  %191 = load i64, ptr %6
  %192 = load i64, ptr %7
  %193 = load ptr addrspace(1), ptr %8
  %194 = load i64, ptr %ds
  %195 = load i64, ptr %alloc
  %196 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply3(i64 %194, i64 %195, i64 %190, i64 %191, i64 %192, ptr addrspace(1) %193) "statepoint-id"="0"
  %197 = extractvalue { { i64, i64 }, { i64 } } %196, 0, 0
  %198 = extractvalue { { i64, i64 }, { i64 } } %196, 0, 1
  store i64 %197, ptr %ds
  store i64 %198, ptr %alloc
  %199 = extractvalue { { i64, i64 }, { i64 } } %196, 1, 0
  store i64 %199, ptr %4
  br label %L238
L238:
  %200 = load i64, ptr %4
  store i64 %200, ptr %53
  %201 = load i64, ptr %53
  store i64 %201, ptr %54
  %202 = ptrtoint ptr @camlTailcall2 to i64
  store i64 %202, ptr %55
  %203 = load i64, ptr %55
  %204 = inttoptr i64 %203 to ptr addrspace(1)
  store ptr addrspace(1) %204, ptr %56
  %205 = load ptr addrspace(1), ptr %56
  %206 = getelementptr i8, ptr addrspace(1) %205, i64 8
  store ptr addrspace(1) %206, ptr %56
  %207 = load ptr addrspace(1), ptr %56
  %208 = load ptr addrspace(1), ptr addrspace(1) %207
  store ptr addrspace(1) %208, ptr %57
  %209 = load ptr addrspace(1), ptr %57
  store ptr addrspace(1) %209, ptr %58
  store i64 1, ptr %59
  %210 = load ptr addrspace(1), ptr %58
  %211 = load i64, ptr addrspace(1) %210
  store i64 %211, ptr %60
  %212 = load i64, ptr %59
  store i64 %212, ptr %4
  %213 = load ptr addrspace(1), ptr %58
  store ptr addrspace(1) %213, ptr %5
  %214 = load i64, ptr %4
  %215 = load ptr addrspace(1), ptr %5
  %216 = load i64, ptr %ds
  %217 = load i64, ptr %alloc
  %218 = load ptr, ptr %60
  %219 = call oxcamlcc { { i64, i64 }, { i64 } } %218(i64 %216, i64 %217, i64 %214, ptr addrspace(1) %215) "statepoint-id"="0"
  %220 = extractvalue { { i64, i64 }, { i64 } } %219, 0, 0
  %221 = extractvalue { { i64, i64 }, { i64 } } %219, 0, 1
  store i64 %220, ptr %ds
  store i64 %221, ptr %alloc
  %222 = extractvalue { { i64, i64 }, { i64 } } %219, 1, 0
  store i64 %222, ptr %4
  br label %L242
L242:
  %223 = load i64, ptr %4
  store i64 %223, ptr %61
  %224 = load i64, ptr %61
  store i64 %224, ptr %62
  %225 = ptrtoint ptr @camlTailcall2 to i64
  store i64 %225, ptr %63
  %226 = load i64, ptr %63
  %227 = inttoptr i64 %226 to ptr
  %228 = load ptr addrspace(1), ptr %227
  store ptr addrspace(1) %228, ptr %64
  %229 = ptrtoint ptr @camlTailcall__float108 to i64
  store i64 %229, ptr %65
  store i64 149, ptr %66
  store i64 77, ptr %67
  %230 = load i64, ptr %67
  store i64 %230, ptr %4
  %231 = load i64, ptr %66
  store i64 %231, ptr %6
  %232 = load i64, ptr %65
  store i64 %232, ptr %7
  %233 = load ptr addrspace(1), ptr %64
  store ptr addrspace(1) %233, ptr %8
  %234 = load i64, ptr %4
  %235 = load i64, ptr %6
  %236 = load i64, ptr %7
  %237 = load ptr addrspace(1), ptr %8
  %238 = load i64, ptr %ds
  %239 = load i64, ptr %alloc
  %240 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply3(i64 %238, i64 %239, i64 %234, i64 %235, i64 %236, ptr addrspace(1) %237) "statepoint-id"="0"
  %241 = extractvalue { { i64, i64 }, { i64 } } %240, 0, 0
  %242 = extractvalue { { i64, i64 }, { i64 } } %240, 0, 1
  store i64 %241, ptr %ds
  store i64 %242, ptr %alloc
  %243 = extractvalue { { i64, i64 }, { i64 } } %240, 1, 0
  store i64 %243, ptr %4
  br label %L244
L244:
  %244 = load i64, ptr %4
  store i64 %244, ptr %68
  %245 = load i64, ptr %68
  store i64 %245, ptr %69
  %246 = ptrtoint ptr @camlTailcall to i64
  store i64 %246, ptr %70
  %247 = load i64, ptr %70
  store i64 %247, ptr %71
  %248 = load i64, ptr %71
  %249 = inttoptr i64 %248 to ptr addrspace(1)
  store ptr addrspace(1) %249, ptr %9
  store i64 1, ptr %72
  %250 = load i64, ptr %72
  store i64 %250, ptr %4
  %251 = load ptr addrspace(1), ptr %4
  %252 = load i64, ptr %ds
  %253 = load i64, ptr %alloc
  %254 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %252, 0, 0
  %255 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %254, i64 %253, 0, 1
  %256 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %255, ptr addrspace(1) %251, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %256
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlTailcall__gc_roots = global { i64 } { i64 0 }, section ".data", align 8
@header.camlTailcall = global i64 5888, section ".data", align 8
@camlTailcall = global { ptr, ptr, ptr, ptr, ptr } { ptr @camlTailcall__fib_general_5, ptr @camlTailcall__collatz_odd_6, ptr @camlTailcall__collatz_even_7, ptr @camlTailcall__tail_call_outside_8, ptr @camlTailcall__tail_call_outside_prologue_9 }, section ".data", align 8
@header.camlTailcall__tail_call_outside_prologue_9 = global i64 4087, section ".data", align 8
@camlTailcall__tail_call_outside_prologue_9 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlTailcall__tail_call_outside_prologue_HIDE_STAMP }, section ".data", align 8
@header.camlTailcall__tail_call_outside_8 = global i64 4087, section ".data", align 8
@camlTailcall__tail_call_outside_8 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlTailcall__tail_call_outside_HIDE_STAMP }, section ".data", align 8
@header.camlTailcall__collatz_even_7 = global i64 8183, section ".data", align 8
@camlTailcall__collatz_even_7 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 144115188075855887, ptr @camlTailcall__collatz_even_HIDE_STAMP }, section ".data", align 8
@header.camlTailcall__collatz_odd_6 = global i64 4345, section ".data", align 8
@camlTailcall__collatz_odd_6 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlTailcall__collatz_odd_HIDE_STAMP }, section ".data", align 8
@header.camlTailcall__fib_general_5 = global i64 4087, section ".data", align 8
@camlTailcall__fib_general_5 = global { ptr, i64, ptr } { ptr @caml_curry3, i64 252201579132747783, ptr @camlTailcall__fib_general_HIDE_STAMP }, section ".data", align 8
@header.camlTailcall__const_block89 = global i64 2827, section ".data", align 8
@camlTailcall__const_block89 = global { ptr, ptr } { ptr @camlTailcall__immstring83, ptr @camlTailcall__const_block87 }, section ".data", align 8
@header.camlTailcall__immstring83 = global i64 3068, section ".data", align 8
@camlTailcall__immstring83 = global { [ 13 x i8 ], [ 2 x i8 ], i8 } { [ 13 x i8 ] c"\66\69\62\5f\67\65\6e\65\72\61\6c\3a\20", [ 2 x i8 ] zeroinitializer, i8 2 }, section ".data", align 8
@header.camlTailcall__const_block101 = global i64 2827, section ".data", align 8
@camlTailcall__const_block101 = global { ptr, ptr } { ptr @camlTailcall__immstring99, ptr @camlTailcall__const_block87 }, section ".data", align 8
@header.camlTailcall__immstring99 = global i64 3068, section ".data", align 8
@camlTailcall__immstring99 = global { [ 13 x i8 ], [ 2 x i8 ], i8 } { [ 13 x i8 ] c"\63\6f\6c\6c\61\74\7a\5f\6f\64\64\3a\20", [ 2 x i8 ] zeroinitializer, i8 2 }, section ".data", align 8
@header.camlTailcall__const_block87 = global i64 4868, section ".data", align 8
@camlTailcall__const_block87 = global { i64, i64, i64, ptr } { i64 1, i64 1, i64 1, ptr @camlTailcall__const_block85 }, section ".data", align 8
@header.camlTailcall__const_block85 = global i64 2828, section ".data", align 8
@camlTailcall__const_block85 = global { i64, i64 } { i64 21, i64 1 }, section ".data", align 8
@header.camlTailcall__float108 = global i64 2045, section ".data", align 8
@camlTailcall__float108 = global { double } { double 41.29999999999999715783 }, section ".data", align 8
@camlCamlinternalFormat__make_printf_HIDE_STAMP = external global ptr
@camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 = external global ptr
@camlTailcall2 = external global ptr
@caml_apply3 = external global ptr
@caml_curry2 = external global ptr
@caml_curry3 = external global ptr



!0 = !{ i32 1, !"oxcaml_module", !"Tailcall" }
!llvm.module.flags = !{ !0 }
