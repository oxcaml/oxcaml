source_filename = "data_decl.ml"

@camlData_decl__data_begin = global {  } {  }, align 8, section ".data"
define void @camlData_decl__code_begin() { unreachable }

@camlData_decl__gc_roots = global { i64 } { i64 0 }, align 8, section ".data"
@.header.camlData_decl = global { i64 } { i64 4864 }, align 8, section ".data"
@camlData_decl = global { ptr, ptr, ptr, ptr } { ptr @camlData_decl__float4, ptr @camlData_decl__float327, ptr @camlData_decl__f_2, ptr @camlData_decl__g_3 }, align 8, section ".data"
@.header.camlData_decl__g_3 = global { i64 } { i64 7159 }, align 8, section ".data"
@camlData_decl__g_3 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 144115188075855885, ptr @camlData_decl__g_HIDE_STAMP }, align 8, section ".data"
@.header.camlData_decl__f_2 = global { i64 } { i64 4345 }, align 8, section ".data"
@camlData_decl__f_2 = global { ptr, i64 } { ptr @camlData_decl__f_HIDE_STAMP, i64 108086391056891909 }, align 8, section ".data"
@.header.camlData_decl__const_block67 = global { i64 } { i64 2827 }, align 8, section ".data"
@camlData_decl__const_block67 = global { ptr, ptr } { ptr @camlData_decl__immstring63, ptr @camlData_decl__const_block65 }, align 8, section ".data"
@.header.camlData_decl__const_block65 = global { i64 } { i64 4868 }, align 8, section ".data"
@camlData_decl__const_block65 = global { i64, i64, i64, ptr } { i64 1, i64 1, i64 1, ptr @camlData_decl__const_block48 }, align 8, section ".data"
@.header.camlData_decl__immstring63 = global { i64 } { i64 4092 }, align 8, section ".data"
@camlData_decl__immstring63 = global { [ 20 x i8 ], [ 3 x i8 ], i8 } { [ 20 x i8 ] c"\6d\75\74\75\61\6c\6c\79\5f\72\65\63\75\72\73\69\76\65\3a\20", [ 3 x i8 ] zeroinitializer, i8 3 }, align 8, section ".data"
@.header.camlData_decl__const_block54 = global { i64 } { i64 4872 }, align 8, section ".data"
@camlData_decl__const_block54 = global { ptr, i64, ptr, ptr } { ptr @camlData_decl__const_block44, i64 1, ptr @camlData_decl__const_block46, ptr @camlData_decl__const_block52 }, align 8, section ".data"
@.header.camlData_decl__const_block52 = global { i64 } { i64 2828 }, align 8, section ".data"
@camlData_decl__const_block52 = global { i64, ptr } { i64 65, ptr @camlData_decl__const_block50 }, align 8, section ".data"
@.header.camlData_decl__const_block50 = global { i64 } { i64 2818 }, align 8, section ".data"
@camlData_decl__const_block50 = global { i64, ptr } { i64 1, ptr @camlData_decl__const_block48 }, align 8, section ".data"
@.header.camlData_decl__const_block48 = global { i64 } { i64 2828 }, align 8, section ".data"
@camlData_decl__const_block48 = global { i64, i64 } { i64 21, i64 1 }, align 8, section ".data"
@.header.camlData_decl__const_block46 = global { i64 } { i64 1792 }, align 8, section ".data"
@camlData_decl__const_block46 = global { i64 } { i64 41 }, align 8, section ".data"
@.header.camlData_decl__const_block44 = global { i64 } { i64 2816 }, align 8, section ".data"
@camlData_decl__const_block44 = global { i64, i64 } { i64 1, i64 1 }, align 8, section ".data"
@.header.camlData_decl__immstring38 = global { i64 } { i64 2044 }, align 8, section ".data"
@camlData_decl__immstring38 = global { [ 5 x i8 ], [ 2 x i8 ], i8 } { [ 5 x i8 ] c"\25\2e\31\30\67", [ 2 x i8 ] zeroinitializer, i8 2 }, align 8, section ".data"
@.header.camlData_decl__immstring35 = global { i64 } { i64 5116 }, align 8, section ".data"
@camlData_decl__immstring35 = global { [ 30 x i8 ], [ 1 x i8 ], i8 } { [ 30 x i8 ] c"\6f\6e\65\20\6f\66\20\74\68\65\20\73\74\72\69\6e\67\73\0a\6f\66\20\61\6c\6c\20\74\69\6d\65", [ 1 x i8 ] zeroinitializer, i8 1 }, align 8, section ".data"
@.header.camlData_decl__float327 = global { i64 } { i64 3071 }, align 8, section ".data"
@camlData_decl__float327 = global { ptr, float } { ptr @caml_float32_ops, float 2.71828174591064453125 }, align 8, section ".data"
@.header.camlData_decl__float4 = global { i64 } { i64 2045 }, align 8, section ".data"
@camlData_decl__float4 = global { double } { double 3.14159265358979311600 }, align 8, section ".data"
define  cc 104 { { ptr, ptr }, { i64 } } @camlData_decl__f_HIDE_STAMP(ptr %0, ptr %1, i64 %2) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %11 = load i64, ptr %4
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = icmp slt i64 %12, 3
  br i1 %13, label %L103, label %14
14:
  %15 = load i64, ptr %6
  %16 = icmp sgt i64 %15, 3
  br i1 %16, label %L105, label %L103
L103:                                                ; preds = %L101
  store i64 3, ptr %7
  %17 = load i64, ptr %7
  store i64 %17, ptr %4
  %18 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %19 = load ptr, ptr %ds
  %20 = insertvalue { { ptr, ptr }, { i64 } } %18, ptr %19, 0, 0
  %21 = load ptr, ptr %alloc
  %22 = insertvalue { { ptr, ptr }, { i64 } } %20, ptr %21, 0, 1
  %23 = load i64, ptr %4
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, i64 %23, 1, 0
  ret { { ptr, ptr }, { i64 } } %24
L105:                                                ; preds = %L101
  %25 = load i64, ptr %6
  store i64 %25, ptr %8
  %26 = load i64, ptr %8
  %27 = add i64 %26, -4
  store i64 %27, ptr %8
  %28 = load i64, ptr %6
  store i64 %28, ptr %9
  %29 = load i64, ptr %9
  %30 = add i64 %29, -2
  store i64 %30, ptr %9
  %31 = load i64, ptr %9
  store i64 %31, ptr %4
  %32 = load i64, ptr %8
  store i64 %32, ptr %5
  ; regs: [pin:anon:I/0[%rax], pin:anon:I/1[%rbx]], callsite_types.args: [[VI], [VI]], funcdef_types.args: [[VI], [VI]]
  ; callsite_types.res: [[VI]], funcdef_types.res: [[VI]]
  %33 = load ptr, ptr %ds
  %34 = load ptr, ptr %alloc
  %35 = load i64, ptr %4
  %36 = load i64, ptr %5
  ; res_regs: [pin:anon:I/0[%rax]]
  %37 =  call cc 104 { { ptr, ptr }, { i64 } } @camlData_decl__g_HIDE_STAMP(ptr %33, ptr %34, i64 %35, i64 %36)
  %38 = extractvalue { { ptr, ptr }, { i64 } } %37, 0, 0
  store ptr %38, ptr %ds
  %39 = extractvalue { { ptr, ptr }, { i64 } } %37, 0, 1
  store ptr %39, ptr %alloc
  %40 = extractvalue { { ptr, ptr }, { i64 } } %37, 1, 0
  store i64 %40, ptr %4
  br label %L107
L107:                                                ; preds = %L105
  %41 = load i64, ptr %4
  store i64 %41, ptr %10
  %42 = load i64, ptr %10
  store i64 %42, ptr %4
  %43 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %44 = load ptr, ptr %ds
  %45 = insertvalue { { ptr, ptr }, { i64 } } %43, ptr %44, 0, 0
  %46 = load ptr, ptr %alloc
  %47 = insertvalue { { ptr, ptr }, { i64 } } %45, ptr %46, 0, 1
  %48 = load i64, ptr %4
  %49 = insertvalue { { ptr, ptr }, { i64 } } %47, i64 %48, 1, 0
  ret { { ptr, ptr }, { i64 } } %49
}

define  cc 104 { { ptr, ptr }, { i64 } } @camlData_decl__g_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L112
L112:                                                ; preds = %L1
  %15 = load i64, ptr %5
  store i64 %15, ptr %7
  %16 = load i64, ptr %6
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  store i64 %17, ptr %5
  ; regs: [pin:anon:I/0[%rax]], callsite_types.args: [[VI]], funcdef_types.args: [[VI]]
  ; callsite_types.res: [[VI]], funcdef_types.res: [[VI]]
  %18 = load ptr, ptr %ds
  %19 = load ptr, ptr %alloc
  %20 = load i64, ptr %5
  ; res_regs: [pin:anon:I/0[%rax]]
  %21 =  call cc 104 { { ptr, ptr }, { i64 } } @camlData_decl__f_HIDE_STAMP(ptr %18, ptr %19, i64 %20)
  %22 = extractvalue { { ptr, ptr }, { i64 } } %21, 0, 0
  store ptr %22, ptr %ds
  %23 = extractvalue { { ptr, ptr }, { i64 } } %21, 0, 1
  store ptr %23, ptr %alloc
  %24 = extractvalue { { ptr, ptr }, { i64 } } %21, 1, 0
  store i64 %24, ptr %5
  br label %L114
L114:                                                ; preds = %L112
  %25 = load i64, ptr %5
  store i64 %25, ptr %9
  %26 = load i64, ptr %9
  store i64 %26, ptr %10
  %27 = load i64, ptr %7
  store i64 %27, ptr %5
  ; regs: [pin:anon:I/0[%rax]], callsite_types.args: [[VI]], funcdef_types.args: [[VI]]
  ; callsite_types.res: [[VI]], funcdef_types.res: [[VI]]
  %28 = load ptr, ptr %ds
  %29 = load ptr, ptr %alloc
  %30 = load i64, ptr %5
  ; res_regs: [pin:anon:I/0[%rax]]
  %31 =  call cc 104 { { ptr, ptr }, { i64 } } @camlData_decl__f_HIDE_STAMP(ptr %28, ptr %29, i64 %30)
  %32 = extractvalue { { ptr, ptr }, { i64 } } %31, 0, 0
  store ptr %32, ptr %ds
  %33 = extractvalue { { ptr, ptr }, { i64 } } %31, 0, 1
  store ptr %33, ptr %alloc
  %34 = extractvalue { { ptr, ptr }, { i64 } } %31, 1, 0
  store i64 %34, ptr %5
  br label %L115
L115:                                                ; preds = %L114
  %35 = load i64, ptr %5
  store i64 %35, ptr %11
  %36 = load i64, ptr %11
  store i64 %36, ptr %12
  %37 = load i64, ptr %12
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  %39 = load i64, ptr %10
  %40 = add i64 %38, %39
  store i64 %40, ptr %13
  %41 = load i64, ptr %13
  store i64 %41, ptr %14
  %42 = load i64, ptr %14
  %43 = add i64 %42, -1
  store i64 %43, ptr %14
  %44 = load i64, ptr %14
  store i64 %44, ptr %5
  %45 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %46 = load ptr, ptr %ds
  %47 = insertvalue { { ptr, ptr }, { i64 } } %45, ptr %46, 0, 0
  %48 = load ptr, ptr %alloc
  %49 = insertvalue { { ptr, ptr }, { i64 } } %47, ptr %48, 0, 1
  %50 = load i64, ptr %5
  %51 = insertvalue { { ptr, ptr }, { i64 } } %49, i64 %50, 1, 0
  ret { { ptr, ptr }, { i64 } } %51
}

define  cc 104 { { ptr, ptr }, { ptr addrspace(1) } } @camlData_decl__entry(ptr %0, ptr %1) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca ptr addrspace(1)
  %4 = alloca i64
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca ptr addrspace(1)
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca ptr addrspace(1)
  %19 = alloca ptr addrspace(1)
  %20 = alloca ptr addrspace(1)
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca ptr addrspace(1)
  %25 = alloca ptr addrspace(1)
  %26 = alloca ptr addrspace(1)
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca ptr addrspace(1)
  %30 = alloca ptr addrspace(1)
  %31 = alloca ptr addrspace(1)
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca ptr addrspace(1)
  %35 = alloca ptr addrspace(1)
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca ptr addrspace(1)
  %40 = alloca ptr addrspace(1)
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca i64
  %49 = alloca i64
  %50 = alloca ptr addrspace(1)
  %51 = alloca ptr addrspace(1)
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca i64
  %57 = alloca i64
  br label %L1
L1:
  br label %L122
L122:                                                ; preds = %L1
  store i64 61, ptr %13
  store i64 1, ptr %14
  store ptr @camlData_decl__immstring35, ptr %15
  store ptr @camlStdlib__print_endline_138, ptr %16
  %58 = load i64, ptr %16
  store i64 %58, ptr %17
  %59 = load i64, ptr %17
  %60 = add i64 %59, 16
  store i64 %60, ptr %17
  %61 = load i64, ptr %17
  %62 = add i64 %61, 0
  %63 = inttoptr i64 %62 to ptr
  %64 = load ptr addrspace(1), ptr %63
  store ptr addrspace(1) %64, ptr %18
  %65 = load ptr addrspace(1), ptr %18
  %66 = ptrtoint ptr addrspace(1) %65 to i64
  store i64 %66, ptr %8
  %67 = load i64, ptr %15
  store i64 %67, ptr %9
  %68 = load i64, ptr %14
  store i64 %68, ptr %10
  %69 = load i64, ptr %13
  store i64 %69, ptr %11
  %70 = load i64, ptr %8
  %71 = load i64, ptr %9
  %72 = load i64, ptr %10
  %73 = load i64, ptr %11
  %74 = load ptr, ptr %ds
  %75 = load ptr, ptr %alloc
  %76 =  call cc 105 { { ptr, ptr }, { ptr addrspace(1) } } @caml_c_call(ptr %74, ptr %75, ptr @caml_ml_output, i64 poison, i64 %70, i64 %71, i64 %72, i64 %73)
  %77 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %76, 0, 0
  store ptr %77, ptr %ds
  %78 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %76, 0, 1
  store ptr %78, ptr %alloc
  %79 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %76, 1, 0
  store ptr addrspace(1) %79, ptr %3
  br label %L124
L124:                                                ; preds = %L122
  %80 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %80, ptr %19
  %81 = load ptr addrspace(1), ptr %19
  store ptr addrspace(1) %81, ptr %20
  store i64 21, ptr %21
  store ptr @camlStdlib__print_endline_138, ptr %22
  %82 = load i64, ptr %22
  store i64 %82, ptr %23
  %83 = load i64, ptr %23
  %84 = add i64 %83, 16
  store i64 %84, ptr %23
  %85 = load i64, ptr %23
  %86 = add i64 %85, 0
  %87 = inttoptr i64 %86 to ptr
  %88 = load ptr addrspace(1), ptr %87
  store ptr addrspace(1) %88, ptr %24
  %89 = load ptr addrspace(1), ptr %24
  %90 = ptrtoint ptr addrspace(1) %89 to i64
  store i64 %90, ptr %8
  %91 = load i64, ptr %21
  store i64 %91, ptr %9
  %92 = load i64, ptr %8
  %93 = load i64, ptr %9
  %94 = load ptr, ptr %ds
  %95 = load ptr, ptr %alloc
  %96 =  call cc 105 { { ptr, ptr }, { ptr addrspace(1) } } @caml_c_call(ptr %94, ptr %95, ptr @caml_ml_output_char, i64 poison, i64 %92, i64 %93)
  %97 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %96, 0, 0
  store ptr %97, ptr %ds
  %98 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %96, 0, 1
  store ptr %98, ptr %alloc
  %99 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %96, 1, 0
  store ptr addrspace(1) %99, ptr %3
  br label %L127
L127:                                                ; preds = %L124
  %100 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %100, ptr %25
  %101 = load ptr addrspace(1), ptr %25
  store ptr addrspace(1) %101, ptr %26
  store ptr @camlStdlib__print_endline_138, ptr %27
  %102 = load i64, ptr %27
  store i64 %102, ptr %28
  %103 = load i64, ptr %28
  %104 = add i64 %103, 16
  store i64 %104, ptr %28
  %105 = load i64, ptr %28
  %106 = add i64 %105, 0
  %107 = inttoptr i64 %106 to ptr
  %108 = load ptr addrspace(1), ptr %107
  store ptr addrspace(1) %108, ptr %29
  %109 = load ptr addrspace(1), ptr %29
  %110 = ptrtoint ptr addrspace(1) %109 to i64
  store i64 %110, ptr %8
  %111 = load i64, ptr %8
  %112 = load ptr, ptr %ds
  %113 = load ptr, ptr %alloc
  %114 =  call cc 105 { { ptr, ptr }, { ptr addrspace(1) } } @caml_c_call(ptr %112, ptr %113, ptr @caml_ml_flush, i64 poison, i64 %111)
  %115 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %114, 0, 0
  store ptr %115, ptr %ds
  %116 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %114, 0, 1
  store ptr %116, ptr %alloc
  %117 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %114, 1, 0
  store ptr addrspace(1) %117, ptr %3
  br label %L130
L130:                                                ; preds = %L127
  %118 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %118, ptr %30
  %119 = load ptr addrspace(1), ptr %30
  store ptr addrspace(1) %119, ptr %31
  store ptr @camlData_decl__float327, ptr %32
  store ptr @camlData_decl__immstring38, ptr %33
  %120 = load i64, ptr %33
  store i64 %120, ptr %8
  %121 = load i64, ptr %32
  store i64 %121, ptr %9
  %122 = load i64, ptr %8
  %123 = load i64, ptr %9
  %124 = load ptr, ptr %ds
  %125 = load ptr, ptr %alloc
  %126 =  call cc 105 { { ptr, ptr }, { ptr addrspace(1) } } @caml_c_call(ptr %124, ptr %125, ptr @caml_format_float32, i64 poison, i64 %122, i64 %123)
  %127 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %126, 0, 0
  store ptr %127, ptr %ds
  %128 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %126, 0, 1
  store ptr %128, ptr %alloc
  %129 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %126, 1, 0
  store ptr addrspace(1) %129, ptr %3
  br label %L133
L133:                                                ; preds = %L130
  %130 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %130, ptr %34
  %131 = load ptr addrspace(1), ptr %34
  store ptr addrspace(1) %131, ptr %35
  store ptr @camlData_decl__const_block54, ptr %36
  store i64 1, ptr %37
  store ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550, ptr %38
  %132 = load i64, ptr %38
  store i64 %132, ptr %4
  %133 = load i64, ptr %37
  store i64 %133, ptr %6
  %134 = load i64, ptr %36
  store i64 %134, ptr %8
  ; regs: [pin:anon:I/0[%rax], pin:anon:I/1[%rbx], pin:anon:I/2[%rdi]], callsite_types.args: [[V], [VI], [V]], funcdef_types.args: [[V], [V], [V]]
  ; callsite_types.res: [[V]], funcdef_types.res: [[V]]
  %135 = load ptr, ptr %ds
  %136 = load ptr, ptr %alloc
  %137 = load i64, ptr %4
  %138 = inttoptr i64 %137 to ptr addrspace(1)
  %139 = load i64, ptr %6
  %140 = inttoptr i64 %139 to ptr addrspace(1)
  %141 = load i64, ptr %8
  %142 = inttoptr i64 %141 to ptr addrspace(1)
  ; res_regs: [pin:anon:V/0[%rax]]
  %143 =  call cc 104 { { ptr, ptr }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr %135, ptr %136, ptr addrspace(1) %138, ptr addrspace(1) %140, ptr addrspace(1) %142)
  %144 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %143, 0, 0
  store ptr %144, ptr %ds
  %145 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %143, 0, 1
  store ptr %145, ptr %alloc
  %146 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %143, 1, 0
  store ptr addrspace(1) %146, ptr %3
  br label %L134
L134:                                                ; preds = %L133
  %147 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %147, ptr %39
  %148 = load ptr addrspace(1), ptr %39
  store ptr addrspace(1) %148, ptr %40
  store ptr @camlData_decl__float4, ptr %41
  %149 = load i64, ptr %41
  store i64 %149, ptr %4
  %150 = load ptr addrspace(1), ptr %35
  store ptr addrspace(1) %150, ptr %5
  %151 = load ptr addrspace(1), ptr %40
  store ptr addrspace(1) %151, ptr %7
  ; regs: [pin:anon:I/0[%rax], pin:anon:V/1[%rbx], pin:anon:V/2[%rdi]], callsite_types.args: [[V], [V], [V]], funcdef_types.args: [[V], [V], [V]]
  ; callsite_types.res: [[VI]], funcdef_types.res: [[V]]
  %152 = load ptr, ptr %ds
  %153 = load ptr, ptr %alloc
  %154 = load i64, ptr %4
  %155 = inttoptr i64 %154 to ptr addrspace(1)
  %156 = load ptr addrspace(1), ptr %5
  %157 = load ptr addrspace(1), ptr %7
  ; res_regs: [pin:anon:I/0[%rax]]
  %158 =  call cc 104 { { ptr, ptr }, { ptr addrspace(1) } } @caml_apply2(ptr %152, ptr %153, ptr addrspace(1) %155, ptr addrspace(1) %156, ptr addrspace(1) %157)
  %159 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %158, 0, 0
  store ptr %159, ptr %ds
  %160 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %158, 0, 1
  store ptr %160, ptr %alloc
  %161 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %158, 1, 0
  %162 = ptrtoint ptr addrspace(1) %161 to i64
  store i64 %162, ptr %4
  br label %L135
L135:                                                ; preds = %L134
  %163 = load i64, ptr %4
  store i64 %163, ptr %42
  %164 = load i64, ptr %42
  store i64 %164, ptr %43
  store i64 11, ptr %44
  %165 = load i64, ptr %44
  store i64 %165, ptr %4
  ; regs: [pin:anon:I/0[%rax]], callsite_types.args: [[VI]], funcdef_types.args: [[VI]]
  ; callsite_types.res: [[VI]], funcdef_types.res: [[VI]]
  %166 = load ptr, ptr %ds
  %167 = load ptr, ptr %alloc
  %168 = load i64, ptr %4
  ; res_regs: [pin:anon:I/0[%rax]]
  %169 =  call cc 104 { { ptr, ptr }, { i64 } } @camlData_decl__f_HIDE_STAMP(ptr %166, ptr %167, i64 %168)
  %170 = extractvalue { { ptr, ptr }, { i64 } } %169, 0, 0
  store ptr %170, ptr %ds
  %171 = extractvalue { { ptr, ptr }, { i64 } } %169, 0, 1
  store ptr %171, ptr %alloc
  %172 = extractvalue { { ptr, ptr }, { i64 } } %169, 1, 0
  store i64 %172, ptr %4
  br label %L136
L136:                                                ; preds = %L135
  %173 = load i64, ptr %4
  store i64 %173, ptr %45
  %174 = load i64, ptr %45
  store i64 %174, ptr %46
  store ptr @camlData_decl__const_block67, ptr %47
  store i64 1, ptr %48
  store ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550, ptr %49
  %175 = load i64, ptr %49
  store i64 %175, ptr %4
  %176 = load i64, ptr %48
  store i64 %176, ptr %6
  %177 = load i64, ptr %47
  store i64 %177, ptr %8
  ; regs: [pin:anon:I/0[%rax], pin:anon:I/1[%rbx], pin:anon:I/2[%rdi]], callsite_types.args: [[V], [VI], [V]], funcdef_types.args: [[V], [V], [V]]
  ; callsite_types.res: [[V]], funcdef_types.res: [[V]]
  %178 = load ptr, ptr %ds
  %179 = load ptr, ptr %alloc
  %180 = load i64, ptr %4
  %181 = inttoptr i64 %180 to ptr addrspace(1)
  %182 = load i64, ptr %6
  %183 = inttoptr i64 %182 to ptr addrspace(1)
  %184 = load i64, ptr %8
  %185 = inttoptr i64 %184 to ptr addrspace(1)
  ; res_regs: [pin:anon:V/0[%rax]]
  %186 =  call cc 104 { { ptr, ptr }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr %178, ptr %179, ptr addrspace(1) %181, ptr addrspace(1) %183, ptr addrspace(1) %185)
  %187 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %186, 0, 0
  store ptr %187, ptr %ds
  %188 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %186, 0, 1
  store ptr %188, ptr %alloc
  %189 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %186, 1, 0
  store ptr addrspace(1) %189, ptr %3
  br label %L137
L137:                                                ; preds = %L136
  %190 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %190, ptr %50
  %191 = load ptr addrspace(1), ptr %50
  store ptr addrspace(1) %191, ptr %51
  %192 = load ptr addrspace(1), ptr %51
  %193 = ptrtoint ptr addrspace(1) %192 to i64
  %194 = add i64 %193, 0
  %195 = inttoptr i64 %194 to ptr addrspace(1)
  %196 = load i64, ptr addrspace(1) %195
  store i64 %196, ptr %52
  %197 = load i64, ptr %46
  store i64 %197, ptr %4
  %198 = load ptr addrspace(1), ptr %51
  store ptr addrspace(1) %198, ptr %5
  ; regs: [pin:anon:I/0[%rax], pin:anon:V/1[%rbx]], callsite_types.args: [[VI], [V]], funcdef_types.args: [[VI], [V]]
  ; callsite_types.res: [[VI]], funcdef_types.res: [[VI]]
  %199 = load ptr, ptr %ds
  %200 = load ptr, ptr %alloc
  %201 = load i64, ptr %4
  %202 = load ptr addrspace(1), ptr %5
  ; res_regs: [pin:anon:I/0[%rax]]
  %203 = load i64, ptr %52
  %204 = inttoptr i64 %203 to ptr
  %205 =  call cc 104 { { ptr, ptr }, { i64 } } %204(ptr %199, ptr %200, i64 %201, ptr addrspace(1) %202)
  %206 = extractvalue { { ptr, ptr }, { i64 } } %205, 0, 0
  store ptr %206, ptr %ds
  %207 = extractvalue { { ptr, ptr }, { i64 } } %205, 0, 1
  store ptr %207, ptr %alloc
  %208 = extractvalue { { ptr, ptr }, { i64 } } %205, 1, 0
  store i64 %208, ptr %4
  br label %L138
L138:                                                ; preds = %L137
  %209 = load i64, ptr %4
  store i64 %209, ptr %53
  %210 = load i64, ptr %53
  store i64 %210, ptr %54
  store ptr @camlData_decl, ptr %55
  %211 = load i64, ptr %55
  store i64 %211, ptr %56
  %212 = load i64, ptr %56
  %213 = inttoptr i64 %212 to ptr addrspace(1)
  store ptr addrspace(1) %213, ptr %12
  store i64 1, ptr %57
  %214 = load i64, ptr %57
  store i64 %214, ptr %4
  %215 = extractvalue { { { ptr, ptr }, { ptr addrspace(1) } } } poison, 0
  %216 = load ptr, ptr %ds
  %217 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %215, ptr %216, 0, 0
  %218 = load ptr, ptr %alloc
  %219 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %217, ptr %218, 0, 1
  %220 = load i64, ptr %4
  %221 = inttoptr i64 %220 to ptr addrspace(1)
  %222 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %219, ptr addrspace(1) %221, 1, 0
  ret { { ptr, ptr }, { ptr addrspace(1) } } %222
}

@.temp.Data_decl.0 = global { ptr } { ptr @caml_format_float32 }, align 8, section ".data"
declare cc 104 { { ptr, ptr }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr, ptr, ptr addrspace(1), ptr addrspace(1), ptr addrspace(1)) gc "statepoint-example"
declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550 = external global ptr
@camlStdlib__print_endline_138 = external global ptr
@caml_apply2 = external global ptr
@caml_c_call = external global ptr
@caml_curry2 = external global ptr
@caml_float32_ops = external global ptr
@caml_format_float32 = external global ptr
@caml_ml_flush = external global ptr
@caml_ml_output = external global ptr
@caml_ml_output_char = external global ptr

@camlData_decl__data_end = global {  } {  }, align 8, section ".data"
define void @camlData_decl__code_end() { unreachable }
