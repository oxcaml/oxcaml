source_filename = "data_decl.ml"

define  oxcamlcc { { i64, i64 }, { i64 } } @camlData_decl__f_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  br label %L1
L1:
  br label %L101
L101:
  %11 = load i64, ptr %4
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = icmp slt i64 %12, 3
  br i1 %13, label %L103, label %L111
L111:
  %14 = load i64, ptr %6
  %15 = icmp sgt i64 %14, 3
  br i1 %15, label %L105, label %L103
L103:
  store i64 3, ptr %7
  %16 = load i64, ptr %7
  store i64 %16, ptr %4
  %17 = load i64, ptr %4
  %18 = load i64, ptr %ds
  %19 = load i64, ptr %alloc
  %20 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %18, 0, 0
  %21 = insertvalue { { i64, i64 }, { i64 } } %20, i64 %19, 0, 1
  %22 = insertvalue { { i64, i64 }, { i64 } } %21, i64 %17, 1, 0
  ret { { i64, i64 }, { i64 } } %22
L105:
  %23 = load i64, ptr %6
  store i64 %23, ptr %8
  %24 = load i64, ptr %8
  %25 = add i64 %24, -4
  store i64 %25, ptr %8
  %26 = load i64, ptr %6
  store i64 %26, ptr %9
  %27 = load i64, ptr %9
  %28 = add i64 %27, -2
  store i64 %28, ptr %9
  %29 = load i64, ptr %9
  store i64 %29, ptr %4
  %30 = load i64, ptr %8
  store i64 %30, ptr %5
  %31 = load i64, ptr %4
  %32 = load i64, ptr %5
  %33 = load i64, ptr %ds
  %34 = load i64, ptr %alloc
  %35 = call oxcamlcc { { i64, i64 }, { i64 } } @camlData_decl__g_HIDE_STAMP(i64 %33, i64 %34, i64 %31, i64 %32) "statepoint-id"="0"
  %36 = extractvalue { { i64, i64 }, { i64 } } %35, 0, 0
  %37 = extractvalue { { i64, i64 }, { i64 } } %35, 0, 1
  store i64 %36, ptr %ds
  store i64 %37, ptr %alloc
  %38 = extractvalue { { i64, i64 }, { i64 } } %35, 1, 0
  store i64 %38, ptr %4
  br label %L107
L107:
  %39 = load i64, ptr %4
  store i64 %39, ptr %10
  %40 = load i64, ptr %10
  store i64 %40, ptr %4
  %41 = load i64, ptr %4
  %42 = load i64, ptr %ds
  %43 = load i64, ptr %alloc
  %44 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %42, 0, 0
  %45 = insertvalue { { i64, i64 }, { i64 } } %44, i64 %43, 0, 1
  %46 = insertvalue { { i64, i64 }, { i64 } } %45, i64 %41, 1, 0
  ret { { i64, i64 }, { i64 } } %46
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlData_decl__g_HIDE_STAMP(i64 %0, i64 %1, i64 %2, i64 %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L113
L113:
  %15 = load i64, ptr %5
  store i64 %15, ptr %7
  %16 = load i64, ptr %6
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  store i64 %17, ptr %5
  %18 = load i64, ptr %5
  %19 = load i64, ptr %ds
  %20 = load i64, ptr %alloc
  %21 = call oxcamlcc { { i64, i64 }, { i64 } } @camlData_decl__f_HIDE_STAMP(i64 %19, i64 %20, i64 %18) "statepoint-id"="0"
  %22 = extractvalue { { i64, i64 }, { i64 } } %21, 0, 0
  %23 = extractvalue { { i64, i64 }, { i64 } } %21, 0, 1
  store i64 %22, ptr %ds
  store i64 %23, ptr %alloc
  %24 = extractvalue { { i64, i64 }, { i64 } } %21, 1, 0
  store i64 %24, ptr %5
  br label %L115
L115:
  %25 = load i64, ptr %5
  store i64 %25, ptr %9
  %26 = load i64, ptr %9
  store i64 %26, ptr %10
  %27 = load i64, ptr %7
  store i64 %27, ptr %5
  %28 = load i64, ptr %5
  %29 = load i64, ptr %ds
  %30 = load i64, ptr %alloc
  %31 = call oxcamlcc { { i64, i64 }, { i64 } } @camlData_decl__f_HIDE_STAMP(i64 %29, i64 %30, i64 %28) "statepoint-id"="0"
  %32 = extractvalue { { i64, i64 }, { i64 } } %31, 0, 0
  %33 = extractvalue { { i64, i64 }, { i64 } } %31, 0, 1
  store i64 %32, ptr %ds
  store i64 %33, ptr %alloc
  %34 = extractvalue { { i64, i64 }, { i64 } } %31, 1, 0
  store i64 %34, ptr %5
  br label %L116
L116:
  %35 = load i64, ptr %5
  store i64 %35, ptr %11
  %36 = load i64, ptr %11
  store i64 %36, ptr %12
  %37 = load i64, ptr %12
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  %39 = load i64, ptr %10
  %40 = add i64 %38, %39
  store i64 %40, ptr %13
  %41 = load i64, ptr %13
  store i64 %41, ptr %14
  %42 = load i64, ptr %14
  %43 = add i64 %42, -1
  store i64 %43, ptr %14
  %44 = load i64, ptr %14
  store i64 %44, ptr %5
  %45 = load i64, ptr %5
  %46 = load i64, ptr %ds
  %47 = load i64, ptr %alloc
  %48 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %46, 0, 0
  %49 = insertvalue { { i64, i64 }, { i64 } } %48, i64 %47, 0, 1
  %50 = insertvalue { { i64, i64 }, { i64 } } %49, i64 %45, 1, 0
  ret { { i64, i64 }, { i64 } } %50
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlData_decl__entry(i64 %0, i64 %1) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca ptr addrspace(1)
  %4 = alloca i64
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca ptr addrspace(1)
  %12 = alloca ptr addrspace(1)
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca ptr addrspace(1)
  %18 = alloca ptr addrspace(1)
  %19 = alloca ptr addrspace(1)
  %20 = alloca ptr addrspace(1)
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca ptr addrspace(1)
  %24 = alloca ptr addrspace(1)
  %25 = alloca ptr addrspace(1)
  %26 = alloca ptr addrspace(1)
  %27 = alloca i64
  %28 = alloca ptr addrspace(1)
  %29 = alloca ptr addrspace(1)
  %30 = alloca ptr addrspace(1)
  %31 = alloca ptr addrspace(1)
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca ptr addrspace(1)
  %35 = alloca ptr addrspace(1)
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca ptr addrspace(1)
  %40 = alloca ptr addrspace(1)
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca i64
  %49 = alloca i64
  %50 = alloca ptr addrspace(1)
  %51 = alloca ptr addrspace(1)
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca i64
  %57 = alloca i64
  br label %L1
L1:
  br label %L123
L123:
  store i64 61, ptr %13
  store i64 1, ptr %14
  %58 = ptrtoint ptr @camlData_decl__immstring35 to i64
  store i64 %58, ptr %15
  %59 = ptrtoint ptr @camlStdlib__print_endline_138 to i64
  store i64 %59, ptr %16
  %60 = load i64, ptr %16
  %61 = inttoptr i64 %60 to ptr addrspace(1)
  store ptr addrspace(1) %61, ptr %17
  %62 = load ptr addrspace(1), ptr %17
  %63 = getelementptr i8, ptr addrspace(1) %62, i64 16
  store ptr addrspace(1) %63, ptr %17
  %64 = load ptr addrspace(1), ptr %17
  %65 = load ptr addrspace(1), ptr addrspace(1) %64
  store ptr addrspace(1) %65, ptr %18
  %66 = load ptr addrspace(1), ptr %18
  store ptr addrspace(1) %66, ptr %7
  %67 = load i64, ptr %15
  %68 = inttoptr i64 %67 to ptr addrspace(1)
  store ptr addrspace(1) %68, ptr %9
  %69 = load i64, ptr %14
  %70 = inttoptr i64 %69 to ptr addrspace(1)
  store ptr addrspace(1) %70, ptr %10
  %71 = load i64, ptr %13
  %72 = inttoptr i64 %71 to ptr addrspace(1)
  store ptr addrspace(1) %72, ptr %11
  %73 = load ptr addrspace(1), ptr %7
  %74 = load ptr addrspace(1), ptr %9
  %75 = load ptr addrspace(1), ptr %10
  %76 = load ptr addrspace(1), ptr %11
  %77 = load i64, ptr %ds
  %78 = load i64, ptr %alloc
  %79 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %77, i64 %78, ptr @caml_ml_output, ptr addrspace(1) %73, ptr addrspace(1) %74, ptr addrspace(1) %75, ptr addrspace(1) %76) "statepoint-id"="0"
  %80 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %79, 0, 0
  %81 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %79, 0, 1
  store i64 %80, ptr %ds
  store i64 %81, ptr %alloc
  %82 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %79, 1, 0
  store ptr addrspace(1) %82, ptr %3
  br label %L125
L125:
  %83 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %83, ptr %19
  %84 = load ptr addrspace(1), ptr %19
  store ptr addrspace(1) %84, ptr %20
  store i64 21, ptr %21
  %85 = ptrtoint ptr @camlStdlib__print_endline_138 to i64
  store i64 %85, ptr %22
  %86 = load i64, ptr %22
  %87 = inttoptr i64 %86 to ptr addrspace(1)
  store ptr addrspace(1) %87, ptr %23
  %88 = load ptr addrspace(1), ptr %23
  %89 = getelementptr i8, ptr addrspace(1) %88, i64 16
  store ptr addrspace(1) %89, ptr %23
  %90 = load ptr addrspace(1), ptr %23
  %91 = load ptr addrspace(1), ptr addrspace(1) %90
  store ptr addrspace(1) %91, ptr %24
  %92 = load ptr addrspace(1), ptr %24
  store ptr addrspace(1) %92, ptr %7
  %93 = load i64, ptr %21
  %94 = inttoptr i64 %93 to ptr addrspace(1)
  store ptr addrspace(1) %94, ptr %9
  %95 = load ptr addrspace(1), ptr %7
  %96 = load ptr addrspace(1), ptr %9
  %97 = load i64, ptr %ds
  %98 = load i64, ptr %alloc
  %99 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %97, i64 %98, ptr @caml_ml_output_char, ptr addrspace(1) %95, ptr addrspace(1) %96) "statepoint-id"="0"
  %100 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %99, 0, 0
  %101 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %99, 0, 1
  store i64 %100, ptr %ds
  store i64 %101, ptr %alloc
  %102 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %99, 1, 0
  store ptr addrspace(1) %102, ptr %3
  br label %L128
L128:
  %103 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %103, ptr %25
  %104 = load ptr addrspace(1), ptr %25
  store ptr addrspace(1) %104, ptr %26
  %105 = ptrtoint ptr @camlStdlib__print_endline_138 to i64
  store i64 %105, ptr %27
  %106 = load i64, ptr %27
  %107 = inttoptr i64 %106 to ptr addrspace(1)
  store ptr addrspace(1) %107, ptr %28
  %108 = load ptr addrspace(1), ptr %28
  %109 = getelementptr i8, ptr addrspace(1) %108, i64 16
  store ptr addrspace(1) %109, ptr %28
  %110 = load ptr addrspace(1), ptr %28
  %111 = load ptr addrspace(1), ptr addrspace(1) %110
  store ptr addrspace(1) %111, ptr %29
  %112 = load ptr addrspace(1), ptr %29
  store ptr addrspace(1) %112, ptr %7
  %113 = load ptr addrspace(1), ptr %7
  %114 = load i64, ptr %ds
  %115 = load i64, ptr %alloc
  %116 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %114, i64 %115, ptr @caml_ml_flush, ptr addrspace(1) %113) "statepoint-id"="0"
  %117 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %116, 0, 0
  %118 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %116, 0, 1
  store i64 %117, ptr %ds
  store i64 %118, ptr %alloc
  %119 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %116, 1, 0
  store ptr addrspace(1) %119, ptr %3
  br label %L131
L131:
  %120 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %120, ptr %30
  %121 = load ptr addrspace(1), ptr %30
  store ptr addrspace(1) %121, ptr %31
  %122 = ptrtoint ptr @camlData_decl__float327 to i64
  store i64 %122, ptr %32
  %123 = ptrtoint ptr @camlData_decl__immstring38 to i64
  store i64 %123, ptr %33
  %124 = load i64, ptr %33
  %125 = inttoptr i64 %124 to ptr addrspace(1)
  store ptr addrspace(1) %125, ptr %7
  %126 = load i64, ptr %32
  %127 = inttoptr i64 %126 to ptr addrspace(1)
  store ptr addrspace(1) %127, ptr %9
  %128 = load ptr addrspace(1), ptr %7
  %129 = load ptr addrspace(1), ptr %9
  %130 = load i64, ptr %ds
  %131 = load i64, ptr %alloc
  %132 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %130, i64 %131, ptr @caml_format_float32, ptr addrspace(1) %128, ptr addrspace(1) %129) "statepoint-id"="0"
  %133 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %132, 0, 0
  %134 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %132, 0, 1
  store i64 %133, ptr %ds
  store i64 %134, ptr %alloc
  %135 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %132, 1, 0
  store ptr addrspace(1) %135, ptr %3
  br label %L134
L134:
  %136 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %136, ptr %34
  %137 = load ptr addrspace(1), ptr %34
  store ptr addrspace(1) %137, ptr %35
  %138 = ptrtoint ptr @camlData_decl__const_block54 to i64
  store i64 %138, ptr %36
  store i64 1, ptr %37
  %139 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %139, ptr %38
  %140 = load i64, ptr %38
  store i64 %140, ptr %4
  %141 = load i64, ptr %37
  store i64 %141, ptr %6
  %142 = load i64, ptr %36
  store i64 %142, ptr %8
  %143 = load i64, ptr %4
  %144 = load i64, ptr %6
  %145 = load i64, ptr %8
  %146 = load i64, ptr %ds
  %147 = load i64, ptr %alloc
  %148 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %146, i64 %147, i64 %143, i64 %144, i64 %145) "statepoint-id"="0"
  %149 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %148, 0, 0
  %150 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %148, 0, 1
  store i64 %149, ptr %ds
  store i64 %150, ptr %alloc
  %151 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %148, 1, 0
  store ptr addrspace(1) %151, ptr %3
  br label %L135
L135:
  %152 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %152, ptr %39
  %153 = load ptr addrspace(1), ptr %39
  store ptr addrspace(1) %153, ptr %40
  %154 = ptrtoint ptr @camlData_decl__float4 to i64
  store i64 %154, ptr %41
  %155 = load i64, ptr %41
  store i64 %155, ptr %4
  %156 = load ptr addrspace(1), ptr %35
  store ptr addrspace(1) %156, ptr %5
  %157 = load ptr addrspace(1), ptr %40
  store ptr addrspace(1) %157, ptr %7
  %158 = load i64, ptr %4
  %159 = load ptr addrspace(1), ptr %5
  %160 = load ptr addrspace(1), ptr %7
  %161 = load i64, ptr %ds
  %162 = load i64, ptr %alloc
  %163 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply2(i64 %161, i64 %162, i64 %158, ptr addrspace(1) %159, ptr addrspace(1) %160) "statepoint-id"="0"
  %164 = extractvalue { { i64, i64 }, { i64 } } %163, 0, 0
  %165 = extractvalue { { i64, i64 }, { i64 } } %163, 0, 1
  store i64 %164, ptr %ds
  store i64 %165, ptr %alloc
  %166 = extractvalue { { i64, i64 }, { i64 } } %163, 1, 0
  store i64 %166, ptr %4
  br label %L136
L136:
  %167 = load i64, ptr %4
  store i64 %167, ptr %42
  %168 = load i64, ptr %42
  store i64 %168, ptr %43
  store i64 11, ptr %44
  %169 = load i64, ptr %44
  store i64 %169, ptr %4
  %170 = load i64, ptr %4
  %171 = load i64, ptr %ds
  %172 = load i64, ptr %alloc
  %173 = call oxcamlcc { { i64, i64 }, { i64 } } @camlData_decl__f_HIDE_STAMP(i64 %171, i64 %172, i64 %170) "statepoint-id"="0"
  %174 = extractvalue { { i64, i64 }, { i64 } } %173, 0, 0
  %175 = extractvalue { { i64, i64 }, { i64 } } %173, 0, 1
  store i64 %174, ptr %ds
  store i64 %175, ptr %alloc
  %176 = extractvalue { { i64, i64 }, { i64 } } %173, 1, 0
  store i64 %176, ptr %4
  br label %L137
L137:
  %177 = load i64, ptr %4
  store i64 %177, ptr %45
  %178 = load i64, ptr %45
  store i64 %178, ptr %46
  %179 = ptrtoint ptr @camlData_decl__const_block67 to i64
  store i64 %179, ptr %47
  store i64 1, ptr %48
  %180 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %180, ptr %49
  %181 = load i64, ptr %49
  store i64 %181, ptr %4
  %182 = load i64, ptr %48
  store i64 %182, ptr %6
  %183 = load i64, ptr %47
  store i64 %183, ptr %8
  %184 = load i64, ptr %4
  %185 = load i64, ptr %6
  %186 = load i64, ptr %8
  %187 = load i64, ptr %ds
  %188 = load i64, ptr %alloc
  %189 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %187, i64 %188, i64 %184, i64 %185, i64 %186) "statepoint-id"="0"
  %190 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %189, 0, 0
  %191 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %189, 0, 1
  store i64 %190, ptr %ds
  store i64 %191, ptr %alloc
  %192 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %189, 1, 0
  store ptr addrspace(1) %192, ptr %3
  br label %L138
L138:
  %193 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %193, ptr %50
  %194 = load ptr addrspace(1), ptr %50
  store ptr addrspace(1) %194, ptr %51
  %195 = load ptr addrspace(1), ptr %51
  %196 = load i64, ptr addrspace(1) %195
  store i64 %196, ptr %52
  %197 = load i64, ptr %46
  store i64 %197, ptr %4
  %198 = load ptr addrspace(1), ptr %51
  store ptr addrspace(1) %198, ptr %5
  %199 = load i64, ptr %4
  %200 = load ptr addrspace(1), ptr %5
  %201 = load i64, ptr %ds
  %202 = load i64, ptr %alloc
  %203 = load ptr, ptr %52
  %204 = call oxcamlcc { { i64, i64 }, { i64 } } %203(i64 %201, i64 %202, i64 %199, ptr addrspace(1) %200) "statepoint-id"="0"
  %205 = extractvalue { { i64, i64 }, { i64 } } %204, 0, 0
  %206 = extractvalue { { i64, i64 }, { i64 } } %204, 0, 1
  store i64 %205, ptr %ds
  store i64 %206, ptr %alloc
  %207 = extractvalue { { i64, i64 }, { i64 } } %204, 1, 0
  store i64 %207, ptr %4
  br label %L139
L139:
  %208 = load i64, ptr %4
  store i64 %208, ptr %53
  %209 = load i64, ptr %53
  store i64 %209, ptr %54
  %210 = ptrtoint ptr @camlData_decl to i64
  store i64 %210, ptr %55
  %211 = load i64, ptr %55
  store i64 %211, ptr %56
  %212 = load i64, ptr %56
  %213 = inttoptr i64 %212 to ptr addrspace(1)
  store ptr addrspace(1) %213, ptr %12
  store i64 1, ptr %57
  %214 = load i64, ptr %57
  store i64 %214, ptr %4
  %215 = load ptr addrspace(1), ptr %4
  %216 = load i64, ptr %ds
  %217 = load i64, ptr %alloc
  %218 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %216, 0, 0
  %219 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %218, i64 %217, 0, 1
  %220 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %219, ptr addrspace(1) %215, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %220
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlData_decl__gc_roots = global { i64 } { i64 0 }, section ".data", align 8
@header.camlData_decl = global i64 4864, section ".data", align 8
@camlData_decl = global { ptr, ptr, ptr, ptr } { ptr @camlData_decl__float4, ptr @camlData_decl__float327, ptr @camlData_decl__f_2, ptr @camlData_decl__g_3 }, section ".data", align 8
@header.camlData_decl__g_3 = global i64 7159, section ".data", align 8
@camlData_decl__g_3 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 144115188075855885, ptr @camlData_decl__g_HIDE_STAMP }, section ".data", align 8
@header.camlData_decl__f_2 = global i64 4345, section ".data", align 8
@camlData_decl__f_2 = global { ptr, i64 } { ptr @camlData_decl__f_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlData_decl__float4 = global i64 2045, section ".data", align 8
@camlData_decl__float4 = global { double } { double 3.14159265358979311600 }, section ".data", align 8
@header.camlData_decl__float327 = global i64 3071, section ".data", align 8
@camlData_decl__float327 = global { ptr, float } { ptr @caml_float32_ops, float 2.71828174591064453125 }, section ".data", align 8
@header.camlData_decl__immstring35 = global i64 5116, section ".data", align 8
@camlData_decl__immstring35 = global { [ 30 x i8 ], [ 1 x i8 ], i8 } { [ 30 x i8 ] c"\6f\6e\65\20\6f\66\20\74\68\65\20\73\74\72\69\6e\67\73\0a\6f\66\20\61\6c\6c\20\74\69\6d\65", [ 1 x i8 ] zeroinitializer, i8 1 }, section ".data", align 8
@header.camlData_decl__immstring38 = global i64 2044, section ".data", align 8
@camlData_decl__immstring38 = global { [ 5 x i8 ], [ 2 x i8 ], i8 } { [ 5 x i8 ] c"\25\2e\31\30\67", [ 2 x i8 ] zeroinitializer, i8 2 }, section ".data", align 8
@header.camlData_decl__const_block54 = global i64 4872, section ".data", align 8
@camlData_decl__const_block54 = global { ptr, i64, ptr, ptr } { ptr @camlData_decl__const_block44, i64 1, ptr @camlData_decl__const_block46, ptr @camlData_decl__const_block52 }, section ".data", align 8
@header.camlData_decl__const_block52 = global i64 2828, section ".data", align 8
@camlData_decl__const_block52 = global { i64, ptr } { i64 65, ptr @camlData_decl__const_block50 }, section ".data", align 8
@header.camlData_decl__const_block50 = global i64 2818, section ".data", align 8
@camlData_decl__const_block50 = global { i64, ptr } { i64 1, ptr @camlData_decl__const_block48 }, section ".data", align 8
@header.camlData_decl__const_block46 = global i64 1792, section ".data", align 8
@camlData_decl__const_block46 = global { i64 } { i64 41 }, section ".data", align 8
@header.camlData_decl__const_block44 = global i64 2816, section ".data", align 8
@camlData_decl__const_block44 = global { i64, i64 } { i64 1, i64 1 }, section ".data", align 8
@header.camlData_decl__const_block67 = global i64 2827, section ".data", align 8
@camlData_decl__const_block67 = global { ptr, ptr } { ptr @camlData_decl__immstring63, ptr @camlData_decl__const_block65 }, section ".data", align 8
@header.camlData_decl__const_block65 = global i64 4868, section ".data", align 8
@camlData_decl__const_block65 = global { i64, i64, i64, ptr } { i64 1, i64 1, i64 1, ptr @camlData_decl__const_block48 }, section ".data", align 8
@header.camlData_decl__const_block48 = global i64 2828, section ".data", align 8
@camlData_decl__const_block48 = global { i64, i64 } { i64 21, i64 1 }, section ".data", align 8
@header.camlData_decl__immstring63 = global i64 4092, section ".data", align 8
@camlData_decl__immstring63 = global { [ 20 x i8 ], [ 3 x i8 ], i8 } { [ 20 x i8 ] c"\6d\75\74\75\61\6c\6c\79\5f\72\65\63\75\72\73\69\76\65\3a\20", [ 3 x i8 ] zeroinitializer, i8 3 }, section ".data", align 8
@temp.Data_decl.0 = global { ptr } { ptr @caml_format_float32 }, section ".data", align 8
@camlCamlinternalFormat__make_printf_HIDE_STAMP = external global ptr
@camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 = external global ptr
@camlStdlib__print_endline_138 = external global ptr
@caml_apply2 = external global ptr
@caml_c_call = external global ptr
@caml_curry2 = external global ptr
@caml_float32_ops = external global ptr
@caml_format_float32 = external global ptr
@caml_ml_flush = external global ptr
@caml_ml_output = external global ptr
@caml_ml_output_char = external global ptr



!0 = !{ i32 1, !"oxcaml_module", !"Data_decl" }
!llvm.module.flags = !{ !0 }
