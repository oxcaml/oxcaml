source_filename = "indirect_call.ml"

@camlIndirect_call__data_begin = global {  } {  }, align 8, section ".data"
define void @camlIndirect_call__code_begin() { unreachable }

@camlIndirect_call__gc_roots = global { i64 } { i64 0 }, align 8, section ".data"
@.header.camlIndirect_call = global { i64 } { i64 1792 }, align 8, section ".data"
@camlIndirect_call = global { ptr } { ptr @camlIndirect_call__apply_1 }, align 8, section ".data"
@.header.camlIndirect_call__apply_1 = global { i64 } { i64 4087 }, align 8, section ".data"
@camlIndirect_call__apply_1 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlIndirect_call__apply_HIDE_STAMP }, align 8, section ".data"
define  cc 104 { { ptr, ptr }, { ptr addrspace(1) } } @camlIndirect_call__apply_HIDE_STAMP(ptr %0, ptr %1, ptr addrspace(1) %2, ptr addrspace(1) %3) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca ptr addrspace(1)
  store ptr addrspace(1) %2, ptr %5
  %6 = alloca ptr addrspace(1)
  store ptr addrspace(1) %3, ptr %6
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %11 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %11, ptr %7
  %12 = load ptr addrspace(1), ptr %6
  store ptr addrspace(1) %12, ptr %8
  %13 = load ptr addrspace(1), ptr %7
  %14 = ptrtoint ptr addrspace(1) %13 to i64
  %15 = add i64 %14, 0
  %16 = inttoptr i64 %15 to ptr addrspace(1)
  %17 = load i64, ptr addrspace(1) %16
  store i64 %17, ptr %9
  %18 = load ptr addrspace(1), ptr %8
  store ptr addrspace(1) %18, ptr %5
  %19 = load ptr addrspace(1), ptr %7
  store ptr addrspace(1) %19, ptr %6
  ; regs: [pin:anon:V/0[%rax], pin:anon:V/1[%rbx]], callsite_types.args: [[V], [V]], funcdef_types.args: [[V], [V]]
  ; callsite_types.res: [[V]], funcdef_types.res: [[V]]
  %20 = load ptr, ptr %ds
  %21 = load ptr, ptr %alloc
  %22 = load ptr addrspace(1), ptr %5
  %23 = load ptr addrspace(1), ptr %6
  ; res_regs: [pin:anon:V/0[%rax]]
  %24 = load i64, ptr %9
  %25 = inttoptr i64 %24 to ptr
  %26 =  call cc 104 { { ptr, ptr }, { ptr addrspace(1) } } %25(ptr %20, ptr %21, ptr addrspace(1) %22, ptr addrspace(1) %23) "statepoint-id"="8"
  %27 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %26, 0, 0
  store ptr %27, ptr %ds
  %28 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %26, 0, 1
  store ptr %28, ptr %alloc
  %29 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %26, 1, 0
  store ptr addrspace(1) %29, ptr %5
  br label %L103
L103:                                                ; preds = %L101
  %30 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %30, ptr %10
  %31 = load ptr addrspace(1), ptr %10
  store ptr addrspace(1) %31, ptr %5
  %32 = extractvalue { { { ptr, ptr }, { ptr addrspace(1) } } } poison, 0
  %33 = load ptr, ptr %ds
  %34 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %32, ptr %33, 0, 0
  %35 = load ptr, ptr %alloc
  %36 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %34, ptr %35, 0, 1
  %37 = load ptr addrspace(1), ptr %5
  %38 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %36, ptr addrspace(1) %37, 1, 0
  ret { { ptr, ptr }, { ptr addrspace(1) } } %38
}

define  cc 104 { { ptr, ptr }, { ptr addrspace(1) } } @camlIndirect_call__entry(ptr %0, ptr %1) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca ptr addrspace(1)
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L109
L109:                                                ; preds = %L1
  store ptr @camlIndirect_call, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %6
  %9 = load i64, ptr %6
  %10 = inttoptr i64 %9 to ptr addrspace(1)
  store ptr addrspace(1) %10, ptr %4
  store i64 1, ptr %7
  %11 = load i64, ptr %7
  store i64 %11, ptr %3
  %12 = extractvalue { { { ptr, ptr }, { ptr addrspace(1) } } } poison, 0
  %13 = load ptr, ptr %ds
  %14 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %12, ptr %13, 0, 0
  %15 = load ptr, ptr %alloc
  %16 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %14, ptr %15, 0, 1
  %17 = load i64, ptr %3
  %18 = inttoptr i64 %17 to ptr addrspace(1)
  %19 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %16, ptr addrspace(1) %18, 1, 0
  ret { { ptr, ptr }, { ptr addrspace(1) } } %19
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@caml_curry2 = external global ptr

@camlIndirect_call__data_end = global {  } {  }, align 8, section ".data"
define void @camlIndirect_call__code_end() { unreachable }
