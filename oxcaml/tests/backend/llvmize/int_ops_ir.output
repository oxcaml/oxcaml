source_filename = "int_ops.ml"

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__add_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca i64
  br label %L1
L1:
  br label %L101
L101:
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  %14 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %14, ptr %6
  %15 = load ptr addrspace(1), ptr %6
  %16 = getelementptr i8, ptr addrspace(1) %15, i64 8
  store ptr addrspace(1) %16, ptr %7
  %17 = load ptr addrspace(1), ptr %7
  %18 = load ptr addrspace(1), ptr addrspace(1) %17
  store ptr addrspace(1) %18, ptr %8
  %19 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %19, ptr %9
  %20 = load i64, ptr %9
  %21 = inttoptr i64 %20 to ptr
  %22 = load ptr addrspace(1), ptr %21
  store ptr addrspace(1) %22, ptr %10
  %23 = load i64, ptr %10
  %24 = load i64, ptr %8
  %25 = add i64 %23, %24
  store i64 %25, ptr %11
  %26 = load i64, ptr %11
  %27 = add i64 %26, -1
  store i64 %27, ptr %12
  %28 = load i64, ptr %12
  store i64 %28, ptr %4
  %29 = load i64, ptr %4
  %30 = load i64, ptr %ds
  %31 = load i64, ptr %alloc
  %32 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %30, 0, 0
  %33 = insertvalue { { i64, i64 }, { i64 } } %32, i64 %31, 0, 1
  %34 = insertvalue { { i64, i64 }, { i64 } } %33, i64 %29, 1, 0
  ret { { i64, i64 }, { i64 } } %34
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__sub_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca i64
  br label %L1
L1:
  br label %L109
L109:
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  %14 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %14, ptr %6
  %15 = load ptr addrspace(1), ptr %6
  %16 = getelementptr i8, ptr addrspace(1) %15, i64 8
  store ptr addrspace(1) %16, ptr %7
  %17 = load ptr addrspace(1), ptr %7
  %18 = load ptr addrspace(1), ptr addrspace(1) %17
  store ptr addrspace(1) %18, ptr %8
  %19 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %19, ptr %9
  %20 = load i64, ptr %9
  %21 = inttoptr i64 %20 to ptr
  %22 = load ptr addrspace(1), ptr %21
  store ptr addrspace(1) %22, ptr %10
  %23 = load i64, ptr %10
  %24 = load i64, ptr %8
  %25 = sub i64 %23, %24
  store i64 %25, ptr %11
  %26 = load i64, ptr %11
  %27 = add i64 %26, 1
  store i64 %27, ptr %12
  %28 = load i64, ptr %12
  store i64 %28, ptr %4
  %29 = load i64, ptr %4
  %30 = load i64, ptr %ds
  %31 = load i64, ptr %alloc
  %32 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %30, 0, 0
  %33 = insertvalue { { i64, i64 }, { i64 } } %32, i64 %31, 0, 1
  %34 = insertvalue { { i64, i64 }, { i64 } } %33, i64 %29, 1, 0
  ret { { i64, i64 }, { i64 } } %34
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__mul_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L117
L117:
  %15 = load i64, ptr %4
  store i64 %15, ptr %5
  %16 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %16, ptr %6
  %17 = load ptr addrspace(1), ptr %6
  %18 = getelementptr i8, ptr addrspace(1) %17, i64 8
  store ptr addrspace(1) %18, ptr %7
  %19 = load ptr addrspace(1), ptr %7
  %20 = load ptr addrspace(1), ptr addrspace(1) %19
  store ptr addrspace(1) %20, ptr %8
  %21 = load i64, ptr %8
  %22 = ashr i64 %21, 1
  store i64 %22, ptr %9
  %23 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %23, ptr %10
  %24 = load i64, ptr %10
  %25 = inttoptr i64 %24 to ptr
  %26 = load ptr addrspace(1), ptr %25
  store ptr addrspace(1) %26, ptr %11
  %27 = load i64, ptr %11
  %28 = add i64 %27, -1
  store i64 %28, ptr %12
  %29 = load i64, ptr %12
  %30 = load i64, ptr %9
  %31 = mul i64 %29, %30
  store i64 %31, ptr %13
  %32 = load i64, ptr %13
  %33 = add i64 %32, 1
  store i64 %33, ptr %14
  %34 = load i64, ptr %14
  store i64 %34, ptr %4
  %35 = load i64, ptr %4
  %36 = load i64, ptr %ds
  %37 = load i64, ptr %alloc
  %38 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %36, 0, 0
  %39 = insertvalue { { i64, i64 }, { i64 } } %38, i64 %37, 0, 1
  %40 = insertvalue { { i64, i64 }, { i64 } } %39, i64 %35, 1, 0
  ret { { i64, i64 }, { i64 } } %40
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__div_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca ptr addrspace(1)
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  br label %L1
L1:
  br label %L127
L127:
  %19 = load i64, ptr %4
  store i64 %19, ptr %5
  %20 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %20, ptr %6
  %21 = load ptr addrspace(1), ptr %6
  %22 = getelementptr i8, ptr addrspace(1) %21, i64 8
  store ptr addrspace(1) %22, ptr %7
  %23 = load ptr addrspace(1), ptr %7
  %24 = load ptr addrspace(1), ptr addrspace(1) %23
  store ptr addrspace(1) %24, ptr %8
  %25 = load ptr addrspace(1), ptr %8
  store ptr addrspace(1) %25, ptr %9
  %26 = load i64, ptr %9
  %27 = icmp slt i64 %26, 1
  br i1 %27, label %L136, label %L153
L153:
  %28 = load i64, ptr %9
  %29 = icmp sgt i64 %28, 1
  br i1 %29, label %L136, label %L131
L131:
  store i64 1, ptr %10
  %30 = load i64, ptr %10
  store i64 %30, ptr %4
  %31 = load i64, ptr %4
  %32 = load i64, ptr %ds
  %33 = load i64, ptr %alloc
  %34 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %32, 0, 0
  %35 = insertvalue { { i64, i64 }, { i64 } } %34, i64 %33, 0, 1
  %36 = insertvalue { { i64, i64 }, { i64 } } %35, i64 %31, 1, 0
  ret { { i64, i64 }, { i64 } } %36
L136:
  %37 = load i64, ptr %9
  %38 = icmp slt i64 %37, 1
  br i1 %38, label %L138, label %L154
L154:
  %39 = load i64, ptr %9
  %40 = icmp sgt i64 %39, 1
  br i1 %40, label %L138, label %L149
L138:
  %41 = load i64, ptr %9
  %42 = ashr i64 %41, 1
  store i64 %42, ptr %11
  %43 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %43, ptr %12
  %44 = load i64, ptr %12
  %45 = inttoptr i64 %44 to ptr
  %46 = load ptr addrspace(1), ptr %45
  store ptr addrspace(1) %46, ptr %13
  %47 = load i64, ptr %13
  %48 = ashr i64 %47, 1
  store i64 %48, ptr %14
  %49 = load i64, ptr %14
  %50 = load i64, ptr %11
  %51 = sdiv i64 %49, %50
  store i64 %51, ptr %15
  %52 = load i64, ptr %15
  %53 = shl i64 %52, 1
  store i64 %53, ptr %16
  %54 = load i64, ptr %16
  %55 = add i64 %54, 1
  store i64 %55, ptr %17
  %56 = load i64, ptr %17
  store i64 %56, ptr %4
  %57 = load i64, ptr %4
  %58 = load i64, ptr %ds
  %59 = load i64, ptr %alloc
  %60 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %58, 0, 0
  %61 = insertvalue { { i64, i64 }, { i64 } } %60, i64 %59, 0, 1
  %62 = insertvalue { { i64, i64 }, { i64 } } %61, i64 %57, 1, 0
  ret { { i64, i64 }, { i64 } } %62
L149:
  %63 = ptrtoint ptr @caml_exn_Division_by_zero to i64
  store i64 %63, ptr %18
  %64 = load i64, ptr %18
  store i64 %64, ptr %4
  %65 = load i64, ptr %ds
  %66 = add i64 %65, 240
  %67 = inttoptr i64 %66 to ptr
  store i64 0, ptr %67
  %68 = load i64, ptr %4
  %69 = load i64, ptr %ds
  %70 = load i64, ptr %alloc
  %71 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %69, i64 %70, i64 %68) "statepoint-id"="0"
  %72 = extractvalue { { i64, i64 }, {  } } %71, 0, 0
  %73 = extractvalue { { i64, i64 }, {  } } %71, 0, 1
  store i64 %72, ptr %ds
  store i64 %73, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__mod__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca ptr addrspace(1)
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  br label %L1
L1:
  br label %L156
L156:
  %18 = load i64, ptr %4
  store i64 %18, ptr %5
  %19 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %19, ptr %6
  %20 = load ptr addrspace(1), ptr %6
  %21 = getelementptr i8, ptr addrspace(1) %20, i64 8
  store ptr addrspace(1) %21, ptr %7
  %22 = load ptr addrspace(1), ptr %7
  %23 = load ptr addrspace(1), ptr addrspace(1) %22
  store ptr addrspace(1) %23, ptr %8
  %24 = load ptr addrspace(1), ptr %8
  store ptr addrspace(1) %24, ptr %9
  %25 = load i64, ptr %9
  %26 = icmp slt i64 %25, 1
  br i1 %26, label %L163, label %L177
L177:
  %27 = load i64, ptr %9
  %28 = icmp sgt i64 %27, 1
  br i1 %28, label %L163, label %L174
L163:
  %29 = load i64, ptr %9
  %30 = ashr i64 %29, 1
  store i64 %30, ptr %10
  %31 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  %33 = inttoptr i64 %32 to ptr
  %34 = load ptr addrspace(1), ptr %33
  store ptr addrspace(1) %34, ptr %12
  %35 = load i64, ptr %12
  %36 = ashr i64 %35, 1
  store i64 %36, ptr %13
  %37 = load i64, ptr %13
  %38 = load i64, ptr %10
  %39 = srem i64 %37, %38
  store i64 %39, ptr %14
  %40 = load i64, ptr %14
  %41 = shl i64 %40, 1
  store i64 %41, ptr %15
  %42 = load i64, ptr %15
  %43 = add i64 %42, 1
  store i64 %43, ptr %16
  %44 = load i64, ptr %16
  store i64 %44, ptr %4
  %45 = load i64, ptr %4
  %46 = load i64, ptr %ds
  %47 = load i64, ptr %alloc
  %48 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %46, 0, 0
  %49 = insertvalue { { i64, i64 }, { i64 } } %48, i64 %47, 0, 1
  %50 = insertvalue { { i64, i64 }, { i64 } } %49, i64 %45, 1, 0
  ret { { i64, i64 }, { i64 } } %50
L174:
  %51 = ptrtoint ptr @caml_exn_Division_by_zero to i64
  store i64 %51, ptr %17
  %52 = load i64, ptr %17
  store i64 %52, ptr %4
  %53 = load i64, ptr %ds
  %54 = add i64 %53, 240
  %55 = inttoptr i64 %54 to ptr
  store i64 0, ptr %55
  %56 = load i64, ptr %4
  %57 = load i64, ptr %ds
  %58 = load i64, ptr %alloc
  %59 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %57, i64 %58, i64 %56) "statepoint-id"="0"
  %60 = extractvalue { { i64, i64 }, {  } } %59, 0, 0
  %61 = extractvalue { { i64, i64 }, {  } } %59, 0, 1
  store i64 %60, ptr %ds
  store i64 %61, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__land__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  br label %L1
L1:
  br label %L179
L179:
  %12 = load i64, ptr %4
  store i64 %12, ptr %5
  %13 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %13, ptr %6
  %14 = load ptr addrspace(1), ptr %6
  %15 = getelementptr i8, ptr addrspace(1) %14, i64 8
  store ptr addrspace(1) %15, ptr %7
  %16 = load ptr addrspace(1), ptr %7
  %17 = load ptr addrspace(1), ptr addrspace(1) %16
  store ptr addrspace(1) %17, ptr %8
  %18 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  %20 = inttoptr i64 %19 to ptr
  %21 = load ptr addrspace(1), ptr %20
  store ptr addrspace(1) %21, ptr %10
  %22 = load i64, ptr %10
  %23 = load i64, ptr %8
  %24 = and i64 %22, %23
  store i64 %24, ptr %11
  %25 = load i64, ptr %11
  store i64 %25, ptr %4
  %26 = load i64, ptr %4
  %27 = load i64, ptr %ds
  %28 = load i64, ptr %alloc
  %29 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %27, 0, 0
  %30 = insertvalue { { i64, i64 }, { i64 } } %29, i64 %28, 0, 1
  %31 = insertvalue { { i64, i64 }, { i64 } } %30, i64 %26, 1, 0
  ret { { i64, i64 }, { i64 } } %31
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lor__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  br label %L1
L1:
  br label %L186
L186:
  %12 = load i64, ptr %4
  store i64 %12, ptr %5
  %13 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %13, ptr %6
  %14 = load ptr addrspace(1), ptr %6
  %15 = getelementptr i8, ptr addrspace(1) %14, i64 8
  store ptr addrspace(1) %15, ptr %7
  %16 = load ptr addrspace(1), ptr %7
  %17 = load ptr addrspace(1), ptr addrspace(1) %16
  store ptr addrspace(1) %17, ptr %8
  %18 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  %20 = inttoptr i64 %19 to ptr
  %21 = load ptr addrspace(1), ptr %20
  store ptr addrspace(1) %21, ptr %10
  %22 = load i64, ptr %10
  %23 = load i64, ptr %8
  %24 = or i64 %22, %23
  store i64 %24, ptr %11
  %25 = load i64, ptr %11
  store i64 %25, ptr %4
  %26 = load i64, ptr %4
  %27 = load i64, ptr %ds
  %28 = load i64, ptr %alloc
  %29 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %27, 0, 0
  %30 = insertvalue { { i64, i64 }, { i64 } } %29, i64 %28, 0, 1
  %31 = insertvalue { { i64, i64 }, { i64 } } %30, i64 %26, 1, 0
  ret { { i64, i64 }, { i64 } } %31
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lxor__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca i64
  br label %L1
L1:
  br label %L193
L193:
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  %14 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %14, ptr %6
  %15 = load ptr addrspace(1), ptr %6
  %16 = getelementptr i8, ptr addrspace(1) %15, i64 8
  store ptr addrspace(1) %16, ptr %7
  %17 = load ptr addrspace(1), ptr %7
  %18 = load ptr addrspace(1), ptr addrspace(1) %17
  store ptr addrspace(1) %18, ptr %8
  %19 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %19, ptr %9
  %20 = load i64, ptr %9
  %21 = inttoptr i64 %20 to ptr
  %22 = load ptr addrspace(1), ptr %21
  store ptr addrspace(1) %22, ptr %10
  %23 = load i64, ptr %10
  %24 = load i64, ptr %8
  %25 = xor i64 %23, %24
  store i64 %25, ptr %11
  %26 = load i64, ptr %11
  %27 = or i64 %26, 1
  store i64 %27, ptr %12
  %28 = load i64, ptr %12
  store i64 %28, ptr %4
  %29 = load i64, ptr %4
  %30 = load i64, ptr %ds
  %31 = load i64, ptr %alloc
  %32 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %30, 0, 0
  %33 = insertvalue { { i64, i64 }, { i64 } } %32, i64 %31, 0, 1
  %34 = insertvalue { { i64, i64 }, { i64 } } %33, i64 %29, 1, 0
  ret { { i64, i64 }, { i64 } } %34
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lnot__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L201
L201:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load i64, ptr %7
  %16 = xor i64 %15, -1
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = or i64 %17, 1
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  store i64 %19, ptr %4
  %20 = load i64, ptr %4
  %21 = load i64, ptr %ds
  %22 = load i64, ptr %alloc
  %23 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %21, 0, 0
  %24 = insertvalue { { i64, i64 }, { i64 } } %23, i64 %22, 0, 1
  %25 = insertvalue { { i64, i64 }, { i64 } } %24, i64 %20, 1, 0
  ret { { i64, i64 }, { i64 } } %25
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lsl__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L207
L207:
  %15 = load i64, ptr %4
  store i64 %15, ptr %5
  %16 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %16, ptr %6
  %17 = load ptr addrspace(1), ptr %6
  %18 = getelementptr i8, ptr addrspace(1) %17, i64 8
  store ptr addrspace(1) %18, ptr %7
  %19 = load ptr addrspace(1), ptr %7
  %20 = load ptr addrspace(1), ptr addrspace(1) %19
  store ptr addrspace(1) %20, ptr %8
  %21 = load i64, ptr %8
  %22 = ashr i64 %21, 1
  store i64 %22, ptr %9
  %23 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %23, ptr %10
  %24 = load i64, ptr %10
  %25 = inttoptr i64 %24 to ptr
  %26 = load ptr addrspace(1), ptr %25
  store ptr addrspace(1) %26, ptr %11
  %27 = load i64, ptr %11
  %28 = add i64 %27, -1
  store i64 %28, ptr %12
  %29 = load i64, ptr %12
  %30 = load i64, ptr %9
  %31 = shl i64 %29, %30
  store i64 %31, ptr %13
  %32 = load i64, ptr %13
  %33 = add i64 %32, 1
  store i64 %33, ptr %14
  %34 = load i64, ptr %14
  store i64 %34, ptr %4
  %35 = load i64, ptr %4
  %36 = load i64, ptr %ds
  %37 = load i64, ptr %alloc
  %38 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %36, 0, 0
  %39 = insertvalue { { i64, i64 }, { i64 } } %38, i64 %37, 0, 1
  %40 = insertvalue { { i64, i64 }, { i64 } } %39, i64 %35, 1, 0
  ret { { i64, i64 }, { i64 } } %40
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lsr__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  br label %L1
L1:
  br label %L217
L217:
  %14 = load i64, ptr %4
  store i64 %14, ptr %5
  %15 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %15, ptr %6
  %16 = load ptr addrspace(1), ptr %6
  %17 = getelementptr i8, ptr addrspace(1) %16, i64 8
  store ptr addrspace(1) %17, ptr %7
  %18 = load ptr addrspace(1), ptr %7
  %19 = load ptr addrspace(1), ptr addrspace(1) %18
  store ptr addrspace(1) %19, ptr %8
  %20 = load i64, ptr %8
  %21 = ashr i64 %20, 1
  store i64 %21, ptr %9
  %22 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %22, ptr %10
  %23 = load i64, ptr %10
  %24 = inttoptr i64 %23 to ptr
  %25 = load ptr addrspace(1), ptr %24
  store ptr addrspace(1) %25, ptr %11
  %26 = load i64, ptr %11
  %27 = load i64, ptr %9
  %28 = lshr i64 %26, %27
  store i64 %28, ptr %12
  %29 = load i64, ptr %12
  %30 = or i64 %29, 1
  store i64 %30, ptr %13
  %31 = load i64, ptr %13
  store i64 %31, ptr %4
  %32 = load i64, ptr %4
  %33 = load i64, ptr %ds
  %34 = load i64, ptr %alloc
  %35 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %33, 0, 0
  %36 = insertvalue { { i64, i64 }, { i64 } } %35, i64 %34, 0, 1
  %37 = insertvalue { { i64, i64 }, { i64 } } %36, i64 %32, 1, 0
  ret { { i64, i64 }, { i64 } } %37
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__asr__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  br label %L1
L1:
  br label %L226
L226:
  %14 = load i64, ptr %4
  store i64 %14, ptr %5
  %15 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %15, ptr %6
  %16 = load ptr addrspace(1), ptr %6
  %17 = getelementptr i8, ptr addrspace(1) %16, i64 8
  store ptr addrspace(1) %17, ptr %7
  %18 = load ptr addrspace(1), ptr %7
  %19 = load ptr addrspace(1), ptr addrspace(1) %18
  store ptr addrspace(1) %19, ptr %8
  %20 = load i64, ptr %8
  %21 = ashr i64 %20, 1
  store i64 %21, ptr %9
  %22 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %22, ptr %10
  %23 = load i64, ptr %10
  %24 = inttoptr i64 %23 to ptr
  %25 = load ptr addrspace(1), ptr %24
  store ptr addrspace(1) %25, ptr %11
  %26 = load i64, ptr %11
  %27 = load i64, ptr %9
  %28 = ashr i64 %26, %27
  store i64 %28, ptr %12
  %29 = load i64, ptr %12
  %30 = or i64 %29, 1
  store i64 %30, ptr %13
  %31 = load i64, ptr %13
  store i64 %31, ptr %4
  %32 = load i64, ptr %4
  %33 = load i64, ptr %ds
  %34 = load i64, ptr %alloc
  %35 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %33, 0, 0
  %36 = insertvalue { { i64, i64 }, { i64 } } %35, i64 %34, 0, 1
  %37 = insertvalue { { i64, i64 }, { i64 } } %36, i64 %32, 1, 0
  ret { { i64, i64 }, { i64 } } %37
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__add_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  br label %L1
L1:
  br label %L235
L235:
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %10, ptr %6
  %11 = load i64, ptr %6
  %12 = inttoptr i64 %11 to ptr
  %13 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %13, ptr %7
  %14 = load i64, ptr %7
  %15 = add i64 %14, 8
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  store i64 %16, ptr %4
  %17 = load i64, ptr %4
  %18 = load i64, ptr %ds
  %19 = load i64, ptr %alloc
  %20 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %18, 0, 0
  %21 = insertvalue { { i64, i64 }, { i64 } } %20, i64 %19, 0, 1
  %22 = insertvalue { { i64, i64 }, { i64 } } %21, i64 %17, 1, 0
  ret { { i64, i64 }, { i64 } } %22
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__sub_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  br label %L1
L1:
  br label %L240
L240:
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %10, ptr %6
  %11 = load i64, ptr %6
  %12 = inttoptr i64 %11 to ptr
  %13 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %13, ptr %7
  %14 = load i64, ptr %7
  %15 = add i64 %14, -8
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  store i64 %16, ptr %4
  %17 = load i64, ptr %4
  %18 = load i64, ptr %ds
  %19 = load i64, ptr %alloc
  %20 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %18, 0, 0
  %21 = insertvalue { { i64, i64 }, { i64 } } %20, i64 %19, 0, 1
  %22 = insertvalue { { i64, i64 }, { i64 } } %21, i64 %17, 1, 0
  ret { { i64, i64 }, { i64 } } %22
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__mul_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L245
L245:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load i64, ptr %7
  %16 = shl i64 %15, 2
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = add i64 %17, -3
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  store i64 %19, ptr %4
  %20 = load i64, ptr %4
  %21 = load i64, ptr %ds
  %22 = load i64, ptr %alloc
  %23 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %21, 0, 0
  %24 = insertvalue { { i64, i64 }, { i64 } } %23, i64 %22, 0, 1
  %25 = insertvalue { { i64, i64 }, { i64 } } %24, i64 %20, 1, 0
  ret { { i64, i64 }, { i64 } } %25
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__div_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L251
L251:
  %16 = load i64, ptr %4
  store i64 %16, ptr %5
  %17 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %17, ptr %6
  %18 = load i64, ptr %6
  %19 = inttoptr i64 %18 to ptr
  %20 = load ptr addrspace(1), ptr %19
  store ptr addrspace(1) %20, ptr %7
  %21 = load i64, ptr %7
  %22 = ashr i64 %21, 1
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  %25 = ashr i64 %24, 1
  store i64 %25, ptr %10
  %26 = load i64, ptr %10
  %27 = lshr i64 %26, 62
  store i64 %27, ptr %11
  %28 = load i64, ptr %9
  %29 = load i64, ptr %11
  %30 = add i64 %28, %29
  store i64 %30, ptr %12
  %31 = load i64, ptr %12
  %32 = ashr i64 %31, 2
  store i64 %32, ptr %13
  %33 = load i64, ptr %13
  %34 = shl i64 %33, 1
  store i64 %34, ptr %14
  %35 = load i64, ptr %14
  %36 = add i64 %35, 1
  store i64 %36, ptr %15
  %37 = load i64, ptr %15
  store i64 %37, ptr %4
  %38 = load i64, ptr %4
  %39 = load i64, ptr %ds
  %40 = load i64, ptr %alloc
  %41 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %39, 0, 0
  %42 = insertvalue { { i64, i64 }, { i64 } } %41, i64 %40, 0, 1
  %43 = insertvalue { { i64, i64 }, { i64 } } %42, i64 %38, 1, 0
  ret { { i64, i64 }, { i64 } } %43
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__mod_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  br label %L1
L1:
  br label %L262
L262:
  %18 = load i64, ptr %4
  store i64 %18, ptr %5
  %19 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %19, ptr %6
  %20 = load i64, ptr %6
  %21 = inttoptr i64 %20 to ptr
  %22 = load ptr addrspace(1), ptr %21
  store ptr addrspace(1) %22, ptr %7
  %23 = load i64, ptr %7
  %24 = ashr i64 %23, 1
  store i64 %24, ptr %8
  %25 = load i64, ptr %8
  store i64 %25, ptr %9
  store i64 -4, ptr %10
  %26 = load i64, ptr %9
  %27 = ashr i64 %26, 1
  store i64 %27, ptr %11
  %28 = load i64, ptr %11
  %29 = lshr i64 %28, 62
  store i64 %29, ptr %12
  %30 = load i64, ptr %9
  %31 = load i64, ptr %12
  %32 = add i64 %30, %31
  store i64 %32, ptr %13
  %33 = load i64, ptr %13
  %34 = load i64, ptr %10
  %35 = and i64 %33, %34
  store i64 %35, ptr %14
  %36 = load i64, ptr %9
  %37 = load i64, ptr %14
  %38 = sub i64 %36, %37
  store i64 %38, ptr %15
  %39 = load i64, ptr %15
  %40 = shl i64 %39, 1
  store i64 %40, ptr %16
  %41 = load i64, ptr %16
  %42 = add i64 %41, 1
  store i64 %42, ptr %17
  %43 = load i64, ptr %17
  store i64 %43, ptr %4
  %44 = load i64, ptr %4
  %45 = load i64, ptr %ds
  %46 = load i64, ptr %alloc
  %47 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %45, 0, 0
  %48 = insertvalue { { i64, i64 }, { i64 } } %47, i64 %46, 0, 1
  %49 = insertvalue { { i64, i64 }, { i64 } } %48, i64 %44, 1, 0
  ret { { i64, i64 }, { i64 } } %49
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__land_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  br label %L1
L1:
  br label %L274
L274:
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %10, ptr %6
  %11 = load i64, ptr %6
  %12 = inttoptr i64 %11 to ptr
  %13 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %13, ptr %7
  %14 = load i64, ptr %7
  %15 = and i64 %14, 9
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  store i64 %16, ptr %4
  %17 = load i64, ptr %4
  %18 = load i64, ptr %ds
  %19 = load i64, ptr %alloc
  %20 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %18, 0, 0
  %21 = insertvalue { { i64, i64 }, { i64 } } %20, i64 %19, 0, 1
  %22 = insertvalue { { i64, i64 }, { i64 } } %21, i64 %17, 1, 0
  ret { { i64, i64 }, { i64 } } %22
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lor_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  br label %L1
L1:
  br label %L279
L279:
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %10, ptr %6
  %11 = load i64, ptr %6
  %12 = inttoptr i64 %11 to ptr
  %13 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %13, ptr %7
  %14 = load i64, ptr %7
  %15 = or i64 %14, 9
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  store i64 %16, ptr %4
  %17 = load i64, ptr %4
  %18 = load i64, ptr %ds
  %19 = load i64, ptr %alloc
  %20 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %18, 0, 0
  %21 = insertvalue { { i64, i64 }, { i64 } } %20, i64 %19, 0, 1
  %22 = insertvalue { { i64, i64 }, { i64 } } %21, i64 %17, 1, 0
  ret { { i64, i64 }, { i64 } } %22
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lxor_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L284
L284:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load i64, ptr %7
  %16 = xor i64 %15, 9
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = or i64 %17, 1
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  store i64 %19, ptr %4
  %20 = load i64, ptr %4
  %21 = load i64, ptr %ds
  %22 = load i64, ptr %alloc
  %23 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %21, 0, 0
  %24 = insertvalue { { i64, i64 }, { i64 } } %23, i64 %22, 0, 1
  %25 = insertvalue { { i64, i64 }, { i64 } } %24, i64 %20, 1, 0
  ret { { i64, i64 }, { i64 } } %25
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lsl_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L290
L290:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load i64, ptr %7
  %16 = shl i64 %15, 4
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = add i64 %17, -15
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  store i64 %19, ptr %4
  %20 = load i64, ptr %4
  %21 = load i64, ptr %ds
  %22 = load i64, ptr %alloc
  %23 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %21, 0, 0
  %24 = insertvalue { { i64, i64 }, { i64 } } %23, i64 %22, 0, 1
  %25 = insertvalue { { i64, i64 }, { i64 } } %24, i64 %20, 1, 0
  ret { { i64, i64 }, { i64 } } %25
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lsr_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L296
L296:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load i64, ptr %7
  %16 = lshr i64 %15, 4
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = or i64 %17, 1
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  store i64 %19, ptr %4
  %20 = load i64, ptr %4
  %21 = load i64, ptr %ds
  %22 = load i64, ptr %alloc
  %23 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %21, 0, 0
  %24 = insertvalue { { i64, i64 }, { i64 } } %23, i64 %22, 0, 1
  %25 = insertvalue { { i64, i64 }, { i64 } } %24, i64 %20, 1, 0
  ret { { i64, i64 }, { i64 } } %25
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__asr_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L302
L302:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load i64, ptr %7
  %16 = ashr i64 %15, 4
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = or i64 %17, 1
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  store i64 %19, ptr %4
  %20 = load i64, ptr %4
  %21 = load i64, ptr %ds
  %22 = load i64, ptr %alloc
  %23 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %21, 0, 0
  %24 = insertvalue { { i64, i64 }, { i64 } } %23, i64 %22, 0, 1
  %25 = insertvalue { { i64, i64 }, { i64 } } %24, i64 %20, 1, 0
  ret { { i64, i64 }, { i64 } } %25
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__popcnt_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L308
L308:
  %16 = load i64, ptr %4
  store i64 %16, ptr %5
  store i64 9223372036854775807, ptr %6
  %17 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %17, ptr %7
  %18 = load ptr addrspace(1), ptr %7
  %19 = getelementptr i8, ptr addrspace(1) %18, i64 16
  store ptr addrspace(1) %19, ptr %8
  %20 = load ptr addrspace(1), ptr %8
  %21 = load ptr addrspace(1), ptr addrspace(1) %20
  store ptr addrspace(1) %21, ptr %9
  %22 = load i64, ptr %9
  %23 = ashr i64 %22, 1
  store i64 %23, ptr %10
  %24 = load i64, ptr %10
  %25 = load i64, ptr %6
  %26 = and i64 %24, %25
  store i64 %26, ptr %11
  %27 = load i64, ptr %11
  %28 = call  i64 @llvm.ctpop.i64(i64 %27)
  store i64 %28, ptr %12
  %29 = load i64, ptr %12
  store i64 %29, ptr %13
  %30 = load i64, ptr %13
  %31 = shl i64 %30, 1
  store i64 %31, ptr %14
  %32 = load i64, ptr %14
  %33 = add i64 %32, 1
  store i64 %33, ptr %15
  %34 = load i64, ptr %15
  store i64 %34, ptr %4
  %35 = load i64, ptr %4
  %36 = load i64, ptr %ds
  %37 = load i64, ptr %alloc
  %38 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %36, 0, 0
  %39 = insertvalue { { i64, i64 }, { i64 } } %38, i64 %37, 0, 1
  %40 = insertvalue { { i64, i64 }, { i64 } } %39, i64 %35, 1, 0
  ret { { i64, i64 }, { i64 } } %40
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__ctz_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  br label %L1
L1:
  br label %L318
L318:
  %17 = load i64, ptr %4
  store i64 %17, ptr %5
  store i64 1, ptr %6
  %18 = load i64, ptr %6
  %19 = shl i64 %18, 63
  store i64 %19, ptr %7
  %20 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %20, ptr %8
  %21 = load ptr addrspace(1), ptr %8
  %22 = getelementptr i8, ptr addrspace(1) %21, i64 16
  store ptr addrspace(1) %22, ptr %9
  %23 = load ptr addrspace(1), ptr %9
  %24 = load ptr addrspace(1), ptr addrspace(1) %23
  store ptr addrspace(1) %24, ptr %10
  %25 = load i64, ptr %10
  %26 = ashr i64 %25, 1
  store i64 %26, ptr %11
  %27 = load i64, ptr %11
  %28 = load i64, ptr %7
  %29 = or i64 %27, %28
  store i64 %29, ptr %12
  %30 = load i64, ptr %12
  %31 = call  i64 @llvm.cttz.i64(i64 %30, i1 0)
  store i64 %31, ptr %13
  %32 = load i64, ptr %13
  store i64 %32, ptr %14
  %33 = load i64, ptr %14
  %34 = shl i64 %33, 1
  store i64 %34, ptr %15
  %35 = load i64, ptr %15
  %36 = add i64 %35, 1
  store i64 %36, ptr %16
  %37 = load i64, ptr %16
  store i64 %37, ptr %4
  %38 = load i64, ptr %4
  %39 = load i64, ptr %ds
  %40 = load i64, ptr %alloc
  %41 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %39, 0, 0
  %42 = insertvalue { { i64, i64 }, { i64 } } %41, i64 %40, 0, 1
  %43 = insertvalue { { i64, i64 }, { i64 } } %42, i64 %38, 1, 0
  ret { { i64, i64 }, { i64 } } %43
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__clz_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  br label %L1
L1:
  br label %L329
L329:
  %17 = load i64, ptr %4
  store i64 %17, ptr %5
  store i64 9223372036854775807, ptr %6
  %18 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %18, ptr %7
  %19 = load ptr addrspace(1), ptr %7
  %20 = getelementptr i8, ptr addrspace(1) %19, i64 16
  store ptr addrspace(1) %20, ptr %8
  %21 = load ptr addrspace(1), ptr %8
  %22 = load ptr addrspace(1), ptr addrspace(1) %21
  store ptr addrspace(1) %22, ptr %9
  %23 = load i64, ptr %9
  %24 = ashr i64 %23, 1
  store i64 %24, ptr %10
  %25 = load i64, ptr %10
  %26 = load i64, ptr %6
  %27 = and i64 %25, %26
  store i64 %27, ptr %11
  %28 = load i64, ptr %11
  %29 = call  i64 @llvm.ctlz.i64(i64 %28, i1 0)
  store i64 %29, ptr %12
  %30 = load i64, ptr %12
  %31 = add i64 %30, -1
  store i64 %31, ptr %13
  %32 = load i64, ptr %13
  store i64 %32, ptr %14
  %33 = load i64, ptr %14
  %34 = shl i64 %33, 1
  store i64 %34, ptr %15
  %35 = load i64, ptr %15
  %36 = add i64 %35, 1
  store i64 %36, ptr %16
  %37 = load i64, ptr %16
  store i64 %37, ptr %4
  %38 = load i64, ptr %4
  %39 = load i64, ptr %ds
  %40 = load i64, ptr %alloc
  %41 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %39, 0, 0
  %42 = insertvalue { { i64, i64 }, { i64 } } %41, i64 %40, 0, 1
  %43 = insertvalue { { i64, i64 }, { i64 } } %42, i64 %38, 1, 0
  ret { { i64, i64 }, { i64 } } %43
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlInt_ops__entry(i64 %0, i64 %1) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca ptr addrspace(1)
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L343
L343:
  %8 = ptrtoint ptr @camlInt_ops to i64
  store i64 %8, ptr %5
  %9 = load i64, ptr %5
  store i64 %9, ptr %6
  %10 = load i64, ptr %6
  %11 = inttoptr i64 %10 to ptr addrspace(1)
  store ptr addrspace(1) %11, ptr %4
  store i64 1, ptr %7
  %12 = load i64, ptr %7
  store i64 %12, ptr %3
  %13 = load ptr addrspace(1), ptr %3
  %14 = load i64, ptr %ds
  %15 = load i64, ptr %alloc
  %16 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %14, 0, 0
  %17 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %16, i64 %15, 0, 1
  %18 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %17, ptr addrspace(1) %13, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %18
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlInt_ops__gc_roots = global { i64 } { i64 0 }, section ".data", align 8
@header.camlInt_ops = global i64 28416, section ".data", align 8
@camlInt_ops = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @camlInt_ops__add_26, ptr @camlInt_ops__sub_27, ptr @camlInt_ops__mul_28, ptr @camlInt_ops__div_29, ptr @camlInt_ops__mod__30, ptr @camlInt_ops__land__31, ptr @camlInt_ops__lor__32, ptr @camlInt_ops__lxor__33, ptr @camlInt_ops__lnot__34, ptr @camlInt_ops__lsl__35, ptr @camlInt_ops__lsr__36, ptr @camlInt_ops__asr__37, i64 9, ptr @camlInt_ops__add_imm_38, ptr @camlInt_ops__sub_imm_39, ptr @camlInt_ops__mul_imm_40, ptr @camlInt_ops__div_imm_41, ptr @camlInt_ops__mod_imm_42, ptr @camlInt_ops__land_imm_43, ptr @camlInt_ops__lor_imm_44, ptr @camlInt_ops__lxor_imm_45, ptr @camlInt_ops__lsl_imm_46, ptr @camlInt_ops__lsr_imm_47, ptr @camlInt_ops__asr_imm_48, ptr @camlInt_ops__popcnt_49, ptr @camlInt_ops__ctz_50, ptr @camlInt_ops__clz_51 }, section ".data", align 8
@header.camlInt_ops__clz_51 = global i64 3063, section ".data", align 8
@camlInt_ops__clz_51 = global { ptr, i64 } { ptr @camlInt_ops__clz_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__ctz_50 = global i64 3063, section ".data", align 8
@camlInt_ops__ctz_50 = global { ptr, i64 } { ptr @camlInt_ops__ctz_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__popcnt_49 = global i64 3063, section ".data", align 8
@camlInt_ops__popcnt_49 = global { ptr, i64 } { ptr @camlInt_ops__popcnt_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__asr_imm_48 = global i64 3063, section ".data", align 8
@camlInt_ops__asr_imm_48 = global { ptr, i64 } { ptr @camlInt_ops__asr_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lsr_imm_47 = global i64 3063, section ".data", align 8
@camlInt_ops__lsr_imm_47 = global { ptr, i64 } { ptr @camlInt_ops__lsr_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lsl_imm_46 = global i64 3063, section ".data", align 8
@camlInt_ops__lsl_imm_46 = global { ptr, i64 } { ptr @camlInt_ops__lsl_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lxor_imm_45 = global i64 3063, section ".data", align 8
@camlInt_ops__lxor_imm_45 = global { ptr, i64 } { ptr @camlInt_ops__lxor_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lor_imm_44 = global i64 3063, section ".data", align 8
@camlInt_ops__lor_imm_44 = global { ptr, i64 } { ptr @camlInt_ops__lor_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__land_imm_43 = global i64 3063, section ".data", align 8
@camlInt_ops__land_imm_43 = global { ptr, i64 } { ptr @camlInt_ops__land_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__mod_imm_42 = global i64 3063, section ".data", align 8
@camlInt_ops__mod_imm_42 = global { ptr, i64 } { ptr @camlInt_ops__mod_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__div_imm_41 = global i64 3063, section ".data", align 8
@camlInt_ops__div_imm_41 = global { ptr, i64 } { ptr @camlInt_ops__div_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__mul_imm_40 = global i64 3063, section ".data", align 8
@camlInt_ops__mul_imm_40 = global { ptr, i64 } { ptr @camlInt_ops__mul_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__sub_imm_39 = global i64 3063, section ".data", align 8
@camlInt_ops__sub_imm_39 = global { ptr, i64 } { ptr @camlInt_ops__sub_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__add_imm_38 = global i64 3063, section ".data", align 8
@camlInt_ops__add_imm_38 = global { ptr, i64 } { ptr @camlInt_ops__add_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__asr__37 = global i64 3063, section ".data", align 8
@camlInt_ops__asr__37 = global { ptr, i64 } { ptr @camlInt_ops__asr__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lsr__36 = global i64 3063, section ".data", align 8
@camlInt_ops__lsr__36 = global { ptr, i64 } { ptr @camlInt_ops__lsr__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lsl__35 = global i64 3063, section ".data", align 8
@camlInt_ops__lsl__35 = global { ptr, i64 } { ptr @camlInt_ops__lsl__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lnot__34 = global i64 3063, section ".data", align 8
@camlInt_ops__lnot__34 = global { ptr, i64 } { ptr @camlInt_ops__lnot__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lxor__33 = global i64 3063, section ".data", align 8
@camlInt_ops__lxor__33 = global { ptr, i64 } { ptr @camlInt_ops__lxor__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lor__32 = global i64 3063, section ".data", align 8
@camlInt_ops__lor__32 = global { ptr, i64 } { ptr @camlInt_ops__lor__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__land__31 = global i64 3063, section ".data", align 8
@camlInt_ops__land__31 = global { ptr, i64 } { ptr @camlInt_ops__land__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__mod__30 = global i64 3063, section ".data", align 8
@camlInt_ops__mod__30 = global { ptr, i64 } { ptr @camlInt_ops__mod__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__div_29 = global i64 3063, section ".data", align 8
@camlInt_ops__div_29 = global { ptr, i64 } { ptr @camlInt_ops__div_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__mul_28 = global i64 3063, section ".data", align 8
@camlInt_ops__mul_28 = global { ptr, i64 } { ptr @camlInt_ops__mul_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__sub_27 = global i64 3063, section ".data", align 8
@camlInt_ops__sub_27 = global { ptr, i64 } { ptr @camlInt_ops__sub_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__add_26 = global i64 3063, section ".data", align 8
@camlInt_ops__add_26 = global { ptr, i64 } { ptr @camlInt_ops__add_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@temp.Int_ops.0 = global { ptr, ptr, ptr } { ptr @caml_int_clz_untagged_to_untagged, ptr @caml_int_ctz_untagged_to_untagged, ptr @caml_int_popcnt_untagged_to_untagged }, section ".data", align 8
@camlInt_ops_data = external global ptr
@caml_exn_Division_by_zero = external global ptr
@caml_int_clz_untagged_to_untagged = external global ptr
@caml_int_ctz_untagged_to_untagged = external global ptr
@caml_int_popcnt_untagged_to_untagged = external global ptr
@caml_raise_exn = external global ptr

declare i64 @llvm.ctlz.i64(i64, i1)
declare i64 @llvm.ctpop.i64(i64)
declare i64 @llvm.cttz.i64(i64, i1)


!0 = !{ i32 1, !"oxcaml_module", !"Int_ops" }
!llvm.module.flags = !{ !0 }
