source_filename = "int_ops.ml"

@camlInt_ops__data_begin = global i64 0
define void @camlInt_ops__code_begin() { ret void }

define i64 @camlInt_ops__add_0_13_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %12 = load i64, ptr %2
  store i64 %12, ptr %3
  store ptr @camlInt_ops__add_13, ptr %4
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  %14 = load i64, ptr %5
  %15 = add i64 %14, 16
  store i64 %15, ptr %5
  %16 = load i64, ptr %5
  %17 = add i64 %16, 0
  %18 = inttoptr i64 %17 to ptr
  %19 = load i64, ptr %18
  store i64 %19, ptr %6
  store ptr @camlInt_ops__add_13, ptr %7
  %20 = load i64, ptr %7
  store i64 %20, ptr %8
  %21 = load i64, ptr %8
  %22 = add i64 %21, 24
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  %24 = add i64 %23, 0
  %25 = inttoptr i64 %24 to ptr
  %26 = load i64, ptr %25
  store i64 %26, ptr %9
  %27 = load i64, ptr %9
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  %29 = load i64, ptr %6
  %30 = add i64 %28, %29
  store i64 %30, ptr %10
  %31 = load i64, ptr %10
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  %33 = add i64 %32, -1
  store i64 %33, ptr %11
  %34 = load i64, ptr %11
  store i64 %34, ptr %2
  %35 = load i64, ptr %2
  ret i64 %35
}

define i64 @camlInt_ops__sub_1_14_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L110
L110:                                                ; preds = %L1
  %12 = load i64, ptr %2
  store i64 %12, ptr %3
  store ptr @camlInt_ops__sub_14, ptr %4
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  %14 = load i64, ptr %5
  %15 = add i64 %14, 16
  store i64 %15, ptr %5
  %16 = load i64, ptr %5
  %17 = add i64 %16, 0
  %18 = inttoptr i64 %17 to ptr
  %19 = load i64, ptr %18
  store i64 %19, ptr %6
  store ptr @camlInt_ops__sub_14, ptr %7
  %20 = load i64, ptr %7
  store i64 %20, ptr %8
  %21 = load i64, ptr %8
  %22 = add i64 %21, 24
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  %24 = add i64 %23, 0
  %25 = inttoptr i64 %24 to ptr
  %26 = load i64, ptr %25
  store i64 %26, ptr %9
  %27 = load i64, ptr %9
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  %29 = load i64, ptr %6
  %30 = sub i64 %28, %29
  store i64 %30, ptr %10
  %31 = load i64, ptr %10
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  %33 = add i64 %32, 1
  store i64 %33, ptr %11
  %34 = load i64, ptr %11
  store i64 %34, ptr %2
  %35 = load i64, ptr %2
  ret i64 %35
}

define i64 @camlInt_ops__mul_2_15_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  %13 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L119
L119:                                                ; preds = %L1
  %14 = load i64, ptr %2
  store i64 %14, ptr %3
  store ptr @camlInt_ops__mul_15, ptr %4
  %15 = load i64, ptr %4
  store i64 %15, ptr %5
  %16 = load i64, ptr %5
  %17 = add i64 %16, 16
  store i64 %17, ptr %5
  %18 = load i64, ptr %5
  %19 = add i64 %18, 0
  %20 = inttoptr i64 %19 to ptr
  %21 = load i64, ptr %20
  store i64 %21, ptr %6
  %22 = load i64, ptr %6
  store i64 %22, ptr %7
  %23 = load i64, ptr %7
  %24 = ashr i64 %23, 1
  store i64 %24, ptr %7
  store ptr @camlInt_ops__mul_15, ptr %8
  %25 = load i64, ptr %8
  store i64 %25, ptr %9
  %26 = load i64, ptr %9
  %27 = add i64 %26, 24
  store i64 %27, ptr %9
  %28 = load i64, ptr %9
  %29 = add i64 %28, 0
  %30 = inttoptr i64 %29 to ptr
  %31 = load i64, ptr %30
  store i64 %31, ptr %10
  %32 = load i64, ptr %10
  store i64 %32, ptr %11
  %33 = load i64, ptr %11
  %34 = add i64 %33, -1
  store i64 %34, ptr %11
  %35 = load i64, ptr %11
  store i64 %35, ptr %12
  %36 = load i64, ptr %12
  %37 = load i64, ptr %7
  %38 = mul i64 %36, %37
  store i64 %38, ptr %12
  %39 = load i64, ptr %12
  store i64 %39, ptr %13
  %40 = load i64, ptr %13
  %41 = add i64 %40, 1
  store i64 %41, ptr %13
  %42 = load i64, ptr %13
  store i64 %42, ptr %2
  %43 = load i64, ptr %2
  ret i64 %43
}

define i64 @camlInt_ops__div_3_16_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  %13 = alloca i64 
  %14 = alloca i64 
  %15 = alloca i64 
  %16 = alloca i64 
  %17 = alloca i64 
  %18 = alloca i64 
  %19 = alloca i64 
  %20 = alloca i64 
  %21 = alloca i64 
  %22 = alloca i64 
  %23 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L130
L130:                                                ; preds = %L1
  %24 = load i64, ptr %2
  store i64 %24, ptr %4
  store ptr @camlInt_ops__div_16, ptr %5
  %25 = load i64, ptr %5
  store i64 %25, ptr %6
  %26 = load i64, ptr %6
  %27 = add i64 %26, 16
  store i64 %27, ptr %6
  %28 = load i64, ptr %6
  %29 = add i64 %28, 0
  %30 = inttoptr i64 %29 to ptr
  %31 = load i64, ptr %30
  store i64 %31, ptr %7
  %32 = load i64, ptr %7
  %33 = icmp slt i64 %32, 1
  br i1 %33, label %L139, label %34
34:
  %35 = load i64, ptr %7
  %36 = icmp sgt i64 %35, 1
  br i1 %36, label %L139, label %L134
L134:                                                ; preds = %L130
  store i64 1, ptr %8
  %37 = load i64, ptr %8
  store i64 %37, ptr %2
  %38 = load i64, ptr %2
  ret i64 %38
L139:                                                ; preds = %L130
  store ptr @camlInt_ops__div_16, ptr %9
  %39 = load i64, ptr %9
  store i64 %39, ptr %10
  %40 = load i64, ptr %10
  %41 = add i64 %40, 16
  store i64 %41, ptr %10
  %42 = load i64, ptr %10
  %43 = add i64 %42, 0
  %44 = inttoptr i64 %43 to ptr
  %45 = load i64, ptr %44
  store i64 %45, ptr %11
  %46 = load i64, ptr %11
  %47 = icmp slt i64 %46, 1
  br i1 %47, label %L143, label %48
48:
  %49 = load i64, ptr %11
  %50 = icmp sgt i64 %49, 1
  br i1 %50, label %L143, label %L157
L143:                                                ; preds = %L139
  store ptr @camlInt_ops__div_16, ptr %12
  %51 = load i64, ptr %12
  store i64 %51, ptr %13
  %52 = load i64, ptr %13
  %53 = add i64 %52, 16
  store i64 %53, ptr %13
  %54 = load i64, ptr %13
  %55 = add i64 %54, 0
  %56 = inttoptr i64 %55 to ptr
  %57 = load i64, ptr %56
  store i64 %57, ptr %14
  %58 = load i64, ptr %14
  store i64 %58, ptr %15
  %59 = load i64, ptr %15
  %60 = ashr i64 %59, 1
  store i64 %60, ptr %15
  store ptr @camlInt_ops__div_16, ptr %16
  %61 = load i64, ptr %16
  store i64 %61, ptr %17
  %62 = load i64, ptr %17
  %63 = add i64 %62, 24
  store i64 %63, ptr %17
  %64 = load i64, ptr %17
  %65 = add i64 %64, 0
  %66 = inttoptr i64 %65 to ptr
  %67 = load i64, ptr %66
  store i64 %67, ptr %18
  %68 = load i64, ptr %18
  store i64 %68, ptr %19
  %69 = load i64, ptr %19
  %70 = ashr i64 %69, 1
  store i64 %70, ptr %19
  %71 = load i64, ptr %19
  store i64 %71, ptr %2
  %72 = load i64, ptr %15
  store i64 %72, ptr %3
  %73 = load i64, ptr %2
  %74 = load i64, ptr %3
  %75 = sdiv i64 %73, %74
  store i64 %75, ptr %2
  %76 = load i64, ptr %2
  store i64 %76, ptr %20
  %77 = load i64, ptr %20
  store i64 %77, ptr %21
  %78 = load i64, ptr %21
  %79 = shl i64 %78, 1
  store i64 %79, ptr %21
  %80 = load i64, ptr %21
  store i64 %80, ptr %22
  %81 = load i64, ptr %22
  %82 = add i64 %81, 1
  store i64 %82, ptr %22
  %83 = load i64, ptr %22
  store i64 %83, ptr %2
  %84 = load i64, ptr %2
  ret i64 %84
L157:                                                ; preds = %L139
  store ptr @caml_exn_Division_by_zero, ptr %23
  %85 = load i64, ptr %23
  store i64 %85, ptr %2
  call void @llvm.trap()
  unreachable
}

define i64 @camlInt_ops__mod__4_17_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  %13 = alloca i64 
  %14 = alloca i64 
  %15 = alloca i64 
  %16 = alloca i64 
  %17 = alloca i64 
  %18 = alloca i64 
  %19 = alloca i64 
  %20 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L162
L162:                                                ; preds = %L1
  %21 = load i64, ptr %2
  store i64 %21, ptr %5
  store ptr @camlInt_ops__mod__17, ptr %6
  %22 = load i64, ptr %6
  store i64 %22, ptr %7
  %23 = load i64, ptr %7
  %24 = add i64 %23, 16
  store i64 %24, ptr %7
  %25 = load i64, ptr %7
  %26 = add i64 %25, 0
  %27 = inttoptr i64 %26 to ptr
  %28 = load i64, ptr %27
  store i64 %28, ptr %8
  %29 = load i64, ptr %8
  %30 = icmp slt i64 %29, 1
  br i1 %30, label %L169, label %31
31:
  %32 = load i64, ptr %8
  %33 = icmp sgt i64 %32, 1
  br i1 %33, label %L169, label %L183
L169:                                                ; preds = %L162
  store ptr @camlInt_ops__mod__17, ptr %9
  %34 = load i64, ptr %9
  store i64 %34, ptr %10
  %35 = load i64, ptr %10
  %36 = add i64 %35, 16
  store i64 %36, ptr %10
  %37 = load i64, ptr %10
  %38 = add i64 %37, 0
  %39 = inttoptr i64 %38 to ptr
  %40 = load i64, ptr %39
  store i64 %40, ptr %11
  %41 = load i64, ptr %11
  store i64 %41, ptr %12
  %42 = load i64, ptr %12
  %43 = ashr i64 %42, 1
  store i64 %43, ptr %12
  store ptr @camlInt_ops__mod__17, ptr %13
  %44 = load i64, ptr %13
  store i64 %44, ptr %14
  %45 = load i64, ptr %14
  %46 = add i64 %45, 24
  store i64 %46, ptr %14
  %47 = load i64, ptr %14
  %48 = add i64 %47, 0
  %49 = inttoptr i64 %48 to ptr
  %50 = load i64, ptr %49
  store i64 %50, ptr %15
  %51 = load i64, ptr %15
  store i64 %51, ptr %16
  %52 = load i64, ptr %16
  %53 = ashr i64 %52, 1
  store i64 %53, ptr %16
  %54 = load i64, ptr %16
  store i64 %54, ptr %2
  %55 = load i64, ptr %12
  store i64 %55, ptr %4
  %56 = load i64, ptr %2
  %57 = load i64, ptr %4
  %58 = srem i64 %56, %57
  store i64 %58, ptr %3
  %59 = load i64, ptr %3
  store i64 %59, ptr %17
  %60 = load i64, ptr %17
  store i64 %60, ptr %18
  %61 = load i64, ptr %18
  %62 = shl i64 %61, 1
  store i64 %62, ptr %18
  %63 = load i64, ptr %18
  store i64 %63, ptr %19
  %64 = load i64, ptr %19
  %65 = add i64 %64, 1
  store i64 %65, ptr %19
  %66 = load i64, ptr %19
  store i64 %66, ptr %2
  %67 = load i64, ptr %2
  ret i64 %67
L183:                                                ; preds = %L162
  store ptr @caml_exn_Division_by_zero, ptr %20
  %68 = load i64, ptr %20
  store i64 %68, ptr %2
  call void @llvm.trap()
  unreachable
}

define i64 @camlInt_ops__land__5_18_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L187
L187:                                                ; preds = %L1
  %11 = load i64, ptr %2
  store i64 %11, ptr %3
  store ptr @camlInt_ops__land__18, ptr %4
  %12 = load i64, ptr %4
  store i64 %12, ptr %5
  %13 = load i64, ptr %5
  %14 = add i64 %13, 16
  store i64 %14, ptr %5
  %15 = load i64, ptr %5
  %16 = add i64 %15, 0
  %17 = inttoptr i64 %16 to ptr
  %18 = load i64, ptr %17
  store i64 %18, ptr %6
  store ptr @camlInt_ops__land__18, ptr %7
  %19 = load i64, ptr %7
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  %21 = add i64 %20, 24
  store i64 %21, ptr %8
  %22 = load i64, ptr %8
  %23 = add i64 %22, 0
  %24 = inttoptr i64 %23 to ptr
  %25 = load i64, ptr %24
  store i64 %25, ptr %9
  %26 = load i64, ptr %9
  store i64 %26, ptr %10
  %27 = load i64, ptr %10
  %28 = load i64, ptr %6
  %29 = and i64 %27, %28
  store i64 %29, ptr %10
  %30 = load i64, ptr %10
  store i64 %30, ptr %2
  %31 = load i64, ptr %2
  ret i64 %31
}

define i64 @camlInt_ops__lor__7_20_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L195
L195:                                                ; preds = %L1
  %11 = load i64, ptr %2
  store i64 %11, ptr %3
  store ptr @camlInt_ops__lor__20, ptr %4
  %12 = load i64, ptr %4
  store i64 %12, ptr %5
  %13 = load i64, ptr %5
  %14 = add i64 %13, 16
  store i64 %14, ptr %5
  %15 = load i64, ptr %5
  %16 = add i64 %15, 0
  %17 = inttoptr i64 %16 to ptr
  %18 = load i64, ptr %17
  store i64 %18, ptr %6
  store ptr @camlInt_ops__lor__20, ptr %7
  %19 = load i64, ptr %7
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  %21 = add i64 %20, 24
  store i64 %21, ptr %8
  %22 = load i64, ptr %8
  %23 = add i64 %22, 0
  %24 = inttoptr i64 %23 to ptr
  %25 = load i64, ptr %24
  store i64 %25, ptr %9
  %26 = load i64, ptr %9
  store i64 %26, ptr %10
  %27 = load i64, ptr %10
  %28 = load i64, ptr %6
  %29 = or i64 %27, %28
  store i64 %29, ptr %10
  %30 = load i64, ptr %10
  store i64 %30, ptr %2
  %31 = load i64, ptr %2
  ret i64 %31
}

define i64 @camlInt_ops__lxor__8_21_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L203
L203:                                                ; preds = %L1
  %12 = load i64, ptr %2
  store i64 %12, ptr %3
  store ptr @camlInt_ops__lxor__21, ptr %4
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  %14 = load i64, ptr %5
  %15 = add i64 %14, 16
  store i64 %15, ptr %5
  %16 = load i64, ptr %5
  %17 = add i64 %16, 0
  %18 = inttoptr i64 %17 to ptr
  %19 = load i64, ptr %18
  store i64 %19, ptr %6
  store ptr @camlInt_ops__lxor__21, ptr %7
  %20 = load i64, ptr %7
  store i64 %20, ptr %8
  %21 = load i64, ptr %8
  %22 = add i64 %21, 24
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  %24 = add i64 %23, 0
  %25 = inttoptr i64 %24 to ptr
  %26 = load i64, ptr %25
  store i64 %26, ptr %9
  %27 = load i64, ptr %9
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  %29 = load i64, ptr %6
  %30 = xor i64 %28, %29
  store i64 %30, ptr %10
  %31 = load i64, ptr %10
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  %33 = or i64 %32, 1
  store i64 %33, ptr %11
  %34 = load i64, ptr %11
  store i64 %34, ptr %2
  %35 = load i64, ptr %2
  ret i64 %35
}

define i64 @camlInt_ops__lnot__9_22_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L212
L212:                                                ; preds = %L1
  %9 = load i64, ptr %2
  store i64 %9, ptr %3
  store ptr @camlInt_ops__lnot__22, ptr %4
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = load i64, ptr %5
  %12 = add i64 %11, 16
  store i64 %12, ptr %5
  %13 = load i64, ptr %5
  %14 = add i64 %13, 0
  %15 = inttoptr i64 %14 to ptr
  %16 = load i64, ptr %15
  store i64 %16, ptr %6
  %17 = load i64, ptr %6
  store i64 %17, ptr %7
  %18 = load i64, ptr %7
  %19 = xor i64 %18, -1
  store i64 %19, ptr %7
  %20 = load i64, ptr %7
  store i64 %20, ptr %8
  %21 = load i64, ptr %8
  %22 = or i64 %21, 1
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  store i64 %23, ptr %2
  %24 = load i64, ptr %2
  ret i64 %24
}

define i64 @camlInt_ops__lsl__10_23_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  %13 = alloca i64 
  %14 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L219
L219:                                                ; preds = %L1
  %15 = load i64, ptr %2
  store i64 %15, ptr %4
  store ptr @camlInt_ops__lsl__23, ptr %5
  %16 = load i64, ptr %5
  store i64 %16, ptr %6
  %17 = load i64, ptr %6
  %18 = add i64 %17, 16
  store i64 %18, ptr %6
  %19 = load i64, ptr %6
  %20 = add i64 %19, 0
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  store i64 %22, ptr %7
  %23 = load i64, ptr %7
  store i64 %23, ptr %8
  %24 = load i64, ptr %8
  %25 = ashr i64 %24, 1
  store i64 %25, ptr %8
  store ptr @camlInt_ops__lsl__23, ptr %9
  %26 = load i64, ptr %9
  store i64 %26, ptr %10
  %27 = load i64, ptr %10
  %28 = add i64 %27, 24
  store i64 %28, ptr %10
  %29 = load i64, ptr %10
  %30 = add i64 %29, 0
  %31 = inttoptr i64 %30 to ptr
  %32 = load i64, ptr %31
  store i64 %32, ptr %11
  %33 = load i64, ptr %11
  store i64 %33, ptr %12
  %34 = load i64, ptr %12
  %35 = add i64 %34, -1
  store i64 %35, ptr %12
  %36 = load i64, ptr %12
  store i64 %36, ptr %13
  %37 = load i64, ptr %8
  store i64 %37, ptr %3
  %38 = load i64, ptr %13
  %39 = load i64, ptr %3
  %40 = shl i64 %38, %39
  store i64 %40, ptr %13
  %41 = load i64, ptr %13
  store i64 %41, ptr %14
  %42 = load i64, ptr %14
  %43 = add i64 %42, 1
  store i64 %43, ptr %14
  %44 = load i64, ptr %14
  store i64 %44, ptr %2
  %45 = load i64, ptr %2
  ret i64 %45
}

define i64 @camlInt_ops__lsr__11_24_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  %13 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L230
L230:                                                ; preds = %L1
  %14 = load i64, ptr %2
  store i64 %14, ptr %4
  store ptr @camlInt_ops__lsr__24, ptr %5
  %15 = load i64, ptr %5
  store i64 %15, ptr %6
  %16 = load i64, ptr %6
  %17 = add i64 %16, 16
  store i64 %17, ptr %6
  %18 = load i64, ptr %6
  %19 = add i64 %18, 0
  %20 = inttoptr i64 %19 to ptr
  %21 = load i64, ptr %20
  store i64 %21, ptr %7
  %22 = load i64, ptr %7
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  %24 = ashr i64 %23, 1
  store i64 %24, ptr %8
  store ptr @camlInt_ops__lsr__24, ptr %9
  %25 = load i64, ptr %9
  store i64 %25, ptr %10
  %26 = load i64, ptr %10
  %27 = add i64 %26, 24
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  %29 = add i64 %28, 0
  %30 = inttoptr i64 %29 to ptr
  %31 = load i64, ptr %30
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  store i64 %32, ptr %12
  %33 = load i64, ptr %8
  store i64 %33, ptr %3
  %34 = load i64, ptr %12
  %35 = load i64, ptr %3
  %36 = lshr i64 %34, %35
  store i64 %36, ptr %12
  %37 = load i64, ptr %12
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  %39 = or i64 %38, 1
  store i64 %39, ptr %13
  %40 = load i64, ptr %13
  store i64 %40, ptr %2
  %41 = load i64, ptr %2
  ret i64 %41
}

define i64 @camlInt_ops__asr__12_25_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  %13 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L240
L240:                                                ; preds = %L1
  %14 = load i64, ptr %2
  store i64 %14, ptr %4
  store ptr @camlInt_ops__asr__25, ptr %5
  %15 = load i64, ptr %5
  store i64 %15, ptr %6
  %16 = load i64, ptr %6
  %17 = add i64 %16, 16
  store i64 %17, ptr %6
  %18 = load i64, ptr %6
  %19 = add i64 %18, 0
  %20 = inttoptr i64 %19 to ptr
  %21 = load i64, ptr %20
  store i64 %21, ptr %7
  %22 = load i64, ptr %7
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  %24 = ashr i64 %23, 1
  store i64 %24, ptr %8
  store ptr @camlInt_ops__asr__25, ptr %9
  %25 = load i64, ptr %9
  store i64 %25, ptr %10
  %26 = load i64, ptr %10
  %27 = add i64 %26, 24
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  %29 = add i64 %28, 0
  %30 = inttoptr i64 %29 to ptr
  %31 = load i64, ptr %30
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  store i64 %32, ptr %12
  %33 = load i64, ptr %8
  store i64 %33, ptr %3
  %34 = load i64, ptr %12
  %35 = load i64, ptr %3
  %36 = ashr i64 %34, %35
  store i64 %36, ptr %12
  %37 = load i64, ptr %12
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  %39 = or i64 %38, 1
  store i64 %39, ptr %13
  %40 = load i64, ptr %13
  store i64 %40, ptr %2
  %41 = load i64, ptr %2
  ret i64 %41
}

define i64 @camlInt_ops__entry()  {
  %1 = alloca i64 
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  %13 = alloca i64 
  %14 = alloca i64 
  %15 = alloca i64 
  %16 = alloca i64 
  %17 = alloca i64 
  %18 = alloca i64 
  %19 = alloca i64 
  %20 = alloca i64 
  %21 = alloca i64 
  %22 = alloca i64 
  %23 = alloca i64 
  %24 = alloca i64 
  %25 = alloca i64 
  %26 = alloca i64 
  %27 = alloca i64 
  %28 = alloca i64 
  %29 = alloca i64 
  %30 = alloca i64 
  %31 = alloca i64 
  %32 = alloca i64 
  %33 = alloca i64 
  %34 = alloca i64 
  %35 = alloca i64 
  %36 = alloca i64 
  %37 = alloca i64 
  %38 = alloca i64 
  %39 = alloca i64 
  %40 = alloca i64 
  %41 = alloca i64 
  %42 = alloca i64 
  %43 = alloca i64 
  %44 = alloca i64 
  %45 = alloca i64 
  %46 = alloca i64 
  %47 = alloca i64 
  %48 = alloca i64 
  %49 = alloca i64 
  %50 = alloca i64 
  %51 = alloca i64 
  %52 = alloca i64 
  %53 = alloca i64 
  %54 = alloca i64 
  %55 = alloca i64 
  %56 = alloca i64 
  %57 = alloca i64 
  %58 = alloca i64 
  br label %L1
L1:
  br label %L253
L253:                                                ; preds = %L1
  store i64 -29, ptr %3
  %59 = load i64, ptr %3
  store i64 %59, ptr %3
  %60 = load i64, ptr %3
  store i64 %60, ptr %4
  store ptr @camlInt_ops__add_13, ptr %5
  %61 = load i64, ptr %5
  store i64 %61, ptr %6
  %62 = load i64, ptr %6
  %63 = add i64 %62, 24
  store i64 %63, ptr %6
  %64 = load i64, ptr %6
  %65 = add i64 %64, 0
  %66 = inttoptr i64 %65 to ptr
  %67 = load i64, ptr %4
  store i64 %67, ptr %66
  store ptr @camlInt_ops__sub_14, ptr %7
  %68 = load i64, ptr %7
  store i64 %68, ptr %8
  %69 = load i64, ptr %8
  %70 = add i64 %69, 24
  store i64 %70, ptr %8
  %71 = load i64, ptr %8
  %72 = add i64 %71, 0
  %73 = inttoptr i64 %72 to ptr
  %74 = load i64, ptr %4
  store i64 %74, ptr %73
  store ptr @camlInt_ops__mul_15, ptr %9
  %75 = load i64, ptr %9
  store i64 %75, ptr %10
  %76 = load i64, ptr %10
  %77 = add i64 %76, 24
  store i64 %77, ptr %10
  %78 = load i64, ptr %10
  %79 = add i64 %78, 0
  %80 = inttoptr i64 %79 to ptr
  %81 = load i64, ptr %4
  store i64 %81, ptr %80
  store ptr @camlInt_ops__div_16, ptr %11
  %82 = load i64, ptr %11
  store i64 %82, ptr %12
  %83 = load i64, ptr %12
  %84 = add i64 %83, 24
  store i64 %84, ptr %12
  %85 = load i64, ptr %12
  %86 = add i64 %85, 0
  %87 = inttoptr i64 %86 to ptr
  %88 = load i64, ptr %4
  store i64 %88, ptr %87
  store ptr @camlInt_ops__mod__17, ptr %13
  %89 = load i64, ptr %13
  store i64 %89, ptr %14
  %90 = load i64, ptr %14
  %91 = add i64 %90, 24
  store i64 %91, ptr %14
  %92 = load i64, ptr %14
  %93 = add i64 %92, 0
  %94 = inttoptr i64 %93 to ptr
  %95 = load i64, ptr %4
  store i64 %95, ptr %94
  store ptr @camlInt_ops__land__18, ptr %15
  %96 = load i64, ptr %15
  store i64 %96, ptr %16
  %97 = load i64, ptr %16
  %98 = add i64 %97, 24
  store i64 %98, ptr %16
  %99 = load i64, ptr %16
  %100 = add i64 %99, 0
  %101 = inttoptr i64 %100 to ptr
  %102 = load i64, ptr %4
  store i64 %102, ptr %101
  store ptr @camlInt_ops__lor__20, ptr %17
  %103 = load i64, ptr %17
  store i64 %103, ptr %18
  %104 = load i64, ptr %18
  %105 = add i64 %104, 24
  store i64 %105, ptr %18
  %106 = load i64, ptr %18
  %107 = add i64 %106, 0
  %108 = inttoptr i64 %107 to ptr
  %109 = load i64, ptr %4
  store i64 %109, ptr %108
  store ptr @camlInt_ops__lxor__21, ptr %19
  %110 = load i64, ptr %19
  store i64 %110, ptr %20
  %111 = load i64, ptr %20
  %112 = add i64 %111, 24
  store i64 %112, ptr %20
  %113 = load i64, ptr %20
  %114 = add i64 %113, 0
  %115 = inttoptr i64 %114 to ptr
  %116 = load i64, ptr %4
  store i64 %116, ptr %115
  store ptr @camlInt_ops__lnot__22, ptr %21
  %117 = load i64, ptr %21
  store i64 %117, ptr %22
  %118 = load i64, ptr %22
  %119 = add i64 %118, 16
  store i64 %119, ptr %22
  %120 = load i64, ptr %22
  %121 = add i64 %120, 0
  %122 = inttoptr i64 %121 to ptr
  %123 = load i64, ptr %4
  store i64 %123, ptr %122
  store ptr @camlInt_ops__lsl__23, ptr %23
  %124 = load i64, ptr %23
  store i64 %124, ptr %24
  %125 = load i64, ptr %24
  %126 = add i64 %125, 24
  store i64 %126, ptr %24
  %127 = load i64, ptr %24
  %128 = add i64 %127, 0
  %129 = inttoptr i64 %128 to ptr
  %130 = load i64, ptr %4
  store i64 %130, ptr %129
  store ptr @camlInt_ops__lsr__24, ptr %25
  %131 = load i64, ptr %25
  store i64 %131, ptr %26
  %132 = load i64, ptr %26
  %133 = add i64 %132, 24
  store i64 %133, ptr %26
  %134 = load i64, ptr %26
  %135 = add i64 %134, 0
  %136 = inttoptr i64 %135 to ptr
  %137 = load i64, ptr %4
  store i64 %137, ptr %136
  store ptr @camlInt_ops__asr__25, ptr %27
  %138 = load i64, ptr %27
  store i64 %138, ptr %28
  %139 = load i64, ptr %28
  %140 = add i64 %139, 24
  store i64 %140, ptr %28
  %141 = load i64, ptr %28
  %142 = add i64 %141, 0
  %143 = inttoptr i64 %142 to ptr
  %144 = load i64, ptr %4
  store i64 %144, ptr %143
  store ptr @camlInt_ops, ptr %29
  %145 = load i64, ptr %29
  %146 = add i64 %145, 0
  %147 = inttoptr i64 %146 to ptr
  %148 = load i64, ptr %4
  store i64 %148, ptr %147
  store i64 9, ptr %30
  %149 = load i64, ptr %30
  store i64 %149, ptr %30
  %150 = load i64, ptr %30
  store i64 %150, ptr %31
  store ptr @camlInt_ops__add_13, ptr %32
  %151 = load i64, ptr %32
  store i64 %151, ptr %33
  %152 = load i64, ptr %33
  %153 = add i64 %152, 16
  store i64 %153, ptr %33
  %154 = load i64, ptr %33
  %155 = add i64 %154, 0
  %156 = inttoptr i64 %155 to ptr
  %157 = load i64, ptr %31
  store i64 %157, ptr %156
  store ptr @camlInt_ops__sub_14, ptr %34
  %158 = load i64, ptr %34
  store i64 %158, ptr %35
  %159 = load i64, ptr %35
  %160 = add i64 %159, 16
  store i64 %160, ptr %35
  %161 = load i64, ptr %35
  %162 = add i64 %161, 0
  %163 = inttoptr i64 %162 to ptr
  %164 = load i64, ptr %31
  store i64 %164, ptr %163
  store ptr @camlInt_ops__mul_15, ptr %36
  %165 = load i64, ptr %36
  store i64 %165, ptr %37
  %166 = load i64, ptr %37
  %167 = add i64 %166, 16
  store i64 %167, ptr %37
  %168 = load i64, ptr %37
  %169 = add i64 %168, 0
  %170 = inttoptr i64 %169 to ptr
  %171 = load i64, ptr %31
  store i64 %171, ptr %170
  store ptr @camlInt_ops__div_16, ptr %38
  %172 = load i64, ptr %38
  store i64 %172, ptr %39
  %173 = load i64, ptr %39
  %174 = add i64 %173, 16
  store i64 %174, ptr %39
  %175 = load i64, ptr %39
  %176 = add i64 %175, 0
  %177 = inttoptr i64 %176 to ptr
  %178 = load i64, ptr %31
  store i64 %178, ptr %177
  store ptr @camlInt_ops__mod__17, ptr %40
  %179 = load i64, ptr %40
  store i64 %179, ptr %41
  %180 = load i64, ptr %41
  %181 = add i64 %180, 16
  store i64 %181, ptr %41
  %182 = load i64, ptr %41
  %183 = add i64 %182, 0
  %184 = inttoptr i64 %183 to ptr
  %185 = load i64, ptr %31
  store i64 %185, ptr %184
  store ptr @camlInt_ops__land__18, ptr %42
  %186 = load i64, ptr %42
  store i64 %186, ptr %43
  %187 = load i64, ptr %43
  %188 = add i64 %187, 16
  store i64 %188, ptr %43
  %189 = load i64, ptr %43
  %190 = add i64 %189, 0
  %191 = inttoptr i64 %190 to ptr
  %192 = load i64, ptr %31
  store i64 %192, ptr %191
  store ptr @camlInt_ops__lor__20, ptr %44
  %193 = load i64, ptr %44
  store i64 %193, ptr %45
  %194 = load i64, ptr %45
  %195 = add i64 %194, 16
  store i64 %195, ptr %45
  %196 = load i64, ptr %45
  %197 = add i64 %196, 0
  %198 = inttoptr i64 %197 to ptr
  %199 = load i64, ptr %31
  store i64 %199, ptr %198
  store ptr @camlInt_ops__lxor__21, ptr %46
  %200 = load i64, ptr %46
  store i64 %200, ptr %47
  %201 = load i64, ptr %47
  %202 = add i64 %201, 16
  store i64 %202, ptr %47
  %203 = load i64, ptr %47
  %204 = add i64 %203, 0
  %205 = inttoptr i64 %204 to ptr
  %206 = load i64, ptr %31
  store i64 %206, ptr %205
  store ptr @camlInt_ops__lsl__23, ptr %48
  %207 = load i64, ptr %48
  store i64 %207, ptr %49
  %208 = load i64, ptr %49
  %209 = add i64 %208, 16
  store i64 %209, ptr %49
  %210 = load i64, ptr %49
  %211 = add i64 %210, 0
  %212 = inttoptr i64 %211 to ptr
  %213 = load i64, ptr %31
  store i64 %213, ptr %212
  store ptr @camlInt_ops__lsr__24, ptr %50
  %214 = load i64, ptr %50
  store i64 %214, ptr %51
  %215 = load i64, ptr %51
  %216 = add i64 %215, 16
  store i64 %216, ptr %51
  %217 = load i64, ptr %51
  %218 = add i64 %217, 0
  %219 = inttoptr i64 %218 to ptr
  %220 = load i64, ptr %31
  store i64 %220, ptr %219
  store ptr @camlInt_ops__asr__25, ptr %52
  %221 = load i64, ptr %52
  store i64 %221, ptr %53
  %222 = load i64, ptr %53
  %223 = add i64 %222, 16
  store i64 %223, ptr %53
  %224 = load i64, ptr %53
  %225 = add i64 %224, 0
  %226 = inttoptr i64 %225 to ptr
  %227 = load i64, ptr %31
  store i64 %227, ptr %226
  store ptr @camlInt_ops, ptr %54
  %228 = load i64, ptr %54
  store i64 %228, ptr %55
  %229 = load i64, ptr %55
  %230 = add i64 %229, 8
  store i64 %230, ptr %55
  %231 = load i64, ptr %55
  %232 = add i64 %231, 0
  %233 = inttoptr i64 %232 to ptr
  %234 = load i64, ptr %31
  store i64 %234, ptr %233
  store ptr @camlInt_ops, ptr %56
  %235 = load i64, ptr %56
  store i64 %235, ptr %57
  %236 = load i64, ptr %57
  store i64 %236, ptr %2
  store i64 1, ptr %58
  %237 = load i64, ptr %58
  store i64 %237, ptr %1
  %238 = load i64, ptr %1
  ret i64 %238
}

@camlInt_ops__gc_roots = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64 } { ptr @camlInt_ops, ptr @camlInt_ops__asr__25, ptr @camlInt_ops__lsr__24, ptr @camlInt_ops__lsl__23, ptr @camlInt_ops__lnot__22, ptr @camlInt_ops__lxor__21, ptr @camlInt_ops__lor__20, ptr @camlInt_ops__land__18, ptr @camlInt_ops__mod__17, ptr @camlInt_ops__div_16, ptr @camlInt_ops__mul_15, ptr @camlInt_ops__sub_14, ptr @camlInt_ops__add_13, i64 0, i64 15104 }
@camlInt_ops = global { i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64 } { i64 1, i64 1, ptr @camlInt_ops__add_13, ptr @camlInt_ops__sub_14, ptr @camlInt_ops__mul_15, ptr @camlInt_ops__div_16, ptr @camlInt_ops__mod__17, ptr @camlInt_ops__land__18, ptr @camlInt_ops__lor__20, ptr @camlInt_ops__lxor__21, ptr @camlInt_ops__lnot__22, ptr @camlInt_ops__lsl__23, ptr @camlInt_ops__lsr__24, ptr @camlInt_ops__asr__25, i64 5111 }
@camlInt_ops__asr__25 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__asr__12_25_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__lsr__24 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__lsr__11_24_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__lsl__23 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__lsl__10_23_code, i64 108086391056891913, i64 1, i64 1, i64 4087 }
@camlInt_ops__lnot__22 = global { ptr, i64, i64, i64 } { ptr @camlInt_ops__lnot__9_22_code, i64 108086391056891911, i64 1, i64 5111 }
@camlInt_ops__lxor__21 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__lxor__8_21_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__lor__20 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__lor__7_20_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__land__18 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__land__5_18_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__mod__17 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__mod__4_17_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__div_16 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__div_3_16_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__mul_15 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__mul_2_15_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__sub_14 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__sub_1_14_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__add_13 = global { ptr, i64, i64, i64 } { ptr @camlInt_ops__add_0_13_code, i64 108086391056891913, i64 1, i64 1 }
@caml_exn_Division_by_zero = external global ptr

@camlInt_ops__data_end = global i64 0
define void @camlInt_ops__code_end() { ret void }
@camlInt_ops__frametable = global i64 0
