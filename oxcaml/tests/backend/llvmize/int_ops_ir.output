source_filename = "int_ops.ml"

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__add_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca i64
  br label %L1
L1:
  br label %L101
L101:
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  %14 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %14, ptr %6
  %15 = load i64, ptr %6
  %16 = inttoptr i64 %15 to ptr addrspace(1)
  store ptr addrspace(1) %16, ptr %7
  %17 = load ptr addrspace(1), ptr %7
  %18 = getelementptr i8, ptr addrspace(1) %17, i64 8
  store ptr addrspace(1) %18, ptr %7
  %19 = load ptr addrspace(1), ptr %7
  %20 = load ptr addrspace(1), ptr addrspace(1) %19
  store ptr addrspace(1) %20, ptr %8
  %21 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %21, ptr %9
  %22 = load i64, ptr %9
  %23 = inttoptr i64 %22 to ptr
  %24 = load ptr addrspace(1), ptr %23
  store ptr addrspace(1) %24, ptr %10
  %25 = load ptr addrspace(1), ptr %10
  %26 = ptrtoint ptr addrspace(1) %25 to i64
  store i64 %26, ptr %11
  %27 = load i64, ptr %11
  %28 = load i64, ptr %8
  %29 = add i64 %27, %28
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  store i64 %30, ptr %12
  %31 = load i64, ptr %12
  %32 = add i64 %31, -1
  store i64 %32, ptr %12
  %33 = load i64, ptr %12
  store i64 %33, ptr %4
  %34 = load i64, ptr %4
  %35 = load i64, ptr %ds
  %36 = load i64, ptr %alloc
  %37 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %35, 0, 0
  %38 = insertvalue { { i64, i64 }, { i64 } } %37, i64 %36, 0, 1
  %39 = insertvalue { { i64, i64 }, { i64 } } %38, i64 %34, 1, 0
  ret { { i64, i64 }, { i64 } } %39
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__sub_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca i64
  br label %L1
L1:
  br label %L109
L109:
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  %14 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %14, ptr %6
  %15 = load i64, ptr %6
  %16 = inttoptr i64 %15 to ptr addrspace(1)
  store ptr addrspace(1) %16, ptr %7
  %17 = load ptr addrspace(1), ptr %7
  %18 = getelementptr i8, ptr addrspace(1) %17, i64 8
  store ptr addrspace(1) %18, ptr %7
  %19 = load ptr addrspace(1), ptr %7
  %20 = load ptr addrspace(1), ptr addrspace(1) %19
  store ptr addrspace(1) %20, ptr %8
  %21 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %21, ptr %9
  %22 = load i64, ptr %9
  %23 = inttoptr i64 %22 to ptr
  %24 = load ptr addrspace(1), ptr %23
  store ptr addrspace(1) %24, ptr %10
  %25 = load ptr addrspace(1), ptr %10
  %26 = ptrtoint ptr addrspace(1) %25 to i64
  store i64 %26, ptr %11
  %27 = load i64, ptr %11
  %28 = load i64, ptr %8
  %29 = sub i64 %27, %28
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  store i64 %30, ptr %12
  %31 = load i64, ptr %12
  %32 = add i64 %31, 1
  store i64 %32, ptr %12
  %33 = load i64, ptr %12
  store i64 %33, ptr %4
  %34 = load i64, ptr %4
  %35 = load i64, ptr %ds
  %36 = load i64, ptr %alloc
  %37 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %35, 0, 0
  %38 = insertvalue { { i64, i64 }, { i64 } } %37, i64 %36, 0, 1
  %39 = insertvalue { { i64, i64 }, { i64 } } %38, i64 %34, 1, 0
  ret { { i64, i64 }, { i64 } } %39
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__mul_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L117
L117:
  %15 = load i64, ptr %4
  store i64 %15, ptr %5
  %16 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %16, ptr %6
  %17 = load i64, ptr %6
  %18 = inttoptr i64 %17 to ptr addrspace(1)
  store ptr addrspace(1) %18, ptr %7
  %19 = load ptr addrspace(1), ptr %7
  %20 = getelementptr i8, ptr addrspace(1) %19, i64 8
  store ptr addrspace(1) %20, ptr %7
  %21 = load ptr addrspace(1), ptr %7
  %22 = load ptr addrspace(1), ptr addrspace(1) %21
  store ptr addrspace(1) %22, ptr %8
  %23 = load ptr addrspace(1), ptr %8
  %24 = ptrtoint ptr addrspace(1) %23 to i64
  store i64 %24, ptr %9
  %25 = load i64, ptr %9
  %26 = ashr i64 %25, 1
  store i64 %26, ptr %9
  %27 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  %29 = inttoptr i64 %28 to ptr
  %30 = load ptr addrspace(1), ptr %29
  store ptr addrspace(1) %30, ptr %11
  %31 = load ptr addrspace(1), ptr %11
  %32 = ptrtoint ptr addrspace(1) %31 to i64
  store i64 %32, ptr %12
  %33 = load i64, ptr %12
  %34 = add i64 %33, -1
  store i64 %34, ptr %12
  %35 = load i64, ptr %12
  store i64 %35, ptr %13
  %36 = load i64, ptr %13
  %37 = load i64, ptr %9
  %38 = mul i64 %36, %37
  store i64 %38, ptr %13
  %39 = load i64, ptr %13
  store i64 %39, ptr %14
  %40 = load i64, ptr %14
  %41 = add i64 %40, 1
  store i64 %41, ptr %14
  %42 = load i64, ptr %14
  store i64 %42, ptr %4
  %43 = load i64, ptr %4
  %44 = load i64, ptr %ds
  %45 = load i64, ptr %alloc
  %46 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %44, 0, 0
  %47 = insertvalue { { i64, i64 }, { i64 } } %46, i64 %45, 0, 1
  %48 = insertvalue { { i64, i64 }, { i64 } } %47, i64 %43, 1, 0
  ret { { i64, i64 }, { i64 } } %48
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__div_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca ptr addrspace(1)
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  br label %L1
L1:
  br label %L127
L127:
  %20 = load i64, ptr %4
  store i64 %20, ptr %6
  %21 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %21, ptr %7
  %22 = load i64, ptr %7
  %23 = inttoptr i64 %22 to ptr addrspace(1)
  store ptr addrspace(1) %23, ptr %8
  %24 = load ptr addrspace(1), ptr %8
  %25 = getelementptr i8, ptr addrspace(1) %24, i64 8
  store ptr addrspace(1) %25, ptr %8
  %26 = load ptr addrspace(1), ptr %8
  %27 = load ptr addrspace(1), ptr addrspace(1) %26
  store ptr addrspace(1) %27, ptr %9
  %28 = load ptr addrspace(1), ptr %9
  store ptr addrspace(1) %28, ptr %10
  %29 = load i64, ptr %10
  %30 = icmp slt i64 %29, 1
  br i1 %30, label %L136, label %L153
L153:
  %31 = load i64, ptr %10
  %32 = icmp sgt i64 %31, 1
  br i1 %32, label %L136, label %L131
L131:
  store i64 1, ptr %11
  %33 = load i64, ptr %11
  store i64 %33, ptr %4
  %34 = load i64, ptr %4
  %35 = load i64, ptr %ds
  %36 = load i64, ptr %alloc
  %37 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %35, 0, 0
  %38 = insertvalue { { i64, i64 }, { i64 } } %37, i64 %36, 0, 1
  %39 = insertvalue { { i64, i64 }, { i64 } } %38, i64 %34, 1, 0
  ret { { i64, i64 }, { i64 } } %39
L136:
  %40 = load i64, ptr %10
  %41 = icmp slt i64 %40, 1
  br i1 %41, label %L138, label %L154
L154:
  %42 = load i64, ptr %10
  %43 = icmp sgt i64 %42, 1
  br i1 %43, label %L138, label %L149
L138:
  %44 = load ptr addrspace(1), ptr %10
  %45 = ptrtoint ptr addrspace(1) %44 to i64
  store i64 %45, ptr %12
  %46 = load i64, ptr %12
  %47 = ashr i64 %46, 1
  store i64 %47, ptr %12
  %48 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %48, ptr %13
  %49 = load i64, ptr %13
  %50 = inttoptr i64 %49 to ptr
  %51 = load ptr addrspace(1), ptr %50
  store ptr addrspace(1) %51, ptr %14
  %52 = load ptr addrspace(1), ptr %14
  %53 = ptrtoint ptr addrspace(1) %52 to i64
  store i64 %53, ptr %15
  %54 = load i64, ptr %15
  %55 = ashr i64 %54, 1
  store i64 %55, ptr %15
  %56 = load i64, ptr %15
  store i64 %56, ptr %4
  %57 = load i64, ptr %12
  store i64 %57, ptr %5
  %58 = load i64, ptr %4
  %59 = load i64, ptr %5
  %60 = sdiv i64 %58, %59
  store i64 %60, ptr %4
  %61 = load i64, ptr %4
  store i64 %61, ptr %16
  %62 = load i64, ptr %16
  store i64 %62, ptr %17
  %63 = load i64, ptr %17
  %64 = shl i64 %63, 1
  store i64 %64, ptr %17
  %65 = load i64, ptr %17
  store i64 %65, ptr %18
  %66 = load i64, ptr %18
  %67 = add i64 %66, 1
  store i64 %67, ptr %18
  %68 = load i64, ptr %18
  store i64 %68, ptr %4
  %69 = load i64, ptr %4
  %70 = load i64, ptr %ds
  %71 = load i64, ptr %alloc
  %72 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %70, 0, 0
  %73 = insertvalue { { i64, i64 }, { i64 } } %72, i64 %71, 0, 1
  %74 = insertvalue { { i64, i64 }, { i64 } } %73, i64 %69, 1, 0
  ret { { i64, i64 }, { i64 } } %74
L149:
  %75 = ptrtoint ptr @caml_exn_Division_by_zero to i64
  store i64 %75, ptr %19
  %76 = load i64, ptr %19
  store i64 %76, ptr %4
  %77 = load i64, ptr %ds
  %78 = add i64 %77, 240
  %79 = inttoptr i64 %78 to ptr
  store i64 0, ptr %79
  %80 = load i64, ptr %4
  %81 = load i64, ptr %ds
  %82 = load i64, ptr %alloc
  %83 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %81, i64 %82, i64 %80) "statepoint-id"="0"
  %84 = extractvalue { { i64, i64 }, {  } } %83, 0, 0
  %85 = extractvalue { { i64, i64 }, {  } } %83, 0, 1
  store i64 %84, ptr %ds
  store i64 %85, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__mod__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca ptr addrspace(1)
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  br label %L1
L1:
  br label %L156
L156:
  %20 = load i64, ptr %4
  store i64 %20, ptr %7
  %21 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %21, ptr %8
  %22 = load i64, ptr %8
  %23 = inttoptr i64 %22 to ptr addrspace(1)
  store ptr addrspace(1) %23, ptr %9
  %24 = load ptr addrspace(1), ptr %9
  %25 = getelementptr i8, ptr addrspace(1) %24, i64 8
  store ptr addrspace(1) %25, ptr %9
  %26 = load ptr addrspace(1), ptr %9
  %27 = load ptr addrspace(1), ptr addrspace(1) %26
  store ptr addrspace(1) %27, ptr %10
  %28 = load ptr addrspace(1), ptr %10
  store ptr addrspace(1) %28, ptr %11
  %29 = load i64, ptr %11
  %30 = icmp slt i64 %29, 1
  br i1 %30, label %L163, label %L177
L177:
  %31 = load i64, ptr %11
  %32 = icmp sgt i64 %31, 1
  br i1 %32, label %L163, label %L174
L163:
  %33 = load ptr addrspace(1), ptr %11
  %34 = ptrtoint ptr addrspace(1) %33 to i64
  store i64 %34, ptr %12
  %35 = load i64, ptr %12
  %36 = ashr i64 %35, 1
  store i64 %36, ptr %12
  %37 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  %39 = inttoptr i64 %38 to ptr
  %40 = load ptr addrspace(1), ptr %39
  store ptr addrspace(1) %40, ptr %14
  %41 = load ptr addrspace(1), ptr %14
  %42 = ptrtoint ptr addrspace(1) %41 to i64
  store i64 %42, ptr %15
  %43 = load i64, ptr %15
  %44 = ashr i64 %43, 1
  store i64 %44, ptr %15
  %45 = load i64, ptr %15
  store i64 %45, ptr %4
  %46 = load i64, ptr %12
  store i64 %46, ptr %6
  %47 = load i64, ptr %4
  %48 = load i64, ptr %6
  %49 = srem i64 %47, %48
  store i64 %49, ptr %5
  %50 = load i64, ptr %5
  store i64 %50, ptr %16
  %51 = load i64, ptr %16
  store i64 %51, ptr %17
  %52 = load i64, ptr %17
  %53 = shl i64 %52, 1
  store i64 %53, ptr %17
  %54 = load i64, ptr %17
  store i64 %54, ptr %18
  %55 = load i64, ptr %18
  %56 = add i64 %55, 1
  store i64 %56, ptr %18
  %57 = load i64, ptr %18
  store i64 %57, ptr %4
  %58 = load i64, ptr %4
  %59 = load i64, ptr %ds
  %60 = load i64, ptr %alloc
  %61 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %59, 0, 0
  %62 = insertvalue { { i64, i64 }, { i64 } } %61, i64 %60, 0, 1
  %63 = insertvalue { { i64, i64 }, { i64 } } %62, i64 %58, 1, 0
  ret { { i64, i64 }, { i64 } } %63
L174:
  %64 = ptrtoint ptr @caml_exn_Division_by_zero to i64
  store i64 %64, ptr %19
  %65 = load i64, ptr %19
  store i64 %65, ptr %4
  %66 = load i64, ptr %ds
  %67 = add i64 %66, 240
  %68 = inttoptr i64 %67 to ptr
  store i64 0, ptr %68
  %69 = load i64, ptr %4
  %70 = load i64, ptr %ds
  %71 = load i64, ptr %alloc
  %72 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %70, i64 %71, i64 %69) "statepoint-id"="0"
  %73 = extractvalue { { i64, i64 }, {  } } %72, 0, 0
  %74 = extractvalue { { i64, i64 }, {  } } %72, 0, 1
  store i64 %73, ptr %ds
  store i64 %74, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__land__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  br label %L1
L1:
  br label %L179
L179:
  %12 = load i64, ptr %4
  store i64 %12, ptr %5
  %13 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  %15 = inttoptr i64 %14 to ptr addrspace(1)
  store ptr addrspace(1) %15, ptr %7
  %16 = load ptr addrspace(1), ptr %7
  %17 = getelementptr i8, ptr addrspace(1) %16, i64 8
  store ptr addrspace(1) %17, ptr %7
  %18 = load ptr addrspace(1), ptr %7
  %19 = load ptr addrspace(1), ptr addrspace(1) %18
  store ptr addrspace(1) %19, ptr %8
  %20 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %20, ptr %9
  %21 = load i64, ptr %9
  %22 = inttoptr i64 %21 to ptr
  %23 = load ptr addrspace(1), ptr %22
  store ptr addrspace(1) %23, ptr %10
  %24 = load ptr addrspace(1), ptr %10
  %25 = ptrtoint ptr addrspace(1) %24 to i64
  store i64 %25, ptr %11
  %26 = load i64, ptr %11
  %27 = load i64, ptr %8
  %28 = and i64 %26, %27
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  store i64 %29, ptr %4
  %30 = load i64, ptr %4
  %31 = load i64, ptr %ds
  %32 = load i64, ptr %alloc
  %33 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %31, 0, 0
  %34 = insertvalue { { i64, i64 }, { i64 } } %33, i64 %32, 0, 1
  %35 = insertvalue { { i64, i64 }, { i64 } } %34, i64 %30, 1, 0
  ret { { i64, i64 }, { i64 } } %35
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lor__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  br label %L1
L1:
  br label %L186
L186:
  %12 = load i64, ptr %4
  store i64 %12, ptr %5
  %13 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  %15 = inttoptr i64 %14 to ptr addrspace(1)
  store ptr addrspace(1) %15, ptr %7
  %16 = load ptr addrspace(1), ptr %7
  %17 = getelementptr i8, ptr addrspace(1) %16, i64 8
  store ptr addrspace(1) %17, ptr %7
  %18 = load ptr addrspace(1), ptr %7
  %19 = load ptr addrspace(1), ptr addrspace(1) %18
  store ptr addrspace(1) %19, ptr %8
  %20 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %20, ptr %9
  %21 = load i64, ptr %9
  %22 = inttoptr i64 %21 to ptr
  %23 = load ptr addrspace(1), ptr %22
  store ptr addrspace(1) %23, ptr %10
  %24 = load ptr addrspace(1), ptr %10
  %25 = ptrtoint ptr addrspace(1) %24 to i64
  store i64 %25, ptr %11
  %26 = load i64, ptr %11
  %27 = load i64, ptr %8
  %28 = or i64 %26, %27
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  store i64 %29, ptr %4
  %30 = load i64, ptr %4
  %31 = load i64, ptr %ds
  %32 = load i64, ptr %alloc
  %33 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %31, 0, 0
  %34 = insertvalue { { i64, i64 }, { i64 } } %33, i64 %32, 0, 1
  %35 = insertvalue { { i64, i64 }, { i64 } } %34, i64 %30, 1, 0
  ret { { i64, i64 }, { i64 } } %35
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lxor__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca i64
  br label %L1
L1:
  br label %L193
L193:
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  %14 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %14, ptr %6
  %15 = load i64, ptr %6
  %16 = inttoptr i64 %15 to ptr addrspace(1)
  store ptr addrspace(1) %16, ptr %7
  %17 = load ptr addrspace(1), ptr %7
  %18 = getelementptr i8, ptr addrspace(1) %17, i64 8
  store ptr addrspace(1) %18, ptr %7
  %19 = load ptr addrspace(1), ptr %7
  %20 = load ptr addrspace(1), ptr addrspace(1) %19
  store ptr addrspace(1) %20, ptr %8
  %21 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %21, ptr %9
  %22 = load i64, ptr %9
  %23 = inttoptr i64 %22 to ptr
  %24 = load ptr addrspace(1), ptr %23
  store ptr addrspace(1) %24, ptr %10
  %25 = load ptr addrspace(1), ptr %10
  %26 = ptrtoint ptr addrspace(1) %25 to i64
  store i64 %26, ptr %11
  %27 = load i64, ptr %11
  %28 = load i64, ptr %8
  %29 = xor i64 %27, %28
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  store i64 %30, ptr %12
  %31 = load i64, ptr %12
  %32 = or i64 %31, 1
  store i64 %32, ptr %12
  %33 = load i64, ptr %12
  store i64 %33, ptr %4
  %34 = load i64, ptr %4
  %35 = load i64, ptr %ds
  %36 = load i64, ptr %alloc
  %37 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %35, 0, 0
  %38 = insertvalue { { i64, i64 }, { i64 } } %37, i64 %36, 0, 1
  %39 = insertvalue { { i64, i64 }, { i64 } } %38, i64 %34, 1, 0
  ret { { i64, i64 }, { i64 } } %39
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lnot__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L201
L201:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load ptr addrspace(1), ptr %7
  %16 = ptrtoint ptr addrspace(1) %15 to i64
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = xor i64 %17, -1
  store i64 %18, ptr %8
  %19 = load i64, ptr %8
  store i64 %19, ptr %9
  %20 = load i64, ptr %9
  %21 = or i64 %20, 1
  store i64 %21, ptr %9
  %22 = load i64, ptr %9
  store i64 %22, ptr %4
  %23 = load i64, ptr %4
  %24 = load i64, ptr %ds
  %25 = load i64, ptr %alloc
  %26 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %24, 0, 0
  %27 = insertvalue { { i64, i64 }, { i64 } } %26, i64 %25, 0, 1
  %28 = insertvalue { { i64, i64 }, { i64 } } %27, i64 %23, 1, 0
  ret { { i64, i64 }, { i64 } } %28
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lsl__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca ptr addrspace(1)
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L207
L207:
  %16 = load i64, ptr %4
  store i64 %16, ptr %6
  %17 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %17, ptr %7
  %18 = load i64, ptr %7
  %19 = inttoptr i64 %18 to ptr addrspace(1)
  store ptr addrspace(1) %19, ptr %8
  %20 = load ptr addrspace(1), ptr %8
  %21 = getelementptr i8, ptr addrspace(1) %20, i64 8
  store ptr addrspace(1) %21, ptr %8
  %22 = load ptr addrspace(1), ptr %8
  %23 = load ptr addrspace(1), ptr addrspace(1) %22
  store ptr addrspace(1) %23, ptr %9
  %24 = load ptr addrspace(1), ptr %9
  %25 = ptrtoint ptr addrspace(1) %24 to i64
  store i64 %25, ptr %10
  %26 = load i64, ptr %10
  %27 = ashr i64 %26, 1
  store i64 %27, ptr %10
  %28 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  %30 = inttoptr i64 %29 to ptr
  %31 = load ptr addrspace(1), ptr %30
  store ptr addrspace(1) %31, ptr %12
  %32 = load ptr addrspace(1), ptr %12
  %33 = ptrtoint ptr addrspace(1) %32 to i64
  store i64 %33, ptr %13
  %34 = load i64, ptr %13
  %35 = add i64 %34, -1
  store i64 %35, ptr %13
  %36 = load i64, ptr %13
  store i64 %36, ptr %14
  %37 = load i64, ptr %10
  store i64 %37, ptr %5
  %38 = load i64, ptr %14
  %39 = load i64, ptr %5
  %40 = shl i64 %38, %39
  store i64 %40, ptr %14
  %41 = load i64, ptr %14
  store i64 %41, ptr %15
  %42 = load i64, ptr %15
  %43 = add i64 %42, 1
  store i64 %43, ptr %15
  %44 = load i64, ptr %15
  store i64 %44, ptr %4
  %45 = load i64, ptr %4
  %46 = load i64, ptr %ds
  %47 = load i64, ptr %alloc
  %48 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %46, 0, 0
  %49 = insertvalue { { i64, i64 }, { i64 } } %48, i64 %47, 0, 1
  %50 = insertvalue { { i64, i64 }, { i64 } } %49, i64 %45, 1, 0
  ret { { i64, i64 }, { i64 } } %50
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lsr__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca ptr addrspace(1)
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L217
L217:
  %15 = load i64, ptr %4
  store i64 %15, ptr %6
  %16 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  %18 = inttoptr i64 %17 to ptr addrspace(1)
  store ptr addrspace(1) %18, ptr %8
  %19 = load ptr addrspace(1), ptr %8
  %20 = getelementptr i8, ptr addrspace(1) %19, i64 8
  store ptr addrspace(1) %20, ptr %8
  %21 = load ptr addrspace(1), ptr %8
  %22 = load ptr addrspace(1), ptr addrspace(1) %21
  store ptr addrspace(1) %22, ptr %9
  %23 = load ptr addrspace(1), ptr %9
  %24 = ptrtoint ptr addrspace(1) %23 to i64
  store i64 %24, ptr %10
  %25 = load i64, ptr %10
  %26 = ashr i64 %25, 1
  store i64 %26, ptr %10
  %27 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %27, ptr %11
  %28 = load i64, ptr %11
  %29 = inttoptr i64 %28 to ptr
  %30 = load ptr addrspace(1), ptr %29
  store ptr addrspace(1) %30, ptr %12
  %31 = load ptr addrspace(1), ptr %12
  %32 = ptrtoint ptr addrspace(1) %31 to i64
  store i64 %32, ptr %13
  %33 = load i64, ptr %10
  store i64 %33, ptr %5
  %34 = load i64, ptr %13
  %35 = load i64, ptr %5
  %36 = lshr i64 %34, %35
  store i64 %36, ptr %13
  %37 = load i64, ptr %13
  store i64 %37, ptr %14
  %38 = load i64, ptr %14
  %39 = or i64 %38, 1
  store i64 %39, ptr %14
  %40 = load i64, ptr %14
  store i64 %40, ptr %4
  %41 = load i64, ptr %4
  %42 = load i64, ptr %ds
  %43 = load i64, ptr %alloc
  %44 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %42, 0, 0
  %45 = insertvalue { { i64, i64 }, { i64 } } %44, i64 %43, 0, 1
  %46 = insertvalue { { i64, i64 }, { i64 } } %45, i64 %41, 1, 0
  ret { { i64, i64 }, { i64 } } %46
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__asr__HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca ptr addrspace(1)
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L226
L226:
  %15 = load i64, ptr %4
  store i64 %15, ptr %6
  %16 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  %18 = inttoptr i64 %17 to ptr addrspace(1)
  store ptr addrspace(1) %18, ptr %8
  %19 = load ptr addrspace(1), ptr %8
  %20 = getelementptr i8, ptr addrspace(1) %19, i64 8
  store ptr addrspace(1) %20, ptr %8
  %21 = load ptr addrspace(1), ptr %8
  %22 = load ptr addrspace(1), ptr addrspace(1) %21
  store ptr addrspace(1) %22, ptr %9
  %23 = load ptr addrspace(1), ptr %9
  %24 = ptrtoint ptr addrspace(1) %23 to i64
  store i64 %24, ptr %10
  %25 = load i64, ptr %10
  %26 = ashr i64 %25, 1
  store i64 %26, ptr %10
  %27 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %27, ptr %11
  %28 = load i64, ptr %11
  %29 = inttoptr i64 %28 to ptr
  %30 = load ptr addrspace(1), ptr %29
  store ptr addrspace(1) %30, ptr %12
  %31 = load ptr addrspace(1), ptr %12
  %32 = ptrtoint ptr addrspace(1) %31 to i64
  store i64 %32, ptr %13
  %33 = load i64, ptr %10
  store i64 %33, ptr %5
  %34 = load i64, ptr %13
  %35 = load i64, ptr %5
  %36 = ashr i64 %34, %35
  store i64 %36, ptr %13
  %37 = load i64, ptr %13
  store i64 %37, ptr %14
  %38 = load i64, ptr %14
  %39 = or i64 %38, 1
  store i64 %39, ptr %14
  %40 = load i64, ptr %14
  store i64 %40, ptr %4
  %41 = load i64, ptr %4
  %42 = load i64, ptr %ds
  %43 = load i64, ptr %alloc
  %44 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %42, 0, 0
  %45 = insertvalue { { i64, i64 }, { i64 } } %44, i64 %43, 0, 1
  %46 = insertvalue { { i64, i64 }, { i64 } } %45, i64 %41, 1, 0
  ret { { i64, i64 }, { i64 } } %46
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__add_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  br label %L1
L1:
  br label %L235
L235:
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %10, ptr %6
  %11 = load i64, ptr %6
  %12 = inttoptr i64 %11 to ptr
  %13 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %13, ptr %7
  %14 = load ptr addrspace(1), ptr %7
  %15 = ptrtoint ptr addrspace(1) %14 to i64
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = add i64 %16, 8
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  store i64 %18, ptr %4
  %19 = load i64, ptr %4
  %20 = load i64, ptr %ds
  %21 = load i64, ptr %alloc
  %22 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %20, 0, 0
  %23 = insertvalue { { i64, i64 }, { i64 } } %22, i64 %21, 0, 1
  %24 = insertvalue { { i64, i64 }, { i64 } } %23, i64 %19, 1, 0
  ret { { i64, i64 }, { i64 } } %24
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__sub_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  br label %L1
L1:
  br label %L240
L240:
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %10, ptr %6
  %11 = load i64, ptr %6
  %12 = inttoptr i64 %11 to ptr
  %13 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %13, ptr %7
  %14 = load ptr addrspace(1), ptr %7
  %15 = ptrtoint ptr addrspace(1) %14 to i64
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = add i64 %16, -8
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  store i64 %18, ptr %4
  %19 = load i64, ptr %4
  %20 = load i64, ptr %ds
  %21 = load i64, ptr %alloc
  %22 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %20, 0, 0
  %23 = insertvalue { { i64, i64 }, { i64 } } %22, i64 %21, 0, 1
  %24 = insertvalue { { i64, i64 }, { i64 } } %23, i64 %19, 1, 0
  ret { { i64, i64 }, { i64 } } %24
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__mul_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L245
L245:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load ptr addrspace(1), ptr %7
  %16 = ptrtoint ptr addrspace(1) %15 to i64
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = shl i64 %17, 2
  store i64 %18, ptr %8
  %19 = load i64, ptr %8
  store i64 %19, ptr %9
  %20 = load i64, ptr %9
  %21 = add i64 %20, -3
  store i64 %21, ptr %9
  %22 = load i64, ptr %9
  store i64 %22, ptr %4
  %23 = load i64, ptr %4
  %24 = load i64, ptr %ds
  %25 = load i64, ptr %alloc
  %26 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %24, 0, 0
  %27 = insertvalue { { i64, i64 }, { i64 } } %26, i64 %25, 0, 1
  %28 = insertvalue { { i64, i64 }, { i64 } } %27, i64 %23, 1, 0
  ret { { i64, i64 }, { i64 } } %28
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__div_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L251
L251:
  %16 = load i64, ptr %4
  store i64 %16, ptr %5
  %17 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %17, ptr %6
  %18 = load i64, ptr %6
  %19 = inttoptr i64 %18 to ptr
  %20 = load ptr addrspace(1), ptr %19
  store ptr addrspace(1) %20, ptr %7
  %21 = load ptr addrspace(1), ptr %7
  %22 = ptrtoint ptr addrspace(1) %21 to i64
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  %24 = ashr i64 %23, 1
  store i64 %24, ptr %8
  %25 = load i64, ptr %8
  store i64 %25, ptr %9
  %26 = load i64, ptr %9
  store i64 %26, ptr %10
  %27 = load i64, ptr %10
  %28 = ashr i64 %27, 1
  store i64 %28, ptr %10
  %29 = load i64, ptr %10
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  %31 = lshr i64 %30, 62
  store i64 %31, ptr %11
  %32 = load i64, ptr %9
  store i64 %32, ptr %12
  %33 = load i64, ptr %12
  %34 = load i64, ptr %11
  %35 = add i64 %33, %34
  store i64 %35, ptr %12
  %36 = load i64, ptr %12
  store i64 %36, ptr %13
  %37 = load i64, ptr %13
  %38 = ashr i64 %37, 2
  store i64 %38, ptr %13
  %39 = load i64, ptr %13
  store i64 %39, ptr %14
  %40 = load i64, ptr %14
  %41 = shl i64 %40, 1
  store i64 %41, ptr %14
  %42 = load i64, ptr %14
  store i64 %42, ptr %15
  %43 = load i64, ptr %15
  %44 = add i64 %43, 1
  store i64 %44, ptr %15
  %45 = load i64, ptr %15
  store i64 %45, ptr %4
  %46 = load i64, ptr %4
  %47 = load i64, ptr %ds
  %48 = load i64, ptr %alloc
  %49 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %47, 0, 0
  %50 = insertvalue { { i64, i64 }, { i64 } } %49, i64 %48, 0, 1
  %51 = insertvalue { { i64, i64 }, { i64 } } %50, i64 %46, 1, 0
  ret { { i64, i64 }, { i64 } } %51
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__mod_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  br label %L1
L1:
  br label %L262
L262:
  %18 = load i64, ptr %4
  store i64 %18, ptr %5
  %19 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %19, ptr %6
  %20 = load i64, ptr %6
  %21 = inttoptr i64 %20 to ptr
  %22 = load ptr addrspace(1), ptr %21
  store ptr addrspace(1) %22, ptr %7
  %23 = load ptr addrspace(1), ptr %7
  %24 = ptrtoint ptr addrspace(1) %23 to i64
  store i64 %24, ptr %8
  %25 = load i64, ptr %8
  %26 = ashr i64 %25, 1
  store i64 %26, ptr %8
  %27 = load i64, ptr %8
  store i64 %27, ptr %9
  store i64 -4, ptr %10
  %28 = load i64, ptr %9
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  %30 = ashr i64 %29, 1
  store i64 %30, ptr %11
  %31 = load i64, ptr %11
  store i64 %31, ptr %12
  %32 = load i64, ptr %12
  %33 = lshr i64 %32, 62
  store i64 %33, ptr %12
  %34 = load i64, ptr %9
  store i64 %34, ptr %13
  %35 = load i64, ptr %13
  %36 = load i64, ptr %12
  %37 = add i64 %35, %36
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  store i64 %38, ptr %14
  %39 = load i64, ptr %14
  %40 = load i64, ptr %10
  %41 = and i64 %39, %40
  store i64 %41, ptr %14
  %42 = load i64, ptr %9
  store i64 %42, ptr %15
  %43 = load i64, ptr %15
  %44 = load i64, ptr %14
  %45 = sub i64 %43, %44
  store i64 %45, ptr %15
  %46 = load i64, ptr %15
  store i64 %46, ptr %16
  %47 = load i64, ptr %16
  %48 = shl i64 %47, 1
  store i64 %48, ptr %16
  %49 = load i64, ptr %16
  store i64 %49, ptr %17
  %50 = load i64, ptr %17
  %51 = add i64 %50, 1
  store i64 %51, ptr %17
  %52 = load i64, ptr %17
  store i64 %52, ptr %4
  %53 = load i64, ptr %4
  %54 = load i64, ptr %ds
  %55 = load i64, ptr %alloc
  %56 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %54, 0, 0
  %57 = insertvalue { { i64, i64 }, { i64 } } %56, i64 %55, 0, 1
  %58 = insertvalue { { i64, i64 }, { i64 } } %57, i64 %53, 1, 0
  ret { { i64, i64 }, { i64 } } %58
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__land_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  br label %L1
L1:
  br label %L274
L274:
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %10, ptr %6
  %11 = load i64, ptr %6
  %12 = inttoptr i64 %11 to ptr
  %13 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %13, ptr %7
  %14 = load ptr addrspace(1), ptr %7
  %15 = ptrtoint ptr addrspace(1) %14 to i64
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = and i64 %16, 9
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  store i64 %18, ptr %4
  %19 = load i64, ptr %4
  %20 = load i64, ptr %ds
  %21 = load i64, ptr %alloc
  %22 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %20, 0, 0
  %23 = insertvalue { { i64, i64 }, { i64 } } %22, i64 %21, 0, 1
  %24 = insertvalue { { i64, i64 }, { i64 } } %23, i64 %19, 1, 0
  ret { { i64, i64 }, { i64 } } %24
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lor_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  br label %L1
L1:
  br label %L279
L279:
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %10, ptr %6
  %11 = load i64, ptr %6
  %12 = inttoptr i64 %11 to ptr
  %13 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %13, ptr %7
  %14 = load ptr addrspace(1), ptr %7
  %15 = ptrtoint ptr addrspace(1) %14 to i64
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = or i64 %16, 9
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  store i64 %18, ptr %4
  %19 = load i64, ptr %4
  %20 = load i64, ptr %ds
  %21 = load i64, ptr %alloc
  %22 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %20, 0, 0
  %23 = insertvalue { { i64, i64 }, { i64 } } %22, i64 %21, 0, 1
  %24 = insertvalue { { i64, i64 }, { i64 } } %23, i64 %19, 1, 0
  ret { { i64, i64 }, { i64 } } %24
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lxor_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L284
L284:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load ptr addrspace(1), ptr %7
  %16 = ptrtoint ptr addrspace(1) %15 to i64
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = xor i64 %17, 9
  store i64 %18, ptr %8
  %19 = load i64, ptr %8
  store i64 %19, ptr %9
  %20 = load i64, ptr %9
  %21 = or i64 %20, 1
  store i64 %21, ptr %9
  %22 = load i64, ptr %9
  store i64 %22, ptr %4
  %23 = load i64, ptr %4
  %24 = load i64, ptr %ds
  %25 = load i64, ptr %alloc
  %26 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %24, 0, 0
  %27 = insertvalue { { i64, i64 }, { i64 } } %26, i64 %25, 0, 1
  %28 = insertvalue { { i64, i64 }, { i64 } } %27, i64 %23, 1, 0
  ret { { i64, i64 }, { i64 } } %28
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lsl_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L290
L290:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load ptr addrspace(1), ptr %7
  %16 = ptrtoint ptr addrspace(1) %15 to i64
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = shl i64 %17, 4
  store i64 %18, ptr %8
  %19 = load i64, ptr %8
  store i64 %19, ptr %9
  %20 = load i64, ptr %9
  %21 = add i64 %20, -15
  store i64 %21, ptr %9
  %22 = load i64, ptr %9
  store i64 %22, ptr %4
  %23 = load i64, ptr %4
  %24 = load i64, ptr %ds
  %25 = load i64, ptr %alloc
  %26 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %24, 0, 0
  %27 = insertvalue { { i64, i64 }, { i64 } } %26, i64 %25, 0, 1
  %28 = insertvalue { { i64, i64 }, { i64 } } %27, i64 %23, 1, 0
  ret { { i64, i64 }, { i64 } } %28
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__lsr_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L296
L296:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load ptr addrspace(1), ptr %7
  %16 = ptrtoint ptr addrspace(1) %15 to i64
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = lshr i64 %17, 4
  store i64 %18, ptr %8
  %19 = load i64, ptr %8
  store i64 %19, ptr %9
  %20 = load i64, ptr %9
  %21 = or i64 %20, 1
  store i64 %21, ptr %9
  %22 = load i64, ptr %9
  store i64 %22, ptr %4
  %23 = load i64, ptr %4
  %24 = load i64, ptr %ds
  %25 = load i64, ptr %alloc
  %26 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %24, 0, 0
  %27 = insertvalue { { i64, i64 }, { i64 } } %26, i64 %25, 0, 1
  %28 = insertvalue { { i64, i64 }, { i64 } } %27, i64 %23, 1, 0
  ret { { i64, i64 }, { i64 } } %28
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__asr_imm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L302
L302:
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  %11 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = inttoptr i64 %12 to ptr
  %14 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %14, ptr %7
  %15 = load ptr addrspace(1), ptr %7
  %16 = ptrtoint ptr addrspace(1) %15 to i64
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = ashr i64 %17, 4
  store i64 %18, ptr %8
  %19 = load i64, ptr %8
  store i64 %19, ptr %9
  %20 = load i64, ptr %9
  %21 = or i64 %20, 1
  store i64 %21, ptr %9
  %22 = load i64, ptr %9
  store i64 %22, ptr %4
  %23 = load i64, ptr %4
  %24 = load i64, ptr %ds
  %25 = load i64, ptr %alloc
  %26 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %24, 0, 0
  %27 = insertvalue { { i64, i64 }, { i64 } } %26, i64 %25, 0, 1
  %28 = insertvalue { { i64, i64 }, { i64 } } %27, i64 %23, 1, 0
  ret { { i64, i64 }, { i64 } } %28
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__popcnt_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L308
L308:
  %16 = load i64, ptr %4
  store i64 %16, ptr %5
  store i64 9223372036854775807, ptr %6
  %17 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %17, ptr %7
  %18 = load i64, ptr %7
  %19 = inttoptr i64 %18 to ptr addrspace(1)
  store ptr addrspace(1) %19, ptr %8
  %20 = load ptr addrspace(1), ptr %8
  %21 = getelementptr i8, ptr addrspace(1) %20, i64 16
  store ptr addrspace(1) %21, ptr %8
  %22 = load ptr addrspace(1), ptr %8
  %23 = load ptr addrspace(1), ptr addrspace(1) %22
  store ptr addrspace(1) %23, ptr %9
  %24 = load ptr addrspace(1), ptr %9
  %25 = ptrtoint ptr addrspace(1) %24 to i64
  store i64 %25, ptr %10
  %26 = load i64, ptr %10
  %27 = ashr i64 %26, 1
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  %30 = load i64, ptr %6
  %31 = and i64 %29, %30
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  %33 = call  i64 @llvm.ctpop.i64(i64 %32)
  store i64 %33, ptr %12
  %34 = load i64, ptr %12
  store i64 %34, ptr %13
  %35 = load i64, ptr %13
  store i64 %35, ptr %14
  %36 = load i64, ptr %14
  %37 = shl i64 %36, 1
  store i64 %37, ptr %14
  %38 = load i64, ptr %14
  store i64 %38, ptr %15
  %39 = load i64, ptr %15
  %40 = add i64 %39, 1
  store i64 %40, ptr %15
  %41 = load i64, ptr %15
  store i64 %41, ptr %4
  %42 = load i64, ptr %4
  %43 = load i64, ptr %ds
  %44 = load i64, ptr %alloc
  %45 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %43, 0, 0
  %46 = insertvalue { { i64, i64 }, { i64 } } %45, i64 %44, 0, 1
  %47 = insertvalue { { i64, i64 }, { i64 } } %46, i64 %42, 1, 0
  ret { { i64, i64 }, { i64 } } %47
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__ctz_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  br label %L1
L1:
  br label %L318
L318:
  %17 = load i64, ptr %4
  store i64 %17, ptr %5
  store i64 1, ptr %6
  %18 = load i64, ptr %6
  store i64 %18, ptr %7
  %19 = load i64, ptr %7
  %20 = shl i64 %19, 63
  store i64 %20, ptr %7
  %21 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %21, ptr %8
  %22 = load i64, ptr %8
  %23 = inttoptr i64 %22 to ptr addrspace(1)
  store ptr addrspace(1) %23, ptr %9
  %24 = load ptr addrspace(1), ptr %9
  %25 = getelementptr i8, ptr addrspace(1) %24, i64 16
  store ptr addrspace(1) %25, ptr %9
  %26 = load ptr addrspace(1), ptr %9
  %27 = load ptr addrspace(1), ptr addrspace(1) %26
  store ptr addrspace(1) %27, ptr %10
  %28 = load ptr addrspace(1), ptr %10
  %29 = ptrtoint ptr addrspace(1) %28 to i64
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  %31 = ashr i64 %30, 1
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  store i64 %32, ptr %12
  %33 = load i64, ptr %12
  %34 = load i64, ptr %7
  %35 = or i64 %33, %34
  store i64 %35, ptr %12
  %36 = load i64, ptr %12
  %37 = call  i64 @llvm.cttz.i64(i64 %36, i1 0)
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  store i64 %38, ptr %14
  %39 = load i64, ptr %14
  store i64 %39, ptr %15
  %40 = load i64, ptr %15
  %41 = shl i64 %40, 1
  store i64 %41, ptr %15
  %42 = load i64, ptr %15
  store i64 %42, ptr %16
  %43 = load i64, ptr %16
  %44 = add i64 %43, 1
  store i64 %44, ptr %16
  %45 = load i64, ptr %16
  store i64 %45, ptr %4
  %46 = load i64, ptr %4
  %47 = load i64, ptr %ds
  %48 = load i64, ptr %alloc
  %49 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %47, 0, 0
  %50 = insertvalue { { i64, i64 }, { i64 } } %49, i64 %48, 0, 1
  %51 = insertvalue { { i64, i64 }, { i64 } } %50, i64 %46, 1, 0
  ret { { i64, i64 }, { i64 } } %51
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlInt_ops__clz_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  br label %L1
L1:
  br label %L329
L329:
  %17 = load i64, ptr %4
  store i64 %17, ptr %5
  store i64 9223372036854775807, ptr %6
  %18 = ptrtoint ptr @camlInt_ops_data to i64
  store i64 %18, ptr %7
  %19 = load i64, ptr %7
  %20 = inttoptr i64 %19 to ptr addrspace(1)
  store ptr addrspace(1) %20, ptr %8
  %21 = load ptr addrspace(1), ptr %8
  %22 = getelementptr i8, ptr addrspace(1) %21, i64 16
  store ptr addrspace(1) %22, ptr %8
  %23 = load ptr addrspace(1), ptr %8
  %24 = load ptr addrspace(1), ptr addrspace(1) %23
  store ptr addrspace(1) %24, ptr %9
  %25 = load ptr addrspace(1), ptr %9
  %26 = ptrtoint ptr addrspace(1) %25 to i64
  store i64 %26, ptr %10
  %27 = load i64, ptr %10
  %28 = ashr i64 %27, 1
  store i64 %28, ptr %10
  %29 = load i64, ptr %10
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  %31 = load i64, ptr %6
  %32 = and i64 %30, %31
  store i64 %32, ptr %11
  %33 = load i64, ptr %11
  %34 = call  i64 @llvm.ctlz.i64(i64 %33, i1 0)
  store i64 %34, ptr %12
  %35 = load i64, ptr %12
  store i64 %35, ptr %13
  %36 = load i64, ptr %13
  %37 = add i64 %36, -1
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  store i64 %38, ptr %14
  %39 = load i64, ptr %14
  store i64 %39, ptr %15
  %40 = load i64, ptr %15
  %41 = shl i64 %40, 1
  store i64 %41, ptr %15
  %42 = load i64, ptr %15
  store i64 %42, ptr %16
  %43 = load i64, ptr %16
  %44 = add i64 %43, 1
  store i64 %44, ptr %16
  %45 = load i64, ptr %16
  store i64 %45, ptr %4
  %46 = load i64, ptr %4
  %47 = load i64, ptr %ds
  %48 = load i64, ptr %alloc
  %49 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %47, 0, 0
  %50 = insertvalue { { i64, i64 }, { i64 } } %49, i64 %48, 0, 1
  %51 = insertvalue { { i64, i64 }, { i64 } } %50, i64 %46, 1, 0
  ret { { i64, i64 }, { i64 } } %51
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlInt_ops__entry(i64 %0, i64 %1) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca ptr addrspace(1)
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L343
L343:
  %8 = ptrtoint ptr @camlInt_ops to i64
  store i64 %8, ptr %5
  %9 = load i64, ptr %5
  store i64 %9, ptr %6
  %10 = load i64, ptr %6
  %11 = inttoptr i64 %10 to ptr addrspace(1)
  store ptr addrspace(1) %11, ptr %4
  store i64 1, ptr %7
  %12 = load i64, ptr %7
  store i64 %12, ptr %3
  %13 = load ptr addrspace(1), ptr %3
  %14 = load i64, ptr %ds
  %15 = load i64, ptr %alloc
  %16 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %14, 0, 0
  %17 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %16, i64 %15, 0, 1
  %18 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %17, ptr addrspace(1) %13, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %18
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlInt_ops__gc_roots = global { i64 } { i64 0 }, section ".data", align 8
@header.camlInt_ops = global i64 28416, section ".data", align 8
@camlInt_ops = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @camlInt_ops__add_26, ptr @camlInt_ops__sub_27, ptr @camlInt_ops__mul_28, ptr @camlInt_ops__div_29, ptr @camlInt_ops__mod__30, ptr @camlInt_ops__land__31, ptr @camlInt_ops__lor__32, ptr @camlInt_ops__lxor__33, ptr @camlInt_ops__lnot__34, ptr @camlInt_ops__lsl__35, ptr @camlInt_ops__lsr__36, ptr @camlInt_ops__asr__37, i64 9, ptr @camlInt_ops__add_imm_38, ptr @camlInt_ops__sub_imm_39, ptr @camlInt_ops__mul_imm_40, ptr @camlInt_ops__div_imm_41, ptr @camlInt_ops__mod_imm_42, ptr @camlInt_ops__land_imm_43, ptr @camlInt_ops__lor_imm_44, ptr @camlInt_ops__lxor_imm_45, ptr @camlInt_ops__lsl_imm_46, ptr @camlInt_ops__lsr_imm_47, ptr @camlInt_ops__asr_imm_48, ptr @camlInt_ops__popcnt_49, ptr @camlInt_ops__ctz_50, ptr @camlInt_ops__clz_51 }, section ".data", align 8
@header.camlInt_ops__clz_51 = global i64 3063, section ".data", align 8
@camlInt_ops__clz_51 = global { ptr, i64 } { ptr @camlInt_ops__clz_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__ctz_50 = global i64 3063, section ".data", align 8
@camlInt_ops__ctz_50 = global { ptr, i64 } { ptr @camlInt_ops__ctz_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__popcnt_49 = global i64 3063, section ".data", align 8
@camlInt_ops__popcnt_49 = global { ptr, i64 } { ptr @camlInt_ops__popcnt_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__asr_imm_48 = global i64 3063, section ".data", align 8
@camlInt_ops__asr_imm_48 = global { ptr, i64 } { ptr @camlInt_ops__asr_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lsr_imm_47 = global i64 3063, section ".data", align 8
@camlInt_ops__lsr_imm_47 = global { ptr, i64 } { ptr @camlInt_ops__lsr_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lsl_imm_46 = global i64 3063, section ".data", align 8
@camlInt_ops__lsl_imm_46 = global { ptr, i64 } { ptr @camlInt_ops__lsl_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lxor_imm_45 = global i64 3063, section ".data", align 8
@camlInt_ops__lxor_imm_45 = global { ptr, i64 } { ptr @camlInt_ops__lxor_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lor_imm_44 = global i64 3063, section ".data", align 8
@camlInt_ops__lor_imm_44 = global { ptr, i64 } { ptr @camlInt_ops__lor_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__land_imm_43 = global i64 3063, section ".data", align 8
@camlInt_ops__land_imm_43 = global { ptr, i64 } { ptr @camlInt_ops__land_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__mod_imm_42 = global i64 3063, section ".data", align 8
@camlInt_ops__mod_imm_42 = global { ptr, i64 } { ptr @camlInt_ops__mod_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__div_imm_41 = global i64 3063, section ".data", align 8
@camlInt_ops__div_imm_41 = global { ptr, i64 } { ptr @camlInt_ops__div_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__mul_imm_40 = global i64 3063, section ".data", align 8
@camlInt_ops__mul_imm_40 = global { ptr, i64 } { ptr @camlInt_ops__mul_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__sub_imm_39 = global i64 3063, section ".data", align 8
@camlInt_ops__sub_imm_39 = global { ptr, i64 } { ptr @camlInt_ops__sub_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__add_imm_38 = global i64 3063, section ".data", align 8
@camlInt_ops__add_imm_38 = global { ptr, i64 } { ptr @camlInt_ops__add_imm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__asr__37 = global i64 3063, section ".data", align 8
@camlInt_ops__asr__37 = global { ptr, i64 } { ptr @camlInt_ops__asr__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lsr__36 = global i64 3063, section ".data", align 8
@camlInt_ops__lsr__36 = global { ptr, i64 } { ptr @camlInt_ops__lsr__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lsl__35 = global i64 3063, section ".data", align 8
@camlInt_ops__lsl__35 = global { ptr, i64 } { ptr @camlInt_ops__lsl__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lnot__34 = global i64 3063, section ".data", align 8
@camlInt_ops__lnot__34 = global { ptr, i64 } { ptr @camlInt_ops__lnot__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lxor__33 = global i64 3063, section ".data", align 8
@camlInt_ops__lxor__33 = global { ptr, i64 } { ptr @camlInt_ops__lxor__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__lor__32 = global i64 3063, section ".data", align 8
@camlInt_ops__lor__32 = global { ptr, i64 } { ptr @camlInt_ops__lor__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__land__31 = global i64 3063, section ".data", align 8
@camlInt_ops__land__31 = global { ptr, i64 } { ptr @camlInt_ops__land__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__mod__30 = global i64 3063, section ".data", align 8
@camlInt_ops__mod__30 = global { ptr, i64 } { ptr @camlInt_ops__mod__HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__div_29 = global i64 3063, section ".data", align 8
@camlInt_ops__div_29 = global { ptr, i64 } { ptr @camlInt_ops__div_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__mul_28 = global i64 3063, section ".data", align 8
@camlInt_ops__mul_28 = global { ptr, i64 } { ptr @camlInt_ops__mul_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__sub_27 = global i64 3063, section ".data", align 8
@camlInt_ops__sub_27 = global { ptr, i64 } { ptr @camlInt_ops__sub_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlInt_ops__add_26 = global i64 3063, section ".data", align 8
@camlInt_ops__add_26 = global { ptr, i64 } { ptr @camlInt_ops__add_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@temp.Int_ops.0 = global { ptr, ptr, ptr } { ptr @caml_int_clz_untagged_to_untagged, ptr @caml_int_ctz_untagged_to_untagged, ptr @caml_int_popcnt_untagged_to_untagged }, section ".data", align 8
@camlInt_ops_data = external global ptr
@caml_exn_Division_by_zero = external global ptr
@caml_int_clz_untagged_to_untagged = external global ptr
@caml_int_ctz_untagged_to_untagged = external global ptr
@caml_int_popcnt_untagged_to_untagged = external global ptr
@caml_raise_exn = external global ptr

declare i64 @llvm.ctlz.i64(i64, i1)
declare i64 @llvm.ctpop.i64(i64)
declare i64 @llvm.cttz.i64(i64, i1)


!0 = !{ i32 1, !"oxcaml_module", !"Int_ops" }
!llvm.module.flags = !{ !0 }
