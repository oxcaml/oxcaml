source_filename = "int_ops.ml"

@camlInt_ops__data_begin = global i64 0
define void @camlInt_ops__code_begin() { ret void }

define i64 @camlInt_ops__add_0_13_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %10 = load i64, ptr %2
  store i64 %10, ptr %3
  store ptr @camlInt_ops__add_13, ptr %4
  %11 = load i64, ptr %4
  %12 = add i64 %11, 16
  %13 = inttoptr i64 %12 to ptr
  %14 = load i64, ptr %13
  store i64 %14, ptr %5
  store ptr @camlInt_ops__add_13, ptr %6
  %15 = load i64, ptr %6
  %16 = add i64 %15, 24
  %17 = inttoptr i64 %16 to ptr
  %18 = load i64, ptr %17
  store i64 %18, ptr %7
  %19 = load i64, ptr %7
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  %21 = load i64, ptr %5
  %22 = add i64 %20, %21
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  %25 = add i64 %24, -1
  store i64 %25, ptr %9
  %26 = load i64, ptr %9
  store i64 %26, ptr %2
  %27 = load i64, ptr %2
  ret i64 %27
}

define i64 @camlInt_ops__sub_1_14_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L108
L108:                                                ; preds = %L1
  %10 = load i64, ptr %2
  store i64 %10, ptr %3
  store ptr @camlInt_ops__sub_14, ptr %4
  %11 = load i64, ptr %4
  %12 = add i64 %11, 16
  %13 = inttoptr i64 %12 to ptr
  %14 = load i64, ptr %13
  store i64 %14, ptr %5
  store ptr @camlInt_ops__sub_14, ptr %6
  %15 = load i64, ptr %6
  %16 = add i64 %15, 24
  %17 = inttoptr i64 %16 to ptr
  %18 = load i64, ptr %17
  store i64 %18, ptr %7
  %19 = load i64, ptr %7
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  %21 = load i64, ptr %5
  %22 = sub i64 %20, %21
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  %25 = add i64 %24, 1
  store i64 %25, ptr %9
  %26 = load i64, ptr %9
  store i64 %26, ptr %2
  %27 = load i64, ptr %2
  ret i64 %27
}

define i64 @camlInt_ops__mul_2_15_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L115
L115:                                                ; preds = %L1
  %12 = load i64, ptr %2
  store i64 %12, ptr %3
  store ptr @camlInt_ops__mul_15, ptr %4
  %13 = load i64, ptr %4
  %14 = add i64 %13, 16
  %15 = inttoptr i64 %14 to ptr
  %16 = load i64, ptr %15
  store i64 %16, ptr %5
  %17 = load i64, ptr %5
  store i64 %17, ptr %6
  %18 = load i64, ptr %6
  %19 = ashr i64 %18, 1
  store i64 %19, ptr %6
  store ptr @camlInt_ops__mul_15, ptr %7
  %20 = load i64, ptr %7
  %21 = add i64 %20, 24
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %22
  store i64 %23, ptr %8
  %24 = load i64, ptr %8
  store i64 %24, ptr %9
  %25 = load i64, ptr %9
  %26 = add i64 %25, -1
  store i64 %26, ptr %9
  %27 = load i64, ptr %9
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  %29 = load i64, ptr %6
  %30 = mul i64 %28, %29
  store i64 %30, ptr %10
  %31 = load i64, ptr %10
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  %33 = add i64 %32, 1
  store i64 %33, ptr %11
  %34 = load i64, ptr %11
  store i64 %34, ptr %2
  %35 = load i64, ptr %2
  ret i64 %35
}

define i64 @camlInt_ops__div_3_16_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  %13 = alloca i64 
  %14 = alloca i64 
  %15 = alloca i64 
  %16 = alloca i64 
  %17 = alloca i64 
  %18 = alloca i64 
  %19 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L124
L124:                                                ; preds = %L1
  %20 = load i64, ptr %2
  store i64 %20, ptr %4
  store ptr @camlInt_ops__div_16, ptr %5
  %21 = load i64, ptr %5
  %22 = add i64 %21, 16
  %23 = inttoptr i64 %22 to ptr
  %24 = load i64, ptr %23
  store i64 %24, ptr %6
  %25 = load i64, ptr %6
  %26 = icmp slt i64 %25, 1
  br i1 %26, label %L132, label %27
27:
  %28 = load i64, ptr %6
  %29 = icmp sgt i64 %28, 1
  br i1 %29, label %L132, label %L127
L127:                                                ; preds = %L124
  store i64 1, ptr %7
  %30 = load i64, ptr %7
  store i64 %30, ptr %2
  %31 = load i64, ptr %2
  ret i64 %31
L132:                                                ; preds = %L124
  store ptr @camlInt_ops__div_16, ptr %8
  %32 = load i64, ptr %8
  %33 = add i64 %32, 16
  %34 = inttoptr i64 %33 to ptr
  %35 = load i64, ptr %34
  store i64 %35, ptr %9
  %36 = load i64, ptr %9
  %37 = icmp slt i64 %36, 1
  br i1 %37, label %L135, label %38
38:
  %39 = load i64, ptr %9
  %40 = icmp sgt i64 %39, 1
  br i1 %40, label %L135, label %L147
L135:                                                ; preds = %L132
  store ptr @camlInt_ops__div_16, ptr %10
  %41 = load i64, ptr %10
  %42 = add i64 %41, 16
  %43 = inttoptr i64 %42 to ptr
  %44 = load i64, ptr %43
  store i64 %44, ptr %11
  %45 = load i64, ptr %11
  store i64 %45, ptr %12
  %46 = load i64, ptr %12
  %47 = ashr i64 %46, 1
  store i64 %47, ptr %12
  store ptr @camlInt_ops__div_16, ptr %13
  %48 = load i64, ptr %13
  %49 = add i64 %48, 24
  %50 = inttoptr i64 %49 to ptr
  %51 = load i64, ptr %50
  store i64 %51, ptr %14
  %52 = load i64, ptr %14
  store i64 %52, ptr %15
  %53 = load i64, ptr %15
  %54 = ashr i64 %53, 1
  store i64 %54, ptr %15
  %55 = load i64, ptr %15
  store i64 %55, ptr %2
  %56 = load i64, ptr %12
  store i64 %56, ptr %3
  %57 = load i64, ptr %2
  %58 = load i64, ptr %3
  %59 = sdiv i64 %57, %58
  store i64 %59, ptr %2
  %60 = load i64, ptr %2
  store i64 %60, ptr %16
  %61 = load i64, ptr %16
  store i64 %61, ptr %17
  %62 = load i64, ptr %17
  %63 = shl i64 %62, 1
  store i64 %63, ptr %17
  %64 = load i64, ptr %17
  store i64 %64, ptr %18
  %65 = load i64, ptr %18
  %66 = add i64 %65, 1
  store i64 %66, ptr %18
  %67 = load i64, ptr %18
  store i64 %67, ptr %2
  %68 = load i64, ptr %2
  ret i64 %68
L147:                                                ; preds = %L132
  store ptr @caml_exn_Division_by_zero, ptr %19
  %69 = load i64, ptr %19
  store i64 %69, ptr %2
  call void @llvm.trap()
  unreachable
}

define i64 @camlInt_ops__mod__4_17_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  %13 = alloca i64 
  %14 = alloca i64 
  %15 = alloca i64 
  %16 = alloca i64 
  %17 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L152
L152:                                                ; preds = %L1
  %18 = load i64, ptr %2
  store i64 %18, ptr %5
  store ptr @camlInt_ops__mod__17, ptr %6
  %19 = load i64, ptr %6
  %20 = add i64 %19, 16
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  store i64 %22, ptr %7
  %23 = load i64, ptr %7
  %24 = icmp slt i64 %23, 1
  br i1 %24, label %L158, label %25
25:
  %26 = load i64, ptr %7
  %27 = icmp sgt i64 %26, 1
  br i1 %27, label %L158, label %L170
L158:                                                ; preds = %L152
  store ptr @camlInt_ops__mod__17, ptr %8
  %28 = load i64, ptr %8
  %29 = add i64 %28, 16
  %30 = inttoptr i64 %29 to ptr
  %31 = load i64, ptr %30
  store i64 %31, ptr %9
  %32 = load i64, ptr %9
  store i64 %32, ptr %10
  %33 = load i64, ptr %10
  %34 = ashr i64 %33, 1
  store i64 %34, ptr %10
  store ptr @camlInt_ops__mod__17, ptr %11
  %35 = load i64, ptr %11
  %36 = add i64 %35, 24
  %37 = inttoptr i64 %36 to ptr
  %38 = load i64, ptr %37
  store i64 %38, ptr %12
  %39 = load i64, ptr %12
  store i64 %39, ptr %13
  %40 = load i64, ptr %13
  %41 = ashr i64 %40, 1
  store i64 %41, ptr %13
  %42 = load i64, ptr %13
  store i64 %42, ptr %2
  %43 = load i64, ptr %10
  store i64 %43, ptr %4
  %44 = load i64, ptr %2
  %45 = load i64, ptr %4
  %46 = srem i64 %44, %45
  store i64 %46, ptr %3
  %47 = load i64, ptr %3
  store i64 %47, ptr %14
  %48 = load i64, ptr %14
  store i64 %48, ptr %15
  %49 = load i64, ptr %15
  %50 = shl i64 %49, 1
  store i64 %50, ptr %15
  %51 = load i64, ptr %15
  store i64 %51, ptr %16
  %52 = load i64, ptr %16
  %53 = add i64 %52, 1
  store i64 %53, ptr %16
  %54 = load i64, ptr %16
  store i64 %54, ptr %2
  %55 = load i64, ptr %2
  ret i64 %55
L170:                                                ; preds = %L152
  store ptr @caml_exn_Division_by_zero, ptr %17
  %56 = load i64, ptr %17
  store i64 %56, ptr %2
  call void @llvm.trap()
  unreachable
}

define i64 @camlInt_ops__land__5_18_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L174
L174:                                                ; preds = %L1
  %9 = load i64, ptr %2
  store i64 %9, ptr %3
  store ptr @camlInt_ops__land__18, ptr %4
  %10 = load i64, ptr %4
  %11 = add i64 %10, 16
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %5
  store ptr @camlInt_ops__land__18, ptr %6
  %14 = load i64, ptr %6
  %15 = add i64 %14, 24
  %16 = inttoptr i64 %15 to ptr
  %17 = load i64, ptr %16
  store i64 %17, ptr %7
  %18 = load i64, ptr %7
  store i64 %18, ptr %8
  %19 = load i64, ptr %8
  %20 = load i64, ptr %5
  %21 = and i64 %19, %20
  store i64 %21, ptr %8
  %22 = load i64, ptr %8
  store i64 %22, ptr %2
  %23 = load i64, ptr %2
  ret i64 %23
}

define i64 @camlInt_ops__lor__7_20_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L180
L180:                                                ; preds = %L1
  %9 = load i64, ptr %2
  store i64 %9, ptr %3
  store ptr @camlInt_ops__lor__20, ptr %4
  %10 = load i64, ptr %4
  %11 = add i64 %10, 16
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %5
  store ptr @camlInt_ops__lor__20, ptr %6
  %14 = load i64, ptr %6
  %15 = add i64 %14, 24
  %16 = inttoptr i64 %15 to ptr
  %17 = load i64, ptr %16
  store i64 %17, ptr %7
  %18 = load i64, ptr %7
  store i64 %18, ptr %8
  %19 = load i64, ptr %8
  %20 = load i64, ptr %5
  %21 = or i64 %19, %20
  store i64 %21, ptr %8
  %22 = load i64, ptr %8
  store i64 %22, ptr %2
  %23 = load i64, ptr %2
  ret i64 %23
}

define i64 @camlInt_ops__lxor__8_21_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L186
L186:                                                ; preds = %L1
  %10 = load i64, ptr %2
  store i64 %10, ptr %3
  store ptr @camlInt_ops__lxor__21, ptr %4
  %11 = load i64, ptr %4
  %12 = add i64 %11, 16
  %13 = inttoptr i64 %12 to ptr
  %14 = load i64, ptr %13
  store i64 %14, ptr %5
  store ptr @camlInt_ops__lxor__21, ptr %6
  %15 = load i64, ptr %6
  %16 = add i64 %15, 24
  %17 = inttoptr i64 %16 to ptr
  %18 = load i64, ptr %17
  store i64 %18, ptr %7
  %19 = load i64, ptr %7
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  %21 = load i64, ptr %5
  %22 = xor i64 %20, %21
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  %25 = or i64 %24, 1
  store i64 %25, ptr %9
  %26 = load i64, ptr %9
  store i64 %26, ptr %2
  %27 = load i64, ptr %2
  ret i64 %27
}

define i64 @camlInt_ops__lnot__9_22_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L193
L193:                                                ; preds = %L1
  %8 = load i64, ptr %2
  store i64 %8, ptr %3
  store ptr @camlInt_ops__lnot__22, ptr %4
  %9 = load i64, ptr %4
  %10 = add i64 %9, 16
  %11 = inttoptr i64 %10 to ptr
  %12 = load i64, ptr %11
  store i64 %12, ptr %5
  %13 = load i64, ptr %5
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  %15 = xor i64 %14, -1
  store i64 %15, ptr %6
  %16 = load i64, ptr %6
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  %18 = or i64 %17, 1
  store i64 %18, ptr %7
  %19 = load i64, ptr %7
  store i64 %19, ptr %2
  %20 = load i64, ptr %2
  ret i64 %20
}

define i64 @camlInt_ops__lsl__10_23_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L199
L199:                                                ; preds = %L1
  %13 = load i64, ptr %2
  store i64 %13, ptr %4
  store ptr @camlInt_ops__lsl__23, ptr %5
  %14 = load i64, ptr %5
  %15 = add i64 %14, 16
  %16 = inttoptr i64 %15 to ptr
  %17 = load i64, ptr %16
  store i64 %17, ptr %6
  %18 = load i64, ptr %6
  store i64 %18, ptr %7
  %19 = load i64, ptr %7
  %20 = ashr i64 %19, 1
  store i64 %20, ptr %7
  store ptr @camlInt_ops__lsl__23, ptr %8
  %21 = load i64, ptr %8
  %22 = add i64 %21, 24
  %23 = inttoptr i64 %22 to ptr
  %24 = load i64, ptr %23
  store i64 %24, ptr %9
  %25 = load i64, ptr %9
  store i64 %25, ptr %10
  %26 = load i64, ptr %10
  %27 = add i64 %26, -1
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  store i64 %28, ptr %11
  %29 = load i64, ptr %7
  store i64 %29, ptr %3
  %30 = load i64, ptr %11
  %31 = load i64, ptr %3
  %32 = shl i64 %30, %31
  store i64 %32, ptr %11
  %33 = load i64, ptr %11
  store i64 %33, ptr %12
  %34 = load i64, ptr %12
  %35 = add i64 %34, 1
  store i64 %35, ptr %12
  %36 = load i64, ptr %12
  store i64 %36, ptr %2
  %37 = load i64, ptr %2
  ret i64 %37
}

define i64 @camlInt_ops__lsr__11_24_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L208
L208:                                                ; preds = %L1
  %12 = load i64, ptr %2
  store i64 %12, ptr %4
  store ptr @camlInt_ops__lsr__24, ptr %5
  %13 = load i64, ptr %5
  %14 = add i64 %13, 16
  %15 = inttoptr i64 %14 to ptr
  %16 = load i64, ptr %15
  store i64 %16, ptr %6
  %17 = load i64, ptr %6
  store i64 %17, ptr %7
  %18 = load i64, ptr %7
  %19 = ashr i64 %18, 1
  store i64 %19, ptr %7
  store ptr @camlInt_ops__lsr__24, ptr %8
  %20 = load i64, ptr %8
  %21 = add i64 %20, 24
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %22
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  store i64 %24, ptr %10
  %25 = load i64, ptr %7
  store i64 %25, ptr %3
  %26 = load i64, ptr %10
  %27 = load i64, ptr %3
  %28 = lshr i64 %26, %27
  store i64 %28, ptr %10
  %29 = load i64, ptr %10
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  %31 = or i64 %30, 1
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  store i64 %32, ptr %2
  %33 = load i64, ptr %2
  ret i64 %33
}

define i64 @camlInt_ops__asr__12_25_code(i64 %0)  {
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  store i64 %0, ptr %2
  br label %L1
L1:
  br label %L216
L216:                                                ; preds = %L1
  %12 = load i64, ptr %2
  store i64 %12, ptr %4
  store ptr @camlInt_ops__asr__25, ptr %5
  %13 = load i64, ptr %5
  %14 = add i64 %13, 16
  %15 = inttoptr i64 %14 to ptr
  %16 = load i64, ptr %15
  store i64 %16, ptr %6
  %17 = load i64, ptr %6
  store i64 %17, ptr %7
  %18 = load i64, ptr %7
  %19 = ashr i64 %18, 1
  store i64 %19, ptr %7
  store ptr @camlInt_ops__asr__25, ptr %8
  %20 = load i64, ptr %8
  %21 = add i64 %20, 24
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %22
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  store i64 %24, ptr %10
  %25 = load i64, ptr %7
  store i64 %25, ptr %3
  %26 = load i64, ptr %10
  %27 = load i64, ptr %3
  %28 = ashr i64 %26, %27
  store i64 %28, ptr %10
  %29 = load i64, ptr %10
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  %31 = or i64 %30, 1
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  store i64 %32, ptr %2
  %33 = load i64, ptr %2
  ret i64 %33
}

define i64 @camlInt_ops__entry()  {
  %1 = alloca i64 
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  %6 = alloca i64 
  %7 = alloca i64 
  %8 = alloca i64 
  %9 = alloca i64 
  %10 = alloca i64 
  %11 = alloca i64 
  %12 = alloca i64 
  %13 = alloca i64 
  %14 = alloca i64 
  %15 = alloca i64 
  %16 = alloca i64 
  %17 = alloca i64 
  %18 = alloca i64 
  %19 = alloca i64 
  %20 = alloca i64 
  %21 = alloca i64 
  %22 = alloca i64 
  %23 = alloca i64 
  %24 = alloca i64 
  %25 = alloca i64 
  %26 = alloca i64 
  %27 = alloca i64 
  %28 = alloca i64 
  %29 = alloca i64 
  %30 = alloca i64 
  %31 = alloca i64 
  %32 = alloca i64 
  %33 = alloca i64 
  %34 = alloca i64 
  br label %L1
L1:
  br label %L227
L227:                                                ; preds = %L1
  store i64 -29, ptr %3
  %35 = load i64, ptr %3
  store i64 %35, ptr %3
  %36 = load i64, ptr %3
  store i64 %36, ptr %4
  store ptr @camlInt_ops__add_13, ptr %5
  %37 = load i64, ptr %5
  %38 = add i64 %37, 24
  %39 = inttoptr i64 %38 to ptr
  %40 = load i64, ptr %4
  store i64 %40, ptr %39
  store ptr @camlInt_ops__sub_14, ptr %6
  %41 = load i64, ptr %6
  %42 = add i64 %41, 24
  %43 = inttoptr i64 %42 to ptr
  %44 = load i64, ptr %4
  store i64 %44, ptr %43
  store ptr @camlInt_ops__mul_15, ptr %7
  %45 = load i64, ptr %7
  %46 = add i64 %45, 24
  %47 = inttoptr i64 %46 to ptr
  %48 = load i64, ptr %4
  store i64 %48, ptr %47
  store ptr @camlInt_ops__div_16, ptr %8
  %49 = load i64, ptr %8
  %50 = add i64 %49, 24
  %51 = inttoptr i64 %50 to ptr
  %52 = load i64, ptr %4
  store i64 %52, ptr %51
  store ptr @camlInt_ops__mod__17, ptr %9
  %53 = load i64, ptr %9
  %54 = add i64 %53, 24
  %55 = inttoptr i64 %54 to ptr
  %56 = load i64, ptr %4
  store i64 %56, ptr %55
  store ptr @camlInt_ops__land__18, ptr %10
  %57 = load i64, ptr %10
  %58 = add i64 %57, 24
  %59 = inttoptr i64 %58 to ptr
  %60 = load i64, ptr %4
  store i64 %60, ptr %59
  store ptr @camlInt_ops__lor__20, ptr %11
  %61 = load i64, ptr %11
  %62 = add i64 %61, 24
  %63 = inttoptr i64 %62 to ptr
  %64 = load i64, ptr %4
  store i64 %64, ptr %63
  store ptr @camlInt_ops__lxor__21, ptr %12
  %65 = load i64, ptr %12
  %66 = add i64 %65, 24
  %67 = inttoptr i64 %66 to ptr
  %68 = load i64, ptr %4
  store i64 %68, ptr %67
  store ptr @camlInt_ops__lnot__22, ptr %13
  %69 = load i64, ptr %13
  %70 = add i64 %69, 16
  %71 = inttoptr i64 %70 to ptr
  %72 = load i64, ptr %4
  store i64 %72, ptr %71
  store ptr @camlInt_ops__lsl__23, ptr %14
  %73 = load i64, ptr %14
  %74 = add i64 %73, 24
  %75 = inttoptr i64 %74 to ptr
  %76 = load i64, ptr %4
  store i64 %76, ptr %75
  store ptr @camlInt_ops__lsr__24, ptr %15
  %77 = load i64, ptr %15
  %78 = add i64 %77, 24
  %79 = inttoptr i64 %78 to ptr
  %80 = load i64, ptr %4
  store i64 %80, ptr %79
  store ptr @camlInt_ops__asr__25, ptr %16
  %81 = load i64, ptr %16
  %82 = add i64 %81, 24
  %83 = inttoptr i64 %82 to ptr
  %84 = load i64, ptr %4
  store i64 %84, ptr %83
  store ptr @camlInt_ops, ptr %17
  %85 = load i64, ptr %17
  %86 = add i64 %85, 0
  %87 = inttoptr i64 %86 to ptr
  %88 = load i64, ptr %4
  store i64 %88, ptr %87
  store i64 9, ptr %18
  %89 = load i64, ptr %18
  store i64 %89, ptr %18
  %90 = load i64, ptr %18
  store i64 %90, ptr %19
  store ptr @camlInt_ops__add_13, ptr %20
  %91 = load i64, ptr %20
  %92 = add i64 %91, 16
  %93 = inttoptr i64 %92 to ptr
  %94 = load i64, ptr %19
  store i64 %94, ptr %93
  store ptr @camlInt_ops__sub_14, ptr %21
  %95 = load i64, ptr %21
  %96 = add i64 %95, 16
  %97 = inttoptr i64 %96 to ptr
  %98 = load i64, ptr %19
  store i64 %98, ptr %97
  store ptr @camlInt_ops__mul_15, ptr %22
  %99 = load i64, ptr %22
  %100 = add i64 %99, 16
  %101 = inttoptr i64 %100 to ptr
  %102 = load i64, ptr %19
  store i64 %102, ptr %101
  store ptr @camlInt_ops__div_16, ptr %23
  %103 = load i64, ptr %23
  %104 = add i64 %103, 16
  %105 = inttoptr i64 %104 to ptr
  %106 = load i64, ptr %19
  store i64 %106, ptr %105
  store ptr @camlInt_ops__mod__17, ptr %24
  %107 = load i64, ptr %24
  %108 = add i64 %107, 16
  %109 = inttoptr i64 %108 to ptr
  %110 = load i64, ptr %19
  store i64 %110, ptr %109
  store ptr @camlInt_ops__land__18, ptr %25
  %111 = load i64, ptr %25
  %112 = add i64 %111, 16
  %113 = inttoptr i64 %112 to ptr
  %114 = load i64, ptr %19
  store i64 %114, ptr %113
  store ptr @camlInt_ops__lor__20, ptr %26
  %115 = load i64, ptr %26
  %116 = add i64 %115, 16
  %117 = inttoptr i64 %116 to ptr
  %118 = load i64, ptr %19
  store i64 %118, ptr %117
  store ptr @camlInt_ops__lxor__21, ptr %27
  %119 = load i64, ptr %27
  %120 = add i64 %119, 16
  %121 = inttoptr i64 %120 to ptr
  %122 = load i64, ptr %19
  store i64 %122, ptr %121
  store ptr @camlInt_ops__lsl__23, ptr %28
  %123 = load i64, ptr %28
  %124 = add i64 %123, 16
  %125 = inttoptr i64 %124 to ptr
  %126 = load i64, ptr %19
  store i64 %126, ptr %125
  store ptr @camlInt_ops__lsr__24, ptr %29
  %127 = load i64, ptr %29
  %128 = add i64 %127, 16
  %129 = inttoptr i64 %128 to ptr
  %130 = load i64, ptr %19
  store i64 %130, ptr %129
  store ptr @camlInt_ops__asr__25, ptr %30
  %131 = load i64, ptr %30
  %132 = add i64 %131, 16
  %133 = inttoptr i64 %132 to ptr
  %134 = load i64, ptr %19
  store i64 %134, ptr %133
  store ptr @camlInt_ops, ptr %31
  %135 = load i64, ptr %31
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %136 to ptr
  %138 = load i64, ptr %19
  store i64 %138, ptr %137
  store ptr @camlInt_ops, ptr %32
  %139 = load i64, ptr %32
  store i64 %139, ptr %33
  %140 = load i64, ptr %33
  store i64 %140, ptr %2
  store i64 1, ptr %34
  %141 = load i64, ptr %34
  store i64 %141, ptr %1
  %142 = load i64, ptr %1
  ret i64 %142
}

@camlInt_ops__gc_roots = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64 } { ptr @camlInt_ops, ptr @camlInt_ops__asr__25, ptr @camlInt_ops__lsr__24, ptr @camlInt_ops__lsl__23, ptr @camlInt_ops__lnot__22, ptr @camlInt_ops__lxor__21, ptr @camlInt_ops__lor__20, ptr @camlInt_ops__land__18, ptr @camlInt_ops__mod__17, ptr @camlInt_ops__div_16, ptr @camlInt_ops__mul_15, ptr @camlInt_ops__sub_14, ptr @camlInt_ops__add_13, i64 0, i64 15104 }
@camlInt_ops = global { i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64 } { i64 1, i64 1, ptr @camlInt_ops__add_13, ptr @camlInt_ops__sub_14, ptr @camlInt_ops__mul_15, ptr @camlInt_ops__div_16, ptr @camlInt_ops__mod__17, ptr @camlInt_ops__land__18, ptr @camlInt_ops__lor__20, ptr @camlInt_ops__lxor__21, ptr @camlInt_ops__lnot__22, ptr @camlInt_ops__lsl__23, ptr @camlInt_ops__lsr__24, ptr @camlInt_ops__asr__25, i64 5111 }
@camlInt_ops__asr__25 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__asr__12_25_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__lsr__24 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__lsr__11_24_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__lsl__23 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__lsl__10_23_code, i64 108086391056891913, i64 1, i64 1, i64 4087 }
@camlInt_ops__lnot__22 = global { ptr, i64, i64, i64 } { ptr @camlInt_ops__lnot__9_22_code, i64 108086391056891911, i64 1, i64 5111 }
@camlInt_ops__lxor__21 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__lxor__8_21_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__lor__20 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__lor__7_20_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__land__18 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__land__5_18_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__mod__17 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__mod__4_17_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__div_16 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__div_3_16_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__mul_15 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__mul_2_15_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__sub_14 = global { ptr, i64, i64, i64, i64 } { ptr @camlInt_ops__sub_1_14_code, i64 108086391056891913, i64 1, i64 1, i64 5111 }
@camlInt_ops__add_13 = global { ptr, i64, i64, i64 } { ptr @camlInt_ops__add_0_13_code, i64 108086391056891913, i64 1, i64 1 }
@caml_exn_Division_by_zero = external global ptr

@camlInt_ops__data_end = global i64 0
define void @camlInt_ops__code_end() { ret void }
@camlInt_ops__frametable = global i64 0
