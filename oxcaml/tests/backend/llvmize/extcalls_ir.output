source_filename = "extcalls.ml"

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExtcalls__call_too_many_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca ptr addrspace(1)
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca ptr addrspace(1)
  %26 = alloca ptr addrspace(1)
  %27 = alloca ptr addrspace(1)
  %28 = alloca ptr addrspace(1)
  %29 = alloca ptr addrspace(1)
  %30 = alloca ptr addrspace(1)
  %31 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L101
L101:
  %32 = load i64, ptr %4
  store i64 %32, ptr %12
  store i64 25, ptr %13
  store i64 23, ptr %14
  store i64 21, ptr %15
  store i64 19, ptr %16
  store i64 17, ptr %17
  store i64 15, ptr %18
  store i64 13, ptr %19
  store i64 11, ptr %20
  store i64 9, ptr %21
  store i64 7, ptr %22
  store i64 5, ptr %23
  store i64 3, ptr %24
  %33 = load i64, ptr %24
  %34 = inttoptr i64 %33 to ptr addrspace(1)
  store ptr addrspace(1) %34, ptr %6
  %35 = load i64, ptr %23
  %36 = inttoptr i64 %35 to ptr addrspace(1)
  store ptr addrspace(1) %36, ptr %7
  %37 = load i64, ptr %22
  %38 = inttoptr i64 %37 to ptr addrspace(1)
  store ptr addrspace(1) %38, ptr %8
  %39 = load i64, ptr %21
  %40 = inttoptr i64 %39 to ptr addrspace(1)
  store ptr addrspace(1) %40, ptr %9
  %41 = load i64, ptr %20
  %42 = inttoptr i64 %41 to ptr addrspace(1)
  store ptr addrspace(1) %42, ptr %10
  %43 = load i64, ptr %19
  %44 = inttoptr i64 %43 to ptr addrspace(1)
  store ptr addrspace(1) %44, ptr %11
  %45 = load i64, ptr %18
  %46 = inttoptr i64 %45 to ptr addrspace(1)
  store ptr addrspace(1) %46, ptr %25
  %47 = load i64, ptr %17
  %48 = inttoptr i64 %47 to ptr addrspace(1)
  store ptr addrspace(1) %48, ptr %26
  %49 = load i64, ptr %16
  %50 = inttoptr i64 %49 to ptr addrspace(1)
  store ptr addrspace(1) %50, ptr %27
  %51 = load i64, ptr %15
  %52 = inttoptr i64 %51 to ptr addrspace(1)
  store ptr addrspace(1) %52, ptr %28
  %53 = load i64, ptr %14
  %54 = inttoptr i64 %53 to ptr addrspace(1)
  store ptr addrspace(1) %54, ptr %29
  %55 = load i64, ptr %13
  %56 = inttoptr i64 %55 to ptr addrspace(1)
  store ptr addrspace(1) %56, ptr %30
  %57 = load ptr addrspace(1), ptr %6
  %58 = load ptr addrspace(1), ptr %7
  %59 = load ptr addrspace(1), ptr %8
  %60 = load ptr addrspace(1), ptr %9
  %61 = load ptr addrspace(1), ptr %10
  %62 = load ptr addrspace(1), ptr %11
  %63 = load ptr addrspace(1), ptr %25
  %64 = load ptr addrspace(1), ptr %26
  %65 = load ptr addrspace(1), ptr %27
  %66 = load ptr addrspace(1), ptr %28
  %67 = load ptr addrspace(1), ptr %29
  %68 = load ptr addrspace(1), ptr %30
  %69 = load i64, ptr %ds
  %70 = load i64, ptr %alloc
  %71 = call oxcaml_c_stackcc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call_stack_args_llvm_backend(i64 %69, i64 %70, ptr @too_many, i64 48, ptr addrspace(1) %57, ptr addrspace(1) %58, ptr addrspace(1) %59, ptr addrspace(1) %60, ptr addrspace(1) %61, ptr addrspace(1) %62, ptr addrspace(1) %63, ptr addrspace(1) %64, ptr addrspace(1) %65, ptr addrspace(1) %66, ptr addrspace(1) %67, ptr addrspace(1) %68) "statepoint-id"="0"
  %72 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %71, 0, 0
  %73 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %71, 0, 1
  store i64 %72, ptr %ds
  store i64 %73, ptr %alloc
  %74 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %71, 1, 0
  store ptr addrspace(1) %74, ptr %5
  br label %L103
L103:
  %75 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %75, ptr %31
  %76 = load ptr addrspace(1), ptr %31
  store ptr addrspace(1) %76, ptr %5
  %77 = load i64, ptr %5
  %78 = load i64, ptr %ds
  %79 = load i64, ptr %alloc
  %80 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %78, 0, 0
  %81 = insertvalue { { i64, i64 }, { i64 } } %80, i64 %79, 0, 1
  %82 = insertvalue { { i64, i64 }, { i64 } } %81, i64 %77, 1, 0
  ret { { i64, i64 }, { i64 } } %82
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExtcalls__call_print_and_add_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca ptr addrspace(1)
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L105
L105:
  %12 = load i64, ptr %4
  store i64 %12, ptr %8
  store i64 21, ptr %9
  store i64 19, ptr %10
  %13 = load i64, ptr %10
  %14 = inttoptr i64 %13 to ptr addrspace(1)
  store ptr addrspace(1) %14, ptr %6
  %15 = load i64, ptr %9
  %16 = inttoptr i64 %15 to ptr addrspace(1)
  store ptr addrspace(1) %16, ptr %7
  %17 = load ptr addrspace(1), ptr %6
  %18 = load ptr addrspace(1), ptr %7
  %19 = load i64, ptr %ds
  %20 = load i64, ptr %alloc
  %21 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %19, i64 %20, ptr @print_and_add, ptr addrspace(1) %17, ptr addrspace(1) %18) "statepoint-id"="0"
  %22 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %21, 0, 0
  %23 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %21, 0, 1
  store i64 %22, ptr %ds
  store i64 %23, ptr %alloc
  %24 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %21, 1, 0
  store ptr addrspace(1) %24, ptr %5
  br label %L107
L107:
  %25 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %25, ptr %11
  %26 = load ptr addrspace(1), ptr %11
  store ptr addrspace(1) %26, ptr %5
  %27 = load i64, ptr %5
  %28 = load i64, ptr %ds
  %29 = load i64, ptr %alloc
  %30 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %28, 0, 0
  %31 = insertvalue { { i64, i64 }, { i64 } } %30, i64 %29, 0, 1
  %32 = insertvalue { { i64, i64 }, { i64 } } %31, i64 %27, 1, 0
  ret { { i64, i64 }, { i64 } } %32
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExtcalls__call_int_and_float_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca ptr addrspace(1)
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L109
L109:
  %16 = load i64, ptr %4
  store i64 %16, ptr %10
  %17 = ptrtoint ptr @camlExtcalls__float25 to i64
  store i64 %17, ptr %11
  store i64 7, ptr %12
  %18 = ptrtoint ptr @camlExtcalls__float23 to i64
  store i64 %18, ptr %13
  store i64 3, ptr %14
  %19 = load i64, ptr %14
  %20 = inttoptr i64 %19 to ptr addrspace(1)
  store ptr addrspace(1) %20, ptr %6
  %21 = load i64, ptr %13
  %22 = inttoptr i64 %21 to ptr addrspace(1)
  store ptr addrspace(1) %22, ptr %7
  %23 = load i64, ptr %12
  %24 = inttoptr i64 %23 to ptr addrspace(1)
  store ptr addrspace(1) %24, ptr %8
  %25 = load i64, ptr %11
  %26 = inttoptr i64 %25 to ptr addrspace(1)
  store ptr addrspace(1) %26, ptr %9
  %27 = load ptr addrspace(1), ptr %6
  %28 = load ptr addrspace(1), ptr %7
  %29 = load ptr addrspace(1), ptr %8
  %30 = load ptr addrspace(1), ptr %9
  %31 = load i64, ptr %ds
  %32 = load i64, ptr %alloc
  %33 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %31, i64 %32, ptr @int_and_float, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, ptr addrspace(1) %30) "statepoint-id"="0"
  %34 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %33, 0, 0
  %35 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %33, 0, 1
  store i64 %34, ptr %ds
  store i64 %35, ptr %alloc
  %36 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %33, 1, 0
  store ptr addrspace(1) %36, ptr %5
  br label %L111
L111:
  %37 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %37, ptr %15
  %38 = load ptr addrspace(1), ptr %15
  store ptr addrspace(1) %38, ptr %5
  %39 = load i64, ptr %5
  %40 = load i64, ptr %ds
  %41 = load i64, ptr %alloc
  %42 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %40, 0, 0
  %43 = insertvalue { { i64, i64 }, { i64 } } %42, i64 %41, 0, 1
  %44 = insertvalue { { i64, i64 }, { i64 } } %43, i64 %39, 1, 0
  ret { { i64, i64 }, { i64 } } %44
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlExtcalls__entry(i64 %0, i64 %1) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca ptr addrspace(1)
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L116
L116:
  %8 = ptrtoint ptr @camlExtcalls to i64
  store i64 %8, ptr %5
  %9 = load i64, ptr %5
  store i64 %9, ptr %6
  %10 = load i64, ptr %6
  %11 = inttoptr i64 %10 to ptr addrspace(1)
  store ptr addrspace(1) %11, ptr %4
  store i64 1, ptr %7
  %12 = load i64, ptr %7
  store i64 %12, ptr %3
  %13 = load ptr addrspace(1), ptr %3
  %14 = load i64, ptr %ds
  %15 = load i64, ptr %alloc
  %16 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %14, 0, 0
  %17 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %16, i64 %15, 0, 1
  %18 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %17, ptr addrspace(1) %13, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %18
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlExtcalls__gc_roots = global { i64 } { i64 0 }, section ".data", align 8
@header.camlExtcalls = global i64 3840, section ".data", align 8
@camlExtcalls = global { ptr, ptr, ptr } { ptr @camlExtcalls__call_too_many_3, ptr @camlExtcalls__call_print_and_add_4, ptr @camlExtcalls__call_int_and_float_5 }, section ".data", align 8
@header.camlExtcalls__call_int_and_float_5 = global i64 3063, section ".data", align 8
@camlExtcalls__call_int_and_float_5 = global { ptr, i64 } { ptr @camlExtcalls__call_int_and_float_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExtcalls__call_print_and_add_4 = global i64 3063, section ".data", align 8
@camlExtcalls__call_print_and_add_4 = global { ptr, i64 } { ptr @camlExtcalls__call_print_and_add_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExtcalls__call_too_many_3 = global i64 3063, section ".data", align 8
@camlExtcalls__call_too_many_3 = global { ptr, i64 } { ptr @camlExtcalls__call_too_many_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExtcalls__float25 = global i64 2045, section ".data", align 8
@camlExtcalls__float25 = global { double } { double 4.00000000000000000000 }, section ".data", align 8
@header.camlExtcalls__float23 = global i64 2045, section ".data", align 8
@camlExtcalls__float23 = global { double } { double 2.00000000000000000000 }, section ".data", align 8
@temp.Extcalls.0 = global { ptr, ptr, ptr } { ptr @int_and_float, ptr @too_many, ptr @print_and_add }, section ".data", align 8
@caml_c_call = external global ptr
@caml_c_call_stack_args_llvm_backend = external global ptr
@int_and_float = external global ptr
@print_and_add = external global ptr
@too_many = external global ptr



!0 = !{ i32 1, !"oxcaml_module", !"Extcalls" }
!llvm.module.flags = !{ !0 }
