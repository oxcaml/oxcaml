source_filename = "extcalls.ml"

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExtcalls__call_too_many_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L101
L101:
  %32 = load i64, ptr %4
  store i64 %32, ptr %12
  store i64 25, ptr %13
  store i64 23, ptr %14
  store i64 21, ptr %15
  store i64 19, ptr %16
  store i64 17, ptr %17
  store i64 15, ptr %18
  store i64 13, ptr %19
  store i64 11, ptr %20
  store i64 9, ptr %21
  store i64 7, ptr %22
  store i64 5, ptr %23
  store i64 3, ptr %24
  %33 = load i64, ptr %24
  store i64 %33, ptr %6
  %34 = load i64, ptr %23
  store i64 %34, ptr %7
  %35 = load i64, ptr %22
  store i64 %35, ptr %8
  %36 = load i64, ptr %21
  store i64 %36, ptr %9
  %37 = load i64, ptr %20
  store i64 %37, ptr %10
  %38 = load i64, ptr %19
  store i64 %38, ptr %11
  %39 = load i64, ptr %18
  store i64 %39, ptr %25
  %40 = load i64, ptr %17
  store i64 %40, ptr %26
  %41 = load i64, ptr %16
  store i64 %41, ptr %27
  %42 = load i64, ptr %15
  store i64 %42, ptr %28
  %43 = load i64, ptr %14
  store i64 %43, ptr %29
  %44 = load i64, ptr %13
  store i64 %44, ptr %30
  %45 = load i64, ptr %6
  %46 = load i64, ptr %7
  %47 = load i64, ptr %8
  %48 = load i64, ptr %9
  %49 = load i64, ptr %10
  %50 = load i64, ptr %11
  %51 = load i64, ptr %25
  %52 = load i64, ptr %26
  %53 = load i64, ptr %27
  %54 = load i64, ptr %28
  %55 = load i64, ptr %29
  %56 = load i64, ptr %30
  %57 = load i64, ptr %ds
  %58 = load i64, ptr %alloc
  %59 = call oxcaml_c_stackcc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call_stack_args_llvm_backend(i64 %57, i64 %58, ptr @too_many, i64 48, i64 %45, i64 %46, i64 %47, i64 %48, i64 %49, i64 %50, i64 %51, i64 %52, i64 %53, i64 %54, i64 %55, i64 %56) "statepoint-id"="0"
  %60 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %59, 0, 0
  %61 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %59, 0, 1
  store i64 %60, ptr %ds
  store i64 %61, ptr %alloc
  %62 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %59, 1, 0
  store ptr addrspace(1) %62, ptr %5
  br label %L103
L103:
  %63 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %63, ptr %31
  %64 = load ptr addrspace(1), ptr %31
  store ptr addrspace(1) %64, ptr %5
  %65 = load i64, ptr %5
  %66 = load i64, ptr %ds
  %67 = load i64, ptr %alloc
  %68 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %66, 0, 0
  %69 = insertvalue { { i64, i64 }, { i64 } } %68, i64 %67, 0, 1
  %70 = insertvalue { { i64, i64 }, { i64 } } %69, i64 %65, 1, 0
  ret { { i64, i64 }, { i64 } } %70
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExtcalls__call_print_and_add_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L105
L105:
  %12 = load i64, ptr %4
  store i64 %12, ptr %8
  store i64 21, ptr %9
  store i64 19, ptr %10
  %13 = load i64, ptr %10
  store i64 %13, ptr %6
  %14 = load i64, ptr %9
  store i64 %14, ptr %7
  %15 = load i64, ptr %6
  %16 = load i64, ptr %7
  %17 = load i64, ptr %ds
  %18 = load i64, ptr %alloc
  %19 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %17, i64 %18, ptr @print_and_add, i64 %15, i64 %16) "statepoint-id"="0"
  %20 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %19, 0, 0
  %21 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %19, 0, 1
  store i64 %20, ptr %ds
  store i64 %21, ptr %alloc
  %22 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %19, 1, 0
  store ptr addrspace(1) %22, ptr %5
  br label %L107
L107:
  %23 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %23, ptr %11
  %24 = load ptr addrspace(1), ptr %11
  store ptr addrspace(1) %24, ptr %5
  %25 = load i64, ptr %5
  %26 = load i64, ptr %ds
  %27 = load i64, ptr %alloc
  %28 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %26, 0, 0
  %29 = insertvalue { { i64, i64 }, { i64 } } %28, i64 %27, 0, 1
  %30 = insertvalue { { i64, i64 }, { i64 } } %29, i64 %25, 1, 0
  ret { { i64, i64 }, { i64 } } %30
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExtcalls__call_int_and_float_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L109
L109:
  %16 = load i64, ptr %4
  store i64 %16, ptr %10
  %17 = ptrtoint ptr @camlExtcalls__float25 to i64
  store i64 %17, ptr %11
  store i64 7, ptr %12
  %18 = ptrtoint ptr @camlExtcalls__float23 to i64
  store i64 %18, ptr %13
  store i64 3, ptr %14
  %19 = load i64, ptr %14
  store i64 %19, ptr %6
  %20 = load i64, ptr %13
  store i64 %20, ptr %7
  %21 = load i64, ptr %12
  store i64 %21, ptr %8
  %22 = load i64, ptr %11
  store i64 %22, ptr %9
  %23 = load i64, ptr %6
  %24 = load i64, ptr %7
  %25 = load i64, ptr %8
  %26 = load i64, ptr %9
  %27 = load i64, ptr %ds
  %28 = load i64, ptr %alloc
  %29 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %27, i64 %28, ptr @int_and_float, i64 %23, i64 %24, i64 %25, i64 %26) "statepoint-id"="0"
  %30 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %29, 0, 0
  %31 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %29, 0, 1
  store i64 %30, ptr %ds
  store i64 %31, ptr %alloc
  %32 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %29, 1, 0
  store ptr addrspace(1) %32, ptr %5
  br label %L111
L111:
  %33 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %33, ptr %15
  %34 = load ptr addrspace(1), ptr %15
  store ptr addrspace(1) %34, ptr %5
  %35 = load i64, ptr %5
  %36 = load i64, ptr %ds
  %37 = load i64, ptr %alloc
  %38 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %36, 0, 0
  %39 = insertvalue { { i64, i64 }, { i64 } } %38, i64 %37, 0, 1
  %40 = insertvalue { { i64, i64 }, { i64 } } %39, i64 %35, 1, 0
  ret { { i64, i64 }, { i64 } } %40
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlExtcalls__f_HIDE_STAMP(i64 %0, i64 %1, double %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca double
  store double %2, ptr %4
  %5 = alloca i64
  %6 = alloca double
  %7 = alloca i64
  br label %L1
L1:
  br label %L113
L113:
  %8 = load double, ptr %4
  store double %8, ptr %6
  %9 = ptrtoint ptr @camlExtcalls__Pmakeblock40 to i64
  store i64 %9, ptr %7
  %10 = load i64, ptr %7
  store i64 %10, ptr %5
  %11 = load i64, ptr %ds
  %12 = add i64 %11, 240
  %13 = inttoptr i64 %12 to ptr
  store i64 0, ptr %13
  %14 = load i64, ptr %5
  %15 = load i64, ptr %ds
  %16 = load i64, ptr %alloc
  %17 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %15, i64 %16, i64 %14) "statepoint-id"="0"
  %18 = extractvalue { { i64, i64 }, {  } } %17, 0, 0
  %19 = extractvalue { { i64, i64 }, {  } } %17, 0, 1
  store i64 %18, ptr %ds
  store i64 %19, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExtcalls__call_no_return_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L116
L116:
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = ptrtoint ptr @camlExtcalls__float48 to i64
  store i64 %10, ptr %6
  %11 = load i64, ptr %6
  %12 = call i64 asm  "", "=r,0"(i64 %11) "gc-leaf-function"="true"
  store i64 %12, ptr %6
  %13 = load i64, ptr %6
  store i64 %13, ptr %7
  store i64 1, ptr %8
  %14 = load i64, ptr %8
  store i64 %14, ptr %4
  %15 = load i64, ptr %4
  %16 = load i64, ptr %ds
  %17 = load i64, ptr %alloc
  %18 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %16, 0, 0
  %19 = insertvalue { { i64, i64 }, { i64 } } %18, i64 %17, 0, 1
  %20 = insertvalue { { i64, i64 }, { i64 } } %19, i64 %15, 1, 0
  ret { { i64, i64 }, { i64 } } %20
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExtcalls__fn$5bextcalls.ml$3a40$2c4$2d$2d91$5d_HIDE_STAMP(i64 %0, i64 %1, ptr addrspace(1) %2, ptr addrspace(1) %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca ptr addrspace(1)
  store ptr addrspace(1) %2, ptr %5
  %6 = alloca ptr addrspace(1)
  store ptr addrspace(1) %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  br label %L1
L1:
  br label %L119
L119:
  %12 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %12, ptr %9
  %13 = load ptr addrspace(1), ptr %6
  store ptr addrspace(1) %13, ptr %10
  %14 = ptrtoint ptr @camlExtcalls__invalid187 to i64
  store i64 %14, ptr %11
  %15 = load i64, ptr %11
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = load i64, ptr %ds
  %18 = load i64, ptr %alloc
  %19 = call oxcamlcc { { i64, i64 }, { i64 } } @c_call_wrapper.caml_flambda2_invalid(i64 %17, i64 %18, i64 %16) "gc-leaf-function"="true"
  %20 = extractvalue { { i64, i64 }, { i64 } } %19, 0, 0
  %21 = extractvalue { { i64, i64 }, { i64 } } %19, 0, 1
  store i64 %20, ptr %ds
  store i64 %21, ptr %alloc
  %22 = extractvalue { { i64, i64 }, { i64 } } %19, 1, 0
  store i64 %22, ptr %7
  unreachable
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlExtcalls__entry(i64 %0, i64 %1) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca ptr addrspace(1)
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L129
L129:
  %8 = ptrtoint ptr @camlExtcalls to i64
  store i64 %8, ptr %5
  %9 = load i64, ptr %5
  store i64 %9, ptr %6
  %10 = load i64, ptr %6
  %11 = inttoptr i64 %10 to ptr addrspace(1)
  store ptr addrspace(1) %11, ptr %4
  store i64 1, ptr %7
  %12 = load i64, ptr %7
  store i64 %12, ptr %3
  %13 = load ptr addrspace(1), ptr %3
  %14 = load i64, ptr %ds
  %15 = load i64, ptr %alloc
  %16 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %14, 0, 0
  %17 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %16, i64 %15, 0, 1
  %18 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %17, ptr addrspace(1) %13, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %18
}

define private oxcamlcc { { i64, i64 }, { i64 } } @c_call_wrapper.caml_flambda2_invalid(i64 %0, i64 %1, i64 %2) noinline {
  %4 = add i64 %0, 104
  %5 = inttoptr i64 %4 to ptr
  %6 = load i64, ptr %5
  %7 = call  i64 @llvm.read_register.i64(metadata !{!"rsp\00"})
  call  void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %6)
  %8 = call  { i64 } @caml_flambda2_invalid(i64 %2)
  call  void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %7)
  %9 = insertvalue { { i64, i64 }, { i64 } } poison, { i64 } %8, 1
  %10 = insertvalue { { i64, i64 }, { i64 } } %9, i64 %0, 0, 0
  %11 = insertvalue { { i64, i64 }, { i64 } } %10, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %11
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlExtcalls__gc_roots = global { i64 } { i64 0 }, section ".data", align 8
@header.camlExtcalls = global i64 5888, section ".data", align 8
@camlExtcalls = global { ptr, ptr, ptr, ptr, ptr } { ptr @camlExtcalls__call_too_many_6, ptr @camlExtcalls__call_print_and_add_7, ptr @camlExtcalls__call_int_and_float_8, ptr @camlExtcalls__f_9, ptr @camlExtcalls__call_no_return_10 }, section ".data", align 8
@header.camlExtcalls__call_no_return_10 = global i64 3063, section ".data", align 8
@camlExtcalls__call_no_return_10 = global { ptr, i64 } { ptr @camlExtcalls__call_no_return_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExtcalls__invalid187 = global i64 30716, section ".data", align 8
@camlExtcalls__invalid187 = global { [ 230 x i8 ], [ 1 x i8 ], i8 } { [ 230 x i8 ] c"\5b\5d\0a\55\6e\72\65\61\63\68\61\62\6c\65\20\63\6f\64\65\20\62\65\63\61\75\73\65\20\6f\66\0a\64\65\61\64\20\66\75\6e\63\74\69\6f\6e\20\73\6c\6f\74\73\3a\20\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\33\31\3b\31\6d\28\66\6e\5b\65\78\74\63\61\6c\6c\73\2e\6d\6c\3a\34\30\2c\34\2d\2d\39\31\5d\2f\35\20\e2\88\b7\20\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\33\37\3b\31\6d\f0\9d\95\8d\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\33\31\3b\31\6d\29\1b\5b\30\6d\0a\64\65\61\64\20\76\61\6c\75\65\20\73\6c\6f\74\73\3a\20\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\34\33\3b\31\6d\28\61\2f\32\20\e2\88\b7\20\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\33\37\3b\31\6d\e2\84\95\f0\9d\95\97\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\34\33\3b\31\6d\29\1b\5b\30\6d\0a", [ 1 x i8 ] zeroinitializer, i8 1 }, section ".data", align 8
@header.camlExtcalls__f_9 = global i64 3063, section ".data", align 8
@camlExtcalls__f_9 = global { ptr, i64 } { ptr @camlExtcalls__f_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExtcalls__call_int_and_float_8 = global i64 3063, section ".data", align 8
@camlExtcalls__call_int_and_float_8 = global { ptr, i64 } { ptr @camlExtcalls__call_int_and_float_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExtcalls__call_print_and_add_7 = global i64 3063, section ".data", align 8
@camlExtcalls__call_print_and_add_7 = global { ptr, i64 } { ptr @camlExtcalls__call_print_and_add_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExtcalls__call_too_many_6 = global i64 3063, section ".data", align 8
@camlExtcalls__call_too_many_6 = global { ptr, i64 } { ptr @camlExtcalls__call_too_many_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExtcalls__float48 = global i64 2045, section ".data", align 8
@camlExtcalls__float48 = global { double } { double 0.00000000000000000000 }, section ".data", align 8
@header.camlExtcalls__Pmakeblock40 = global i64 2816, section ".data", align 8
@camlExtcalls__Pmakeblock40 = global { ptr, ptr } { ptr @caml_exn_Assert_failure, ptr @camlExtcalls__const_block37 }, section ".data", align 8
@header.camlExtcalls__const_block37 = global i64 3840, section ".data", align 8
@camlExtcalls__const_block37 = global { ptr, i64, i64 } { ptr @camlExtcalls__immstring35, i64 71, i64 21 }, section ".data", align 8
@header.camlExtcalls__immstring35 = global i64 3068, section ".data", align 8
@camlExtcalls__immstring35 = global { [ 11 x i8 ], [ 4 x i8 ], i8 } { [ 11 x i8 ] c"\65\78\74\63\61\6c\6c\73\2e\6d\6c", [ 4 x i8 ] zeroinitializer, i8 4 }, section ".data", align 8
@header.camlExtcalls__float25 = global i64 2045, section ".data", align 8
@camlExtcalls__float25 = global { double } { double 4.00000000000000000000 }, section ".data", align 8
@header.camlExtcalls__float23 = global i64 2045, section ".data", align 8
@camlExtcalls__float23 = global { double } { double 2.00000000000000000000 }, section ".data", align 8
@temp.Extcalls.0 = global { ptr, ptr, ptr } { ptr @int_and_float, ptr @too_many, ptr @print_and_add }, section ".data", align 8
@caml_c_call = external global ptr
@caml_c_call_stack_args_llvm_backend = external global ptr
@caml_exn_Assert_failure = external global ptr
@caml_flambda2_invalid = external global ptr
@caml_raise_exn = external global ptr
@int_and_float = external global ptr
@print_and_add = external global ptr
@too_many = external global ptr

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

!0 = !{ i32 1, !"oxcaml_module", !"Extcalls" }
!llvm.module.flags = !{ !0 }
