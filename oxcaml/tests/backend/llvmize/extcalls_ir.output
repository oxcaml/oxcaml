source_filename = "extcalls.ml"

@camlExtcalls__data_begin = global {  } {  }, align 8, section ".data"
define void @camlExtcalls__code_begin() { unreachable }

@camlExtcalls__gc_roots = global { i64 } { i64 0 }, align 8, section ".data"
@.header.camlExtcalls = global { i64 } { i64 5888 }, align 8, section ".data"
@camlExtcalls = global { ptr, ptr, ptr, ptr, ptr } { ptr @camlExtcalls__call_too_many_6, ptr @camlExtcalls__call_print_and_add_7, ptr @camlExtcalls__call_int_and_float_8, ptr @camlExtcalls__f_9, ptr @camlExtcalls__call_no_return_10 }, align 8, section ".data"
@.header.camlExtcalls__call_no_return_10 = global { i64 } { i64 3063 }, align 8, section ".data"
@camlExtcalls__call_no_return_10 = global { ptr, i64 } { ptr @camlExtcalls__call_no_return_HIDE_STAMP, i64 108086391056891909 }, align 8, section ".data"
@.header.camlExtcalls__invalid187 = global { i64 } { i64 30716 }, align 8, section ".data"
@camlExtcalls__invalid187 = global { [ 230 x i8 ], [ 1 x i8 ], i8 } { [ 230 x i8 ] c"\5b\5d\0a\55\6e\72\65\61\63\68\61\62\6c\65\20\63\6f\64\65\20\62\65\63\61\75\73\65\20\6f\66\0a\64\65\61\64\20\66\75\6e\63\74\69\6f\6e\20\73\6c\6f\74\73\3a\20\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\33\31\3b\31\6d\28\66\6e\5b\65\78\74\63\61\6c\6c\73\2e\6d\6c\3a\34\30\2c\34\2d\2d\39\31\5d\2f\35\20\e2\88\b7\20\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\33\37\3b\31\6d\f0\9d\95\8d\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\33\31\3b\31\6d\29\1b\5b\30\6d\0a\64\65\61\64\20\76\61\6c\75\65\20\73\6c\6f\74\73\3a\20\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\34\33\3b\31\6d\28\61\2f\32\20\e2\88\b7\20\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\33\37\3b\31\6d\e2\84\95\f0\9d\95\97\1b\5b\30\6d\1b\5b\33\38\3b\35\3b\34\33\3b\31\6d\29\1b\5b\30\6d\0a", [ 1 x i8 ] zeroinitializer, i8 1 }, align 8, section ".data"
@.header.camlExtcalls__f_9 = global { i64 } { i64 3063 }, align 8, section ".data"
@camlExtcalls__f_9 = global { ptr, i64 } { ptr @camlExtcalls__f_HIDE_STAMP, i64 108086391056891909 }, align 8, section ".data"
@.header.camlExtcalls__call_int_and_float_8 = global { i64 } { i64 3063 }, align 8, section ".data"
@camlExtcalls__call_int_and_float_8 = global { ptr, i64 } { ptr @camlExtcalls__call_int_and_float_HIDE_STAMP, i64 108086391056891909 }, align 8, section ".data"
@.header.camlExtcalls__call_print_and_add_7 = global { i64 } { i64 3063 }, align 8, section ".data"
@camlExtcalls__call_print_and_add_7 = global { ptr, i64 } { ptr @camlExtcalls__call_print_and_add_HIDE_STAMP, i64 108086391056891909 }, align 8, section ".data"
@.header.camlExtcalls__call_too_many_6 = global { i64 } { i64 3063 }, align 8, section ".data"
@camlExtcalls__call_too_many_6 = global { ptr, i64 } { ptr @camlExtcalls__call_too_many_HIDE_STAMP, i64 108086391056891909 }, align 8, section ".data"
@.header.camlExtcalls__float48 = global { i64 } { i64 2045 }, align 8, section ".data"
@camlExtcalls__float48 = global { double } { double 0.00000000000000000000 }, align 8, section ".data"
@.header.camlExtcalls__Pmakeblock40 = global { i64 } { i64 2816 }, align 8, section ".data"
@camlExtcalls__Pmakeblock40 = global { ptr, ptr } { ptr @caml_exn_Assert_failure, ptr @camlExtcalls__const_block37 }, align 8, section ".data"
@.header.camlExtcalls__const_block37 = global { i64 } { i64 3840 }, align 8, section ".data"
@camlExtcalls__const_block37 = global { ptr, i64, i64 } { ptr @camlExtcalls__immstring35, i64 71, i64 21 }, align 8, section ".data"
@.header.camlExtcalls__immstring35 = global { i64 } { i64 3068 }, align 8, section ".data"
@camlExtcalls__immstring35 = global { [ 11 x i8 ], [ 4 x i8 ], i8 } { [ 11 x i8 ] c"\65\78\74\63\61\6c\6c\73\2e\6d\6c", [ 4 x i8 ] zeroinitializer, i8 4 }, align 8, section ".data"
@.header.camlExtcalls__float25 = global { i64 } { i64 2045 }, align 8, section ".data"
@camlExtcalls__float25 = global { double } { double 4.00000000000000000000 }, align 8, section ".data"
@.header.camlExtcalls__float23 = global { i64 } { i64 2045 }, align 8, section ".data"
@camlExtcalls__float23 = global { double } { double 2.00000000000000000000 }, align 8, section ".data"
define  cc 104 { { ptr, ptr }, { i64 } } @camlExtcalls__call_too_many_HIDE_STAMP(ptr %0, ptr %1, i64 %2) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %32 = load i64, ptr %4
  store i64 %32, ptr %12
  store i64 25, ptr %13
  store i64 23, ptr %14
  store i64 21, ptr %15
  store i64 19, ptr %16
  store i64 17, ptr %17
  store i64 15, ptr %18
  store i64 13, ptr %19
  store i64 11, ptr %20
  store i64 9, ptr %21
  store i64 7, ptr %22
  store i64 5, ptr %23
  store i64 3, ptr %24
  %33 = load i64, ptr %24
  store i64 %33, ptr %6
  %34 = load i64, ptr %23
  store i64 %34, ptr %7
  %35 = load i64, ptr %22
  store i64 %35, ptr %8
  %36 = load i64, ptr %21
  store i64 %36, ptr %9
  %37 = load i64, ptr %20
  store i64 %37, ptr %10
  %38 = load i64, ptr %19
  store i64 %38, ptr %11
  %39 = load i64, ptr %18
  store i64 %39, ptr %25
  %40 = load i64, ptr %17
  store i64 %40, ptr %26
  %41 = load i64, ptr %16
  store i64 %41, ptr %27
  %42 = load i64, ptr %15
  store i64 %42, ptr %28
  %43 = load i64, ptr %14
  store i64 %43, ptr %29
  %44 = load i64, ptr %13
  store i64 %44, ptr %30
  %45 = load i64, ptr %6
  %46 = load i64, ptr %7
  %47 = load i64, ptr %8
  %48 = load i64, ptr %9
  %49 = load i64, ptr %10
  %50 = load i64, ptr %11
  %51 = load i64, ptr %25
  %52 = load i64, ptr %26
  %53 = load i64, ptr %27
  %54 = load i64, ptr %28
  %55 = load i64, ptr %29
  %56 = load i64, ptr %30
  %57 = load ptr, ptr %ds
  %58 = load ptr, ptr %alloc
  %59 =  call cc 105 { { ptr, ptr }, { ptr addrspace(1) } } @caml_c_call_stack_args_llvm_backend(ptr %57, ptr %58, ptr @too_many, i64 48, i64 %45, i64 %46, i64 %47, i64 %48, i64 %49, i64 %50, i64 %51, i64 %52, i64 %53, i64 %54, i64 %55, i64 %56)
  %60 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %59, 0, 0
  store ptr %60, ptr %ds
  %61 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %59, 0, 1
  store ptr %61, ptr %alloc
  %62 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %59, 1, 0
  store ptr addrspace(1) %62, ptr %5
  br label %L103
L103:                                                ; preds = %L101
  %63 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %63, ptr %31
  %64 = load ptr addrspace(1), ptr %31
  store ptr addrspace(1) %64, ptr %5
  %65 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %66 = load ptr, ptr %ds
  %67 = insertvalue { { ptr, ptr }, { i64 } } %65, ptr %66, 0, 0
  %68 = load ptr, ptr %alloc
  %69 = insertvalue { { ptr, ptr }, { i64 } } %67, ptr %68, 0, 1
  %70 = load ptr addrspace(1), ptr %5
  %71 = ptrtoint ptr addrspace(1) %70 to i64
  %72 = insertvalue { { ptr, ptr }, { i64 } } %69, i64 %71, 1, 0
  ret { { ptr, ptr }, { i64 } } %72
}

define  cc 104 { { ptr, ptr }, { i64 } } @camlExtcalls__call_print_and_add_HIDE_STAMP(ptr %0, ptr %1, i64 %2) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L105
L105:                                                ; preds = %L1
  %12 = load i64, ptr %4
  store i64 %12, ptr %8
  store i64 21, ptr %9
  store i64 19, ptr %10
  %13 = load i64, ptr %10
  store i64 %13, ptr %6
  %14 = load i64, ptr %9
  store i64 %14, ptr %7
  %15 = load i64, ptr %6
  %16 = load i64, ptr %7
  %17 = load ptr, ptr %ds
  %18 = load ptr, ptr %alloc
  %19 =  call cc 105 { { ptr, ptr }, { ptr addrspace(1) } } @caml_c_call(ptr %17, ptr %18, ptr @print_and_add, i64 poison, i64 %15, i64 %16)
  %20 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %19, 0, 0
  store ptr %20, ptr %ds
  %21 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %19, 0, 1
  store ptr %21, ptr %alloc
  %22 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %19, 1, 0
  store ptr addrspace(1) %22, ptr %5
  br label %L107
L107:                                                ; preds = %L105
  %23 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %23, ptr %11
  %24 = load ptr addrspace(1), ptr %11
  store ptr addrspace(1) %24, ptr %5
  %25 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %26 = load ptr, ptr %ds
  %27 = insertvalue { { ptr, ptr }, { i64 } } %25, ptr %26, 0, 0
  %28 = load ptr, ptr %alloc
  %29 = insertvalue { { ptr, ptr }, { i64 } } %27, ptr %28, 0, 1
  %30 = load ptr addrspace(1), ptr %5
  %31 = ptrtoint ptr addrspace(1) %30 to i64
  %32 = insertvalue { { ptr, ptr }, { i64 } } %29, i64 %31, 1, 0
  ret { { ptr, ptr }, { i64 } } %32
}

define  cc 104 { { ptr, ptr }, { i64 } } @camlExtcalls__call_int_and_float_HIDE_STAMP(ptr %0, ptr %1, i64 %2) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L109
L109:                                                ; preds = %L1
  %16 = load i64, ptr %4
  store i64 %16, ptr %10
  store ptr @camlExtcalls__float25, ptr %11
  store i64 7, ptr %12
  store ptr @camlExtcalls__float23, ptr %13
  store i64 3, ptr %14
  %17 = load i64, ptr %14
  store i64 %17, ptr %6
  %18 = load i64, ptr %13
  store i64 %18, ptr %7
  %19 = load i64, ptr %12
  store i64 %19, ptr %8
  %20 = load i64, ptr %11
  store i64 %20, ptr %9
  %21 = load i64, ptr %6
  %22 = load i64, ptr %7
  %23 = load i64, ptr %8
  %24 = load i64, ptr %9
  %25 = load ptr, ptr %ds
  %26 = load ptr, ptr %alloc
  %27 =  call cc 105 { { ptr, ptr }, { ptr addrspace(1) } } @caml_c_call(ptr %25, ptr %26, ptr @int_and_float, i64 poison, i64 %21, i64 %22, i64 %23, i64 %24)
  %28 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %27, 0, 0
  store ptr %28, ptr %ds
  %29 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %27, 0, 1
  store ptr %29, ptr %alloc
  %30 = extractvalue { { ptr, ptr }, { ptr addrspace(1) } } %27, 1, 0
  store ptr addrspace(1) %30, ptr %5
  br label %L111
L111:                                                ; preds = %L109
  %31 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %31, ptr %15
  %32 = load ptr addrspace(1), ptr %15
  store ptr addrspace(1) %32, ptr %5
  %33 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %34 = load ptr, ptr %ds
  %35 = insertvalue { { ptr, ptr }, { i64 } } %33, ptr %34, 0, 0
  %36 = load ptr, ptr %alloc
  %37 = insertvalue { { ptr, ptr }, { i64 } } %35, ptr %36, 0, 1
  %38 = load ptr addrspace(1), ptr %5
  %39 = ptrtoint ptr addrspace(1) %38 to i64
  %40 = insertvalue { { ptr, ptr }, { i64 } } %37, i64 %39, 1, 0
  ret { { ptr, ptr }, { i64 } } %40
}

define  cc 104 { { ptr, ptr }, { ptr addrspace(1) } } @camlExtcalls__f_HIDE_STAMP(ptr %0, ptr %1, double %2) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca double
  store double %2, ptr %4
  %5 = alloca i64
  %6 = alloca double
  %7 = alloca i64
  br label %L1
L1:
  br label %L113
L113:                                                ; preds = %L1
  %8 = load double, ptr %4
  store double %8, ptr %6
  store ptr @camlExtcalls__Pmakeblock40, ptr %7
  %9 = load i64, ptr %7
  store i64 %9, ptr %5
  %10 = load i64, ptr %ds
  %11 = add i64 %10, 240
  %12 = inttoptr i64 %11 to ptr
  store i64 0, ptr %12
  %13 = load i64, ptr %5
  %14 = load ptr, ptr %ds
  %15 = load ptr, ptr %alloc
  %16 =  call cc 104 { { ptr, ptr }, {  } } @caml_raise_exn(ptr %14, ptr %15, i64 %13)
  %17 = extractvalue { { ptr, ptr }, {  } } %16, 0, 0
  store ptr %17, ptr %ds
  %18 = extractvalue { { ptr, ptr }, {  } } %16, 0, 1
  store ptr %18, ptr %alloc
  unreachable
}

define  cc 104 { { ptr, ptr }, { i64 } } @camlExtcalls__call_no_return_HIDE_STAMP(ptr %0, ptr %1, i64 %2) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L116
L116:                                                ; preds = %L1
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  store ptr @camlExtcalls__float48, ptr %6
  %10 = load i64, ptr %6
  %11 = call i64 asm "", "=r,0"(i64 %10)
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  store i64 %12, ptr %7
  store i64 1, ptr %8
  %13 = load i64, ptr %8
  store i64 %13, ptr %4
  %14 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %15 = load ptr, ptr %ds
  %16 = insertvalue { { ptr, ptr }, { i64 } } %14, ptr %15, 0, 0
  %17 = load ptr, ptr %alloc
  %18 = insertvalue { { ptr, ptr }, { i64 } } %16, ptr %17, 0, 1
  %19 = load i64, ptr %4
  %20 = insertvalue { { ptr, ptr }, { i64 } } %18, i64 %19, 1, 0
  ret { { ptr, ptr }, { i64 } } %20
}

define  cc 104 { { ptr, ptr }, { i64 } } @camlExtcalls__fn$5bextcalls.ml$3a40$2c4$2d$2d91$5d_HIDE_STAMP(ptr %0, ptr %1, ptr addrspace(1) %2, ptr addrspace(1) %3) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca ptr addrspace(1)
  store ptr addrspace(1) %2, ptr %5
  %6 = alloca ptr addrspace(1)
  store ptr addrspace(1) %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  br label %L1
L1:
  br label %L119
L119:                                                ; preds = %L1
  %12 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %12, ptr %9
  %13 = load ptr addrspace(1), ptr %6
  store ptr addrspace(1) %13, ptr %10
  store ptr @camlExtcalls__invalid187, ptr %11
  %14 = load i64, ptr %11
  store i64 %14, ptr %8
  %15 = load i64, ptr %8
  %16 = load ptr, ptr %ds
  %17 = load ptr, ptr %alloc
  %18 =  call cc 104 { { ptr, ptr }, { i64 } } @.wrapper.caml_flambda2_invalid(ptr %16, ptr %17, i64 %15)
  %19 = extractvalue { { ptr, ptr }, { i64 } } %18, 0, 0
  store ptr %19, ptr %ds
  %20 = extractvalue { { ptr, ptr }, { i64 } } %18, 0, 1
  store ptr %20, ptr %alloc
  %21 = extractvalue { { ptr, ptr }, { i64 } } %18, 1, 0
  store i64 %21, ptr %7
  unreachable
}

define  cc 104 { { ptr, ptr }, { ptr addrspace(1) } } @camlExtcalls__entry(ptr %0, ptr %1) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca ptr addrspace(1)
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L129
L129:                                                ; preds = %L1
  store ptr @camlExtcalls, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %6
  %9 = load i64, ptr %6
  %10 = inttoptr i64 %9 to ptr addrspace(1)
  store ptr addrspace(1) %10, ptr %4
  store i64 1, ptr %7
  %11 = load i64, ptr %7
  store i64 %11, ptr %3
  %12 = extractvalue { { { ptr, ptr }, { ptr addrspace(1) } } } poison, 0
  %13 = load ptr, ptr %ds
  %14 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %12, ptr %13, 0, 0
  %15 = load ptr, ptr %alloc
  %16 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %14, ptr %15, 0, 1
  %17 = load i64, ptr %3
  %18 = inttoptr i64 %17 to ptr addrspace(1)
  %19 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %16, ptr addrspace(1) %18, 1, 0
  ret { { ptr, ptr }, { ptr addrspace(1) } } %19
}

@.temp.Extcalls.0 = global { ptr, ptr, ptr } { ptr @int_and_float, ptr @too_many, ptr @print_and_add }, align 8, section ".data"
define private cc 104 { { ptr, ptr }, { i64 } } @.wrapper.caml_flambda2_invalid(ptr %ds, ptr %alloc, i64 %0) noinline  {
  %2 = ptrtoint ptr %ds to i64
  %3 = add i64 %2, 104
  %4 = inttoptr i64 %3 to ptr
  %5 = load i64, ptr %4
  %6 = call i64 @llvm.read_register.i64(metadata !{!"rsp\00"})
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %5)
  %7 =  call  { i64 } @caml_flambda2_invalid(i64 %0)
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %6)
  %8 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %9 = insertvalue { { ptr, ptr }, { i64 } } %8, ptr %ds, 0, 0
  %10 = insertvalue { { ptr, ptr }, { i64 } } %9, ptr %alloc, 0, 1
  %11 = insertvalue { { ptr, ptr }, { i64 } } %10, { i64 } %7, 1
  ret { { ptr, ptr }, { i64 } } %11
}

declare  { i64 } @caml_flambda2_invalid(i64)
declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@caml_c_call = external global ptr
@caml_c_call_stack_args_llvm_backend = external global ptr
@caml_exn_Assert_failure = external global ptr
@caml_raise_exn = external global ptr
@int_and_float = external global ptr
@print_and_add = external global ptr
@too_many = external global ptr

@camlExtcalls__data_end = global {  } {  }, align 8, section ".data"
define void @camlExtcalls__code_end() { unreachable }
