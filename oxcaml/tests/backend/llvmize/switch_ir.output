source_filename = "switch.ml"

define  oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__next_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  br label %L1
L1:
  br label %L101
L101:
  %20 = load i64, ptr %4
  store i64 %20, ptr %5
  %21 = load i64, ptr %5
  %22 = add i64 %21, -2
  store i64 %22, ptr %6
  %23 = load i64, ptr %6
  store i64 %23, ptr %7
  %24 = load i64, ptr %7
  %25 = icmp ult i64 %24, 17
  br i1 %25, label %L106, label %L129
L129:
  %26 = load i64, ptr %7
  %27 = icmp ugt i64 %26, 17
  br i1 %27, label %L104, label %L106
L104:
  %28 = ptrtoint ptr @camlSwitch__Pmakeblock20 to i64
  store i64 %28, ptr %8
  %29 = load i64, ptr %8
  store i64 %29, ptr %4
  %30 = load i64, ptr %ds
  %31 = add i64 %30, 240
  %32 = inttoptr i64 %31 to ptr
  store i64 0, ptr %32
  %33 = load i64, ptr %4
  %34 = load i64, ptr %ds
  %35 = load i64, ptr %alloc
  %36 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %34, i64 %35, i64 %33) "statepoint-id"="0"
  %37 = extractvalue { { i64, i64 }, {  } } %36, 0, 0
  %38 = extractvalue { { i64, i64 }, {  } } %36, 0, 1
  store i64 %37, ptr %ds
  store i64 %38, ptr %alloc
  unreachable
L106:
  %39 = load i64, ptr %7
  %40 = ashr i64 %39, 1
  store i64 %40, ptr %9
  %41 = load i64, ptr %9
  store i64 %41, ptr %10
  %42 = load i64, ptr %10
  switch i64 %42, label %L130 [

  i64 0, label %L109
    i64 1, label %L111
    i64 2, label %L113

  i64 3, label %L115
    i64 4, label %L117
    i64 5, label %L119

  i64 6, label %L121
    i64 7, label %L123

  i64 8, label %L125
  ]
L130:
  unreachable
L109:
  store i64 5, ptr %11
  %43 = load i64, ptr %11
  store i64 %43, ptr %4
  %44 = load i64, ptr %4
  %45 = load i64, ptr %ds
  %46 = load i64, ptr %alloc
  %47 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %45, 0, 0
  %48 = insertvalue { { i64, i64 }, { i64 } } %47, i64 %46, 0, 1
  %49 = insertvalue { { i64, i64 }, { i64 } } %48, i64 %44, 1, 0
  ret { { i64, i64 }, { i64 } } %49
L111:
  %50 = ptrtoint ptr @camlSwitch__Pmakeblock20 to i64
  store i64 %50, ptr %12
  %51 = load i64, ptr %12
  store i64 %51, ptr %4
  %52 = load i64, ptr %ds
  %53 = add i64 %52, 240
  %54 = inttoptr i64 %53 to ptr
  store i64 0, ptr %54
  %55 = load i64, ptr %4
  %56 = load i64, ptr %ds
  %57 = load i64, ptr %alloc
  %58 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %56, i64 %57, i64 %55) "statepoint-id"="0"
  %59 = extractvalue { { i64, i64 }, {  } } %58, 0, 0
  %60 = extractvalue { { i64, i64 }, {  } } %58, 0, 1
  store i64 %59, ptr %ds
  store i64 %60, ptr %alloc
  unreachable
L113:
  store i64 9, ptr %13
  %61 = load i64, ptr %13
  store i64 %61, ptr %4
  %62 = load i64, ptr %4
  %63 = load i64, ptr %ds
  %64 = load i64, ptr %alloc
  %65 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %63, 0, 0
  %66 = insertvalue { { i64, i64 }, { i64 } } %65, i64 %64, 0, 1
  %67 = insertvalue { { i64, i64 }, { i64 } } %66, i64 %62, 1, 0
  ret { { i64, i64 }, { i64 } } %67
L115:
  %68 = ptrtoint ptr @camlSwitch__Pmakeblock20 to i64
  store i64 %68, ptr %14
  %69 = load i64, ptr %14
  store i64 %69, ptr %4
  %70 = load i64, ptr %ds
  %71 = add i64 %70, 240
  %72 = inttoptr i64 %71 to ptr
  store i64 0, ptr %72
  %73 = load i64, ptr %4
  %74 = load i64, ptr %ds
  %75 = load i64, ptr %alloc
  %76 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %74, i64 %75, i64 %73) "statepoint-id"="0"
  %77 = extractvalue { { i64, i64 }, {  } } %76, 0, 0
  %78 = extractvalue { { i64, i64 }, {  } } %76, 0, 1
  store i64 %77, ptr %ds
  store i64 %78, ptr %alloc
  unreachable
L117:
  store i64 13, ptr %15
  %79 = load i64, ptr %15
  store i64 %79, ptr %4
  %80 = load i64, ptr %4
  %81 = load i64, ptr %ds
  %82 = load i64, ptr %alloc
  %83 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %81, 0, 0
  %84 = insertvalue { { i64, i64 }, { i64 } } %83, i64 %82, 0, 1
  %85 = insertvalue { { i64, i64 }, { i64 } } %84, i64 %80, 1, 0
  ret { { i64, i64 }, { i64 } } %85
L119:
  %86 = ptrtoint ptr @camlSwitch__Pmakeblock20 to i64
  store i64 %86, ptr %16
  %87 = load i64, ptr %16
  store i64 %87, ptr %4
  %88 = load i64, ptr %ds
  %89 = add i64 %88, 240
  %90 = inttoptr i64 %89 to ptr
  store i64 0, ptr %90
  %91 = load i64, ptr %4
  %92 = load i64, ptr %ds
  %93 = load i64, ptr %alloc
  %94 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %92, i64 %93, i64 %91) "statepoint-id"="0"
  %95 = extractvalue { { i64, i64 }, {  } } %94, 0, 0
  %96 = extractvalue { { i64, i64 }, {  } } %94, 0, 1
  store i64 %95, ptr %ds
  store i64 %96, ptr %alloc
  unreachable
L121:
  store i64 17, ptr %17
  %97 = load i64, ptr %17
  store i64 %97, ptr %4
  %98 = load i64, ptr %4
  %99 = load i64, ptr %ds
  %100 = load i64, ptr %alloc
  %101 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %99, 0, 0
  %102 = insertvalue { { i64, i64 }, { i64 } } %101, i64 %100, 0, 1
  %103 = insertvalue { { i64, i64 }, { i64 } } %102, i64 %98, 1, 0
  ret { { i64, i64 }, { i64 } } %103
L123:
  %104 = ptrtoint ptr @camlSwitch__Pmakeblock20 to i64
  store i64 %104, ptr %18
  %105 = load i64, ptr %18
  store i64 %105, ptr %4
  %106 = load i64, ptr %ds
  %107 = add i64 %106, 240
  %108 = inttoptr i64 %107 to ptr
  store i64 0, ptr %108
  %109 = load i64, ptr %4
  %110 = load i64, ptr %ds
  %111 = load i64, ptr %alloc
  %112 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %110, i64 %111, i64 %109) "statepoint-id"="0"
  %113 = extractvalue { { i64, i64 }, {  } } %112, 0, 0
  %114 = extractvalue { { i64, i64 }, {  } } %112, 0, 1
  store i64 %113, ptr %ds
  store i64 %114, ptr %alloc
  unreachable
L125:
  store i64 21, ptr %19
  %115 = load i64, ptr %19
  store i64 %115, ptr %4
  %116 = load i64, ptr %4
  %117 = load i64, ptr %ds
  %118 = load i64, ptr %alloc
  %119 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %117, 0, 0
  %120 = insertvalue { { i64, i64 }, { i64 } } %119, i64 %118, 0, 1
  %121 = insertvalue { { i64, i64 }, { i64 } } %120, i64 %116, 1, 0
  ret { { i64, i64 }, { i64 } } %121
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__test_next_HIDE_STAMP(i64 %0, i64 %1, i64 %2) noinline gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca ptr addrspace(1)
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca i64
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca ptr addrspace(1)
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca ptr addrspace(1)
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca ptr addrspace(1)
  %20 = alloca ptr addrspace(1)
  %21 = alloca ptr addrspace(1)
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca ptr addrspace(1)
  %30 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L132
L132:
  %31 = load i64, ptr %4
  store i64 %31, ptr %11
  %32 = load i64, ptr %ds
  %33 = add i64 %32, 64
  %34 = inttoptr i64 %33 to ptr
  %35 = load i64, ptr %34
  store i64 %35, ptr %13
  %36 = load i64, ptr %13
  store i64 %36, ptr %14
  %37 = load i64, ptr %ds
  %38 = load i64, ptr %alloc
  %39 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %37, i64 %38) returns_twice "gc-leaf-function"="true"
  %40 = extractvalue { { i64, i64 }, { i64 } } %39, 0, 0
  %41 = extractvalue { { i64, i64 }, { i64 } } %39, 0, 1
  store i64 %40, ptr %ds
  store i64 %41, ptr %alloc
  %42 = extractvalue { { i64, i64 }, { i64 } } %39, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %42) "gc-leaf-function"="true"
  br label %L158
L158:
  %43 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %L159, label %L138
L159:
  store ptr blockaddress(@camlSwitch__test_next_1_3_code, %L158), ptr @camlSwitch__test_next_HIDE_STAMP.recover_rbp_var.L158
  %45 = call  ptr @llvm.stacksave()
  %46 = alloca { i64, i64, i64, i64 }
  %47 = ptrtoint ptr %46 to i64
  %48 = add i64 %47, 16
  %49 = inttoptr i64 %48 to ptr
  %50 = ptrtoint ptr %46 to i64
  %51 = add i64 %50, 8
  %52 = inttoptr i64 %51 to ptr
  %53 = load i64, ptr %ds
  %54 = add i64 %53, 48
  %55 = inttoptr i64 %54 to ptr
  %56 = load i64, ptr %55
  store ptr %46, ptr %55
  store ptr @camlSwitch__test_next_HIDE_STAMP.recover_rbp_asm.L158, ptr %52
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %49) "gc-leaf-function"="true"
  store i64 %56, ptr %46
  %57 = load i64, ptr %11
  store i64 %57, ptr %4
  %58 = load i64, ptr %4
  %59 = load i64, ptr %ds
  %60 = load i64, ptr %alloc
  %61 = call oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__next_HIDE_STAMP(i64 %59, i64 %60, i64 %58) "statepoint-id"="32"
  %62 = extractvalue { { i64, i64 }, { i64 } } %61, 0, 0
  %63 = extractvalue { { i64, i64 }, { i64 } } %61, 0, 1
  store i64 %62, ptr %ds
  store i64 %63, ptr %alloc
  %64 = extractvalue { { i64, i64 }, { i64 } } %61, 1, 0
  store i64 %64, ptr %4
  br label %L146
L146:
  %65 = load i64, ptr %4
  store i64 %65, ptr %16
  %66 = load i64, ptr %16
  store i64 %66, ptr %17
  %67 = ptrtoint ptr @camlStdlib__Int__immstring64 to i64
  store i64 %67, ptr %18
  %68 = load i64, ptr %18
  %69 = inttoptr i64 %68 to ptr addrspace(1)
  store ptr addrspace(1) %69, ptr %8
  %70 = load i64, ptr %17
  %71 = inttoptr i64 %70 to ptr addrspace(1)
  store ptr addrspace(1) %71, ptr %10
  %72 = load ptr addrspace(1), ptr %8
  %73 = load ptr addrspace(1), ptr %10
  %74 = load i64, ptr %ds
  %75 = load i64, ptr %alloc
  %76 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %74, i64 %75, ptr @caml_format_int, ptr addrspace(1) %72, ptr addrspace(1) %73) "statepoint-id"="32"
  %77 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %76, 0, 0
  %78 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %76, 0, 1
  store i64 %77, ptr %ds
  store i64 %78, ptr %alloc
  %79 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %76, 1, 0
  store ptr addrspace(1) %79, ptr %5
  br label %L147
L147:
  %80 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %80, ptr %19
  %81 = load ptr addrspace(1), ptr %19
  store ptr addrspace(1) %81, ptr %20
  %82 = load ptr addrspace(1), ptr %20
  store ptr addrspace(1) %82, ptr %21
  %83 = load ptr addrspace(1), ptr %21
  store ptr addrspace(1) %83, ptr %12
  %84 = load i64, ptr %ds
  %85 = add i64 %84, 48
  %86 = inttoptr i64 %85 to ptr
  %87 = load i64, ptr %46
  store i64 %87, ptr %86
  call  void @llvm.stackrestore(ptr %45)
  br label %L153
L138:
  %88 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %88, ptr %alloc
  store i64 %43, ptr %4
  %89 = load i64, ptr %4
  %90 = inttoptr i64 %89 to ptr addrspace(1)
  store ptr addrspace(1) %90, ptr %15
  %91 = load i64, ptr %ds
  %92 = add i64 %91, 64
  %93 = inttoptr i64 %92 to ptr
  %94 = load i64, ptr %14
  store i64 %94, ptr %93
  store i64 1, ptr %22
  %95 = load i64, ptr %22
  store i64 %95, ptr %23
  %96 = ptrtoint ptr @camlSwitch__immstring38 to i64
  store i64 %96, ptr %24
  %97 = load i64, ptr %24
  store i64 %97, ptr %25
  %98 = load i64, ptr %25
  %99 = inttoptr i64 %98 to ptr addrspace(1)
  store ptr addrspace(1) %99, ptr %12
  br label %L153
L153:
  %100 = ptrtoint ptr @camlSwitch__const_block54 to i64
  store i64 %100, ptr %26
  store i64 1, ptr %27
  %101 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %101, ptr %28
  %102 = load i64, ptr %28
  store i64 %102, ptr %4
  %103 = load i64, ptr %27
  store i64 %103, ptr %7
  %104 = load i64, ptr %26
  store i64 %104, ptr %9
  %105 = load i64, ptr %4
  %106 = load i64, ptr %7
  %107 = load i64, ptr %9
  %108 = load i64, ptr %ds
  %109 = load i64, ptr %alloc
  %110 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %108, i64 %109, i64 %105, i64 %106, i64 %107) "statepoint-id"="0"
  %111 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %110, 0, 0
  %112 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %110, 0, 1
  store i64 %111, ptr %ds
  store i64 %112, ptr %alloc
  %113 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %110, 1, 0
  store ptr addrspace(1) %113, ptr %5
  br label %L155
L155:
  %114 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %114, ptr %29
  %115 = load ptr addrspace(1), ptr %29
  store ptr addrspace(1) %115, ptr %30
  %116 = load i64, ptr %11
  store i64 %116, ptr %4
  %117 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %117, ptr %6
  %118 = load ptr addrspace(1), ptr %30
  store ptr addrspace(1) %118, ptr %8
  %119 = load i64, ptr %4
  %120 = load ptr addrspace(1), ptr %6
  %121 = load ptr addrspace(1), ptr %8
  %122 = load i64, ptr %ds
  %123 = load i64, ptr %alloc
  %124 = musttail call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply2(i64 %122, i64 %123, i64 %119, ptr addrspace(1) %120, ptr addrspace(1) %121) "statepoint-id"="0"
  ret { { i64, i64 }, { i64 } } %124
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlSwitch__entry(i64 %0, i64 %1) noinline gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca ptr addrspace(1)
  %4 = alloca i64
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca ptr addrspace(1)
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca ptr addrspace(1)
  %20 = alloca ptr addrspace(1)
  %21 = alloca ptr addrspace(1)
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca ptr addrspace(1)
  %30 = alloca ptr addrspace(1)
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca ptr addrspace(1)
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca ptr addrspace(1)
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca ptr addrspace(1)
  %43 = alloca ptr addrspace(1)
  %44 = alloca ptr addrspace(1)
  %45 = alloca i64
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca i64
  %49 = alloca i64
  %50 = alloca i64
  %51 = alloca i64
  %52 = alloca ptr addrspace(1)
  %53 = alloca ptr addrspace(1)
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca i64
  %57 = alloca ptr addrspace(1)
  %58 = alloca i64
  %59 = alloca i64
  %60 = alloca ptr addrspace(1)
  %61 = alloca i64
  %62 = alloca i64
  %63 = alloca i64
  %64 = alloca i64
  %65 = alloca ptr addrspace(1)
  %66 = alloca ptr addrspace(1)
  %67 = alloca ptr addrspace(1)
  %68 = alloca i64
  %69 = alloca i64
  %70 = alloca i64
  %71 = alloca i64
  %72 = alloca i64
  %73 = alloca i64
  %74 = alloca i64
  %75 = alloca ptr addrspace(1)
  %76 = alloca ptr addrspace(1)
  %77 = alloca i64
  %78 = alloca i64
  %79 = alloca i64
  %80 = alloca ptr addrspace(1)
  %81 = alloca i64
  %82 = alloca i64
  %83 = alloca ptr addrspace(1)
  %84 = alloca i64
  %85 = alloca i64
  %86 = alloca i64
  %87 = alloca i64
  %88 = alloca ptr addrspace(1)
  %89 = alloca ptr addrspace(1)
  %90 = alloca ptr addrspace(1)
  %91 = alloca i64
  %92 = alloca i64
  %93 = alloca i64
  %94 = alloca i64
  %95 = alloca i64
  %96 = alloca i64
  %97 = alloca i64
  %98 = alloca ptr addrspace(1)
  %99 = alloca ptr addrspace(1)
  %100 = alloca i64
  %101 = alloca i64
  %102 = alloca i64
  %103 = alloca ptr addrspace(1)
  %104 = alloca i64
  %105 = alloca i64
  %106 = alloca ptr addrspace(1)
  %107 = alloca i64
  %108 = alloca i64
  %109 = alloca i64
  %110 = alloca i64
  %111 = alloca ptr addrspace(1)
  %112 = alloca ptr addrspace(1)
  %113 = alloca ptr addrspace(1)
  %114 = alloca i64
  %115 = alloca i64
  %116 = alloca i64
  %117 = alloca i64
  %118 = alloca i64
  %119 = alloca i64
  %120 = alloca i64
  %121 = alloca ptr addrspace(1)
  %122 = alloca ptr addrspace(1)
  %123 = alloca i64
  %124 = alloca i64
  %125 = alloca i64
  %126 = alloca ptr addrspace(1)
  %127 = alloca i64
  %128 = alloca i64
  %129 = alloca ptr addrspace(1)
  %130 = alloca i64
  %131 = alloca i64
  %132 = alloca i64
  %133 = alloca i64
  %134 = alloca ptr addrspace(1)
  %135 = alloca ptr addrspace(1)
  %136 = alloca ptr addrspace(1)
  %137 = alloca i64
  %138 = alloca i64
  %139 = alloca i64
  %140 = alloca i64
  %141 = alloca i64
  %142 = alloca i64
  %143 = alloca i64
  %144 = alloca ptr addrspace(1)
  %145 = alloca ptr addrspace(1)
  %146 = alloca i64
  %147 = alloca i64
  %148 = alloca i64
  %149 = alloca ptr addrspace(1)
  %150 = alloca i64
  %151 = alloca i64
  %152 = alloca ptr addrspace(1)
  %153 = alloca i64
  %154 = alloca i64
  %155 = alloca i64
  %156 = alloca i64
  %157 = alloca ptr addrspace(1)
  %158 = alloca ptr addrspace(1)
  %159 = alloca ptr addrspace(1)
  %160 = alloca i64
  %161 = alloca i64
  %162 = alloca i64
  %163 = alloca i64
  %164 = alloca i64
  %165 = alloca i64
  %166 = alloca i64
  %167 = alloca ptr addrspace(1)
  %168 = alloca ptr addrspace(1)
  %169 = alloca i64
  %170 = alloca i64
  %171 = alloca i64
  %172 = alloca ptr addrspace(1)
  %173 = alloca i64
  %174 = alloca i64
  %175 = alloca ptr addrspace(1)
  %176 = alloca i64
  %177 = alloca i64
  %178 = alloca i64
  %179 = alloca i64
  %180 = alloca ptr addrspace(1)
  %181 = alloca ptr addrspace(1)
  %182 = alloca ptr addrspace(1)
  %183 = alloca i64
  %184 = alloca i64
  %185 = alloca i64
  %186 = alloca i64
  %187 = alloca i64
  %188 = alloca i64
  %189 = alloca i64
  %190 = alloca ptr addrspace(1)
  %191 = alloca ptr addrspace(1)
  %192 = alloca i64
  %193 = alloca i64
  %194 = alloca i64
  %195 = alloca i64
  %196 = alloca i64
  %197 = alloca i64
  br label %L1
L1:
  br label %L167
L167:
  %198 = load i64, ptr %ds
  %199 = add i64 %198, 64
  %200 = inttoptr i64 %199 to ptr
  %201 = load i64, ptr %200
  store i64 %201, ptr %12
  %202 = load i64, ptr %12
  store i64 %202, ptr %13
  %203 = load i64, ptr %ds
  %204 = load i64, ptr %alloc
  %205 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %203, i64 %204) returns_twice "gc-leaf-function"="true"
  %206 = extractvalue { { i64, i64 }, { i64 } } %205, 0, 0
  %207 = extractvalue { { i64, i64 }, { i64 } } %205, 0, 1
  store i64 %206, ptr %ds
  store i64 %207, ptr %alloc
  %208 = extractvalue { { i64, i64 }, { i64 } } %205, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %208) "gc-leaf-function"="true"
  br label %L361
L361:
  %209 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %L362, label %L170
L362:
  store ptr blockaddress(@camlSwitch__entry, %L361), ptr @camlSwitch__entry.recover_rbp_var.L361
  %211 = call  ptr @llvm.stacksave()
  %212 = alloca { i64, i64, i64, i64 }
  %213 = ptrtoint ptr %212 to i64
  %214 = add i64 %213, 16
  %215 = inttoptr i64 %214 to ptr
  %216 = ptrtoint ptr %212 to i64
  %217 = add i64 %216, 8
  %218 = inttoptr i64 %217 to ptr
  %219 = load i64, ptr %ds
  %220 = add i64 %219, 48
  %221 = inttoptr i64 %220 to ptr
  %222 = load i64, ptr %221
  store ptr %212, ptr %221
  store ptr @camlSwitch__entry.recover_rbp_asm.L361, ptr %218
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %215) "gc-leaf-function"="true"
  store i64 %222, ptr %212
  store i64 3, ptr %15
  %223 = load i64, ptr %15
  store i64 %223, ptr %4
  %224 = load i64, ptr %4
  %225 = load i64, ptr %ds
  %226 = load i64, ptr %alloc
  %227 = call oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__next_HIDE_STAMP(i64 %225, i64 %226, i64 %224) "statepoint-id"="32"
  %228 = extractvalue { { i64, i64 }, { i64 } } %227, 0, 0
  %229 = extractvalue { { i64, i64 }, { i64 } } %227, 0, 1
  store i64 %228, ptr %ds
  store i64 %229, ptr %alloc
  %230 = extractvalue { { i64, i64 }, { i64 } } %227, 1, 0
  store i64 %230, ptr %4
  br label %L178
L178:
  %231 = load i64, ptr %4
  store i64 %231, ptr %16
  %232 = load i64, ptr %16
  store i64 %232, ptr %17
  %233 = ptrtoint ptr @camlStdlib__Int__immstring64 to i64
  store i64 %233, ptr %18
  %234 = load i64, ptr %18
  %235 = inttoptr i64 %234 to ptr addrspace(1)
  store ptr addrspace(1) %235, ptr %7
  %236 = load i64, ptr %17
  %237 = inttoptr i64 %236 to ptr addrspace(1)
  store ptr addrspace(1) %237, ptr %9
  %238 = load ptr addrspace(1), ptr %7
  %239 = load ptr addrspace(1), ptr %9
  %240 = load i64, ptr %ds
  %241 = load i64, ptr %alloc
  %242 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %240, i64 %241, ptr @caml_format_int, ptr addrspace(1) %238, ptr addrspace(1) %239) "statepoint-id"="32"
  %243 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %242, 0, 0
  %244 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %242, 0, 1
  store i64 %243, ptr %ds
  store i64 %244, ptr %alloc
  %245 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %242, 1, 0
  store ptr addrspace(1) %245, ptr %3
  br label %L179
L179:
  %246 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %246, ptr %19
  %247 = load ptr addrspace(1), ptr %19
  store ptr addrspace(1) %247, ptr %20
  %248 = load ptr addrspace(1), ptr %20
  store ptr addrspace(1) %248, ptr %21
  %249 = load ptr addrspace(1), ptr %21
  store ptr addrspace(1) %249, ptr %11
  %250 = load i64, ptr %ds
  %251 = add i64 %250, 48
  %252 = inttoptr i64 %251 to ptr
  %253 = load i64, ptr %212
  store i64 %253, ptr %252
  call  void @llvm.stackrestore(ptr %211)
  br label %L185
L170:
  %254 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %254, ptr %alloc
  store i64 %209, ptr %4
  %255 = load i64, ptr %4
  %256 = inttoptr i64 %255 to ptr addrspace(1)
  store ptr addrspace(1) %256, ptr %14
  %257 = load i64, ptr %ds
  %258 = add i64 %257, 64
  %259 = inttoptr i64 %258 to ptr
  %260 = load i64, ptr %13
  store i64 %260, ptr %259
  store i64 1, ptr %22
  %261 = load i64, ptr %22
  store i64 %261, ptr %23
  %262 = ptrtoint ptr @camlSwitch__immstring38 to i64
  store i64 %262, ptr %24
  %263 = load i64, ptr %24
  store i64 %263, ptr %25
  %264 = load i64, ptr %25
  %265 = inttoptr i64 %264 to ptr addrspace(1)
  store ptr addrspace(1) %265, ptr %11
  br label %L185
L185:
  %266 = ptrtoint ptr @camlSwitch__const_block54 to i64
  store i64 %266, ptr %26
  store i64 1, ptr %27
  %267 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %267, ptr %28
  %268 = load i64, ptr %28
  store i64 %268, ptr %4
  %269 = load i64, ptr %27
  store i64 %269, ptr %6
  %270 = load i64, ptr %26
  store i64 %270, ptr %8
  %271 = load i64, ptr %4
  %272 = load i64, ptr %6
  %273 = load i64, ptr %8
  %274 = load i64, ptr %ds
  %275 = load i64, ptr %alloc
  %276 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %274, i64 %275, i64 %271, i64 %272, i64 %273) "statepoint-id"="0"
  %277 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %276, 0, 0
  %278 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %276, 0, 1
  store i64 %277, ptr %ds
  store i64 %278, ptr %alloc
  %279 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %276, 1, 0
  store ptr addrspace(1) %279, ptr %3
  br label %L187
L187:
  %280 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %280, ptr %29
  %281 = load ptr addrspace(1), ptr %29
  store ptr addrspace(1) %281, ptr %30
  store i64 3, ptr %31
  %282 = load i64, ptr %31
  store i64 %282, ptr %4
  %283 = load ptr addrspace(1), ptr %11
  store ptr addrspace(1) %283, ptr %5
  %284 = load ptr addrspace(1), ptr %30
  store ptr addrspace(1) %284, ptr %7
  %285 = load i64, ptr %4
  %286 = load ptr addrspace(1), ptr %5
  %287 = load ptr addrspace(1), ptr %7
  %288 = load i64, ptr %ds
  %289 = load i64, ptr %alloc
  %290 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply2(i64 %288, i64 %289, i64 %285, ptr addrspace(1) %286, ptr addrspace(1) %287) "statepoint-id"="0"
  %291 = extractvalue { { i64, i64 }, { i64 } } %290, 0, 0
  %292 = extractvalue { { i64, i64 }, { i64 } } %290, 0, 1
  store i64 %291, ptr %ds
  store i64 %292, ptr %alloc
  %293 = extractvalue { { i64, i64 }, { i64 } } %290, 1, 0
  store i64 %293, ptr %4
  br label %L188
L188:
  %294 = load i64, ptr %4
  store i64 %294, ptr %32
  %295 = load i64, ptr %32
  store i64 %295, ptr %33
  %296 = load i64, ptr %ds
  %297 = add i64 %296, 64
  %298 = inttoptr i64 %297 to ptr
  %299 = load i64, ptr %298
  store i64 %299, ptr %35
  %300 = load i64, ptr %35
  store i64 %300, ptr %36
  %301 = load i64, ptr %ds
  %302 = load i64, ptr %alloc
  %303 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %301, i64 %302) returns_twice "gc-leaf-function"="true"
  %304 = extractvalue { { i64, i64 }, { i64 } } %303, 0, 0
  %305 = extractvalue { { i64, i64 }, { i64 } } %303, 0, 1
  store i64 %304, ptr %ds
  store i64 %305, ptr %alloc
  %306 = extractvalue { { i64, i64 }, { i64 } } %303, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %306) "gc-leaf-function"="true"
  br label %L363
L363:
  %307 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %308 = icmp eq i64 %307, 0
  br i1 %308, label %L364, label %L193
L364:
  store ptr blockaddress(@camlSwitch__entry, %L363), ptr @camlSwitch__entry.recover_rbp_var.L363
  %309 = call  ptr @llvm.stacksave()
  %310 = alloca { i64, i64, i64, i64 }
  %311 = ptrtoint ptr %310 to i64
  %312 = add i64 %311, 16
  %313 = inttoptr i64 %312 to ptr
  %314 = ptrtoint ptr %310 to i64
  %315 = add i64 %314, 8
  %316 = inttoptr i64 %315 to ptr
  %317 = load i64, ptr %ds
  %318 = add i64 %317, 48
  %319 = inttoptr i64 %318 to ptr
  %320 = load i64, ptr %319
  store ptr %310, ptr %319
  store ptr @camlSwitch__entry.recover_rbp_asm.L363, ptr %316
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %313) "gc-leaf-function"="true"
  store i64 %320, ptr %310
  store i64 7, ptr %38
  %321 = load i64, ptr %38
  store i64 %321, ptr %4
  %322 = load i64, ptr %4
  %323 = load i64, ptr %ds
  %324 = load i64, ptr %alloc
  %325 = call oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__next_HIDE_STAMP(i64 %323, i64 %324, i64 %322) "statepoint-id"="32"
  %326 = extractvalue { { i64, i64 }, { i64 } } %325, 0, 0
  %327 = extractvalue { { i64, i64 }, { i64 } } %325, 0, 1
  store i64 %326, ptr %ds
  store i64 %327, ptr %alloc
  %328 = extractvalue { { i64, i64 }, { i64 } } %325, 1, 0
  store i64 %328, ptr %4
  br label %L201
L201:
  %329 = load i64, ptr %4
  store i64 %329, ptr %39
  %330 = load i64, ptr %39
  store i64 %330, ptr %40
  %331 = ptrtoint ptr @camlStdlib__Int__immstring64 to i64
  store i64 %331, ptr %41
  %332 = load i64, ptr %41
  %333 = inttoptr i64 %332 to ptr addrspace(1)
  store ptr addrspace(1) %333, ptr %7
  %334 = load i64, ptr %40
  %335 = inttoptr i64 %334 to ptr addrspace(1)
  store ptr addrspace(1) %335, ptr %9
  %336 = load ptr addrspace(1), ptr %7
  %337 = load ptr addrspace(1), ptr %9
  %338 = load i64, ptr %ds
  %339 = load i64, ptr %alloc
  %340 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %338, i64 %339, ptr @caml_format_int, ptr addrspace(1) %336, ptr addrspace(1) %337) "statepoint-id"="32"
  %341 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %340, 0, 0
  %342 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %340, 0, 1
  store i64 %341, ptr %ds
  store i64 %342, ptr %alloc
  %343 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %340, 1, 0
  store ptr addrspace(1) %343, ptr %3
  br label %L202
L202:
  %344 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %344, ptr %42
  %345 = load ptr addrspace(1), ptr %42
  store ptr addrspace(1) %345, ptr %43
  %346 = load ptr addrspace(1), ptr %43
  store ptr addrspace(1) %346, ptr %44
  %347 = load ptr addrspace(1), ptr %44
  store ptr addrspace(1) %347, ptr %34
  %348 = load i64, ptr %ds
  %349 = add i64 %348, 48
  %350 = inttoptr i64 %349 to ptr
  %351 = load i64, ptr %310
  store i64 %351, ptr %350
  call  void @llvm.stackrestore(ptr %309)
  br label %L208
L193:
  %352 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %352, ptr %alloc
  store i64 %307, ptr %4
  %353 = load i64, ptr %4
  %354 = inttoptr i64 %353 to ptr addrspace(1)
  store ptr addrspace(1) %354, ptr %37
  %355 = load i64, ptr %ds
  %356 = add i64 %355, 64
  %357 = inttoptr i64 %356 to ptr
  %358 = load i64, ptr %36
  store i64 %358, ptr %357
  store i64 1, ptr %45
  %359 = load i64, ptr %45
  store i64 %359, ptr %46
  %360 = ptrtoint ptr @camlSwitch__immstring38 to i64
  store i64 %360, ptr %47
  %361 = load i64, ptr %47
  store i64 %361, ptr %48
  %362 = load i64, ptr %48
  %363 = inttoptr i64 %362 to ptr addrspace(1)
  store ptr addrspace(1) %363, ptr %34
  br label %L208
L208:
  %364 = ptrtoint ptr @camlSwitch__const_block54 to i64
  store i64 %364, ptr %49
  store i64 1, ptr %50
  %365 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %365, ptr %51
  %366 = load i64, ptr %51
  store i64 %366, ptr %4
  %367 = load i64, ptr %50
  store i64 %367, ptr %6
  %368 = load i64, ptr %49
  store i64 %368, ptr %8
  %369 = load i64, ptr %4
  %370 = load i64, ptr %6
  %371 = load i64, ptr %8
  %372 = load i64, ptr %ds
  %373 = load i64, ptr %alloc
  %374 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %372, i64 %373, i64 %369, i64 %370, i64 %371) "statepoint-id"="0"
  %375 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %374, 0, 0
  %376 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %374, 0, 1
  store i64 %375, ptr %ds
  store i64 %376, ptr %alloc
  %377 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %374, 1, 0
  store ptr addrspace(1) %377, ptr %3
  br label %L210
L210:
  %378 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %378, ptr %52
  %379 = load ptr addrspace(1), ptr %52
  store ptr addrspace(1) %379, ptr %53
  store i64 7, ptr %54
  %380 = load i64, ptr %54
  store i64 %380, ptr %4
  %381 = load ptr addrspace(1), ptr %34
  store ptr addrspace(1) %381, ptr %5
  %382 = load ptr addrspace(1), ptr %53
  store ptr addrspace(1) %382, ptr %7
  %383 = load i64, ptr %4
  %384 = load ptr addrspace(1), ptr %5
  %385 = load ptr addrspace(1), ptr %7
  %386 = load i64, ptr %ds
  %387 = load i64, ptr %alloc
  %388 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply2(i64 %386, i64 %387, i64 %383, ptr addrspace(1) %384, ptr addrspace(1) %385) "statepoint-id"="0"
  %389 = extractvalue { { i64, i64 }, { i64 } } %388, 0, 0
  %390 = extractvalue { { i64, i64 }, { i64 } } %388, 0, 1
  store i64 %389, ptr %ds
  store i64 %390, ptr %alloc
  %391 = extractvalue { { i64, i64 }, { i64 } } %388, 1, 0
  store i64 %391, ptr %4
  br label %L211
L211:
  %392 = load i64, ptr %4
  store i64 %392, ptr %55
  %393 = load i64, ptr %55
  store i64 %393, ptr %56
  %394 = load i64, ptr %ds
  %395 = add i64 %394, 64
  %396 = inttoptr i64 %395 to ptr
  %397 = load i64, ptr %396
  store i64 %397, ptr %58
  %398 = load i64, ptr %58
  store i64 %398, ptr %59
  %399 = load i64, ptr %ds
  %400 = load i64, ptr %alloc
  %401 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %399, i64 %400) returns_twice "gc-leaf-function"="true"
  %402 = extractvalue { { i64, i64 }, { i64 } } %401, 0, 0
  %403 = extractvalue { { i64, i64 }, { i64 } } %401, 0, 1
  store i64 %402, ptr %ds
  store i64 %403, ptr %alloc
  %404 = extractvalue { { i64, i64 }, { i64 } } %401, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %404) "gc-leaf-function"="true"
  br label %L365
L365:
  %405 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %406 = icmp eq i64 %405, 0
  br i1 %406, label %L366, label %L216
L366:
  store ptr blockaddress(@camlSwitch__entry, %L365), ptr @camlSwitch__entry.recover_rbp_var.L365
  %407 = call  ptr @llvm.stacksave()
  %408 = alloca { i64, i64, i64, i64 }
  %409 = ptrtoint ptr %408 to i64
  %410 = add i64 %409, 16
  %411 = inttoptr i64 %410 to ptr
  %412 = ptrtoint ptr %408 to i64
  %413 = add i64 %412, 8
  %414 = inttoptr i64 %413 to ptr
  %415 = load i64, ptr %ds
  %416 = add i64 %415, 48
  %417 = inttoptr i64 %416 to ptr
  %418 = load i64, ptr %417
  store ptr %408, ptr %417
  store ptr @camlSwitch__entry.recover_rbp_asm.L365, ptr %414
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %411) "gc-leaf-function"="true"
  store i64 %418, ptr %408
  store i64 11, ptr %61
  %419 = load i64, ptr %61
  store i64 %419, ptr %4
  %420 = load i64, ptr %4
  %421 = load i64, ptr %ds
  %422 = load i64, ptr %alloc
  %423 = call oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__next_HIDE_STAMP(i64 %421, i64 %422, i64 %420) "statepoint-id"="32"
  %424 = extractvalue { { i64, i64 }, { i64 } } %423, 0, 0
  %425 = extractvalue { { i64, i64 }, { i64 } } %423, 0, 1
  store i64 %424, ptr %ds
  store i64 %425, ptr %alloc
  %426 = extractvalue { { i64, i64 }, { i64 } } %423, 1, 0
  store i64 %426, ptr %4
  br label %L224
L224:
  %427 = load i64, ptr %4
  store i64 %427, ptr %62
  %428 = load i64, ptr %62
  store i64 %428, ptr %63
  %429 = ptrtoint ptr @camlStdlib__Int__immstring64 to i64
  store i64 %429, ptr %64
  %430 = load i64, ptr %64
  %431 = inttoptr i64 %430 to ptr addrspace(1)
  store ptr addrspace(1) %431, ptr %7
  %432 = load i64, ptr %63
  %433 = inttoptr i64 %432 to ptr addrspace(1)
  store ptr addrspace(1) %433, ptr %9
  %434 = load ptr addrspace(1), ptr %7
  %435 = load ptr addrspace(1), ptr %9
  %436 = load i64, ptr %ds
  %437 = load i64, ptr %alloc
  %438 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %436, i64 %437, ptr @caml_format_int, ptr addrspace(1) %434, ptr addrspace(1) %435) "statepoint-id"="32"
  %439 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %438, 0, 0
  %440 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %438, 0, 1
  store i64 %439, ptr %ds
  store i64 %440, ptr %alloc
  %441 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %438, 1, 0
  store ptr addrspace(1) %441, ptr %3
  br label %L225
L225:
  %442 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %442, ptr %65
  %443 = load ptr addrspace(1), ptr %65
  store ptr addrspace(1) %443, ptr %66
  %444 = load ptr addrspace(1), ptr %66
  store ptr addrspace(1) %444, ptr %67
  %445 = load ptr addrspace(1), ptr %67
  store ptr addrspace(1) %445, ptr %57
  %446 = load i64, ptr %ds
  %447 = add i64 %446, 48
  %448 = inttoptr i64 %447 to ptr
  %449 = load i64, ptr %408
  store i64 %449, ptr %448
  call  void @llvm.stackrestore(ptr %407)
  br label %L231
L216:
  %450 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %450, ptr %alloc
  store i64 %405, ptr %4
  %451 = load i64, ptr %4
  %452 = inttoptr i64 %451 to ptr addrspace(1)
  store ptr addrspace(1) %452, ptr %60
  %453 = load i64, ptr %ds
  %454 = add i64 %453, 64
  %455 = inttoptr i64 %454 to ptr
  %456 = load i64, ptr %59
  store i64 %456, ptr %455
  store i64 1, ptr %68
  %457 = load i64, ptr %68
  store i64 %457, ptr %69
  %458 = ptrtoint ptr @camlSwitch__immstring38 to i64
  store i64 %458, ptr %70
  %459 = load i64, ptr %70
  store i64 %459, ptr %71
  %460 = load i64, ptr %71
  %461 = inttoptr i64 %460 to ptr addrspace(1)
  store ptr addrspace(1) %461, ptr %57
  br label %L231
L231:
  %462 = ptrtoint ptr @camlSwitch__const_block54 to i64
  store i64 %462, ptr %72
  store i64 1, ptr %73
  %463 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %463, ptr %74
  %464 = load i64, ptr %74
  store i64 %464, ptr %4
  %465 = load i64, ptr %73
  store i64 %465, ptr %6
  %466 = load i64, ptr %72
  store i64 %466, ptr %8
  %467 = load i64, ptr %4
  %468 = load i64, ptr %6
  %469 = load i64, ptr %8
  %470 = load i64, ptr %ds
  %471 = load i64, ptr %alloc
  %472 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %470, i64 %471, i64 %467, i64 %468, i64 %469) "statepoint-id"="0"
  %473 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %472, 0, 0
  %474 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %472, 0, 1
  store i64 %473, ptr %ds
  store i64 %474, ptr %alloc
  %475 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %472, 1, 0
  store ptr addrspace(1) %475, ptr %3
  br label %L233
L233:
  %476 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %476, ptr %75
  %477 = load ptr addrspace(1), ptr %75
  store ptr addrspace(1) %477, ptr %76
  store i64 11, ptr %77
  %478 = load i64, ptr %77
  store i64 %478, ptr %4
  %479 = load ptr addrspace(1), ptr %57
  store ptr addrspace(1) %479, ptr %5
  %480 = load ptr addrspace(1), ptr %76
  store ptr addrspace(1) %480, ptr %7
  %481 = load i64, ptr %4
  %482 = load ptr addrspace(1), ptr %5
  %483 = load ptr addrspace(1), ptr %7
  %484 = load i64, ptr %ds
  %485 = load i64, ptr %alloc
  %486 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply2(i64 %484, i64 %485, i64 %481, ptr addrspace(1) %482, ptr addrspace(1) %483) "statepoint-id"="0"
  %487 = extractvalue { { i64, i64 }, { i64 } } %486, 0, 0
  %488 = extractvalue { { i64, i64 }, { i64 } } %486, 0, 1
  store i64 %487, ptr %ds
  store i64 %488, ptr %alloc
  %489 = extractvalue { { i64, i64 }, { i64 } } %486, 1, 0
  store i64 %489, ptr %4
  br label %L234
L234:
  %490 = load i64, ptr %4
  store i64 %490, ptr %78
  %491 = load i64, ptr %78
  store i64 %491, ptr %79
  %492 = load i64, ptr %ds
  %493 = add i64 %492, 64
  %494 = inttoptr i64 %493 to ptr
  %495 = load i64, ptr %494
  store i64 %495, ptr %81
  %496 = load i64, ptr %81
  store i64 %496, ptr %82
  %497 = load i64, ptr %ds
  %498 = load i64, ptr %alloc
  %499 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %497, i64 %498) returns_twice "gc-leaf-function"="true"
  %500 = extractvalue { { i64, i64 }, { i64 } } %499, 0, 0
  %501 = extractvalue { { i64, i64 }, { i64 } } %499, 0, 1
  store i64 %500, ptr %ds
  store i64 %501, ptr %alloc
  %502 = extractvalue { { i64, i64 }, { i64 } } %499, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %502) "gc-leaf-function"="true"
  br label %L367
L367:
  %503 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %504 = icmp eq i64 %503, 0
  br i1 %504, label %L368, label %L239
L368:
  store ptr blockaddress(@camlSwitch__entry, %L367), ptr @camlSwitch__entry.recover_rbp_var.L367
  %505 = call  ptr @llvm.stacksave()
  %506 = alloca { i64, i64, i64, i64 }
  %507 = ptrtoint ptr %506 to i64
  %508 = add i64 %507, 16
  %509 = inttoptr i64 %508 to ptr
  %510 = ptrtoint ptr %506 to i64
  %511 = add i64 %510, 8
  %512 = inttoptr i64 %511 to ptr
  %513 = load i64, ptr %ds
  %514 = add i64 %513, 48
  %515 = inttoptr i64 %514 to ptr
  %516 = load i64, ptr %515
  store ptr %506, ptr %515
  store ptr @camlSwitch__entry.recover_rbp_asm.L367, ptr %512
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %509) "gc-leaf-function"="true"
  store i64 %516, ptr %506
  store i64 15, ptr %84
  %517 = load i64, ptr %84
  store i64 %517, ptr %4
  %518 = load i64, ptr %4
  %519 = load i64, ptr %ds
  %520 = load i64, ptr %alloc
  %521 = call oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__next_HIDE_STAMP(i64 %519, i64 %520, i64 %518) "statepoint-id"="32"
  %522 = extractvalue { { i64, i64 }, { i64 } } %521, 0, 0
  %523 = extractvalue { { i64, i64 }, { i64 } } %521, 0, 1
  store i64 %522, ptr %ds
  store i64 %523, ptr %alloc
  %524 = extractvalue { { i64, i64 }, { i64 } } %521, 1, 0
  store i64 %524, ptr %4
  br label %L247
L247:
  %525 = load i64, ptr %4
  store i64 %525, ptr %85
  %526 = load i64, ptr %85
  store i64 %526, ptr %86
  %527 = ptrtoint ptr @camlStdlib__Int__immstring64 to i64
  store i64 %527, ptr %87
  %528 = load i64, ptr %87
  %529 = inttoptr i64 %528 to ptr addrspace(1)
  store ptr addrspace(1) %529, ptr %7
  %530 = load i64, ptr %86
  %531 = inttoptr i64 %530 to ptr addrspace(1)
  store ptr addrspace(1) %531, ptr %9
  %532 = load ptr addrspace(1), ptr %7
  %533 = load ptr addrspace(1), ptr %9
  %534 = load i64, ptr %ds
  %535 = load i64, ptr %alloc
  %536 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %534, i64 %535, ptr @caml_format_int, ptr addrspace(1) %532, ptr addrspace(1) %533) "statepoint-id"="32"
  %537 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %536, 0, 0
  %538 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %536, 0, 1
  store i64 %537, ptr %ds
  store i64 %538, ptr %alloc
  %539 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %536, 1, 0
  store ptr addrspace(1) %539, ptr %3
  br label %L248
L248:
  %540 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %540, ptr %88
  %541 = load ptr addrspace(1), ptr %88
  store ptr addrspace(1) %541, ptr %89
  %542 = load ptr addrspace(1), ptr %89
  store ptr addrspace(1) %542, ptr %90
  %543 = load ptr addrspace(1), ptr %90
  store ptr addrspace(1) %543, ptr %80
  %544 = load i64, ptr %ds
  %545 = add i64 %544, 48
  %546 = inttoptr i64 %545 to ptr
  %547 = load i64, ptr %506
  store i64 %547, ptr %546
  call  void @llvm.stackrestore(ptr %505)
  br label %L254
L239:
  %548 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %548, ptr %alloc
  store i64 %503, ptr %4
  %549 = load i64, ptr %4
  %550 = inttoptr i64 %549 to ptr addrspace(1)
  store ptr addrspace(1) %550, ptr %83
  %551 = load i64, ptr %ds
  %552 = add i64 %551, 64
  %553 = inttoptr i64 %552 to ptr
  %554 = load i64, ptr %82
  store i64 %554, ptr %553
  store i64 1, ptr %91
  %555 = load i64, ptr %91
  store i64 %555, ptr %92
  %556 = ptrtoint ptr @camlSwitch__immstring38 to i64
  store i64 %556, ptr %93
  %557 = load i64, ptr %93
  store i64 %557, ptr %94
  %558 = load i64, ptr %94
  %559 = inttoptr i64 %558 to ptr addrspace(1)
  store ptr addrspace(1) %559, ptr %80
  br label %L254
L254:
  %560 = ptrtoint ptr @camlSwitch__const_block54 to i64
  store i64 %560, ptr %95
  store i64 1, ptr %96
  %561 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %561, ptr %97
  %562 = load i64, ptr %97
  store i64 %562, ptr %4
  %563 = load i64, ptr %96
  store i64 %563, ptr %6
  %564 = load i64, ptr %95
  store i64 %564, ptr %8
  %565 = load i64, ptr %4
  %566 = load i64, ptr %6
  %567 = load i64, ptr %8
  %568 = load i64, ptr %ds
  %569 = load i64, ptr %alloc
  %570 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %568, i64 %569, i64 %565, i64 %566, i64 %567) "statepoint-id"="0"
  %571 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %570, 0, 0
  %572 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %570, 0, 1
  store i64 %571, ptr %ds
  store i64 %572, ptr %alloc
  %573 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %570, 1, 0
  store ptr addrspace(1) %573, ptr %3
  br label %L256
L256:
  %574 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %574, ptr %98
  %575 = load ptr addrspace(1), ptr %98
  store ptr addrspace(1) %575, ptr %99
  store i64 15, ptr %100
  %576 = load i64, ptr %100
  store i64 %576, ptr %4
  %577 = load ptr addrspace(1), ptr %80
  store ptr addrspace(1) %577, ptr %5
  %578 = load ptr addrspace(1), ptr %99
  store ptr addrspace(1) %578, ptr %7
  %579 = load i64, ptr %4
  %580 = load ptr addrspace(1), ptr %5
  %581 = load ptr addrspace(1), ptr %7
  %582 = load i64, ptr %ds
  %583 = load i64, ptr %alloc
  %584 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply2(i64 %582, i64 %583, i64 %579, ptr addrspace(1) %580, ptr addrspace(1) %581) "statepoint-id"="0"
  %585 = extractvalue { { i64, i64 }, { i64 } } %584, 0, 0
  %586 = extractvalue { { i64, i64 }, { i64 } } %584, 0, 1
  store i64 %585, ptr %ds
  store i64 %586, ptr %alloc
  %587 = extractvalue { { i64, i64 }, { i64 } } %584, 1, 0
  store i64 %587, ptr %4
  br label %L257
L257:
  %588 = load i64, ptr %4
  store i64 %588, ptr %101
  %589 = load i64, ptr %101
  store i64 %589, ptr %102
  %590 = load i64, ptr %ds
  %591 = add i64 %590, 64
  %592 = inttoptr i64 %591 to ptr
  %593 = load i64, ptr %592
  store i64 %593, ptr %104
  %594 = load i64, ptr %104
  store i64 %594, ptr %105
  %595 = load i64, ptr %ds
  %596 = load i64, ptr %alloc
  %597 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %595, i64 %596) returns_twice "gc-leaf-function"="true"
  %598 = extractvalue { { i64, i64 }, { i64 } } %597, 0, 0
  %599 = extractvalue { { i64, i64 }, { i64 } } %597, 0, 1
  store i64 %598, ptr %ds
  store i64 %599, ptr %alloc
  %600 = extractvalue { { i64, i64 }, { i64 } } %597, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %600) "gc-leaf-function"="true"
  br label %L369
L369:
  %601 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %602 = icmp eq i64 %601, 0
  br i1 %602, label %L370, label %L262
L370:
  store ptr blockaddress(@camlSwitch__entry, %L369), ptr @camlSwitch__entry.recover_rbp_var.L369
  %603 = call  ptr @llvm.stacksave()
  %604 = alloca { i64, i64, i64, i64 }
  %605 = ptrtoint ptr %604 to i64
  %606 = add i64 %605, 16
  %607 = inttoptr i64 %606 to ptr
  %608 = ptrtoint ptr %604 to i64
  %609 = add i64 %608, 8
  %610 = inttoptr i64 %609 to ptr
  %611 = load i64, ptr %ds
  %612 = add i64 %611, 48
  %613 = inttoptr i64 %612 to ptr
  %614 = load i64, ptr %613
  store ptr %604, ptr %613
  store ptr @camlSwitch__entry.recover_rbp_asm.L369, ptr %610
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %607) "gc-leaf-function"="true"
  store i64 %614, ptr %604
  store i64 19, ptr %107
  %615 = load i64, ptr %107
  store i64 %615, ptr %4
  %616 = load i64, ptr %4
  %617 = load i64, ptr %ds
  %618 = load i64, ptr %alloc
  %619 = call oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__next_HIDE_STAMP(i64 %617, i64 %618, i64 %616) "statepoint-id"="32"
  %620 = extractvalue { { i64, i64 }, { i64 } } %619, 0, 0
  %621 = extractvalue { { i64, i64 }, { i64 } } %619, 0, 1
  store i64 %620, ptr %ds
  store i64 %621, ptr %alloc
  %622 = extractvalue { { i64, i64 }, { i64 } } %619, 1, 0
  store i64 %622, ptr %4
  br label %L270
L270:
  %623 = load i64, ptr %4
  store i64 %623, ptr %108
  %624 = load i64, ptr %108
  store i64 %624, ptr %109
  %625 = ptrtoint ptr @camlStdlib__Int__immstring64 to i64
  store i64 %625, ptr %110
  %626 = load i64, ptr %110
  %627 = inttoptr i64 %626 to ptr addrspace(1)
  store ptr addrspace(1) %627, ptr %7
  %628 = load i64, ptr %109
  %629 = inttoptr i64 %628 to ptr addrspace(1)
  store ptr addrspace(1) %629, ptr %9
  %630 = load ptr addrspace(1), ptr %7
  %631 = load ptr addrspace(1), ptr %9
  %632 = load i64, ptr %ds
  %633 = load i64, ptr %alloc
  %634 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %632, i64 %633, ptr @caml_format_int, ptr addrspace(1) %630, ptr addrspace(1) %631) "statepoint-id"="32"
  %635 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %634, 0, 0
  %636 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %634, 0, 1
  store i64 %635, ptr %ds
  store i64 %636, ptr %alloc
  %637 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %634, 1, 0
  store ptr addrspace(1) %637, ptr %3
  br label %L271
L271:
  %638 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %638, ptr %111
  %639 = load ptr addrspace(1), ptr %111
  store ptr addrspace(1) %639, ptr %112
  %640 = load ptr addrspace(1), ptr %112
  store ptr addrspace(1) %640, ptr %113
  %641 = load ptr addrspace(1), ptr %113
  store ptr addrspace(1) %641, ptr %103
  %642 = load i64, ptr %ds
  %643 = add i64 %642, 48
  %644 = inttoptr i64 %643 to ptr
  %645 = load i64, ptr %604
  store i64 %645, ptr %644
  call  void @llvm.stackrestore(ptr %603)
  br label %L277
L262:
  %646 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %646, ptr %alloc
  store i64 %601, ptr %4
  %647 = load i64, ptr %4
  %648 = inttoptr i64 %647 to ptr addrspace(1)
  store ptr addrspace(1) %648, ptr %106
  %649 = load i64, ptr %ds
  %650 = add i64 %649, 64
  %651 = inttoptr i64 %650 to ptr
  %652 = load i64, ptr %105
  store i64 %652, ptr %651
  store i64 1, ptr %114
  %653 = load i64, ptr %114
  store i64 %653, ptr %115
  %654 = ptrtoint ptr @camlSwitch__immstring38 to i64
  store i64 %654, ptr %116
  %655 = load i64, ptr %116
  store i64 %655, ptr %117
  %656 = load i64, ptr %117
  %657 = inttoptr i64 %656 to ptr addrspace(1)
  store ptr addrspace(1) %657, ptr %103
  br label %L277
L277:
  %658 = ptrtoint ptr @camlSwitch__const_block54 to i64
  store i64 %658, ptr %118
  store i64 1, ptr %119
  %659 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %659, ptr %120
  %660 = load i64, ptr %120
  store i64 %660, ptr %4
  %661 = load i64, ptr %119
  store i64 %661, ptr %6
  %662 = load i64, ptr %118
  store i64 %662, ptr %8
  %663 = load i64, ptr %4
  %664 = load i64, ptr %6
  %665 = load i64, ptr %8
  %666 = load i64, ptr %ds
  %667 = load i64, ptr %alloc
  %668 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %666, i64 %667, i64 %663, i64 %664, i64 %665) "statepoint-id"="0"
  %669 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %668, 0, 0
  %670 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %668, 0, 1
  store i64 %669, ptr %ds
  store i64 %670, ptr %alloc
  %671 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %668, 1, 0
  store ptr addrspace(1) %671, ptr %3
  br label %L279
L279:
  %672 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %672, ptr %121
  %673 = load ptr addrspace(1), ptr %121
  store ptr addrspace(1) %673, ptr %122
  store i64 19, ptr %123
  %674 = load i64, ptr %123
  store i64 %674, ptr %4
  %675 = load ptr addrspace(1), ptr %103
  store ptr addrspace(1) %675, ptr %5
  %676 = load ptr addrspace(1), ptr %122
  store ptr addrspace(1) %676, ptr %7
  %677 = load i64, ptr %4
  %678 = load ptr addrspace(1), ptr %5
  %679 = load ptr addrspace(1), ptr %7
  %680 = load i64, ptr %ds
  %681 = load i64, ptr %alloc
  %682 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply2(i64 %680, i64 %681, i64 %677, ptr addrspace(1) %678, ptr addrspace(1) %679) "statepoint-id"="0"
  %683 = extractvalue { { i64, i64 }, { i64 } } %682, 0, 0
  %684 = extractvalue { { i64, i64 }, { i64 } } %682, 0, 1
  store i64 %683, ptr %ds
  store i64 %684, ptr %alloc
  %685 = extractvalue { { i64, i64 }, { i64 } } %682, 1, 0
  store i64 %685, ptr %4
  br label %L280
L280:
  %686 = load i64, ptr %4
  store i64 %686, ptr %124
  %687 = load i64, ptr %124
  store i64 %687, ptr %125
  %688 = load i64, ptr %ds
  %689 = add i64 %688, 64
  %690 = inttoptr i64 %689 to ptr
  %691 = load i64, ptr %690
  store i64 %691, ptr %127
  %692 = load i64, ptr %127
  store i64 %692, ptr %128
  %693 = load i64, ptr %ds
  %694 = load i64, ptr %alloc
  %695 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %693, i64 %694) returns_twice "gc-leaf-function"="true"
  %696 = extractvalue { { i64, i64 }, { i64 } } %695, 0, 0
  %697 = extractvalue { { i64, i64 }, { i64 } } %695, 0, 1
  store i64 %696, ptr %ds
  store i64 %697, ptr %alloc
  %698 = extractvalue { { i64, i64 }, { i64 } } %695, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %698) "gc-leaf-function"="true"
  br label %L371
L371:
  %699 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %700 = icmp eq i64 %699, 0
  br i1 %700, label %L372, label %L285
L372:
  store ptr blockaddress(@camlSwitch__entry, %L371), ptr @camlSwitch__entry.recover_rbp_var.L371
  %701 = call  ptr @llvm.stacksave()
  %702 = alloca { i64, i64, i64, i64 }
  %703 = ptrtoint ptr %702 to i64
  %704 = add i64 %703, 16
  %705 = inttoptr i64 %704 to ptr
  %706 = ptrtoint ptr %702 to i64
  %707 = add i64 %706, 8
  %708 = inttoptr i64 %707 to ptr
  %709 = load i64, ptr %ds
  %710 = add i64 %709, 48
  %711 = inttoptr i64 %710 to ptr
  %712 = load i64, ptr %711
  store ptr %702, ptr %711
  store ptr @camlSwitch__entry.recover_rbp_asm.L371, ptr %708
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %705) "gc-leaf-function"="true"
  store i64 %712, ptr %702
  store i64 5, ptr %130
  %713 = load i64, ptr %130
  store i64 %713, ptr %4
  %714 = load i64, ptr %4
  %715 = load i64, ptr %ds
  %716 = load i64, ptr %alloc
  %717 = call oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__next_HIDE_STAMP(i64 %715, i64 %716, i64 %714) "statepoint-id"="32"
  %718 = extractvalue { { i64, i64 }, { i64 } } %717, 0, 0
  %719 = extractvalue { { i64, i64 }, { i64 } } %717, 0, 1
  store i64 %718, ptr %ds
  store i64 %719, ptr %alloc
  %720 = extractvalue { { i64, i64 }, { i64 } } %717, 1, 0
  store i64 %720, ptr %4
  br label %L293
L293:
  %721 = load i64, ptr %4
  store i64 %721, ptr %131
  %722 = load i64, ptr %131
  store i64 %722, ptr %132
  %723 = ptrtoint ptr @camlStdlib__Int__immstring64 to i64
  store i64 %723, ptr %133
  %724 = load i64, ptr %133
  %725 = inttoptr i64 %724 to ptr addrspace(1)
  store ptr addrspace(1) %725, ptr %7
  %726 = load i64, ptr %132
  %727 = inttoptr i64 %726 to ptr addrspace(1)
  store ptr addrspace(1) %727, ptr %9
  %728 = load ptr addrspace(1), ptr %7
  %729 = load ptr addrspace(1), ptr %9
  %730 = load i64, ptr %ds
  %731 = load i64, ptr %alloc
  %732 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %730, i64 %731, ptr @caml_format_int, ptr addrspace(1) %728, ptr addrspace(1) %729) "statepoint-id"="32"
  %733 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %732, 0, 0
  %734 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %732, 0, 1
  store i64 %733, ptr %ds
  store i64 %734, ptr %alloc
  %735 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %732, 1, 0
  store ptr addrspace(1) %735, ptr %3
  br label %L294
L294:
  %736 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %736, ptr %134
  %737 = load ptr addrspace(1), ptr %134
  store ptr addrspace(1) %737, ptr %135
  %738 = load ptr addrspace(1), ptr %135
  store ptr addrspace(1) %738, ptr %136
  %739 = load ptr addrspace(1), ptr %136
  store ptr addrspace(1) %739, ptr %126
  %740 = load i64, ptr %ds
  %741 = add i64 %740, 48
  %742 = inttoptr i64 %741 to ptr
  %743 = load i64, ptr %702
  store i64 %743, ptr %742
  call  void @llvm.stackrestore(ptr %701)
  br label %L300
L285:
  %744 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %744, ptr %alloc
  store i64 %699, ptr %4
  %745 = load i64, ptr %4
  %746 = inttoptr i64 %745 to ptr addrspace(1)
  store ptr addrspace(1) %746, ptr %129
  %747 = load i64, ptr %ds
  %748 = add i64 %747, 64
  %749 = inttoptr i64 %748 to ptr
  %750 = load i64, ptr %128
  store i64 %750, ptr %749
  store i64 1, ptr %137
  %751 = load i64, ptr %137
  store i64 %751, ptr %138
  %752 = ptrtoint ptr @camlSwitch__immstring38 to i64
  store i64 %752, ptr %139
  %753 = load i64, ptr %139
  store i64 %753, ptr %140
  %754 = load i64, ptr %140
  %755 = inttoptr i64 %754 to ptr addrspace(1)
  store ptr addrspace(1) %755, ptr %126
  br label %L300
L300:
  %756 = ptrtoint ptr @camlSwitch__const_block54 to i64
  store i64 %756, ptr %141
  store i64 1, ptr %142
  %757 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %757, ptr %143
  %758 = load i64, ptr %143
  store i64 %758, ptr %4
  %759 = load i64, ptr %142
  store i64 %759, ptr %6
  %760 = load i64, ptr %141
  store i64 %760, ptr %8
  %761 = load i64, ptr %4
  %762 = load i64, ptr %6
  %763 = load i64, ptr %8
  %764 = load i64, ptr %ds
  %765 = load i64, ptr %alloc
  %766 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %764, i64 %765, i64 %761, i64 %762, i64 %763) "statepoint-id"="0"
  %767 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %766, 0, 0
  %768 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %766, 0, 1
  store i64 %767, ptr %ds
  store i64 %768, ptr %alloc
  %769 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %766, 1, 0
  store ptr addrspace(1) %769, ptr %3
  br label %L302
L302:
  %770 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %770, ptr %144
  %771 = load ptr addrspace(1), ptr %144
  store ptr addrspace(1) %771, ptr %145
  store i64 5, ptr %146
  %772 = load i64, ptr %146
  store i64 %772, ptr %4
  %773 = load ptr addrspace(1), ptr %126
  store ptr addrspace(1) %773, ptr %5
  %774 = load ptr addrspace(1), ptr %145
  store ptr addrspace(1) %774, ptr %7
  %775 = load i64, ptr %4
  %776 = load ptr addrspace(1), ptr %5
  %777 = load ptr addrspace(1), ptr %7
  %778 = load i64, ptr %ds
  %779 = load i64, ptr %alloc
  %780 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply2(i64 %778, i64 %779, i64 %775, ptr addrspace(1) %776, ptr addrspace(1) %777) "statepoint-id"="0"
  %781 = extractvalue { { i64, i64 }, { i64 } } %780, 0, 0
  %782 = extractvalue { { i64, i64 }, { i64 } } %780, 0, 1
  store i64 %781, ptr %ds
  store i64 %782, ptr %alloc
  %783 = extractvalue { { i64, i64 }, { i64 } } %780, 1, 0
  store i64 %783, ptr %4
  br label %L303
L303:
  %784 = load i64, ptr %4
  store i64 %784, ptr %147
  %785 = load i64, ptr %147
  store i64 %785, ptr %148
  %786 = load i64, ptr %ds
  %787 = add i64 %786, 64
  %788 = inttoptr i64 %787 to ptr
  %789 = load i64, ptr %788
  store i64 %789, ptr %150
  %790 = load i64, ptr %150
  store i64 %790, ptr %151
  %791 = load i64, ptr %ds
  %792 = load i64, ptr %alloc
  %793 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %791, i64 %792) returns_twice "gc-leaf-function"="true"
  %794 = extractvalue { { i64, i64 }, { i64 } } %793, 0, 0
  %795 = extractvalue { { i64, i64 }, { i64 } } %793, 0, 1
  store i64 %794, ptr %ds
  store i64 %795, ptr %alloc
  %796 = extractvalue { { i64, i64 }, { i64 } } %793, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %796) "gc-leaf-function"="true"
  br label %L373
L373:
  %797 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %798 = icmp eq i64 %797, 0
  br i1 %798, label %L374, label %L308
L374:
  store ptr blockaddress(@camlSwitch__entry, %L373), ptr @camlSwitch__entry.recover_rbp_var.L373
  %799 = call  ptr @llvm.stacksave()
  %800 = alloca { i64, i64, i64, i64 }
  %801 = ptrtoint ptr %800 to i64
  %802 = add i64 %801, 16
  %803 = inttoptr i64 %802 to ptr
  %804 = ptrtoint ptr %800 to i64
  %805 = add i64 %804, 8
  %806 = inttoptr i64 %805 to ptr
  %807 = load i64, ptr %ds
  %808 = add i64 %807, 48
  %809 = inttoptr i64 %808 to ptr
  %810 = load i64, ptr %809
  store ptr %800, ptr %809
  store ptr @camlSwitch__entry.recover_rbp_asm.L373, ptr %806
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %803) "gc-leaf-function"="true"
  store i64 %810, ptr %800
  store i64 1, ptr %153
  %811 = load i64, ptr %153
  store i64 %811, ptr %4
  %812 = load i64, ptr %4
  %813 = load i64, ptr %ds
  %814 = load i64, ptr %alloc
  %815 = call oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__next_HIDE_STAMP(i64 %813, i64 %814, i64 %812) "statepoint-id"="32"
  %816 = extractvalue { { i64, i64 }, { i64 } } %815, 0, 0
  %817 = extractvalue { { i64, i64 }, { i64 } } %815, 0, 1
  store i64 %816, ptr %ds
  store i64 %817, ptr %alloc
  %818 = extractvalue { { i64, i64 }, { i64 } } %815, 1, 0
  store i64 %818, ptr %4
  br label %L316
L316:
  %819 = load i64, ptr %4
  store i64 %819, ptr %154
  %820 = load i64, ptr %154
  store i64 %820, ptr %155
  %821 = ptrtoint ptr @camlStdlib__Int__immstring64 to i64
  store i64 %821, ptr %156
  %822 = load i64, ptr %156
  %823 = inttoptr i64 %822 to ptr addrspace(1)
  store ptr addrspace(1) %823, ptr %7
  %824 = load i64, ptr %155
  %825 = inttoptr i64 %824 to ptr addrspace(1)
  store ptr addrspace(1) %825, ptr %9
  %826 = load ptr addrspace(1), ptr %7
  %827 = load ptr addrspace(1), ptr %9
  %828 = load i64, ptr %ds
  %829 = load i64, ptr %alloc
  %830 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %828, i64 %829, ptr @caml_format_int, ptr addrspace(1) %826, ptr addrspace(1) %827) "statepoint-id"="32"
  %831 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %830, 0, 0
  %832 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %830, 0, 1
  store i64 %831, ptr %ds
  store i64 %832, ptr %alloc
  %833 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %830, 1, 0
  store ptr addrspace(1) %833, ptr %3
  br label %L317
L317:
  %834 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %834, ptr %157
  %835 = load ptr addrspace(1), ptr %157
  store ptr addrspace(1) %835, ptr %158
  %836 = load ptr addrspace(1), ptr %158
  store ptr addrspace(1) %836, ptr %159
  %837 = load ptr addrspace(1), ptr %159
  store ptr addrspace(1) %837, ptr %149
  %838 = load i64, ptr %ds
  %839 = add i64 %838, 48
  %840 = inttoptr i64 %839 to ptr
  %841 = load i64, ptr %800
  store i64 %841, ptr %840
  call  void @llvm.stackrestore(ptr %799)
  br label %L323
L308:
  %842 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %842, ptr %alloc
  store i64 %797, ptr %4
  %843 = load i64, ptr %4
  %844 = inttoptr i64 %843 to ptr addrspace(1)
  store ptr addrspace(1) %844, ptr %152
  %845 = load i64, ptr %ds
  %846 = add i64 %845, 64
  %847 = inttoptr i64 %846 to ptr
  %848 = load i64, ptr %151
  store i64 %848, ptr %847
  store i64 1, ptr %160
  %849 = load i64, ptr %160
  store i64 %849, ptr %161
  %850 = ptrtoint ptr @camlSwitch__immstring38 to i64
  store i64 %850, ptr %162
  %851 = load i64, ptr %162
  store i64 %851, ptr %163
  %852 = load i64, ptr %163
  %853 = inttoptr i64 %852 to ptr addrspace(1)
  store ptr addrspace(1) %853, ptr %149
  br label %L323
L323:
  %854 = ptrtoint ptr @camlSwitch__const_block54 to i64
  store i64 %854, ptr %164
  store i64 1, ptr %165
  %855 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %855, ptr %166
  %856 = load i64, ptr %166
  store i64 %856, ptr %4
  %857 = load i64, ptr %165
  store i64 %857, ptr %6
  %858 = load i64, ptr %164
  store i64 %858, ptr %8
  %859 = load i64, ptr %4
  %860 = load i64, ptr %6
  %861 = load i64, ptr %8
  %862 = load i64, ptr %ds
  %863 = load i64, ptr %alloc
  %864 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %862, i64 %863, i64 %859, i64 %860, i64 %861) "statepoint-id"="0"
  %865 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %864, 0, 0
  %866 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %864, 0, 1
  store i64 %865, ptr %ds
  store i64 %866, ptr %alloc
  %867 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %864, 1, 0
  store ptr addrspace(1) %867, ptr %3
  br label %L325
L325:
  %868 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %868, ptr %167
  %869 = load ptr addrspace(1), ptr %167
  store ptr addrspace(1) %869, ptr %168
  store i64 1, ptr %169
  %870 = load i64, ptr %169
  store i64 %870, ptr %4
  %871 = load ptr addrspace(1), ptr %149
  store ptr addrspace(1) %871, ptr %5
  %872 = load ptr addrspace(1), ptr %168
  store ptr addrspace(1) %872, ptr %7
  %873 = load i64, ptr %4
  %874 = load ptr addrspace(1), ptr %5
  %875 = load ptr addrspace(1), ptr %7
  %876 = load i64, ptr %ds
  %877 = load i64, ptr %alloc
  %878 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply2(i64 %876, i64 %877, i64 %873, ptr addrspace(1) %874, ptr addrspace(1) %875) "statepoint-id"="0"
  %879 = extractvalue { { i64, i64 }, { i64 } } %878, 0, 0
  %880 = extractvalue { { i64, i64 }, { i64 } } %878, 0, 1
  store i64 %879, ptr %ds
  store i64 %880, ptr %alloc
  %881 = extractvalue { { i64, i64 }, { i64 } } %878, 1, 0
  store i64 %881, ptr %4
  br label %L326
L326:
  %882 = load i64, ptr %4
  store i64 %882, ptr %170
  %883 = load i64, ptr %170
  store i64 %883, ptr %171
  %884 = load i64, ptr %ds
  %885 = add i64 %884, 64
  %886 = inttoptr i64 %885 to ptr
  %887 = load i64, ptr %886
  store i64 %887, ptr %173
  %888 = load i64, ptr %173
  store i64 %888, ptr %174
  %889 = load i64, ptr %ds
  %890 = load i64, ptr %alloc
  %891 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %889, i64 %890) returns_twice "gc-leaf-function"="true"
  %892 = extractvalue { { i64, i64 }, { i64 } } %891, 0, 0
  %893 = extractvalue { { i64, i64 }, { i64 } } %891, 0, 1
  store i64 %892, ptr %ds
  store i64 %893, ptr %alloc
  %894 = extractvalue { { i64, i64 }, { i64 } } %891, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %894) "gc-leaf-function"="true"
  br label %L375
L375:
  %895 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %896 = icmp eq i64 %895, 0
  br i1 %896, label %L376, label %L331
L376:
  store ptr blockaddress(@camlSwitch__entry, %L375), ptr @camlSwitch__entry.recover_rbp_var.L375
  %897 = call  ptr @llvm.stacksave()
  %898 = alloca { i64, i64, i64, i64 }
  %899 = ptrtoint ptr %898 to i64
  %900 = add i64 %899, 16
  %901 = inttoptr i64 %900 to ptr
  %902 = ptrtoint ptr %898 to i64
  %903 = add i64 %902, 8
  %904 = inttoptr i64 %903 to ptr
  %905 = load i64, ptr %ds
  %906 = add i64 %905, 48
  %907 = inttoptr i64 %906 to ptr
  %908 = load i64, ptr %907
  store ptr %898, ptr %907
  store ptr @camlSwitch__entry.recover_rbp_asm.L375, ptr %904
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %901) "gc-leaf-function"="true"
  store i64 %908, ptr %898
  store i64 201, ptr %176
  %909 = load i64, ptr %176
  store i64 %909, ptr %4
  %910 = load i64, ptr %4
  %911 = load i64, ptr %ds
  %912 = load i64, ptr %alloc
  %913 = call oxcamlcc { { i64, i64 }, { i64 } } @camlSwitch__next_HIDE_STAMP(i64 %911, i64 %912, i64 %910) "statepoint-id"="32"
  %914 = extractvalue { { i64, i64 }, { i64 } } %913, 0, 0
  %915 = extractvalue { { i64, i64 }, { i64 } } %913, 0, 1
  store i64 %914, ptr %ds
  store i64 %915, ptr %alloc
  %916 = extractvalue { { i64, i64 }, { i64 } } %913, 1, 0
  store i64 %916, ptr %4
  br label %L339
L339:
  %917 = load i64, ptr %4
  store i64 %917, ptr %177
  %918 = load i64, ptr %177
  store i64 %918, ptr %178
  %919 = ptrtoint ptr @camlStdlib__Int__immstring64 to i64
  store i64 %919, ptr %179
  %920 = load i64, ptr %179
  %921 = inttoptr i64 %920 to ptr addrspace(1)
  store ptr addrspace(1) %921, ptr %7
  %922 = load i64, ptr %178
  %923 = inttoptr i64 %922 to ptr addrspace(1)
  store ptr addrspace(1) %923, ptr %9
  %924 = load ptr addrspace(1), ptr %7
  %925 = load ptr addrspace(1), ptr %9
  %926 = load i64, ptr %ds
  %927 = load i64, ptr %alloc
  %928 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %926, i64 %927, ptr @caml_format_int, ptr addrspace(1) %924, ptr addrspace(1) %925) "statepoint-id"="32"
  %929 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %928, 0, 0
  %930 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %928, 0, 1
  store i64 %929, ptr %ds
  store i64 %930, ptr %alloc
  %931 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %928, 1, 0
  store ptr addrspace(1) %931, ptr %3
  br label %L340
L340:
  %932 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %932, ptr %180
  %933 = load ptr addrspace(1), ptr %180
  store ptr addrspace(1) %933, ptr %181
  %934 = load ptr addrspace(1), ptr %181
  store ptr addrspace(1) %934, ptr %182
  %935 = load ptr addrspace(1), ptr %182
  store ptr addrspace(1) %935, ptr %172
  %936 = load i64, ptr %ds
  %937 = add i64 %936, 48
  %938 = inttoptr i64 %937 to ptr
  %939 = load i64, ptr %898
  store i64 %939, ptr %938
  call  void @llvm.stackrestore(ptr %897)
  br label %L346
L331:
  %940 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %940, ptr %alloc
  store i64 %895, ptr %4
  %941 = load i64, ptr %4
  %942 = inttoptr i64 %941 to ptr addrspace(1)
  store ptr addrspace(1) %942, ptr %175
  %943 = load i64, ptr %ds
  %944 = add i64 %943, 64
  %945 = inttoptr i64 %944 to ptr
  %946 = load i64, ptr %174
  store i64 %946, ptr %945
  store i64 1, ptr %183
  %947 = load i64, ptr %183
  store i64 %947, ptr %184
  %948 = ptrtoint ptr @camlSwitch__immstring38 to i64
  store i64 %948, ptr %185
  %949 = load i64, ptr %185
  store i64 %949, ptr %186
  %950 = load i64, ptr %186
  %951 = inttoptr i64 %950 to ptr addrspace(1)
  store ptr addrspace(1) %951, ptr %172
  br label %L346
L346:
  %952 = ptrtoint ptr @camlSwitch__const_block54 to i64
  store i64 %952, ptr %187
  store i64 1, ptr %188
  %953 = ptrtoint ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 to i64
  store i64 %953, ptr %189
  %954 = load i64, ptr %189
  store i64 %954, ptr %4
  %955 = load i64, ptr %188
  store i64 %955, ptr %6
  %956 = load i64, ptr %187
  store i64 %956, ptr %8
  %957 = load i64, ptr %4
  %958 = load i64, ptr %6
  %959 = load i64, ptr %8
  %960 = load i64, ptr %ds
  %961 = load i64, ptr %alloc
  %962 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(i64 %960, i64 %961, i64 %957, i64 %958, i64 %959) "statepoint-id"="0"
  %963 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %962, 0, 0
  %964 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %962, 0, 1
  store i64 %963, ptr %ds
  store i64 %964, ptr %alloc
  %965 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %962, 1, 0
  store ptr addrspace(1) %965, ptr %3
  br label %L348
L348:
  %966 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %966, ptr %190
  %967 = load ptr addrspace(1), ptr %190
  store ptr addrspace(1) %967, ptr %191
  store i64 201, ptr %192
  %968 = load i64, ptr %192
  store i64 %968, ptr %4
  %969 = load ptr addrspace(1), ptr %172
  store ptr addrspace(1) %969, ptr %5
  %970 = load ptr addrspace(1), ptr %191
  store ptr addrspace(1) %970, ptr %7
  %971 = load i64, ptr %4
  %972 = load ptr addrspace(1), ptr %5
  %973 = load ptr addrspace(1), ptr %7
  %974 = load i64, ptr %ds
  %975 = load i64, ptr %alloc
  %976 = call oxcamlcc { { i64, i64 }, { i64 } } @caml_apply2(i64 %974, i64 %975, i64 %971, ptr addrspace(1) %972, ptr addrspace(1) %973) "statepoint-id"="0"
  %977 = extractvalue { { i64, i64 }, { i64 } } %976, 0, 0
  %978 = extractvalue { { i64, i64 }, { i64 } } %976, 0, 1
  store i64 %977, ptr %ds
  store i64 %978, ptr %alloc
  %979 = extractvalue { { i64, i64 }, { i64 } } %976, 1, 0
  store i64 %979, ptr %4
  br label %L349
L349:
  %980 = load i64, ptr %4
  store i64 %980, ptr %193
  %981 = load i64, ptr %193
  store i64 %981, ptr %194
  %982 = ptrtoint ptr @camlSwitch to i64
  store i64 %982, ptr %195
  %983 = load i64, ptr %195
  store i64 %983, ptr %196
  %984 = load i64, ptr %196
  %985 = inttoptr i64 %984 to ptr addrspace(1)
  store ptr addrspace(1) %985, ptr %10
  store i64 1, ptr %197
  %986 = load i64, ptr %197
  store i64 %986, ptr %4
  %987 = load ptr addrspace(1), ptr %4
  %988 = load i64, ptr %ds
  %989 = load i64, ptr %alloc
  %990 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %988, 0, 0
  %991 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %990, i64 %989, 0, 1
  %992 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %991, ptr addrspace(1) %987, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %992
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlSwitch__gc_roots = global { i64 } { i64 0 }, section ".data", align 8
@header.camlSwitch = global i64 2816, section ".data", align 8
@camlSwitch = global { ptr, ptr } { ptr @camlSwitch__next_2, ptr @camlSwitch__test_next_3 }, section ".data", align 8
@header.camlSwitch__test_next_3 = global i64 3063, section ".data", align 8
@camlSwitch__test_next_3 = global { ptr, i64 } { ptr @camlSwitch__test_next_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlSwitch__next_2 = global i64 3063, section ".data", align 8
@camlSwitch__next_2 = global { ptr, i64 } { ptr @camlSwitch__next_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlSwitch__const_block54 = global i64 2827, section ".data", align 8
@camlSwitch__const_block54 = global { ptr, ptr } { ptr @camlSwitch__immstring42, ptr @camlSwitch__const_block52 }, section ".data", align 8
@header.camlSwitch__const_block52 = global i64 4868, section ".data", align 8
@camlSwitch__const_block52 = global { i64, i64, i64, ptr } { i64 1, i64 1, i64 1, ptr @camlSwitch__const_block50 }, section ".data", align 8
@header.camlSwitch__const_block50 = global i64 2827, section ".data", align 8
@camlSwitch__const_block50 = global { ptr, ptr } { ptr @camlSwitch__immstring44, ptr @camlSwitch__const_block48 }, section ".data", align 8
@header.camlSwitch__const_block48 = global i64 2818, section ".data", align 8
@camlSwitch__const_block48 = global { i64, ptr } { i64 1, ptr @camlSwitch__const_block46 }, section ".data", align 8
@header.camlSwitch__const_block46 = global i64 2828, section ".data", align 8
@camlSwitch__const_block46 = global { i64, i64 } { i64 21, i64 1 }, section ".data", align 8
@header.camlSwitch__immstring44 = global i64 2044, section ".data", align 8
@camlSwitch__immstring44 = global { [ 3 x i8 ], [ 4 x i8 ], i8 } { [ 3 x i8 ] c"\20\3d\20", [ 4 x i8 ] zeroinitializer, i8 4 }, section ".data", align 8
@header.camlSwitch__immstring42 = global i64 2044, section ".data", align 8
@camlSwitch__immstring42 = global { [ 5 x i8 ], [ 2 x i8 ], i8 } { [ 5 x i8 ] c"\6e\65\78\74\20", [ 2 x i8 ] zeroinitializer, i8 2 }, section ".data", align 8
@header.camlSwitch__immstring38 = global i64 3068, section ".data", align 8
@camlSwitch__immstring38 = global { [ 9 x i8 ], [ 6 x i8 ], i8 } { [ 9 x i8 ] c"\6e\6f\74\20\66\6f\75\6e\64", [ 6 x i8 ] zeroinitializer, i8 6 }, section ".data", align 8
@header.camlSwitch__Pmakeblock20 = global i64 2816, section ".data", align 8
@camlSwitch__Pmakeblock20 = global { ptr, ptr } { ptr @caml_exn_Match_failure, ptr @camlSwitch__const_block17 }, section ".data", align 8
@header.camlSwitch__const_block17 = global i64 3840, section ".data", align 8
@camlSwitch__const_block17 = global { ptr, i64, i64 } { ptr @camlSwitch__immstring15, i64 5, i64 5 }, section ".data", align 8
@header.camlSwitch__immstring15 = global i64 3068, section ".data", align 8
@camlSwitch__immstring15 = global { [ 9 x i8 ], [ 6 x i8 ], i8 } { [ 9 x i8 ] c"\73\77\69\74\63\68\2e\6d\6c", [ 6 x i8 ] zeroinitializer, i8 6 }, section ".data", align 8
@camlSwitch__entry.recover_rbp_asm.L367 = external global ptr
@camlSwitch__entry.recover_rbp_var.L367 = global ptr zeroinitializer, section ".data", align 8
@camlSwitch__entry.recover_rbp_asm.L371 = external global ptr
@camlSwitch__entry.recover_rbp_var.L371 = global ptr zeroinitializer, section ".data", align 8
@camlSwitch__entry.recover_rbp_asm.L375 = external global ptr
@camlSwitch__entry.recover_rbp_var.L375 = global ptr zeroinitializer, section ".data", align 8
@camlSwitch__entry.recover_rbp_asm.L361 = external global ptr
@camlSwitch__entry.recover_rbp_var.L361 = global ptr zeroinitializer, section ".data", align 8
@camlSwitch__entry.recover_rbp_asm.L365 = external global ptr
@camlSwitch__entry.recover_rbp_var.L365 = global ptr zeroinitializer, section ".data", align 8
@camlSwitch__entry.recover_rbp_asm.L369 = external global ptr
@camlSwitch__entry.recover_rbp_var.L369 = global ptr zeroinitializer, section ".data", align 8
@camlSwitch__entry.recover_rbp_asm.L373 = external global ptr
@camlSwitch__entry.recover_rbp_var.L373 = global ptr zeroinitializer, section ".data", align 8
@camlSwitch__entry.recover_rbp_asm.L363 = external global ptr
@camlSwitch__entry.recover_rbp_var.L363 = global ptr zeroinitializer, section ".data", align 8
@camlSwitch__test_next_HIDE_STAMP.recover_rbp_asm.L158 = external global ptr
@camlSwitch__test_next_HIDE_STAMP.recover_rbp_var.L158 = global ptr zeroinitializer, section ".data", align 8
@camlCamlinternalFormat__make_printf_HIDE_STAMP = external global ptr
@camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1450$2c4$2d$2d59$5d_521 = external global ptr
@camlStdlib__Int__immstring64 = external global ptr
@caml_apply2 = external global ptr
@caml_c_call = external global ptr
@caml_exn_Match_failure = external global ptr
@caml_format_int = external global ptr
@caml_raise_exn = external global ptr

declare void @llvm.stackrestore(ptr)
declare ptr @llvm.stacksave()

module asm "  .text"
module asm "camlSwitch__test_next_HIDE_STAMP.recover_rbp_asm.L158:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlSwitch__test_next_HIDE_STAMP.recover_rbp_var.L158(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlSwitch__entry.recover_rbp_asm.L363:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlSwitch__entry.recover_rbp_var.L363(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlSwitch__entry.recover_rbp_asm.L373:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlSwitch__entry.recover_rbp_var.L373(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlSwitch__entry.recover_rbp_asm.L369:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlSwitch__entry.recover_rbp_var.L369(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlSwitch__entry.recover_rbp_asm.L365:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlSwitch__entry.recover_rbp_var.L365(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlSwitch__entry.recover_rbp_asm.L361:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlSwitch__entry.recover_rbp_var.L361(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlSwitch__entry.recover_rbp_asm.L375:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlSwitch__entry.recover_rbp_var.L375(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlSwitch__entry.recover_rbp_asm.L371:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlSwitch__entry.recover_rbp_var.L371(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlSwitch__entry.recover_rbp_asm.L367:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlSwitch__entry.recover_rbp_var.L367(%rip), %rbx"
module asm "  jmpq *%rbx"

!0 = !{ i32 1, !"oxcaml_module", !"Switch" }
!llvm.module.flags = !{ !0 }
