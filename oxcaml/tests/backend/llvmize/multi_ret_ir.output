source_filename = "multi_ret.ml"

define  oxcamlcc { { i64, i64 }, { double, double, double, double } } @camlMulti_ret__permute_HIDE_STAMP(i64 %0, i64 %1, double %2, double %3, double %4, double %5) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %7 = alloca double
  store double %2, ptr %7
  %8 = alloca double
  store double %3, ptr %8
  %9 = alloca double
  store double %4, ptr %9
  %10 = alloca double
  store double %5, ptr %10
  %11 = alloca double
  %12 = alloca double
  %13 = alloca double
  %14 = alloca double
  br label %L1
L1:
  br label %L101
L101:
  %15 = load double, ptr %7
  store double %15, ptr %11
  %16 = load double, ptr %8
  store double %16, ptr %12
  %17 = load double, ptr %9
  store double %17, ptr %13
  %18 = load double, ptr %10
  store double %18, ptr %14
  %19 = load double, ptr %14
  store double %19, ptr %7
  %20 = load double, ptr %13
  store double %20, ptr %8
  %21 = load double, ptr %12
  store double %21, ptr %9
  %22 = load double, ptr %11
  store double %22, ptr %10
  %23 = load double, ptr %7
  %24 = load double, ptr %8
  %25 = load double, ptr %9
  %26 = load double, ptr %10
  %27 = load i64, ptr %ds
  %28 = load i64, ptr %alloc
  %29 = insertvalue { { i64, i64 }, { double, double, double, double } } poison, i64 %27, 0, 0
  %30 = insertvalue { { i64, i64 }, { double, double, double, double } } %29, i64 %28, 0, 1
  %31 = insertvalue { { i64, i64 }, { double, double, double, double } } %30, double %23, 1, 0
  %32 = insertvalue { { i64, i64 }, { double, double, double, double } } %31, double %24, 1, 1
  %33 = insertvalue { { i64, i64 }, { double, double, double, double } } %32, double %25, 1, 2
  %34 = insertvalue { { i64, i64 }, { double, double, double, double } } %33, double %26, 1, 3
  ret { { i64, i64 }, { double, double, double, double } } %34
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlMulti_ret__entry(i64 %0, i64 %1) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca ptr addrspace(1)
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L107
L107:
  %8 = ptrtoint ptr @camlMulti_ret to i64
  store i64 %8, ptr %5
  %9 = load i64, ptr %5
  store i64 %9, ptr %6
  %10 = load i64, ptr %6
  %11 = inttoptr i64 %10 to ptr addrspace(1)
  store ptr addrspace(1) %11, ptr %4
  store i64 1, ptr %7
  %12 = load i64, ptr %7
  store i64 %12, ptr %3
  %13 = load ptr addrspace(1), ptr %3
  %14 = load i64, ptr %ds
  %15 = load i64, ptr %alloc
  %16 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %14, 0, 0
  %17 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %16, i64 %15, 0, 1
  %18 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %17, ptr addrspace(1) %13, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %18
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlMulti_ret__gc_roots = global { i64 } { i64 0 }, section ".data", align 8
@header.camlMulti_ret = global i64 2816, section ".data", align 8
@camlMulti_ret = global { ptr, ptr } { ptr @camlMulti_ret__empty_block4, ptr @camlMulti_ret__permute_1 }, section ".data", align 8
@header.camlMulti_ret__permute_1 = global i64 4087, section ".data", align 8
@camlMulti_ret__permute_1 = global { ptr, i64, ptr } { ptr @caml_curryF_F_F_F_RFFFF, i64 324259173170675719, ptr @camlMulti_ret__permute_HIDE_STAMP }, section ".data", align 8
@header.camlMulti_ret__empty_block4 = global i64 768, section ".data", align 8
@camlMulti_ret__empty_block4 = global {  } {  }, section ".data", align 8
@caml_curryF_F_F_F_RFFFF = external global ptr



!0 = !{ i32 1, !"oxcaml_module", !"Multi_ret" }
!llvm.module.flags = !{ !0 }
