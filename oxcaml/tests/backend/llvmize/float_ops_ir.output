source_filename = "float_ops.ml"

define  oxcamlcc { { i64, i64 }, { double } } @camlFloat_ops__add_HIDE_STAMP(i64 %0, i64 %1, double %2, double %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca double
  store double %2, ptr %5
  %6 = alloca double
  store double %3, ptr %6
  %7 = alloca double
  %8 = alloca double
  %9 = alloca double
  br label %L1
L1:
  br label %L101
L101:
  %10 = load double, ptr %5
  store double %10, ptr %7
  %11 = load double, ptr %6
  store double %11, ptr %8
  %12 = load double, ptr %7
  %13 = load double, ptr %8
  %14 = fadd double %12, %13
  store double %14, ptr %9
  %15 = load double, ptr %9
  store double %15, ptr %5
  %16 = load double, ptr %5
  %17 = load i64, ptr %ds
  %18 = load i64, ptr %alloc
  %19 = insertvalue { { i64, i64 }, { double } } poison, i64 %17, 0, 0
  %20 = insertvalue { { i64, i64 }, { double } } %19, i64 %18, 0, 1
  %21 = insertvalue { { i64, i64 }, { double } } %20, double %16, 1, 0
  ret { { i64, i64 }, { double } } %21
}

define  oxcamlcc { { i64, i64 }, { double } } @camlFloat_ops__sub_HIDE_STAMP(i64 %0, i64 %1, double %2, double %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca double
  store double %2, ptr %5
  %6 = alloca double
  store double %3, ptr %6
  %7 = alloca double
  %8 = alloca double
  %9 = alloca double
  br label %L1
L1:
  br label %L105
L105:
  %10 = load double, ptr %5
  store double %10, ptr %7
  %11 = load double, ptr %6
  store double %11, ptr %8
  %12 = load double, ptr %7
  %13 = load double, ptr %8
  %14 = fsub double %12, %13
  store double %14, ptr %9
  %15 = load double, ptr %9
  store double %15, ptr %5
  %16 = load double, ptr %5
  %17 = load i64, ptr %ds
  %18 = load i64, ptr %alloc
  %19 = insertvalue { { i64, i64 }, { double } } poison, i64 %17, 0, 0
  %20 = insertvalue { { i64, i64 }, { double } } %19, i64 %18, 0, 1
  %21 = insertvalue { { i64, i64 }, { double } } %20, double %16, 1, 0
  ret { { i64, i64 }, { double } } %21
}

define  oxcamlcc { { i64, i64 }, { double } } @camlFloat_ops__mul_HIDE_STAMP(i64 %0, i64 %1, double %2, double %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca double
  store double %2, ptr %5
  %6 = alloca double
  store double %3, ptr %6
  %7 = alloca double
  %8 = alloca double
  %9 = alloca double
  br label %L1
L1:
  br label %L109
L109:
  %10 = load double, ptr %5
  store double %10, ptr %7
  %11 = load double, ptr %6
  store double %11, ptr %8
  %12 = load double, ptr %7
  %13 = load double, ptr %8
  %14 = fmul double %12, %13
  store double %14, ptr %9
  %15 = load double, ptr %9
  store double %15, ptr %5
  %16 = load double, ptr %5
  %17 = load i64, ptr %ds
  %18 = load i64, ptr %alloc
  %19 = insertvalue { { i64, i64 }, { double } } poison, i64 %17, 0, 0
  %20 = insertvalue { { i64, i64 }, { double } } %19, i64 %18, 0, 1
  %21 = insertvalue { { i64, i64 }, { double } } %20, double %16, 1, 0
  ret { { i64, i64 }, { double } } %21
}

define  oxcamlcc { { i64, i64 }, { double } } @camlFloat_ops__div_HIDE_STAMP(i64 %0, i64 %1, double %2, double %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca double
  store double %2, ptr %5
  %6 = alloca double
  store double %3, ptr %6
  %7 = alloca double
  %8 = alloca double
  %9 = alloca double
  br label %L1
L1:
  br label %L113
L113:
  %10 = load double, ptr %5
  store double %10, ptr %7
  %11 = load double, ptr %6
  store double %11, ptr %8
  %12 = load double, ptr %7
  %13 = load double, ptr %8
  %14 = fdiv double %12, %13
  store double %14, ptr %9
  %15 = load double, ptr %9
  store double %15, ptr %5
  %16 = load double, ptr %5
  %17 = load i64, ptr %ds
  %18 = load i64, ptr %alloc
  %19 = insertvalue { { i64, i64 }, { double } } poison, i64 %17, 0, 0
  %20 = insertvalue { { i64, i64 }, { double } } %19, i64 %18, 0, 1
  %21 = insertvalue { { i64, i64 }, { double } } %20, double %16, 1, 0
  ret { { i64, i64 }, { double } } %21
}

define  oxcamlcc { { i64, i64 }, { double } } @camlFloat_ops__neg_HIDE_STAMP(i64 %0, i64 %1, double %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca double
  store double %2, ptr %4
  %5 = alloca double
  %6 = alloca double
  br label %L1
L1:
  br label %L117
L117:
  %7 = load double, ptr %4
  store double %7, ptr %5
  %8 = load double, ptr %5
  %9 = fneg double %8
  store double %9, ptr %6
  %10 = load double, ptr %6
  store double %10, ptr %4
  %11 = load double, ptr %4
  %12 = load i64, ptr %ds
  %13 = load i64, ptr %alloc
  %14 = insertvalue { { i64, i64 }, { double } } poison, i64 %12, 0, 0
  %15 = insertvalue { { i64, i64 }, { double } } %14, i64 %13, 0, 1
  %16 = insertvalue { { i64, i64 }, { double } } %15, double %11, 1, 0
  ret { { i64, i64 }, { double } } %16
}

define  oxcamlcc { { i64, i64 }, { double } } @camlFloat_ops__abs_HIDE_STAMP(i64 %0, i64 %1, double %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca double
  store double %2, ptr %4
  %5 = alloca double
  %6 = alloca double
  br label %L1
L1:
  br label %L121
L121:
  %7 = load double, ptr %4
  store double %7, ptr %5
  %8 = load double, ptr %5
  %9 = call  double @llvm.fabs.double(double %8)
  store double %9, ptr %6
  %10 = load double, ptr %6
  store double %10, ptr %4
  %11 = load double, ptr %4
  %12 = load i64, ptr %ds
  %13 = load i64, ptr %alloc
  %14 = insertvalue { { i64, i64 }, { double } } poison, i64 %12, 0, 0
  %15 = insertvalue { { i64, i64 }, { double } } %14, i64 %13, 0, 1
  %16 = insertvalue { { i64, i64 }, { double } } %15, double %11, 1, 0
  ret { { i64, i64 }, { double } } %16
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlFloat_ops__compare_HIDE_STAMP(i64 %0, i64 %1, double %2, double %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca double
  store double %2, ptr %5
  %6 = alloca double
  store double %3, ptr %6
  %7 = alloca i64
  %8 = alloca double
  %9 = alloca double
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  br label %L1
L1:
  br label %L125
L125:
  %19 = load double, ptr %5
  store double %19, ptr %8
  %20 = load double, ptr %6
  store double %20, ptr %9
  %21 = load double, ptr %9
  %22 = load double, ptr %9
  %23 = fcmp oeq double %21, %22
  %24 = zext i1 %23 to i64
  store i64 %24, ptr %10
  %25 = load double, ptr %8
  %26 = load double, ptr %8
  %27 = fcmp oeq double %25, %26
  %28 = zext i1 %27 to i64
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  %30 = load i64, ptr %10
  %31 = sub i64 %29, %30
  store i64 %31, ptr %12
  %32 = load double, ptr %8
  %33 = load double, ptr %9
  %34 = fcmp olt double %32, %33
  %35 = zext i1 %34 to i64
  store i64 %35, ptr %13
  %36 = load double, ptr %8
  %37 = load double, ptr %9
  %38 = fcmp ogt double %36, %37
  %39 = zext i1 %38 to i64
  store i64 %39, ptr %14
  %40 = load i64, ptr %14
  %41 = load i64, ptr %13
  %42 = sub i64 %40, %41
  store i64 %42, ptr %15
  %43 = load i64, ptr %15
  %44 = load i64, ptr %12
  %45 = add i64 %43, %44
  store i64 %45, ptr %16
  %46 = load i64, ptr %16
  %47 = shl i64 %46, 1
  store i64 %47, ptr %17
  %48 = load i64, ptr %17
  %49 = add i64 %48, 1
  store i64 %49, ptr %18
  %50 = load i64, ptr %18
  store i64 %50, ptr %7
  %51 = load i64, ptr %7
  %52 = load i64, ptr %ds
  %53 = load i64, ptr %alloc
  %54 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %52, 0, 0
  %55 = insertvalue { { i64, i64 }, { i64 } } %54, i64 %53, 0, 1
  %56 = insertvalue { { i64, i64 }, { i64 } } %55, i64 %51, 1, 0
  ret { { i64, i64 }, { i64 } } %56
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlFloat_ops__entry(i64 %0, i64 %1) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca ptr addrspace(1)
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L140
L140:
  %8 = ptrtoint ptr @camlFloat_ops to i64
  store i64 %8, ptr %5
  %9 = load i64, ptr %5
  store i64 %9, ptr %6
  %10 = load i64, ptr %6
  %11 = inttoptr i64 %10 to ptr addrspace(1)
  store ptr addrspace(1) %11, ptr %4
  store i64 1, ptr %7
  %12 = load i64, ptr %7
  store i64 %12, ptr %3
  %13 = load ptr addrspace(1), ptr %3
  %14 = load i64, ptr %ds
  %15 = load i64, ptr %alloc
  %16 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %14, 0, 0
  %17 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %16, i64 %15, 0, 1
  %18 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %17, ptr addrspace(1) %13, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %18
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlFloat_ops__gc_roots = global { i64 } { i64 0 }, section ".data", align 8
@header.camlFloat_ops = global i64 1792, section ".data", align 8
@camlFloat_ops = global { ptr } { ptr @camlFloat_ops__Pmakeblock251 }, section ".data", align 8
@header.camlFloat_ops__Pmakeblock251 = global i64 7936, section ".data", align 8
@camlFloat_ops__Pmakeblock251 = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @camlFloat_ops__add_7, ptr @camlFloat_ops__sub_8, ptr @camlFloat_ops__mul_9, ptr @camlFloat_ops__div_10, ptr @camlFloat_ops__neg_11, ptr @camlFloat_ops__abs_12, ptr @camlFloat_ops__compare_13 }, section ".data", align 8
@header.camlFloat_ops__compare_13 = global i64 4087, section ".data", align 8
@camlFloat_ops__compare_13 = global { ptr, i64, ptr } { ptr @caml_curryF_F, i64 180143985094819847, ptr @camlFloat_ops__compare_HIDE_STAMP }, section ".data", align 8
@header.camlFloat_ops__abs_12 = global i64 3063, section ".data", align 8
@camlFloat_ops__abs_12 = global { ptr, i64 } { ptr @camlFloat_ops__abs_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlFloat_ops__neg_11 = global i64 3063, section ".data", align 8
@camlFloat_ops__neg_11 = global { ptr, i64 } { ptr @camlFloat_ops__neg_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlFloat_ops__div_10 = global i64 4087, section ".data", align 8
@camlFloat_ops__div_10 = global { ptr, i64, ptr } { ptr @caml_curryF_F_RF, i64 180143985094819847, ptr @camlFloat_ops__div_HIDE_STAMP }, section ".data", align 8
@header.camlFloat_ops__mul_9 = global i64 4087, section ".data", align 8
@camlFloat_ops__mul_9 = global { ptr, i64, ptr } { ptr @caml_curryF_F_RF, i64 180143985094819847, ptr @camlFloat_ops__mul_HIDE_STAMP }, section ".data", align 8
@header.camlFloat_ops__sub_8 = global i64 4087, section ".data", align 8
@camlFloat_ops__sub_8 = global { ptr, i64, ptr } { ptr @caml_curryF_F_RF, i64 180143985094819847, ptr @camlFloat_ops__sub_HIDE_STAMP }, section ".data", align 8
@header.camlFloat_ops__add_7 = global i64 4087, section ".data", align 8
@camlFloat_ops__add_7 = global { ptr, i64, ptr } { ptr @caml_curryF_F_RF, i64 180143985094819847, ptr @camlFloat_ops__add_HIDE_STAMP }, section ".data", align 8
@caml_curryF_F = external global ptr
@caml_curryF_F_RF = external global ptr

declare double @llvm.fabs.double(double)


!0 = !{ i32 1, !"oxcaml_module", !"Float_ops" }
!llvm.module.flags = !{ !0 }
