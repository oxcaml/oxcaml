source_filename = "float_ops.ml"

@camlFloat_ops__data_begin = global i64 0
define void @camlFloat_ops__code_begin() { ret void }

define double @camlFloat_ops__add_0_7_code(double %0, double %1)  {
  %3 = alloca double 
  %4 = alloca double 
  %5 = alloca double 
  %6 = alloca double 
  %7 = alloca double 
  store double %0, ptr %3
  store double %1, ptr %4
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %8 = load double, ptr %3
  store double %8, ptr %5
  %9 = load double, ptr %4
  store double %9, ptr %6
  %10 = load double, ptr %5
  %11 = load double, ptr %6
  %12 = fadd double %10, %11
  store double %12, ptr %7
  %13 = load double, ptr %7
  store double %13, ptr %3
  %14 = load double, ptr %3
  ret double %14
}

define double @camlFloat_ops__sub_1_8_code(double %0, double %1)  {
  %3 = alloca double 
  %4 = alloca double 
  %5 = alloca double 
  %6 = alloca double 
  %7 = alloca double 
  store double %0, ptr %3
  store double %1, ptr %4
  br label %L1
L1:
  br label %L105
L105:                                                ; preds = %L1
  %8 = load double, ptr %3
  store double %8, ptr %5
  %9 = load double, ptr %4
  store double %9, ptr %6
  %10 = load double, ptr %5
  %11 = load double, ptr %6
  %12 = fsub double %10, %11
  store double %12, ptr %7
  %13 = load double, ptr %7
  store double %13, ptr %3
  %14 = load double, ptr %3
  ret double %14
}

define double @camlFloat_ops__mul_2_9_code(double %0, double %1)  {
  %3 = alloca double 
  %4 = alloca double 
  %5 = alloca double 
  %6 = alloca double 
  %7 = alloca double 
  store double %0, ptr %3
  store double %1, ptr %4
  br label %L1
L1:
  br label %L109
L109:                                                ; preds = %L1
  %8 = load double, ptr %3
  store double %8, ptr %5
  %9 = load double, ptr %4
  store double %9, ptr %6
  %10 = load double, ptr %5
  %11 = load double, ptr %6
  %12 = fmul double %10, %11
  store double %12, ptr %7
  %13 = load double, ptr %7
  store double %13, ptr %3
  %14 = load double, ptr %3
  ret double %14
}

define double @camlFloat_ops__div_3_10_code(double %0, double %1)  {
  %3 = alloca double 
  %4 = alloca double 
  %5 = alloca double 
  %6 = alloca double 
  %7 = alloca double 
  store double %0, ptr %3
  store double %1, ptr %4
  br label %L1
L1:
  br label %L113
L113:                                                ; preds = %L1
  %8 = load double, ptr %3
  store double %8, ptr %5
  %9 = load double, ptr %4
  store double %9, ptr %6
  %10 = load double, ptr %5
  %11 = load double, ptr %6
  %12 = fdiv double %10, %11
  store double %12, ptr %7
  %13 = load double, ptr %7
  store double %13, ptr %3
  %14 = load double, ptr %3
  ret double %14
}

define double @camlFloat_ops__neg_4_11_code(double %0)  {
  %2 = alloca double 
  %3 = alloca double 
  %4 = alloca double 
  store double %0, ptr %2
  br label %L1
L1:
  br label %L117
L117:                                                ; preds = %L1
  %5 = load double, ptr %2
  store double %5, ptr %3
  %6 = load double, ptr %3
  store double %6, ptr %4
  %7 = load double, ptr %4
  %8 = fneg double %7
  store double %8, ptr %4
  %9 = load double, ptr %4
  store double %9, ptr %2
  %10 = load double, ptr %2
  ret double %10
}

define double @camlFloat_ops__abs_5_12_code(double %0)  {
  %2 = alloca double 
  %3 = alloca double 
  %4 = alloca double 
  store double %0, ptr %2
  br label %L1
L1:
  br label %L121
L121:                                                ; preds = %L1
  %5 = load double, ptr %2
  store double %5, ptr %3
  %6 = load double, ptr %3
  store double %6, ptr %4
  %7 = load double, ptr %4
  %8 = call double @llvm.fabs.f64(double %7)
  store double %8, ptr %4
  %9 = load double, ptr %4
  store double %9, ptr %2
  %10 = load double, ptr %2
  ret double %10
}

define i64 @camlFloat_ops__compare_6_13_code(double %0, double %1)  {
  %3 = alloca double 
  %4 = alloca double 
  %5 = alloca i64 
  %6 = alloca double 
  %7 = alloca double 
  %8 = alloca i64 
  %9 = alloca double 
  %10 = alloca i64 
  %11 = alloca double 
  %12 = alloca i64 
  %13 = alloca i64 
  %14 = alloca double 
  %15 = alloca i64 
  %16 = alloca double 
  %17 = alloca i64 
  %18 = alloca i64 
  %19 = alloca i64 
  %20 = alloca i64 
  store double %0, ptr %3
  store double %1, ptr %4
  br label %L1
L1:
  br label %L125
L125:                                                ; preds = %L1
  %21 = load double, ptr %3
  store double %21, ptr %6
  %22 = load double, ptr %4
  store double %22, ptr %7
  %23 = load double, ptr %7
  %24 = load double, ptr %7
  %25 = fcmp oeq double %23, %24
  %26 = zext i1 %25 to i64
  store i64 %26, ptr %8
  %27 = load double, ptr %6
  %28 = load double, ptr %6
  %29 = fcmp oeq double %27, %28
  %30 = zext i1 %29 to i64
  store i64 %30, ptr %10
  %31 = load i64, ptr %10
  store i64 %31, ptr %12
  %32 = load i64, ptr %12
  %33 = load i64, ptr %8
  %34 = sub i64 %32, %33
  store i64 %34, ptr %12
  %35 = load double, ptr %6
  %36 = load double, ptr %7
  %37 = fcmp olt double %35, %36
  %38 = zext i1 %37 to i64
  store i64 %38, ptr %13
  %39 = load double, ptr %6
  %40 = load double, ptr %7
  %41 = fcmp ogt double %39, %40
  %42 = zext i1 %41 to i64
  store i64 %42, ptr %15
  %43 = load i64, ptr %15
  store i64 %43, ptr %17
  %44 = load i64, ptr %17
  %45 = load i64, ptr %13
  %46 = sub i64 %44, %45
  store i64 %46, ptr %17
  %47 = load i64, ptr %17
  store i64 %47, ptr %18
  %48 = load i64, ptr %18
  %49 = load i64, ptr %12
  %50 = add i64 %48, %49
  store i64 %50, ptr %18
  %51 = load i64, ptr %18
  store i64 %51, ptr %19
  %52 = load i64, ptr %19
  %53 = shl i64 %52, 1
  store i64 %53, ptr %19
  %54 = load i64, ptr %19
  store i64 %54, ptr %20
  %55 = load i64, ptr %20
  %56 = add i64 %55, 1
  store i64 %56, ptr %20
  %57 = load i64, ptr %20
  store i64 %57, ptr %5
  %58 = load i64, ptr %5
  ret i64 %58
}

define i64 @camlFloat_ops__entry()  {
  %1 = alloca i64 
  %2 = alloca i64 
  %3 = alloca i64 
  %4 = alloca i64 
  %5 = alloca i64 
  br label %L1
L1:
  br label %L140
L140:                                                ; preds = %L1
  store ptr @camlFloat_ops, ptr %3
  %6 = load i64, ptr %3
  store i64 %6, ptr %4
  %7 = load i64, ptr %4
  store i64 %7, ptr %2
  store i64 1, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %1
  %9 = load i64, ptr %1
  ret i64 %9
}

@camlFloat_ops__gc_roots = global { i64, i64 } { i64 0, i64 1792 }
@camlFloat_ops = global { ptr, i64 } { ptr @camlFloat_ops__Pmakeblock253, i64 7936 }
@camlFloat_ops__Pmakeblock253 = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64 } { ptr @camlFloat_ops__add_7, ptr @camlFloat_ops__sub_8, ptr @camlFloat_ops__mul_9, ptr @camlFloat_ops__div_10, ptr @camlFloat_ops__neg_11, ptr @camlFloat_ops__abs_12, ptr @camlFloat_ops__compare_13, i64 4087 }
@camlFloat_ops__compare_13 = global { ptr, i64, ptr, i64 } { ptr @caml_curryF_F, i64 180143985094819847, ptr @camlFloat_ops__compare_6_13_code, i64 3063 }
@camlFloat_ops__abs_12 = global { ptr, i64, i64 } { ptr @camlFloat_ops__abs_5_12_code, i64 108086391056891909, i64 3063 }
@camlFloat_ops__neg_11 = global { ptr, i64, i64 } { ptr @camlFloat_ops__neg_4_11_code, i64 108086391056891909, i64 4087 }
@camlFloat_ops__div_10 = global { ptr, i64, ptr, i64 } { ptr @caml_curryF_F_RF, i64 180143985094819847, ptr @camlFloat_ops__div_3_10_code, i64 4087 }
@camlFloat_ops__mul_9 = global { ptr, i64, ptr, i64 } { ptr @caml_curryF_F_RF, i64 180143985094819847, ptr @camlFloat_ops__mul_2_9_code, i64 4087 }
@camlFloat_ops__sub_8 = global { ptr, i64, ptr, i64 } { ptr @caml_curryF_F_RF, i64 180143985094819847, ptr @camlFloat_ops__sub_1_8_code, i64 4087 }
@camlFloat_ops__add_7 = global { ptr, i64, ptr } { ptr @caml_curryF_F_RF, i64 180143985094819847, ptr @camlFloat_ops__add_0_7_code }
@caml_curryF_F = external global ptr
@caml_curryF_F_RF = external global ptr

@camlFloat_ops__data_end = global i64 0
define void @camlFloat_ops__code_end() { ret void }
@camlFloat_ops__frametable = global i64 0
