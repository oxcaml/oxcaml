source_filename = "array_rev.ml"

@camlArray_rev__data_begin = global {  } {  }, align 8, section ".data"
define void @camlArray_rev__code_begin() { unreachable }

@camlArray_rev__gc_roots = global { i64 } { i64 0 }, align 8, section ".data"
@.header.camlArray_rev = global { i64 } { i64 1792 }, align 8, section ".data"
@camlArray_rev = global { ptr } { ptr @camlArray_rev__rev_1 }, align 8, section ".data"
@.header.camlArray_rev__rev_1 = global { i64 } { i64 3063 }, align 8, section ".data"
@camlArray_rev__rev_1 = global { ptr, i64 } { ptr @camlArray_rev__rev_HIDE_STAMP, i64 108086391056891909 }, align 8, section ".data"
define  cc 104 { { ptr, ptr }, { i64 } } @camlArray_rev__rev_HIDE_STAMP(ptr %0, ptr %1, i64 %2) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca ptr addrspace(1)
  %23 = alloca ptr addrspace(1)
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca i64
  %49 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %50 = load i64, ptr %4
  store i64 %50, ptr %5
  store ptr @camlArray_rev_data, ptr %6
  %51 = load i64, ptr %6
  store i64 %51, ptr %7
  %52 = load i64, ptr %7
  %53 = add i64 %52, 8
  store i64 %53, ptr %7
  %54 = load i64, ptr %7
  %55 = add i64 %54, 0
  %56 = inttoptr i64 %55 to ptr
  %57 = load ptr addrspace(1), ptr %56
  store ptr addrspace(1) %57, ptr %8
  %58 = load ptr addrspace(1), ptr %8
  store ptr addrspace(1) %58, ptr %9
  %59 = load ptr addrspace(1), ptr %9
  %60 = ptrtoint ptr addrspace(1) %59 to i64
  store i64 %60, ptr %10
  %61 = load i64, ptr %10
  %62 = ashr i64 %61, 1
  store i64 %62, ptr %10
  %63 = load i64, ptr %10
  store i64 %63, ptr %11
  %64 = load i64, ptr %11
  store i64 %64, ptr %12
  %65 = load i64, ptr %12
  %66 = lshr i64 %65, 63
  store i64 %66, ptr %12
  %67 = load i64, ptr %11
  store i64 %67, ptr %13
  %68 = load i64, ptr %13
  %69 = load i64, ptr %12
  %70 = add i64 %68, %69
  store i64 %70, ptr %13
  %71 = load i64, ptr %13
  store i64 %71, ptr %14
  %72 = load i64, ptr %14
  %73 = ashr i64 %72, 1
  store i64 %73, ptr %14
  %74 = load i64, ptr %14
  store i64 %74, ptr %15
  %75 = load i64, ptr %15
  %76 = shl i64 %75, 1
  store i64 %76, ptr %15
  %77 = load i64, ptr %15
  store i64 %77, ptr %16
  %78 = load i64, ptr %16
  %79 = add i64 %78, -1
  store i64 %79, ptr %16
  %80 = load i64, ptr %16
  store i64 %80, ptr %17
  %81 = load i64, ptr %17
  %82 = icmp slt i64 %81, 1
  br i1 %82, label %L144, label %83
83:
  %84 = load i64, ptr %17
  %85 = icmp sgt i64 %84, 1
  br i1 %85, label %L114, label %L114
L114:                                                ; preds = %L101
  store i64 1, ptr %19
  %86 = load i64, ptr %19
  store i64 %86, ptr %20
  %87 = load i64, ptr %20
  store i64 %87, ptr %18
  br label %L116
L116:                                                ; preds = %L114, %L137
  store ptr @camlArray_rev_data, ptr %21
  %88 = load i64, ptr %21
  %89 = add i64 %88, 0
  %90 = inttoptr i64 %89 to ptr
  %91 = load ptr addrspace(1), ptr %90
  store ptr addrspace(1) %91, ptr %22
  %92 = load ptr addrspace(1), ptr %22
  store ptr addrspace(1) %92, ptr %23
  %93 = load i64, ptr %18
  store i64 %93, ptr %24
  %94 = load i64, ptr %24
  %95 = shl i64 %94, 2
  store i64 %95, ptr %24
  %96 = load ptr addrspace(1), ptr %23
  %97 = ptrtoint ptr addrspace(1) %96 to i64
  store i64 %97, ptr %25
  %98 = load i64, ptr %25
  %99 = load i64, ptr %24
  %100 = add i64 %98, %99
  store i64 %100, ptr %25
  %101 = load i64, ptr %25
  store i64 %101, ptr %26
  %102 = load i64, ptr %26
  %103 = add i64 %102, -4
  store i64 %103, ptr %26
  %104 = load i64, ptr %26
  %105 = add i64 %104, 0
  %106 = inttoptr i64 %105 to ptr
  %107 = load i64, ptr %106
  store i64 %107, ptr %27
  %108 = load i64, ptr %27
  store i64 %108, ptr %28
  %109 = load ptr addrspace(1), ptr %9
  %110 = ptrtoint ptr addrspace(1) %109 to i64
  store i64 %110, ptr %29
  %111 = load i64, ptr %29
  %112 = load i64, ptr %18
  %113 = sub i64 %111, %112
  store i64 %113, ptr %29
  %114 = load i64, ptr %29
  store i64 %114, ptr %30
  %115 = load i64, ptr %30
  %116 = add i64 %115, -1
  store i64 %116, ptr %30
  %117 = load i64, ptr %30
  store i64 %117, ptr %31
  %118 = load i64, ptr %18
  store i64 %118, ptr %32
  %119 = load i64, ptr %32
  %120 = shl i64 %119, 2
  store i64 %120, ptr %32
  %121 = load ptr addrspace(1), ptr %23
  %122 = ptrtoint ptr addrspace(1) %121 to i64
  store i64 %122, ptr %33
  %123 = load i64, ptr %33
  %124 = load i64, ptr %32
  %125 = add i64 %123, %124
  store i64 %125, ptr %33
  %126 = load i64, ptr %33
  store i64 %126, ptr %34
  %127 = load i64, ptr %34
  %128 = add i64 %127, -4
  store i64 %128, ptr %34
  %129 = load i64, ptr %31
  store i64 %129, ptr %35
  %130 = load i64, ptr %35
  %131 = shl i64 %130, 2
  store i64 %131, ptr %35
  %132 = load ptr addrspace(1), ptr %23
  %133 = ptrtoint ptr addrspace(1) %132 to i64
  store i64 %133, ptr %36
  %134 = load i64, ptr %36
  %135 = load i64, ptr %35
  %136 = add i64 %134, %135
  store i64 %136, ptr %36
  %137 = load i64, ptr %36
  store i64 %137, ptr %37
  %138 = load i64, ptr %37
  %139 = add i64 %138, -4
  store i64 %139, ptr %37
  %140 = load i64, ptr %37
  %141 = add i64 %140, 0
  %142 = inttoptr i64 %141 to ptr
  %143 = load i64, ptr %142
  store i64 %143, ptr %38
  %144 = load i64, ptr %34
  %145 = add i64 %144, 0
  %146 = inttoptr i64 %145 to ptr
  %147 = load i64, ptr %38
  store i64 %147, ptr %146
  store i64 1, ptr %39
  %148 = load i64, ptr %39
  store i64 %148, ptr %40
  %149 = load i64, ptr %31
  store i64 %149, ptr %41
  %150 = load i64, ptr %41
  %151 = shl i64 %150, 2
  store i64 %151, ptr %41
  %152 = load ptr addrspace(1), ptr %23
  %153 = ptrtoint ptr addrspace(1) %152 to i64
  store i64 %153, ptr %42
  %154 = load i64, ptr %42
  %155 = load i64, ptr %41
  %156 = add i64 %154, %155
  store i64 %156, ptr %42
  %157 = load i64, ptr %42
  store i64 %157, ptr %43
  %158 = load i64, ptr %43
  %159 = add i64 %158, -4
  store i64 %159, ptr %43
  %160 = load i64, ptr %43
  %161 = add i64 %160, 0
  %162 = inttoptr i64 %161 to ptr
  %163 = load i64, ptr %28
  store i64 %163, ptr %162
  store i64 1, ptr %44
  %164 = load i64, ptr %44
  store i64 %164, ptr %45
  %165 = load i64, ptr %18
  %166 = load i64, ptr %17
  %167 = icmp slt i64 %165, %166
  br i1 %167, label %L137, label %168
168:
  %169 = load i64, ptr %18
  %170 = load i64, ptr %17
  %171 = icmp sgt i64 %169, %170
  br i1 %171, label %L137, label %L140
L137:                                                ; preds = %L116
  %172 = load i64, ptr %18
  store i64 %172, ptr %46
  %173 = load i64, ptr %46
  %174 = add i64 %173, 2
  store i64 %174, ptr %46
  %175 = load i64, ptr %46
  store i64 %175, ptr %47
  %176 = load i64, ptr %47
  store i64 %176, ptr %18
  br label %L116
L140:                                                ; preds = %L116
  store i64 1, ptr %48
  %177 = load i64, ptr %48
  store i64 %177, ptr %4
  %178 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %179 = load ptr, ptr %ds
  %180 = insertvalue { { ptr, ptr }, { i64 } } %178, ptr %179, 0, 0
  %181 = load ptr, ptr %alloc
  %182 = insertvalue { { ptr, ptr }, { i64 } } %180, ptr %181, 0, 1
  %183 = load i64, ptr %4
  %184 = insertvalue { { ptr, ptr }, { i64 } } %182, i64 %183, 1, 0
  ret { { ptr, ptr }, { i64 } } %184
L144:                                                ; preds = %L101
  store i64 1, ptr %49
  %185 = load i64, ptr %49
  store i64 %185, ptr %4
  %186 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %187 = load ptr, ptr %ds
  %188 = insertvalue { { ptr, ptr }, { i64 } } %186, ptr %187, 0, 0
  %189 = load ptr, ptr %alloc
  %190 = insertvalue { { ptr, ptr }, { i64 } } %188, ptr %189, 0, 1
  %191 = load i64, ptr %4
  %192 = insertvalue { { ptr, ptr }, { i64 } } %190, i64 %191, 1, 0
  ret { { ptr, ptr }, { i64 } } %192
}

define  cc 104 { { ptr, ptr }, { ptr addrspace(1) } } @camlArray_rev__entry(ptr %0, ptr %1) noinline gc "statepoint-example" {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca ptr addrspace(1)
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L151
L151:                                                ; preds = %L1
  store ptr @camlArray_rev, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %6
  %9 = load i64, ptr %6
  %10 = inttoptr i64 %9 to ptr addrspace(1)
  store ptr addrspace(1) %10, ptr %4
  store i64 1, ptr %7
  %11 = load i64, ptr %7
  store i64 %11, ptr %3
  %12 = extractvalue { { { ptr, ptr }, { ptr addrspace(1) } } } poison, 0
  %13 = load ptr, ptr %ds
  %14 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %12, ptr %13, 0, 0
  %15 = load ptr, ptr %alloc
  %16 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %14, ptr %15, 0, 1
  %17 = load i64, ptr %3
  %18 = inttoptr i64 %17 to ptr addrspace(1)
  %19 = insertvalue { { ptr, ptr }, { ptr addrspace(1) } } %16, ptr addrspace(1) %18, 1, 0
  ret { { ptr, ptr }, { ptr addrspace(1) } } %19
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@camlArray_rev_data = external global ptr

@camlArray_rev__data_end = global {  } {  }, align 8, section ".data"
define void @camlArray_rev__code_end() { unreachable }
