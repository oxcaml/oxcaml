source_filename = "exn_part2.ml"

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) noinline gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca ptr addrspace(1)
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca ptr addrspace(1)
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca ptr addrspace(1)
  %20 = alloca ptr addrspace(1)
  %21 = alloca ptr addrspace(1)
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca ptr addrspace(1)
  %30 = alloca ptr addrspace(1)
  %31 = alloca i64
  %32 = alloca ptr addrspace(1)
  %33 = alloca ptr addrspace(1)
  %34 = alloca ptr addrspace(1)
  %35 = alloca ptr addrspace(1)
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca ptr addrspace(1)
  %41 = alloca ptr addrspace(1)
  %42 = alloca ptr addrspace(1)
  %43 = alloca ptr addrspace(1)
  %44 = alloca ptr addrspace(1)
  %45 = alloca i64
  %46 = alloca i64
  br label %L1
L1:
  br label %L101
L101:
  %47 = load i64, ptr %4
  store i64 %47, ptr %7
  %48 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %48, ptr %8
  %49 = load ptr addrspace(1), ptr %8
  %50 = getelementptr i8, ptr addrspace(1) %49, i64 16
  store ptr addrspace(1) %50, ptr %9
  %51 = load ptr addrspace(1), ptr %9
  %52 = load ptr addrspace(1), ptr addrspace(1) %51
  store ptr addrspace(1) %52, ptr %10
  %53 = load ptr addrspace(1), ptr %10
  store ptr addrspace(1) %53, ptr %11
  %54 = load i64, ptr %ds
  %55 = add i64 %54, 64
  %56 = inttoptr i64 %55 to ptr
  %57 = load i64, ptr %56
  store i64 %57, ptr %12
  %58 = load i64, ptr %12
  store i64 %58, ptr %13
  %59 = load i64, ptr %ds
  %60 = load i64, ptr %alloc
  %61 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %59, i64 %60) returns_twice "gc-leaf-function"="true"
  %62 = extractvalue { { i64, i64 }, { i64 } } %61, 0, 0
  %63 = extractvalue { { i64, i64 }, { i64 } } %61, 0, 1
  store i64 %62, ptr %ds
  store i64 %63, ptr %alloc
  %64 = extractvalue { { i64, i64 }, { i64 } } %61, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %64) "gc-leaf-function"="true"
  br label %L142
L142:
  %65 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %L143, label %L106
L143:
  store ptr blockaddress(@camlExn_part2__catch_exn1_from_llvm_0_9_code, %L142), ptr @camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP.recover_rbp_var.L142
  %67 = call  ptr @llvm.stacksave()
  %68 = alloca { i64, i64, i64, i64 }
  %69 = ptrtoint ptr %68 to i64
  %70 = add i64 %69, 16
  %71 = inttoptr i64 %70 to ptr
  %72 = ptrtoint ptr %68 to i64
  %73 = add i64 %72, 8
  %74 = inttoptr i64 %73 to ptr
  %75 = load i64, ptr %ds
  %76 = add i64 %75, 48
  %77 = inttoptr i64 %76 to ptr
  %78 = load i64, ptr %77
  store ptr %68, ptr %77
  store ptr @camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP.recover_rbp_asm.L142, ptr %74
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %71) "gc-leaf-function"="true"
  store i64 %78, ptr %68
  store i64 5, ptr %15
  %79 = load ptr addrspace(1), ptr %11
  %80 = load i64, ptr %15
  store i64 %80, ptr addrspace(1) %79
  store i64 1, ptr %16
  %81 = load i64, ptr %16
  store i64 %81, ptr %17
  %82 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %82, ptr %18
  %83 = load ptr addrspace(1), ptr %18
  %84 = getelementptr i8, ptr addrspace(1) %83, i64 40
  store ptr addrspace(1) %84, ptr %19
  %85 = load ptr addrspace(1), ptr %19
  %86 = load ptr addrspace(1), ptr addrspace(1) %85
  store ptr addrspace(1) %86, ptr %20
  %87 = load ptr addrspace(1), ptr %20
  store ptr addrspace(1) %87, ptr %21
  store i64 1, ptr %22
  %88 = load ptr addrspace(1), ptr %21
  %89 = load i64, ptr addrspace(1) %88
  store i64 %89, ptr %23
  %90 = load i64, ptr %22
  store i64 %90, ptr %4
  %91 = load ptr addrspace(1), ptr %21
  store ptr addrspace(1) %91, ptr %6
  %92 = load i64, ptr %4
  %93 = load ptr addrspace(1), ptr %6
  %94 = load i64, ptr %ds
  %95 = load i64, ptr %alloc
  %96 = load ptr, ptr %23
  %97 = call oxcamlcc { { i64, i64 }, { i64 } } %96(i64 %94, i64 %95, i64 %92, ptr addrspace(1) %93) "statepoint-id"="32"
  %98 = extractvalue { { i64, i64 }, { i64 } } %97, 0, 0
  %99 = extractvalue { { i64, i64 }, { i64 } } %97, 0, 1
  store i64 %98, ptr %ds
  store i64 %99, ptr %alloc
  %100 = extractvalue { { i64, i64 }, { i64 } } %97, 1, 0
  store i64 %100, ptr %4
  br label %L117
L117:
  %101 = load i64, ptr %4
  store i64 %101, ptr %24
  %102 = load i64, ptr %24
  store i64 %102, ptr %25
  %103 = load i64, ptr %ds
  %104 = add i64 %103, 48
  %105 = inttoptr i64 %104 to ptr
  %106 = load i64, ptr %68
  store i64 %106, ptr %105
  call  void @llvm.stackrestore(ptr %67)
  %107 = load i64, ptr %25
  store i64 %107, ptr %4
  %108 = load i64, ptr %4
  %109 = load i64, ptr %ds
  %110 = load i64, ptr %alloc
  %111 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %109, 0, 0
  %112 = insertvalue { { i64, i64 }, { i64 } } %111, i64 %110, 0, 1
  %113 = insertvalue { { i64, i64 }, { i64 } } %112, i64 %108, 1, 0
  ret { { i64, i64 }, { i64 } } %113
L106:
  %114 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %114, ptr %alloc
  store i64 %65, ptr %4
  %115 = load i64, ptr %4
  %116 = inttoptr i64 %115 to ptr addrspace(1)
  store ptr addrspace(1) %116, ptr %14
  %117 = load i64, ptr %ds
  %118 = add i64 %117, 64
  %119 = inttoptr i64 %118 to ptr
  %120 = load i64, ptr %13
  store i64 %120, ptr %119
  store i64 1, ptr %26
  %121 = load i64, ptr %26
  store i64 %121, ptr %27
  %122 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %122, ptr %28
  %123 = load i64, ptr %28
  %124 = inttoptr i64 %123 to ptr
  %125 = load ptr addrspace(1), ptr %124
  store ptr addrspace(1) %125, ptr %29
  %126 = load ptr addrspace(1), ptr %14
  %127 = load ptr addrspace(1), ptr addrspace(1) %126
  store ptr addrspace(1) %127, ptr %30
  %128 = load i64, ptr %30
  %129 = load i64, ptr %29
  %130 = icmp slt i64 %128, %129
  br i1 %130, label %L138, label %L144
L144:
  %131 = load i64, ptr %30
  %132 = load i64, ptr %29
  %133 = icmp sgt i64 %131, %132
  br i1 %133, label %L138, label %L125
L125:
  %134 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %134, ptr %31
  %135 = load ptr addrspace(1), ptr %31
  %136 = getelementptr i8, ptr addrspace(1) %135, i64 56
  store ptr addrspace(1) %136, ptr %32
  %137 = load ptr addrspace(1), ptr %32
  %138 = load ptr addrspace(1), ptr addrspace(1) %137
  store ptr addrspace(1) %138, ptr %33
  %139 = load ptr addrspace(1), ptr %33
  store ptr addrspace(1) %139, ptr %34
  %140 = load ptr addrspace(1), ptr %11
  %141 = load ptr addrspace(1), ptr addrspace(1) %140
  store ptr addrspace(1) %141, ptr %35
  %142 = load ptr addrspace(1), ptr %34
  %143 = load i64, ptr addrspace(1) %142
  store i64 %143, ptr %36
  %144 = load ptr addrspace(1), ptr %35
  store ptr addrspace(1) %144, ptr %5
  %145 = load ptr addrspace(1), ptr %34
  store ptr addrspace(1) %145, ptr %6
  %146 = load ptr addrspace(1), ptr %5
  %147 = load ptr addrspace(1), ptr %6
  %148 = load i64, ptr %ds
  %149 = load i64, ptr %alloc
  %150 = load ptr, ptr %36
  %151 = call oxcamlcc { { i64, i64 }, { i64 } } %150(i64 %148, i64 %149, ptr addrspace(1) %146, ptr addrspace(1) %147) "statepoint-id"="0"
  %152 = extractvalue { { i64, i64 }, { i64 } } %151, 0, 0
  %153 = extractvalue { { i64, i64 }, { i64 } } %151, 0, 1
  store i64 %152, ptr %ds
  store i64 %153, ptr %alloc
  %154 = extractvalue { { i64, i64 }, { i64 } } %151, 1, 0
  store i64 %154, ptr %4
  br label %L129
L129:
  %155 = load i64, ptr %4
  store i64 %155, ptr %37
  %156 = load i64, ptr %37
  store i64 %156, ptr %38
  %157 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %157, ptr %39
  %158 = load ptr addrspace(1), ptr %39
  %159 = getelementptr i8, ptr addrspace(1) %158, i64 56
  store ptr addrspace(1) %159, ptr %40
  %160 = load ptr addrspace(1), ptr %40
  %161 = load ptr addrspace(1), ptr addrspace(1) %160
  store ptr addrspace(1) %161, ptr %41
  %162 = load ptr addrspace(1), ptr %41
  store ptr addrspace(1) %162, ptr %42
  %163 = load ptr addrspace(1), ptr %14
  %164 = getelementptr i8, ptr addrspace(1) %163, i64 8
  store ptr addrspace(1) %164, ptr %43
  %165 = load ptr addrspace(1), ptr %43
  %166 = load ptr addrspace(1), ptr addrspace(1) %165
  store ptr addrspace(1) %166, ptr %44
  %167 = load ptr addrspace(1), ptr %42
  %168 = load i64, ptr addrspace(1) %167
  store i64 %168, ptr %45
  %169 = load ptr addrspace(1), ptr %44
  store ptr addrspace(1) %169, ptr %5
  %170 = load ptr addrspace(1), ptr %42
  store ptr addrspace(1) %170, ptr %6
  %171 = load ptr addrspace(1), ptr %5
  %172 = load ptr addrspace(1), ptr %6
  %173 = load i64, ptr %ds
  %174 = load i64, ptr %alloc
  %175 = load ptr, ptr %45
  %176 = call oxcamlcc { { i64, i64 }, { i64 } } %175(i64 %173, i64 %174, ptr addrspace(1) %171, ptr addrspace(1) %172) "statepoint-id"="0"
  %177 = extractvalue { { i64, i64 }, { i64 } } %176, 0, 0
  %178 = extractvalue { { i64, i64 }, { i64 } } %176, 0, 1
  store i64 %177, ptr %ds
  store i64 %178, ptr %alloc
  %179 = extractvalue { { i64, i64 }, { i64 } } %176, 1, 0
  store i64 %179, ptr %4
  br label %L134
L134:
  %180 = load i64, ptr %4
  store i64 %180, ptr %46
  %181 = load i64, ptr %46
  store i64 %181, ptr %4
  %182 = load i64, ptr %4
  %183 = load i64, ptr %ds
  %184 = load i64, ptr %alloc
  %185 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %183, 0, 0
  %186 = insertvalue { { i64, i64 }, { i64 } } %185, i64 %184, 0, 1
  %187 = insertvalue { { i64, i64 }, { i64 } } %186, i64 %182, 1, 0
  ret { { i64, i64 }, { i64 } } %187
L138:
  %188 = load ptr addrspace(1), ptr %14
  %189 = ptrtoint ptr addrspace(1) %188 to i64
  store i64 %189, ptr %4
  %190 = load i64, ptr %4
  %191 = load i64, ptr %ds
  %192 = load i64, ptr %alloc
  %193 = call oxcamlcc { { i64, i64 }, {  } } @caml_reraise_exn(i64 %191, i64 %192, i64 %190) "statepoint-id"="0"
  %194 = extractvalue { { i64, i64 }, {  } } %193, 0, 0
  %195 = extractvalue { { i64, i64 }, {  } } %193, 0, 1
  store i64 %194, ptr %ds
  store i64 %195, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) noinline gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca ptr addrspace(1)
  %16 = alloca i64
  %17 = alloca ptr addrspace(1)
  %18 = alloca ptr addrspace(1)
  %19 = alloca ptr addrspace(1)
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca ptr addrspace(1)
  %28 = alloca ptr addrspace(1)
  %29 = alloca i64
  br label %L1
L1:
  br label %L146
L146:
  %30 = load i64, ptr %4
  store i64 %30, ptr %6
  %31 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %31, ptr %7
  %32 = load ptr addrspace(1), ptr %7
  %33 = getelementptr i8, ptr addrspace(1) %32, i64 16
  store ptr addrspace(1) %33, ptr %8
  %34 = load ptr addrspace(1), ptr %8
  %35 = load ptr addrspace(1), ptr addrspace(1) %34
  store ptr addrspace(1) %35, ptr %9
  store i64 7, ptr %10
  %36 = load ptr addrspace(1), ptr %9
  %37 = load i64, ptr %10
  store i64 %37, ptr addrspace(1) %36
  store i64 1, ptr %11
  %38 = load i64, ptr %11
  store i64 %38, ptr %12
  %39 = load i64, ptr %ds
  %40 = add i64 %39, 64
  %41 = inttoptr i64 %40 to ptr
  %42 = load i64, ptr %41
  store i64 %42, ptr %13
  %43 = load i64, ptr %13
  store i64 %43, ptr %14
  %44 = load i64, ptr %ds
  %45 = load i64, ptr %alloc
  %46 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %44, i64 %45) returns_twice "gc-leaf-function"="true"
  %47 = extractvalue { { i64, i64 }, { i64 } } %46, 0, 0
  %48 = extractvalue { { i64, i64 }, { i64 } } %46, 0, 1
  store i64 %47, ptr %ds
  store i64 %48, ptr %alloc
  %49 = extractvalue { { i64, i64 }, { i64 } } %46, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %49) "gc-leaf-function"="true"
  br label %L176
L176:
  %50 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %L177, label %L152
L177:
  store ptr blockaddress(@camlExn_part2__raise_exn1_catch_exn2_from_llvm_1_10_code, %L176), ptr @camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP.recover_rbp_var.L176
  %52 = call  ptr @llvm.stacksave()
  %53 = alloca { i64, i64, i64, i64 }
  %54 = ptrtoint ptr %53 to i64
  %55 = add i64 %54, 16
  %56 = inttoptr i64 %55 to ptr
  %57 = ptrtoint ptr %53 to i64
  %58 = add i64 %57, 8
  %59 = inttoptr i64 %58 to ptr
  %60 = load i64, ptr %ds
  %61 = add i64 %60, 48
  %62 = inttoptr i64 %61 to ptr
  %63 = load i64, ptr %62
  store ptr %53, ptr %62
  store ptr @camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP.recover_rbp_asm.L176, ptr %59
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %56) "gc-leaf-function"="true"
  store i64 %63, ptr %53
  %64 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %64, ptr %16
  %65 = load ptr addrspace(1), ptr %16
  %66 = getelementptr i8, ptr addrspace(1) %65, i64 32
  store ptr addrspace(1) %66, ptr %17
  %67 = load ptr addrspace(1), ptr %17
  %68 = load ptr addrspace(1), ptr addrspace(1) %67
  store ptr addrspace(1) %68, ptr %18
  %69 = load ptr addrspace(1), ptr %18
  store ptr addrspace(1) %69, ptr %19
  store i64 61, ptr %20
  %70 = load ptr addrspace(1), ptr %19
  %71 = load i64, ptr addrspace(1) %70
  store i64 %71, ptr %21
  %72 = load i64, ptr %20
  store i64 %72, ptr %4
  %73 = load ptr addrspace(1), ptr %19
  store ptr addrspace(1) %73, ptr %5
  %74 = load i64, ptr %4
  %75 = load ptr addrspace(1), ptr %5
  %76 = load i64, ptr %ds
  %77 = load i64, ptr %alloc
  %78 = load ptr, ptr %21
  %79 = call oxcamlcc { { i64, i64 }, { i64 } } %78(i64 %76, i64 %77, i64 %74, ptr addrspace(1) %75) "statepoint-id"="32"
  %80 = extractvalue { { i64, i64 }, { i64 } } %79, 0, 0
  %81 = extractvalue { { i64, i64 }, { i64 } } %79, 0, 1
  store i64 %80, ptr %ds
  store i64 %81, ptr %alloc
  %82 = extractvalue { { i64, i64 }, { i64 } } %79, 1, 0
  store i64 %82, ptr %4
  br label %L162
L162:
  %83 = load i64, ptr %4
  store i64 %83, ptr %22
  %84 = load i64, ptr %22
  store i64 %84, ptr %23
  %85 = load i64, ptr %ds
  %86 = add i64 %85, 48
  %87 = inttoptr i64 %86 to ptr
  %88 = load i64, ptr %53
  store i64 %88, ptr %87
  call  void @llvm.stackrestore(ptr %52)
  %89 = load i64, ptr %23
  store i64 %89, ptr %4
  %90 = load i64, ptr %4
  %91 = load i64, ptr %ds
  %92 = load i64, ptr %alloc
  %93 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %91, 0, 0
  %94 = insertvalue { { i64, i64 }, { i64 } } %93, i64 %92, 0, 1
  %95 = insertvalue { { i64, i64 }, { i64 } } %94, i64 %90, 1, 0
  ret { { i64, i64 }, { i64 } } %95
L152:
  %96 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %96, ptr %alloc
  store i64 %50, ptr %4
  %97 = load i64, ptr %4
  %98 = inttoptr i64 %97 to ptr addrspace(1)
  store ptr addrspace(1) %98, ptr %15
  %99 = load i64, ptr %ds
  %100 = add i64 %99, 64
  %101 = inttoptr i64 %100 to ptr
  %102 = load i64, ptr %14
  store i64 %102, ptr %101
  store i64 1, ptr %24
  %103 = load i64, ptr %24
  store i64 %103, ptr %25
  %104 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %104, ptr %26
  %105 = load ptr addrspace(1), ptr %26
  %106 = getelementptr i8, ptr addrspace(1) %105, i64 8
  store ptr addrspace(1) %106, ptr %27
  %107 = load ptr addrspace(1), ptr %27
  %108 = load ptr addrspace(1), ptr addrspace(1) %107
  store ptr addrspace(1) %108, ptr %28
  %109 = load i64, ptr %15
  %110 = load i64, ptr %28
  %111 = icmp slt i64 %109, %110
  br i1 %111, label %L172, label %L178
L178:
  %112 = load i64, ptr %15
  %113 = load i64, ptr %28
  %114 = icmp sgt i64 %112, %113
  br i1 %114, label %L172, label %L170
L170:
  store i64 1, ptr %29
  %115 = load i64, ptr %29
  store i64 %115, ptr %4
  %116 = load i64, ptr %4
  %117 = load i64, ptr %ds
  %118 = load i64, ptr %alloc
  %119 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %117, 0, 0
  %120 = insertvalue { { i64, i64 }, { i64 } } %119, i64 %118, 0, 1
  %121 = insertvalue { { i64, i64 }, { i64 } } %120, i64 %116, 1, 0
  ret { { i64, i64 }, { i64 } } %121
L172:
  %122 = load ptr addrspace(1), ptr %15
  %123 = ptrtoint ptr addrspace(1) %122 to i64
  store i64 %123, ptr %4
  %124 = load i64, ptr %4
  %125 = load i64, ptr %ds
  %126 = load i64, ptr %alloc
  %127 = call oxcamlcc { { i64, i64 }, {  } } @caml_reraise_exn(i64 %125, i64 %126, i64 %124) "statepoint-id"="0"
  %128 = extractvalue { { i64, i64 }, {  } } %127, 0, 0
  %129 = extractvalue { { i64, i64 }, {  } } %127, 0, 1
  store i64 %128, ptr %ds
  store i64 %129, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP(i64 %0, i64 %1, i64 %2) noinline gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca ptr addrspace(1)
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca ptr addrspace(1)
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca ptr addrspace(1)
  %25 = alloca ptr addrspace(1)
  %26 = alloca i64
  %27 = alloca ptr addrspace(1)
  %28 = alloca ptr addrspace(1)
  %29 = alloca ptr addrspace(1)
  %30 = alloca ptr addrspace(1)
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca ptr addrspace(1)
  %36 = alloca ptr addrspace(1)
  %37 = alloca ptr addrspace(1)
  %38 = alloca ptr addrspace(1)
  %39 = alloca ptr addrspace(1)
  %40 = alloca i64
  %41 = alloca i64
  br label %L1
L1:
  br label %L180
L180:
  %42 = load i64, ptr %4
  store i64 %42, ptr %7
  %43 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %43, ptr %8
  %44 = load ptr addrspace(1), ptr %8
  %45 = getelementptr i8, ptr addrspace(1) %44, i64 16
  store ptr addrspace(1) %45, ptr %9
  %46 = load ptr addrspace(1), ptr %9
  %47 = load ptr addrspace(1), ptr addrspace(1) %46
  store ptr addrspace(1) %47, ptr %10
  %48 = load ptr addrspace(1), ptr %10
  store ptr addrspace(1) %48, ptr %11
  %49 = load i64, ptr %ds
  %50 = add i64 %49, 64
  %51 = inttoptr i64 %50 to ptr
  %52 = load i64, ptr %51
  store i64 %52, ptr %12
  %53 = load i64, ptr %12
  store i64 %53, ptr %13
  %54 = load i64, ptr %ds
  %55 = load i64, ptr %alloc
  %56 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %54, i64 %55) returns_twice "gc-leaf-function"="true"
  %57 = extractvalue { { i64, i64 }, { i64 } } %56, 0, 0
  %58 = extractvalue { { i64, i64 }, { i64 } } %56, 0, 1
  store i64 %57, ptr %ds
  store i64 %58, ptr %alloc
  %59 = extractvalue { { i64, i64 }, { i64 } } %56, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %59) "gc-leaf-function"="true"
  br label %L218
L218:
  %60 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %L219, label %L185
L219:
  store ptr blockaddress(@camlExn_part2__catch_exn1_nested_from_llvm_2_11_code, %L218), ptr @camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP.recover_rbp_var.L218
  %62 = call  ptr @llvm.stacksave()
  %63 = alloca { i64, i64, i64, i64 }
  %64 = ptrtoint ptr %63 to i64
  %65 = add i64 %64, 16
  %66 = inttoptr i64 %65 to ptr
  %67 = ptrtoint ptr %63 to i64
  %68 = add i64 %67, 8
  %69 = inttoptr i64 %68 to ptr
  %70 = load i64, ptr %ds
  %71 = add i64 %70, 48
  %72 = inttoptr i64 %71 to ptr
  %73 = load i64, ptr %72
  store ptr %63, ptr %72
  store ptr @camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP.recover_rbp_asm.L218, ptr %69
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %66) "gc-leaf-function"="true"
  store i64 %73, ptr %63
  store i64 9, ptr %15
  %74 = load ptr addrspace(1), ptr %11
  %75 = load i64, ptr %15
  store i64 %75, ptr addrspace(1) %74
  store i64 1, ptr %16
  %76 = load i64, ptr %16
  store i64 %76, ptr %17
  store i64 1, ptr %18
  %77 = load i64, ptr %18
  store i64 %77, ptr %4
  %78 = load i64, ptr %4
  %79 = load i64, ptr %ds
  %80 = load i64, ptr %alloc
  %81 = call oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP(i64 %79, i64 %80, i64 %78) "statepoint-id"="32"
  %82 = extractvalue { { i64, i64 }, { i64 } } %81, 0, 0
  %83 = extractvalue { { i64, i64 }, { i64 } } %81, 0, 1
  store i64 %82, ptr %ds
  store i64 %83, ptr %alloc
  %84 = extractvalue { { i64, i64 }, { i64 } } %81, 1, 0
  store i64 %84, ptr %4
  br label %L194
L194:
  %85 = load i64, ptr %4
  store i64 %85, ptr %19
  %86 = load i64, ptr %19
  store i64 %86, ptr %20
  %87 = load i64, ptr %ds
  %88 = add i64 %87, 48
  %89 = inttoptr i64 %88 to ptr
  %90 = load i64, ptr %63
  store i64 %90, ptr %89
  call  void @llvm.stackrestore(ptr %62)
  %91 = load i64, ptr %20
  store i64 %91, ptr %4
  %92 = load i64, ptr %4
  %93 = load i64, ptr %ds
  %94 = load i64, ptr %alloc
  %95 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %93, 0, 0
  %96 = insertvalue { { i64, i64 }, { i64 } } %95, i64 %94, 0, 1
  %97 = insertvalue { { i64, i64 }, { i64 } } %96, i64 %92, 1, 0
  ret { { i64, i64 }, { i64 } } %97
L185:
  %98 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %98, ptr %alloc
  store i64 %60, ptr %4
  %99 = load i64, ptr %4
  %100 = inttoptr i64 %99 to ptr addrspace(1)
  store ptr addrspace(1) %100, ptr %14
  %101 = load i64, ptr %ds
  %102 = add i64 %101, 64
  %103 = inttoptr i64 %102 to ptr
  %104 = load i64, ptr %13
  store i64 %104, ptr %103
  store i64 1, ptr %21
  %105 = load i64, ptr %21
  store i64 %105, ptr %22
  %106 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %106, ptr %23
  %107 = load i64, ptr %23
  %108 = inttoptr i64 %107 to ptr
  %109 = load ptr addrspace(1), ptr %108
  store ptr addrspace(1) %109, ptr %24
  %110 = load ptr addrspace(1), ptr %14
  %111 = load ptr addrspace(1), ptr addrspace(1) %110
  store ptr addrspace(1) %111, ptr %25
  %112 = load i64, ptr %25
  %113 = load i64, ptr %24
  %114 = icmp slt i64 %112, %113
  br i1 %114, label %L214, label %L220
L220:
  %115 = load i64, ptr %25
  %116 = load i64, ptr %24
  %117 = icmp sgt i64 %115, %116
  br i1 %117, label %L214, label %L201
L201:
  %118 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %118, ptr %26
  %119 = load ptr addrspace(1), ptr %26
  %120 = getelementptr i8, ptr addrspace(1) %119, i64 56
  store ptr addrspace(1) %120, ptr %27
  %121 = load ptr addrspace(1), ptr %27
  %122 = load ptr addrspace(1), ptr addrspace(1) %121
  store ptr addrspace(1) %122, ptr %28
  %123 = load ptr addrspace(1), ptr %28
  store ptr addrspace(1) %123, ptr %29
  %124 = load ptr addrspace(1), ptr %11
  %125 = load ptr addrspace(1), ptr addrspace(1) %124
  store ptr addrspace(1) %125, ptr %30
  %126 = load ptr addrspace(1), ptr %29
  %127 = load i64, ptr addrspace(1) %126
  store i64 %127, ptr %31
  %128 = load ptr addrspace(1), ptr %30
  store ptr addrspace(1) %128, ptr %5
  %129 = load ptr addrspace(1), ptr %29
  store ptr addrspace(1) %129, ptr %6
  %130 = load ptr addrspace(1), ptr %5
  %131 = load ptr addrspace(1), ptr %6
  %132 = load i64, ptr %ds
  %133 = load i64, ptr %alloc
  %134 = load ptr, ptr %31
  %135 = call oxcamlcc { { i64, i64 }, { i64 } } %134(i64 %132, i64 %133, ptr addrspace(1) %130, ptr addrspace(1) %131) "statepoint-id"="0"
  %136 = extractvalue { { i64, i64 }, { i64 } } %135, 0, 0
  %137 = extractvalue { { i64, i64 }, { i64 } } %135, 0, 1
  store i64 %136, ptr %ds
  store i64 %137, ptr %alloc
  %138 = extractvalue { { i64, i64 }, { i64 } } %135, 1, 0
  store i64 %138, ptr %4
  br label %L205
L205:
  %139 = load i64, ptr %4
  store i64 %139, ptr %32
  %140 = load i64, ptr %32
  store i64 %140, ptr %33
  %141 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %141, ptr %34
  %142 = load ptr addrspace(1), ptr %34
  %143 = getelementptr i8, ptr addrspace(1) %142, i64 56
  store ptr addrspace(1) %143, ptr %35
  %144 = load ptr addrspace(1), ptr %35
  %145 = load ptr addrspace(1), ptr addrspace(1) %144
  store ptr addrspace(1) %145, ptr %36
  %146 = load ptr addrspace(1), ptr %36
  store ptr addrspace(1) %146, ptr %37
  %147 = load ptr addrspace(1), ptr %14
  %148 = getelementptr i8, ptr addrspace(1) %147, i64 8
  store ptr addrspace(1) %148, ptr %38
  %149 = load ptr addrspace(1), ptr %38
  %150 = load ptr addrspace(1), ptr addrspace(1) %149
  store ptr addrspace(1) %150, ptr %39
  %151 = load ptr addrspace(1), ptr %37
  %152 = load i64, ptr addrspace(1) %151
  store i64 %152, ptr %40
  %153 = load ptr addrspace(1), ptr %39
  store ptr addrspace(1) %153, ptr %5
  %154 = load ptr addrspace(1), ptr %37
  store ptr addrspace(1) %154, ptr %6
  %155 = load ptr addrspace(1), ptr %5
  %156 = load ptr addrspace(1), ptr %6
  %157 = load i64, ptr %ds
  %158 = load i64, ptr %alloc
  %159 = load ptr, ptr %40
  %160 = call oxcamlcc { { i64, i64 }, { i64 } } %159(i64 %157, i64 %158, ptr addrspace(1) %155, ptr addrspace(1) %156) "statepoint-id"="0"
  %161 = extractvalue { { i64, i64 }, { i64 } } %160, 0, 0
  %162 = extractvalue { { i64, i64 }, { i64 } } %160, 0, 1
  store i64 %161, ptr %ds
  store i64 %162, ptr %alloc
  %163 = extractvalue { { i64, i64 }, { i64 } } %160, 1, 0
  store i64 %163, ptr %4
  br label %L210
L210:
  %164 = load i64, ptr %4
  store i64 %164, ptr %41
  %165 = load i64, ptr %41
  store i64 %165, ptr %4
  %166 = load i64, ptr %4
  %167 = load i64, ptr %ds
  %168 = load i64, ptr %alloc
  %169 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %167, 0, 0
  %170 = insertvalue { { i64, i64 }, { i64 } } %169, i64 %168, 0, 1
  %171 = insertvalue { { i64, i64 }, { i64 } } %170, i64 %166, 1, 0
  ret { { i64, i64 }, { i64 } } %171
L214:
  %172 = load ptr addrspace(1), ptr %14
  %173 = ptrtoint ptr addrspace(1) %172 to i64
  store i64 %173, ptr %4
  %174 = load i64, ptr %4
  %175 = load i64, ptr %ds
  %176 = load i64, ptr %alloc
  %177 = call oxcamlcc { { i64, i64 }, {  } } @caml_reraise_exn(i64 %175, i64 %176, i64 %174) "statepoint-id"="0"
  %178 = extractvalue { { i64, i64 }, {  } } %177, 0, 0
  %179 = extractvalue { { i64, i64 }, {  } } %177, 0, 1
  store i64 %178, ptr %ds
  store i64 %179, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__raise_1_HIDE_STAMP(i64 %0, i64 %1, i64 %2, i64 %3) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca ptr addrspace(1)
  %12 = alloca ptr addrspace(1)
  %13 = alloca ptr addrspace(1)
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L222
L222:
  %16 = load i64, ptr %5
  store i64 %16, ptr %8
  %17 = load i64, ptr %6
  store i64 %17, ptr %9
  %18 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %18, ptr %10
  %19 = load ptr addrspace(1), ptr %10
  %20 = getelementptr i8, ptr addrspace(1) %19, i64 32
  store ptr addrspace(1) %20, ptr %11
  %21 = load ptr addrspace(1), ptr %11
  %22 = load ptr addrspace(1), ptr addrspace(1) %21
  store ptr addrspace(1) %22, ptr %12
  %23 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %23, ptr %13
  %24 = load ptr addrspace(1), ptr %13
  %25 = load i64, ptr addrspace(1) %24
  store i64 %25, ptr %14
  %26 = load i64, ptr %8
  store i64 %26, ptr %5
  %27 = load ptr addrspace(1), ptr %13
  store ptr addrspace(1) %27, ptr %7
  %28 = load i64, ptr %5
  %29 = load ptr addrspace(1), ptr %7
  %30 = load i64, ptr %ds
  %31 = load i64, ptr %alloc
  %32 = load ptr, ptr %14
  %33 = call oxcamlcc { { i64, i64 }, { i64 } } %32(i64 %30, i64 %31, i64 %28, ptr addrspace(1) %29) "statepoint-id"="0"
  %34 = extractvalue { { i64, i64 }, { i64 } } %33, 0, 0
  %35 = extractvalue { { i64, i64 }, { i64 } } %33, 0, 1
  store i64 %34, ptr %ds
  store i64 %35, ptr %alloc
  %36 = extractvalue { { i64, i64 }, { i64 } } %33, 1, 0
  store i64 %36, ptr %5
  br label %L226
L226:
  %37 = load i64, ptr %5
  store i64 %37, ptr %15
  %38 = load i64, ptr %15
  store i64 %38, ptr %5
  %39 = load i64, ptr %5
  %40 = load i64, ptr %ds
  %41 = load i64, ptr %alloc
  %42 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %40, 0, 0
  %43 = insertvalue { { i64, i64 }, { i64 } } %42, i64 %41, 0, 1
  %44 = insertvalue { { i64, i64 }, { i64 } } %43, i64 %39, 1, 0
  ret { { i64, i64 }, { i64 } } %44
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__raise_2_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L229
L229:
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %10, ptr %6
  %11 = load ptr addrspace(1), ptr %6
  %12 = getelementptr i8, ptr addrspace(1) %11, i64 8
  store ptr addrspace(1) %12, ptr %7
  %13 = load ptr addrspace(1), ptr %7
  %14 = load ptr addrspace(1), ptr addrspace(1) %13
  store ptr addrspace(1) %14, ptr %8
  %15 = load ptr addrspace(1), ptr %8
  %16 = ptrtoint ptr addrspace(1) %15 to i64
  store i64 %16, ptr %4
  %17 = load i64, ptr %4
  %18 = load i64, ptr %ds
  %19 = load i64, ptr %alloc
  %20 = call oxcamlcc { { i64, i64 }, {  } } @caml_reraise_exn(i64 %18, i64 %19, i64 %17) "statepoint-id"="0"
  %21 = extractvalue { { i64, i64 }, {  } } %20, 0, 0
  %22 = extractvalue { { i64, i64 }, {  } } %20, 0, 1
  store i64 %21, ptr %ds
  store i64 %22, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__raise_3_HIDE_STAMP(i64 %0, i64 %1, i64 %2) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  br label %L1
L1:
  br label %L234
L234:
  %7 = load i64, ptr %4
  store i64 %7, ptr %5
  %8 = ptrtoint ptr @camlExn_part2__Exn3229 to i64
  store i64 %8, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %4
  %10 = load i64, ptr %4
  %11 = load i64, ptr %ds
  %12 = load i64, ptr %alloc
  %13 = call oxcamlcc { { i64, i64 }, {  } } @caml_reraise_exn(i64 %11, i64 %12, i64 %10) "statepoint-id"="0"
  %14 = extractvalue { { i64, i64 }, {  } } %13, 0, 0
  %15 = extractvalue { { i64, i64 }, {  } } %13, 0, 1
  store i64 %14, ptr %ds
  store i64 %15, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__complicated_HIDE_STAMP(i64 %0, i64 %1, ptr addrspace(1) %2) noinline gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca ptr addrspace(1)
  store ptr addrspace(1) %2, ptr %4
  %5 = alloca i64
  %6 = alloca ptr addrspace(1)
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca ptr addrspace(1)
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca ptr addrspace(1)
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca ptr addrspace(1)
  %22 = alloca ptr addrspace(1)
  %23 = alloca ptr addrspace(1)
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca ptr addrspace(1)
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca ptr addrspace(1)
  %34 = alloca ptr addrspace(1)
  %35 = alloca ptr addrspace(1)
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca ptr addrspace(1)
  %43 = alloca i64
  %44 = alloca i64
  %45 = alloca ptr addrspace(1)
  %46 = alloca ptr addrspace(1)
  %47 = alloca i64
  %48 = alloca i64
  %49 = alloca i64
  %50 = alloca i64
  %51 = alloca i64
  %52 = alloca ptr addrspace(1)
  %53 = alloca ptr addrspace(1)
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca i64
  %57 = alloca i64
  %58 = alloca i64
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca ptr addrspace(1)
  %62 = alloca ptr addrspace(1)
  %63 = alloca ptr addrspace(1)
  %64 = alloca ptr addrspace(1)
  %65 = alloca i64
  %66 = alloca i64
  %67 = alloca i64
  %68 = alloca i64
  %69 = alloca i64
  %70 = alloca i64
  br label %L1
L1:
  br label %L237
L237:
  %71 = load ptr addrspace(1), ptr %4
  store ptr addrspace(1) %71, ptr %7
  %72 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %72, ptr %8
  %73 = load ptr addrspace(1), ptr %8
  %74 = getelementptr i8, ptr addrspace(1) %73, i64 48
  store ptr addrspace(1) %74, ptr %9
  %75 = load ptr addrspace(1), ptr %9
  %76 = load ptr addrspace(1), ptr addrspace(1) %75
  store ptr addrspace(1) %76, ptr %10
  %77 = load ptr addrspace(1), ptr %10
  store ptr addrspace(1) %77, ptr %11
  store i64 41, ptr %12
  %78 = load ptr addrspace(1), ptr %11
  %79 = load i64, ptr addrspace(1) %78
  store i64 %79, ptr %13
  %80 = load i64, ptr %12
  store i64 %80, ptr %5
  %81 = load ptr addrspace(1), ptr %11
  store ptr addrspace(1) %81, ptr %6
  %82 = load i64, ptr %5
  %83 = load ptr addrspace(1), ptr %6
  %84 = load i64, ptr %ds
  %85 = load i64, ptr %alloc
  %86 = load ptr, ptr %13
  %87 = call oxcamlcc { { i64, i64 }, { i64 } } %86(i64 %84, i64 %85, i64 %82, ptr addrspace(1) %83) "statepoint-id"="0"
  %88 = extractvalue { { i64, i64 }, { i64 } } %87, 0, 0
  %89 = extractvalue { { i64, i64 }, { i64 } } %87, 0, 1
  store i64 %88, ptr %ds
  store i64 %89, ptr %alloc
  %90 = extractvalue { { i64, i64 }, { i64 } } %87, 1, 0
  store i64 %90, ptr %5
  br label %L241
L241:
  %91 = load i64, ptr %5
  store i64 %91, ptr %14
  %92 = load i64, ptr %14
  store i64 %92, ptr %15
  %93 = load i64, ptr %ds
  %94 = add i64 %93, 64
  %95 = inttoptr i64 %94 to ptr
  %96 = load i64, ptr %95
  store i64 %96, ptr %16
  %97 = load i64, ptr %16
  store i64 %97, ptr %17
  %98 = load i64, ptr %ds
  %99 = load i64, ptr %alloc
  %100 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %98, i64 %99) returns_twice "gc-leaf-function"="true"
  %101 = extractvalue { { i64, i64 }, { i64 } } %100, 0, 0
  %102 = extractvalue { { i64, i64 }, { i64 } } %100, 0, 1
  store i64 %101, ptr %ds
  store i64 %102, ptr %alloc
  %103 = extractvalue { { i64, i64 }, { i64 } } %100, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %103) "gc-leaf-function"="true"
  br label %L332
L332:
  %104 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %L333, label %L244
L333:
  store ptr blockaddress(@camlExn_part2__complicated_6_15_code, %L332), ptr @camlExn_part2__complicated_HIDE_STAMP.recover_rbp_var.L332
  %106 = call  ptr @llvm.stacksave()
  %107 = alloca { i64, i64, i64, i64 }
  %108 = ptrtoint ptr %107 to i64
  %109 = add i64 %108, 16
  %110 = inttoptr i64 %109 to ptr
  %111 = ptrtoint ptr %107 to i64
  %112 = add i64 %111, 8
  %113 = inttoptr i64 %112 to ptr
  %114 = load i64, ptr %ds
  %115 = add i64 %114, 48
  %116 = inttoptr i64 %115 to ptr
  %117 = load i64, ptr %116
  store ptr %107, ptr %116
  store ptr @camlExn_part2__complicated_HIDE_STAMP.recover_rbp_asm.L332, ptr %113
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %110) "gc-leaf-function"="true"
  store i64 %117, ptr %107
  %118 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %118, ptr %20
  %119 = load ptr addrspace(1), ptr %20
  %120 = getelementptr i8, ptr addrspace(1) %119, i64 48
  store ptr addrspace(1) %120, ptr %21
  %121 = load ptr addrspace(1), ptr %21
  %122 = load ptr addrspace(1), ptr addrspace(1) %121
  store ptr addrspace(1) %122, ptr %22
  %123 = load ptr addrspace(1), ptr %22
  store ptr addrspace(1) %123, ptr %23
  store i64 61, ptr %24
  %124 = load ptr addrspace(1), ptr %23
  %125 = load i64, ptr addrspace(1) %124
  store i64 %125, ptr %25
  %126 = load i64, ptr %24
  store i64 %126, ptr %5
  %127 = load ptr addrspace(1), ptr %23
  store ptr addrspace(1) %127, ptr %6
  %128 = load i64, ptr %5
  %129 = load ptr addrspace(1), ptr %6
  %130 = load i64, ptr %ds
  %131 = load i64, ptr %alloc
  %132 = load ptr, ptr %25
  %133 = call oxcamlcc { { i64, i64 }, { i64 } } %132(i64 %130, i64 %131, i64 %128, ptr addrspace(1) %129) "statepoint-id"="32"
  %134 = extractvalue { { i64, i64 }, { i64 } } %133, 0, 0
  %135 = extractvalue { { i64, i64 }, { i64 } } %133, 0, 1
  store i64 %134, ptr %ds
  store i64 %135, ptr %alloc
  %136 = extractvalue { { i64, i64 }, { i64 } } %133, 1, 0
  store i64 %136, ptr %5
  br label %L257
L257:
  %137 = load i64, ptr %5
  store i64 %137, ptr %26
  %138 = load i64, ptr %26
  store i64 %138, ptr %27
  %139 = load i64, ptr %ds
  %140 = add i64 %139, 64
  %141 = inttoptr i64 %140 to ptr
  %142 = load i64, ptr %141
  store i64 %142, ptr %28
  %143 = load i64, ptr %28
  store i64 %143, ptr %29
  %144 = load i64, ptr %ds
  %145 = load i64, ptr %alloc
  %146 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %144, i64 %145) returns_twice "gc-leaf-function"="true"
  %147 = extractvalue { { i64, i64 }, { i64 } } %146, 0, 0
  %148 = extractvalue { { i64, i64 }, { i64 } } %146, 0, 1
  store i64 %147, ptr %ds
  store i64 %148, ptr %alloc
  %149 = extractvalue { { i64, i64 }, { i64 } } %146, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %149) "gc-leaf-function"="true"
  br label %L334
L334:
  %150 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %L335, label %L260
L335:
  store ptr blockaddress(@camlExn_part2__complicated_6_15_code, %L334), ptr @camlExn_part2__complicated_HIDE_STAMP.recover_rbp_var.L334
  %152 = call  ptr @llvm.stacksave()
  %153 = alloca { i64, i64, i64, i64 }
  %154 = ptrtoint ptr %153 to i64
  %155 = add i64 %154, 16
  %156 = inttoptr i64 %155 to ptr
  %157 = ptrtoint ptr %153 to i64
  %158 = add i64 %157, 8
  %159 = inttoptr i64 %158 to ptr
  %160 = load i64, ptr %ds
  %161 = add i64 %160, 48
  %162 = inttoptr i64 %161 to ptr
  %163 = load i64, ptr %162
  store ptr %153, ptr %162
  store ptr @camlExn_part2__complicated_HIDE_STAMP.recover_rbp_asm.L334, ptr %159
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %156) "gc-leaf-function"="true"
  store i64 %163, ptr %153
  %164 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %164, ptr %32
  %165 = load ptr addrspace(1), ptr %32
  %166 = getelementptr i8, ptr addrspace(1) %165, i64 48
  store ptr addrspace(1) %166, ptr %33
  %167 = load ptr addrspace(1), ptr %33
  %168 = load ptr addrspace(1), ptr addrspace(1) %167
  store ptr addrspace(1) %168, ptr %34
  %169 = load ptr addrspace(1), ptr %34
  store ptr addrspace(1) %169, ptr %35
  store i64 81, ptr %36
  %170 = load ptr addrspace(1), ptr %35
  %171 = load i64, ptr addrspace(1) %170
  store i64 %171, ptr %37
  %172 = load i64, ptr %36
  store i64 %172, ptr %5
  %173 = load ptr addrspace(1), ptr %35
  store ptr addrspace(1) %173, ptr %6
  %174 = load i64, ptr %5
  %175 = load ptr addrspace(1), ptr %6
  %176 = load i64, ptr %ds
  %177 = load i64, ptr %alloc
  %178 = load ptr, ptr %37
  %179 = call oxcamlcc { { i64, i64 }, { i64 } } %178(i64 %176, i64 %177, i64 %174, ptr addrspace(1) %175) "statepoint-id"="64"
  %180 = extractvalue { { i64, i64 }, { i64 } } %179, 0, 0
  %181 = extractvalue { { i64, i64 }, { i64 } } %179, 0, 1
  store i64 %180, ptr %ds
  store i64 %181, ptr %alloc
  %182 = extractvalue { { i64, i64 }, { i64 } } %179, 1, 0
  store i64 %182, ptr %5
  br label %L273
L273:
  %183 = load i64, ptr %5
  store i64 %183, ptr %38
  %184 = load i64, ptr %38
  store i64 %184, ptr %39
  %185 = load i64, ptr %ds
  %186 = add i64 %185, 64
  %187 = inttoptr i64 %186 to ptr
  %188 = load i64, ptr %187
  store i64 %188, ptr %40
  %189 = load i64, ptr %40
  store i64 %189, ptr %41
  %190 = load i64, ptr %ds
  %191 = load i64, ptr %alloc
  %192 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %190, i64 %191) returns_twice "gc-leaf-function"="true"
  %193 = extractvalue { { i64, i64 }, { i64 } } %192, 0, 0
  %194 = extractvalue { { i64, i64 }, { i64 } } %192, 0, 1
  store i64 %193, ptr %ds
  store i64 %194, ptr %alloc
  %195 = extractvalue { { i64, i64 }, { i64 } } %192, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %195) "gc-leaf-function"="true"
  br label %L336
L336:
  %196 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %L337, label %L276
L337:
  store ptr blockaddress(@camlExn_part2__complicated_6_15_code, %L336), ptr @camlExn_part2__complicated_HIDE_STAMP.recover_rbp_var.L336
  %198 = call  ptr @llvm.stacksave()
  %199 = alloca { i64, i64, i64, i64 }
  %200 = ptrtoint ptr %199 to i64
  %201 = add i64 %200, 16
  %202 = inttoptr i64 %201 to ptr
  %203 = ptrtoint ptr %199 to i64
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %204 to ptr
  %206 = load i64, ptr %ds
  %207 = add i64 %206, 48
  %208 = inttoptr i64 %207 to ptr
  %209 = load i64, ptr %208
  store ptr %199, ptr %208
  store ptr @camlExn_part2__complicated_HIDE_STAMP.recover_rbp_asm.L336, ptr %205
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %202) "gc-leaf-function"="true"
  store i64 %209, ptr %199
  store i64 1, ptr %43
  %210 = load ptr addrspace(1), ptr %7
  %211 = load i64, ptr addrspace(1) %210
  store i64 %211, ptr %44
  %212 = load i64, ptr %43
  store i64 %212, ptr %5
  %213 = load ptr addrspace(1), ptr %7
  store ptr addrspace(1) %213, ptr %6
  %214 = load i64, ptr %5
  %215 = load ptr addrspace(1), ptr %6
  %216 = load i64, ptr %ds
  %217 = load i64, ptr %alloc
  %218 = load ptr, ptr %44
  %219 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } %218(i64 %216, i64 %217, i64 %214, ptr addrspace(1) %215) "statepoint-id"="96"
  %220 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %219, 0, 0
  %221 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %219, 0, 1
  store i64 %220, ptr %ds
  store i64 %221, ptr %alloc
  %222 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %219, 1, 0
  store ptr addrspace(1) %222, ptr %4
  br label %L284
L284:
  %223 = load ptr addrspace(1), ptr %4
  store ptr addrspace(1) %223, ptr %45
  %224 = load ptr addrspace(1), ptr %45
  store ptr addrspace(1) %224, ptr %46
  store i64 246247, ptr %47
  %225 = load i64, ptr %47
  store i64 %225, ptr %48
  %226 = load i64, ptr %48
  store i64 %226, ptr %31
  %227 = load i64, ptr %ds
  %228 = add i64 %227, 48
  %229 = inttoptr i64 %228 to ptr
  %230 = load i64, ptr %199
  store i64 %230, ptr %229
  call  void @llvm.stackrestore(ptr %198)
  br label %L301
L276:
  %231 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %231, ptr %alloc
  store i64 %196, ptr %5
  %232 = load i64, ptr %5
  %233 = inttoptr i64 %232 to ptr addrspace(1)
  store ptr addrspace(1) %233, ptr %42
  %234 = load i64, ptr %ds
  %235 = add i64 %234, 64
  %236 = inttoptr i64 %235 to ptr
  %237 = load i64, ptr %41
  store i64 %237, ptr %236
  store i64 1, ptr %49
  %238 = load i64, ptr %49
  store i64 %238, ptr %50
  %239 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %239, ptr %51
  %240 = load ptr addrspace(1), ptr %51
  %241 = getelementptr i8, ptr addrspace(1) %240, i64 8
  store ptr addrspace(1) %241, ptr %52
  %242 = load ptr addrspace(1), ptr %52
  %243 = load ptr addrspace(1), ptr addrspace(1) %242
  store ptr addrspace(1) %243, ptr %53
  %244 = load i64, ptr %42
  %245 = load i64, ptr %53
  %246 = icmp slt i64 %244, %245
  br i1 %246, label %L296, label %L338
L338:
  %247 = load i64, ptr %42
  %248 = load i64, ptr %53
  %249 = icmp sgt i64 %247, %248
  br i1 %249, label %L296, label %L292
L292:
  %250 = load i64, ptr %27
  %251 = load i64, ptr %39
  %252 = add i64 %250, %251
  store i64 %252, ptr %54
  %253 = load i64, ptr %54
  %254 = add i64 %253, -1
  store i64 %254, ptr %55
  %255 = load i64, ptr %55
  store i64 %255, ptr %56
  %256 = load i64, ptr %56
  store i64 %256, ptr %31
  br label %L301
L296:
  %257 = load ptr addrspace(1), ptr %42
  %258 = ptrtoint ptr addrspace(1) %257 to i64
  store i64 %258, ptr %5
  %259 = load i64, ptr %5
  %260 = load i64, ptr %ds
  %261 = load i64, ptr %alloc
  %262 = call oxcamlcc { { i64, i64 }, {  } } @caml_reraise_exn(i64 %260, i64 %261, i64 %259) "statepoint-id"="64"
  %263 = extractvalue { { i64, i64 }, {  } } %262, 0, 0
  %264 = extractvalue { { i64, i64 }, {  } } %262, 0, 1
  store i64 %263, ptr %ds
  store i64 %264, ptr %alloc
  unreachable
L301:
  %265 = load i64, ptr %31
  store i64 %265, ptr %57
  %266 = load i64, ptr %57
  store i64 %266, ptr %19
  %267 = load i64, ptr %ds
  %268 = add i64 %267, 48
  %269 = inttoptr i64 %268 to ptr
  %270 = load i64, ptr %153
  store i64 %270, ptr %269
  call  void @llvm.stackrestore(ptr %152)
  br label %L320
L260:
  %271 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %271, ptr %alloc
  store i64 %150, ptr %5
  %272 = load i64, ptr %5
  %273 = inttoptr i64 %272 to ptr addrspace(1)
  store ptr addrspace(1) %273, ptr %30
  %274 = load i64, ptr %ds
  %275 = add i64 %274, 64
  %276 = inttoptr i64 %275 to ptr
  %277 = load i64, ptr %29
  store i64 %277, ptr %276
  store i64 1, ptr %58
  %278 = load i64, ptr %58
  store i64 %278, ptr %59
  %279 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %279, ptr %60
  %280 = load i64, ptr %60
  %281 = inttoptr i64 %280 to ptr
  %282 = load ptr addrspace(1), ptr %281
  store ptr addrspace(1) %282, ptr %61
  %283 = load ptr addrspace(1), ptr %30
  %284 = load ptr addrspace(1), ptr addrspace(1) %283
  store ptr addrspace(1) %284, ptr %62
  %285 = load i64, ptr %62
  %286 = load i64, ptr %61
  %287 = icmp slt i64 %285, %286
  br i1 %287, label %L315, label %L339
L339:
  %288 = load i64, ptr %62
  %289 = load i64, ptr %61
  %290 = icmp sgt i64 %288, %289
  br i1 %290, label %L315, label %L309
L309:
  %291 = load ptr addrspace(1), ptr %30
  %292 = getelementptr i8, ptr addrspace(1) %291, i64 8
  store ptr addrspace(1) %292, ptr %63
  %293 = load ptr addrspace(1), ptr %63
  %294 = load ptr addrspace(1), ptr addrspace(1) %293
  store ptr addrspace(1) %294, ptr %64
  %295 = load i64, ptr %64
  %296 = load i64, ptr %27
  %297 = add i64 %295, %296
  store i64 %297, ptr %65
  %298 = load i64, ptr %65
  %299 = add i64 %298, -1
  store i64 %299, ptr %66
  %300 = load i64, ptr %66
  store i64 %300, ptr %67
  %301 = load i64, ptr %67
  store i64 %301, ptr %19
  br label %L320
L315:
  %302 = load ptr addrspace(1), ptr %30
  %303 = ptrtoint ptr addrspace(1) %302 to i64
  store i64 %303, ptr %5
  %304 = load i64, ptr %5
  %305 = load i64, ptr %ds
  %306 = load i64, ptr %alloc
  %307 = call oxcamlcc { { i64, i64 }, {  } } @caml_reraise_exn(i64 %305, i64 %306, i64 %304) "statepoint-id"="32"
  %308 = extractvalue { { i64, i64 }, {  } } %307, 0, 0
  %309 = extractvalue { { i64, i64 }, {  } } %307, 0, 1
  store i64 %308, ptr %ds
  store i64 %309, ptr %alloc
  unreachable
L320:
  %310 = load i64, ptr %ds
  %311 = add i64 %310, 48
  %312 = inttoptr i64 %311 to ptr
  %313 = load i64, ptr %107
  store i64 %313, ptr %312
  call  void @llvm.stackrestore(ptr %106)
  %314 = load i64, ptr %19
  store i64 %314, ptr %5
  %315 = load i64, ptr %5
  %316 = load i64, ptr %ds
  %317 = load i64, ptr %alloc
  %318 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %316, 0, 0
  %319 = insertvalue { { i64, i64 }, { i64 } } %318, i64 %317, 0, 1
  %320 = insertvalue { { i64, i64 }, { i64 } } %319, i64 %315, 1, 0
  ret { { i64, i64 }, { i64 } } %320
L244:
  %321 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %321, ptr %alloc
  store i64 %104, ptr %5
  %322 = load i64, ptr %5
  %323 = inttoptr i64 %322 to ptr addrspace(1)
  store ptr addrspace(1) %323, ptr %18
  %324 = load i64, ptr %ds
  %325 = add i64 %324, 64
  %326 = inttoptr i64 %325 to ptr
  %327 = load i64, ptr %17
  store i64 %327, ptr %326
  store i64 1, ptr %68
  %328 = load i64, ptr %68
  store i64 %328, ptr %69
  %329 = ptrtoint ptr @camlExn_part2__Exn3229 to i64
  store i64 %329, ptr %70
  %330 = load i64, ptr %18
  %331 = load i64, ptr %70
  %332 = icmp slt i64 %330, %331
  br i1 %332, label %L328, label %L340
L340:
  %333 = load i64, ptr %18
  %334 = load i64, ptr %70
  %335 = icmp sgt i64 %333, %334
  br i1 %335, label %L328, label %L326
L326:
  %336 = load i64, ptr %15
  store i64 %336, ptr %5
  %337 = load i64, ptr %5
  %338 = load i64, ptr %ds
  %339 = load i64, ptr %alloc
  %340 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %338, 0, 0
  %341 = insertvalue { { i64, i64 }, { i64 } } %340, i64 %339, 0, 1
  %342 = insertvalue { { i64, i64 }, { i64 } } %341, i64 %337, 1, 0
  ret { { i64, i64 }, { i64 } } %342
L328:
  %343 = load ptr addrspace(1), ptr %18
  %344 = ptrtoint ptr addrspace(1) %343 to i64
  store i64 %344, ptr %5
  %345 = load i64, ptr %5
  %346 = load i64, ptr %ds
  %347 = load i64, ptr %alloc
  %348 = call oxcamlcc { { i64, i64 }, {  } } @caml_reraise_exn(i64 %346, i64 %347, i64 %345) "statepoint-id"="0"
  %349 = extractvalue { { i64, i64 }, {  } } %348, 0, 0
  %350 = extractvalue { { i64, i64 }, {  } } %348, 0, 1
  store i64 %349, ptr %ds
  store i64 %350, ptr %alloc
  unreachable
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__raise_in_loop_HIDE_STAMP(i64 %0, i64 %1, i64 %2) noinline gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca ptr addrspace(1)
  %13 = alloca i64
  %14 = alloca ptr addrspace(1)
  %15 = alloca ptr addrspace(1)
  %16 = alloca ptr addrspace(1)
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca ptr addrspace(1)
  %24 = alloca ptr addrspace(1)
  %25 = alloca ptr addrspace(1)
  %26 = alloca ptr addrspace(1)
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  br label %L1
L1:
  br label %L342
L342:
  %31 = load i64, ptr %4
  store i64 %31, ptr %6
  store i64 1, ptr %8
  %32 = load i64, ptr %8
  store i64 %32, ptr %9
  %33 = load i64, ptr %9
  store i64 %33, ptr %7
  br label %L347
L347:
  %34 = load i64, ptr %ds
  %35 = add i64 %34, 64
  %36 = inttoptr i64 %35 to ptr
  %37 = load i64, ptr %36
  store i64 %37, ptr %10
  %38 = load i64, ptr %10
  store i64 %38, ptr %11
  %39 = load i64, ptr %ds
  %40 = load i64, ptr %alloc
  %41 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %39, i64 %40) returns_twice "gc-leaf-function"="true"
  %42 = extractvalue { { i64, i64 }, { i64 } } %41, 0, 0
  %43 = extractvalue { { i64, i64 }, { i64 } } %41, 0, 1
  store i64 %42, ptr %ds
  store i64 %43, ptr %alloc
  %44 = extractvalue { { i64, i64 }, { i64 } } %41, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %44) "gc-leaf-function"="true"
  br label %L394
L394:
  %45 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %L395, label %L353
L395:
  store ptr blockaddress(@camlExn_part2__raise_in_loop_7_16_code, %L394), ptr @camlExn_part2__raise_in_loop_HIDE_STAMP.recover_rbp_var.L394
  %47 = call  ptr @llvm.stacksave()
  %48 = alloca { i64, i64, i64, i64 }
  %49 = ptrtoint ptr %48 to i64
  %50 = add i64 %49, 16
  %51 = inttoptr i64 %50 to ptr
  %52 = ptrtoint ptr %48 to i64
  %53 = add i64 %52, 8
  %54 = inttoptr i64 %53 to ptr
  %55 = load i64, ptr %ds
  %56 = add i64 %55, 48
  %57 = inttoptr i64 %56 to ptr
  %58 = load i64, ptr %57
  store ptr %48, ptr %57
  store ptr @camlExn_part2__raise_in_loop_HIDE_STAMP.recover_rbp_asm.L394, ptr %54
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %51) "gc-leaf-function"="true"
  store i64 %58, ptr %48
  %59 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %59, ptr %13
  %60 = load ptr addrspace(1), ptr %13
  %61 = getelementptr i8, ptr addrspace(1) %60, i64 32
  store ptr addrspace(1) %61, ptr %14
  %62 = load ptr addrspace(1), ptr %14
  %63 = load ptr addrspace(1), ptr addrspace(1) %62
  store ptr addrspace(1) %63, ptr %15
  %64 = load ptr addrspace(1), ptr %15
  store ptr addrspace(1) %64, ptr %16
  %65 = load ptr addrspace(1), ptr %16
  %66 = load i64, ptr addrspace(1) %65
  store i64 %66, ptr %17
  %67 = load i64, ptr %7
  store i64 %67, ptr %4
  %68 = load ptr addrspace(1), ptr %16
  store ptr addrspace(1) %68, ptr %5
  %69 = load i64, ptr %4
  %70 = load ptr addrspace(1), ptr %5
  %71 = load i64, ptr %ds
  %72 = load i64, ptr %alloc
  %73 = load ptr, ptr %17
  %74 = call oxcamlcc { { i64, i64 }, { i64 } } %73(i64 %71, i64 %72, i64 %69, ptr addrspace(1) %70) "statepoint-id"="32"
  %75 = extractvalue { { i64, i64 }, { i64 } } %74, 0, 0
  %76 = extractvalue { { i64, i64 }, { i64 } } %74, 0, 1
  store i64 %75, ptr %ds
  store i64 %76, ptr %alloc
  %77 = extractvalue { { i64, i64 }, { i64 } } %74, 1, 0
  store i64 %77, ptr %4
  br label %L363
L363:
  %78 = load i64, ptr %4
  store i64 %78, ptr %18
  %79 = load i64, ptr %18
  store i64 %79, ptr %19
  %80 = load i64, ptr %ds
  %81 = add i64 %80, 48
  %82 = inttoptr i64 %81 to ptr
  %83 = load i64, ptr %48
  store i64 %83, ptr %82
  call  void @llvm.stackrestore(ptr %47)
  %84 = load i64, ptr %7
  %85 = icmp slt i64 %84, 2001
  br i1 %85, label %L386, label %L396
L396:
  %86 = load i64, ptr %7
  %87 = icmp sgt i64 %86, 2001
  br i1 %87, label %L386, label %L389
L353:
  %88 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %88, ptr %alloc
  store i64 %45, ptr %4
  %89 = load i64, ptr %4
  %90 = inttoptr i64 %89 to ptr addrspace(1)
  store ptr addrspace(1) %90, ptr %12
  %91 = load i64, ptr %ds
  %92 = add i64 %91, 64
  %93 = inttoptr i64 %92 to ptr
  %94 = load i64, ptr %11
  store i64 %94, ptr %93
  store i64 1, ptr %20
  %95 = load i64, ptr %20
  store i64 %95, ptr %21
  %96 = ptrtoint ptr @camlExn_part1 to i64
  store i64 %96, ptr %22
  %97 = load i64, ptr %22
  %98 = inttoptr i64 %97 to ptr
  %99 = load ptr addrspace(1), ptr %98
  store ptr addrspace(1) %99, ptr %23
  %100 = load ptr addrspace(1), ptr %12
  %101 = load ptr addrspace(1), ptr addrspace(1) %100
  store ptr addrspace(1) %101, ptr %24
  %102 = load i64, ptr %24
  %103 = load i64, ptr %23
  %104 = icmp slt i64 %102, %103
  br i1 %104, label %L380, label %L397
L397:
  %105 = load i64, ptr %24
  %106 = load i64, ptr %23
  %107 = icmp sgt i64 %105, %106
  br i1 %107, label %L380, label %L371
L371:
  %108 = load ptr addrspace(1), ptr %12
  %109 = getelementptr i8, ptr addrspace(1) %108, i64 8
  store ptr addrspace(1) %109, ptr %25
  %110 = load ptr addrspace(1), ptr %25
  %111 = load ptr addrspace(1), ptr addrspace(1) %110
  store ptr addrspace(1) %111, ptr %26
  %112 = load i64, ptr %26
  %113 = load i64, ptr %7
  %114 = icmp slt i64 %112, %113
  br i1 %114, label %L377, label %L398
L398:
  %115 = load i64, ptr %26
  %116 = load i64, ptr %7
  %117 = icmp sgt i64 %115, %116
  br i1 %117, label %L377, label %L384
L377:
  %118 = ptrtoint ptr @camlExn_part2__Pmakeblock195 to i64
  store i64 %118, ptr %27
  %119 = load i64, ptr %27
  store i64 %119, ptr %4
  %120 = load i64, ptr %ds
  %121 = add i64 %120, 240
  %122 = inttoptr i64 %121 to ptr
  store i64 0, ptr %122
  %123 = load i64, ptr %4
  %124 = load i64, ptr %ds
  %125 = load i64, ptr %alloc
  %126 = call oxcamlcc { { i64, i64 }, {  } } @caml_raise_exn(i64 %124, i64 %125, i64 %123) "statepoint-id"="0"
  %127 = extractvalue { { i64, i64 }, {  } } %126, 0, 0
  %128 = extractvalue { { i64, i64 }, {  } } %126, 0, 1
  store i64 %127, ptr %ds
  store i64 %128, ptr %alloc
  unreachable
L380:
  %129 = load ptr addrspace(1), ptr %12
  %130 = ptrtoint ptr addrspace(1) %129 to i64
  store i64 %130, ptr %4
  %131 = load i64, ptr %4
  %132 = load i64, ptr %ds
  %133 = load i64, ptr %alloc
  %134 = call oxcamlcc { { i64, i64 }, {  } } @caml_reraise_exn(i64 %132, i64 %133, i64 %131) "statepoint-id"="0"
  %135 = extractvalue { { i64, i64 }, {  } } %134, 0, 0
  %136 = extractvalue { { i64, i64 }, {  } } %134, 0, 1
  store i64 %135, ptr %ds
  store i64 %136, ptr %alloc
  unreachable
L384:
  %137 = load i64, ptr %7
  %138 = icmp slt i64 %137, 2001
  br i1 %138, label %L386, label %L399
L399:
  %139 = load i64, ptr %7
  %140 = icmp sgt i64 %139, 2001
  br i1 %140, label %L386, label %L389
L386:
  %141 = load i64, ptr %7
  %142 = add i64 %141, 2
  store i64 %142, ptr %28
  %143 = load i64, ptr %28
  store i64 %143, ptr %29
  %144 = load i64, ptr %29
  store i64 %144, ptr %7
  br label %L347
L389:
  store i64 1, ptr %30
  %145 = load i64, ptr %30
  store i64 %145, ptr %4
  %146 = load i64, ptr %4
  %147 = load i64, ptr %ds
  %148 = load i64, ptr %alloc
  %149 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %147, 0, 0
  %150 = insertvalue { { i64, i64 }, { i64 } } %149, i64 %148, 0, 1
  %151 = insertvalue { { i64, i64 }, { i64 } } %150, i64 %146, 1, 0
  ret { { i64, i64 }, { i64 } } %151
}

define  oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__catch_wildcard_HIDE_STAMP(i64 %0, i64 %1, i64 %2) noinline gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca ptr addrspace(1)
  %6 = alloca ptr addrspace(1)
  %7 = alloca ptr addrspace(1)
  %8 = alloca ptr addrspace(1)
  %9 = alloca ptr addrspace(1)
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca ptr addrspace(1)
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca ptr addrspace(1)
  %22 = alloca ptr addrspace(1)
  %23 = alloca ptr addrspace(1)
  %24 = alloca ptr addrspace(1)
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca ptr addrspace(1)
  %28 = alloca ptr addrspace(1)
  %29 = alloca ptr addrspace(1)
  %30 = alloca ptr addrspace(1)
  %31 = alloca i64
  %32 = alloca ptr addrspace(1)
  %33 = alloca ptr addrspace(1)
  %34 = alloca ptr addrspace(1)
  br label %L1
L1:
  br label %L401
L401:
  %35 = load i64, ptr %4
  store i64 %35, ptr %10
  %36 = load i64, ptr %ds
  %37 = add i64 %36, 64
  %38 = inttoptr i64 %37 to ptr
  %39 = load i64, ptr %38
  store i64 %39, ptr %11
  %40 = load i64, ptr %11
  store i64 %40, ptr %12
  %41 = load i64, ptr %ds
  %42 = load i64, ptr %alloc
  %43 = call oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %41, i64 %42) returns_twice "gc-leaf-function"="true"
  %44 = extractvalue { { i64, i64 }, { i64 } } %43, 0, 0
  %45 = extractvalue { { i64, i64 }, { i64 } } %43, 0, 1
  store i64 %44, ptr %ds
  store i64 %45, ptr %alloc
  %46 = extractvalue { { i64, i64 }, { i64 } } %43, 1, 0
  call void asm sideeffect "movq $0, %rax", "r"(i64 %46) "gc-leaf-function"="true"
  br label %L427
L427:
  %47 = call i64 asm sideeffect "mov %rax, $0", "=r"() "gc-leaf-function"="true"
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %L428, label %L404
L428:
  store ptr blockaddress(@camlExn_part2__catch_wildcard_8_17_code, %L427), ptr @camlExn_part2__catch_wildcard_HIDE_STAMP.recover_rbp_var.L427
  %49 = call  ptr @llvm.stacksave()
  %50 = alloca { i64, i64, i64, i64 }
  %51 = ptrtoint ptr %50 to i64
  %52 = add i64 %51, 16
  %53 = inttoptr i64 %52 to ptr
  %54 = ptrtoint ptr %50 to i64
  %55 = add i64 %54, 8
  %56 = inttoptr i64 %55 to ptr
  %57 = load i64, ptr %ds
  %58 = add i64 %57, 48
  %59 = inttoptr i64 %58 to ptr
  %60 = load i64, ptr %59
  store ptr %50, ptr %59
  store ptr @camlExn_part2__catch_wildcard_HIDE_STAMP.recover_rbp_asm.L427, ptr %56
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %53) "gc-leaf-function"="true"
  store i64 %60, ptr %50
  store i64 1, ptr %14
  %61 = load i64, ptr %14
  store i64 %61, ptr %4
  %62 = load i64, ptr %4
  %63 = load i64, ptr %ds
  %64 = load i64, ptr %alloc
  %65 = call oxcamlcc { { i64, i64 }, { i64 } } @camlExn_part2__raise_3_HIDE_STAMP(i64 %63, i64 %64, i64 %62) "statepoint-id"="32"
  %66 = extractvalue { { i64, i64 }, { i64 } } %65, 0, 0
  %67 = extractvalue { { i64, i64 }, { i64 } } %65, 0, 1
  store i64 %66, ptr %ds
  store i64 %67, ptr %alloc
  %68 = extractvalue { { i64, i64 }, { i64 } } %65, 1, 0
  store i64 %68, ptr %4
  br label %L412
L412:
  %69 = load i64, ptr %ds
  %70 = add i64 %69, 48
  %71 = inttoptr i64 %70 to ptr
  %72 = load i64, ptr %50
  store i64 %72, ptr %71
  call  void @llvm.stackrestore(ptr %49)
  %73 = load i64, ptr %4
  %74 = load i64, ptr %ds
  %75 = load i64, ptr %alloc
  %76 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %74, 0, 0
  %77 = insertvalue { { i64, i64 }, { i64 } } %76, i64 %75, 0, 1
  %78 = insertvalue { { i64, i64 }, { i64 } } %77, i64 %73, 1, 0
  ret { { i64, i64 }, { i64 } } %78
L404:
  %79 = call i64 asm sideeffect "movq %r15, $0", "=r"() "gc-leaf-function"="true"
  store i64 %79, ptr %alloc
  store i64 %47, ptr %4
  %80 = load i64, ptr %4
  %81 = inttoptr i64 %80 to ptr addrspace(1)
  store ptr addrspace(1) %81, ptr %13
  %82 = load i64, ptr %ds
  %83 = add i64 %82, 64
  %84 = inttoptr i64 %83 to ptr
  %85 = load i64, ptr %12
  store i64 %85, ptr %84
  store i64 1, ptr %15
  %86 = load i64, ptr %15
  store i64 %86, ptr %16
  store i64 13, ptr %17
  store i64 1, ptr %18
  %87 = ptrtoint ptr @camlExn_part2__immstring215 to i64
  store i64 %87, ptr %19
  %88 = ptrtoint ptr @camlStdlib__print_endline_138 to i64
  store i64 %88, ptr %20
  %89 = load ptr addrspace(1), ptr %20
  %90 = getelementptr i8, ptr addrspace(1) %89, i64 16
  store ptr addrspace(1) %90, ptr %21
  %91 = load ptr addrspace(1), ptr %21
  %92 = load ptr addrspace(1), ptr addrspace(1) %91
  store ptr addrspace(1) %92, ptr %22
  %93 = load ptr addrspace(1), ptr %22
  store ptr addrspace(1) %93, ptr %6
  %94 = load i64, ptr %19
  %95 = inttoptr i64 %94 to ptr addrspace(1)
  store ptr addrspace(1) %95, ptr %7
  %96 = load i64, ptr %18
  %97 = inttoptr i64 %96 to ptr addrspace(1)
  store ptr addrspace(1) %97, ptr %8
  %98 = load i64, ptr %17
  %99 = inttoptr i64 %98 to ptr addrspace(1)
  store ptr addrspace(1) %99, ptr %9
  %100 = load ptr addrspace(1), ptr %6
  %101 = load ptr addrspace(1), ptr %7
  %102 = load ptr addrspace(1), ptr %8
  %103 = load ptr addrspace(1), ptr %9
  %104 = load i64, ptr %ds
  %105 = load i64, ptr %alloc
  %106 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %104, i64 %105, ptr @caml_ml_output, ptr addrspace(1) %100, ptr addrspace(1) %101, ptr addrspace(1) %102, ptr addrspace(1) %103) "statepoint-id"="0"
  %107 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %106, 0, 0
  %108 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %106, 0, 1
  store i64 %107, ptr %ds
  store i64 %108, ptr %alloc
  %109 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %106, 1, 0
  store ptr addrspace(1) %109, ptr %5
  br label %L417
L417:
  %110 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %110, ptr %23
  %111 = load ptr addrspace(1), ptr %23
  store ptr addrspace(1) %111, ptr %24
  store i64 21, ptr %25
  %112 = ptrtoint ptr @camlStdlib__print_endline_138 to i64
  store i64 %112, ptr %26
  %113 = load ptr addrspace(1), ptr %26
  %114 = getelementptr i8, ptr addrspace(1) %113, i64 16
  store ptr addrspace(1) %114, ptr %27
  %115 = load ptr addrspace(1), ptr %27
  %116 = load ptr addrspace(1), ptr addrspace(1) %115
  store ptr addrspace(1) %116, ptr %28
  %117 = load ptr addrspace(1), ptr %28
  store ptr addrspace(1) %117, ptr %6
  %118 = load i64, ptr %25
  %119 = inttoptr i64 %118 to ptr addrspace(1)
  store ptr addrspace(1) %119, ptr %7
  %120 = load ptr addrspace(1), ptr %6
  %121 = load ptr addrspace(1), ptr %7
  %122 = load i64, ptr %ds
  %123 = load i64, ptr %alloc
  %124 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %122, i64 %123, ptr @caml_ml_output_char, ptr addrspace(1) %120, ptr addrspace(1) %121) "statepoint-id"="0"
  %125 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %124, 0, 0
  %126 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %124, 0, 1
  store i64 %125, ptr %ds
  store i64 %126, ptr %alloc
  %127 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %124, 1, 0
  store ptr addrspace(1) %127, ptr %5
  br label %L420
L420:
  %128 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %128, ptr %29
  %129 = load ptr addrspace(1), ptr %29
  store ptr addrspace(1) %129, ptr %30
  %130 = ptrtoint ptr @camlStdlib__print_endline_138 to i64
  store i64 %130, ptr %31
  %131 = load ptr addrspace(1), ptr %31
  %132 = getelementptr i8, ptr addrspace(1) %131, i64 16
  store ptr addrspace(1) %132, ptr %32
  %133 = load ptr addrspace(1), ptr %32
  %134 = load ptr addrspace(1), ptr addrspace(1) %133
  store ptr addrspace(1) %134, ptr %33
  %135 = load ptr addrspace(1), ptr %33
  store ptr addrspace(1) %135, ptr %6
  %136 = load ptr addrspace(1), ptr %6
  %137 = load i64, ptr %ds
  %138 = load i64, ptr %alloc
  %139 = call oxcaml_ccc { { i64, i64 }, { ptr addrspace(1) } } @caml_c_call(i64 %137, i64 %138, ptr @caml_ml_flush, ptr addrspace(1) %136) "statepoint-id"="0"
  %140 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %139, 0, 0
  %141 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %139, 0, 1
  store i64 %140, ptr %ds
  store i64 %141, ptr %alloc
  %142 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %139, 1, 0
  store ptr addrspace(1) %142, ptr %5
  br label %L423
L423:
  %143 = load ptr addrspace(1), ptr %5
  store ptr addrspace(1) %143, ptr %34
  %144 = load ptr addrspace(1), ptr %34
  store ptr addrspace(1) %144, ptr %5
  %145 = load i64, ptr %5
  %146 = load i64, ptr %ds
  %147 = load i64, ptr %alloc
  %148 = insertvalue { { i64, i64 }, { i64 } } poison, i64 %146, 0, 0
  %149 = insertvalue { { i64, i64 }, { i64 } } %148, i64 %147, 0, 1
  %150 = insertvalue { { i64, i64 }, { i64 } } %149, i64 %145, 1, 0
  ret { { i64, i64 }, { i64 } } %150
}

define  oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @camlExn_part2__entry(i64 %0, i64 %1) gc "oxcaml" {
  %ds = alloca i64
  store i64 %0, ptr %ds
  %alloc = alloca i64
  store i64 %1, ptr %alloc
  %3 = alloca ptr addrspace(1)
  %4 = alloca i64
  %5 = alloca ptr addrspace(1)
  %6 = alloca ptr addrspace(1)
  %7 = alloca ptr addrspace(1)
  %8 = alloca i64
  %9 = alloca ptr addrspace(1)
  %10 = alloca ptr addrspace(1)
  %11 = alloca i64
  %12 = alloca ptr addrspace(1)
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  br label %L1
L1:
  br label %L433
L433:
  store i64 1, ptr %8
  %17 = load i64, ptr %8
  %18 = inttoptr i64 %17 to ptr addrspace(1)
  store ptr addrspace(1) %18, ptr %5
  %19 = load ptr addrspace(1), ptr %5
  %20 = load i64, ptr %ds
  %21 = load i64, ptr %alloc
  %22 = call oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @c_call_wrapper.caml_fresh_oo_id(i64 %20, i64 %21, ptr addrspace(1) %19) "gc-leaf-function"="true"
  %23 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %22, 0, 0
  %24 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %22, 0, 1
  store i64 %23, ptr %ds
  store i64 %24, ptr %alloc
  %25 = extractvalue { { i64, i64 }, { ptr addrspace(1) } } %22, 1, 0
  store ptr addrspace(1) %25, ptr %3
  br label %L435
L435:
  %26 = load ptr addrspace(1), ptr %3
  store ptr addrspace(1) %26, ptr %9
  %27 = load ptr addrspace(1), ptr %9
  store ptr addrspace(1) %27, ptr %10
  %28 = ptrtoint ptr @camlExn_part2__Exn3229 to i64
  store i64 %28, ptr %11
  %29 = load ptr addrspace(1), ptr %11
  %30 = getelementptr i8, ptr addrspace(1) %29, i64 8
  store ptr addrspace(1) %30, ptr %12
  %31 = load ptr addrspace(1), ptr %12
  store ptr addrspace(1) %31, ptr %5
  %32 = load ptr addrspace(1), ptr %10
  store ptr addrspace(1) %32, ptr %6
  %33 = load ptr addrspace(1), ptr %5
  %34 = load ptr addrspace(1), ptr %6
  %35 = load i64, ptr %ds
  %36 = load i64, ptr %alloc
  %37 = call oxcamlcc { { i64, i64 }, {  } } @c_call_wrapper.caml_initialize(i64 %35, i64 %36, ptr addrspace(1) %33, ptr addrspace(1) %34) "gc-leaf-function"="true"
  %38 = extractvalue { { i64, i64 }, {  } } %37, 0, 0
  %39 = extractvalue { { i64, i64 }, {  } } %37, 0, 1
  store i64 %38, ptr %ds
  store i64 %39, ptr %alloc
  br label %L436
L436:
  store i64 1, ptr %13
  %40 = ptrtoint ptr @camlExn_part2 to i64
  store i64 %40, ptr %14
  %41 = load i64, ptr %14
  store i64 %41, ptr %15
  %42 = load i64, ptr %15
  %43 = inttoptr i64 %42 to ptr addrspace(1)
  store ptr addrspace(1) %43, ptr %7
  store i64 1, ptr %16
  %44 = load i64, ptr %16
  store i64 %44, ptr %4
  %45 = load ptr addrspace(1), ptr %4
  %46 = load i64, ptr %ds
  %47 = load i64, ptr %alloc
  %48 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, i64 %46, 0, 0
  %49 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %48, i64 %47, 0, 1
  %50 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %49, ptr addrspace(1) %45, 1, 0
  ret { { i64, i64 }, { ptr addrspace(1) } } %50
}

define private oxcamlcc { { i64, i64 }, { ptr addrspace(1) } } @c_call_wrapper.caml_fresh_oo_id(i64 %0, i64 %1, ptr addrspace(1) %2) noinline {
  %4 = add i64 %0, 104
  %5 = inttoptr i64 %4 to ptr
  %6 = load i64, ptr %5
  %7 = call  i64 @llvm.read_register.i64(metadata !{!"rsp\00"})
  call  void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %6)
  %8 = call  { ptr addrspace(1) } @caml_fresh_oo_id(ptr addrspace(1) %2)
  call  void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %7)
  %9 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } poison, { ptr addrspace(1) } %8, 1
  %10 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %9, i64 %0, 0, 0
  %11 = insertvalue { { i64, i64 }, { ptr addrspace(1) } } %10, i64 %1, 0, 1
  ret { { i64, i64 }, { ptr addrspace(1) } } %11
}

define private oxcamlcc { { i64, i64 }, {  } } @c_call_wrapper.caml_initialize(i64 %0, i64 %1, ptr addrspace(1) %2, ptr addrspace(1) %3) noinline {
  %5 = add i64 %0, 104
  %6 = inttoptr i64 %5 to ptr
  %7 = load i64, ptr %6
  %8 = call  i64 @llvm.read_register.i64(metadata !{!"rsp\00"})
  call  void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %7)
  %9 = call  {  } @caml_initialize(ptr addrspace(1) %2, ptr addrspace(1) %3)
  call  void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %8)
  %10 = insertvalue { { i64, i64 }, {  } } poison, {  } %9, 1
  %11 = insertvalue { { i64, i64 }, {  } } %10, i64 %0, 0, 0
  %12 = insertvalue { { i64, i64 }, {  } } %11, i64 %1, 0, 1
  ret { { i64, i64 }, {  } } %12
}

define private oxcamlcc { { i64, i64 }, { i64 } } @wrap_try(i64 %0, i64 %1) returns_twice noinline {
  %3 = insertvalue { { i64, i64 }, { i64 } } poison, i64 0, 1, 0
  %4 = insertvalue { { i64, i64 }, { i64 } } %3, i64 %0, 0, 0
  %5 = insertvalue { { i64, i64 }, { i64 } } %4, i64 %1, 0, 1
  ret { { i64, i64 }, { i64 } } %5
}

@camlExn_part2__gc_roots = global { ptr, i64 } { ptr @camlExn_part2__Exn3229, i64 0 }, section ".data", align 8
@header.camlExn_part2 = global i64 11008, section ".data", align 8
@camlExn_part2 = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @camlExn_part2__Exn3229, ptr @camlExn_part2__catch_exn1_from_llvm_9, ptr @camlExn_part2__raise_exn1_catch_exn2_from_llvm_10, ptr @camlExn_part2__catch_exn1_nested_from_llvm_11, ptr @camlExn_part2__raise_1_12, ptr @camlExn_part2__raise_2_13, ptr @camlExn_part2__raise_HIDE_STAMP, ptr @camlExn_part2__complicated_15, ptr @camlExn_part2__raise_in_loop_16, ptr @camlExn_part2__catch_wildcard_17 }, section ".data", align 8
@header.camlExn_part2__catch_wildcard_17 = global i64 3063, section ".data", align 8
@camlExn_part2__catch_wildcard_17 = global { ptr, i64 } { ptr @camlExn_part2__catch_wildcard_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExn_part2__raise_in_loop_16 = global i64 3063, section ".data", align 8
@camlExn_part2__raise_in_loop_16 = global { ptr, i64 } { ptr @camlExn_part2__raise_in_loop_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExn_part2__complicated_15 = global i64 3063, section ".data", align 8
@camlExn_part2__complicated_15 = global { ptr, i64 } { ptr @camlExn_part2__complicated_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExn_part2__raise_HIDE_STAMP = global i64 3063, section ".data", align 8
@camlExn_part2__raise_3_14 = global { ptr, i64 } { ptr @camlExn_part2__raise_3_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExn_part2__raise_HIDE_STAMP = global i64 3063, section ".data", align 8
@camlExn_part2__raise_2_13 = global { ptr, i64 } { ptr @camlExn_part2__raise_2_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExn_part2__raise_HIDE_STAMP = global i64 4087, section ".data", align 8
@camlExn_part2__raise_1_12 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlExn_part2__raise_1_HIDE_STAMP }, section ".data", align 8
@header.camlExn_part2__catch_exn1_nested_from_llvm_11 = global i64 3063, section ".data", align 8
@camlExn_part2__catch_exn1_nested_from_llvm_11 = global { ptr, i64 } { ptr @camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExn_part2__raise_exn1_catch_exn2_from_llvm_10 = global i64 3063, section ".data", align 8
@camlExn_part2__raise_exn1_catch_exn2_from_llvm_10 = global { ptr, i64 } { ptr @camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExn_part2__catch_exn1_from_llvm_9 = global i64 3063, section ".data", align 8
@camlExn_part2__catch_exn1_from_llvm_9 = global { ptr, i64 } { ptr @camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP, i64 108086391056891909 }, section ".data", align 8
@header.camlExn_part2__Exn3229 = global i64 3064, section ".data", align 8
@camlExn_part2__Exn3229 = global { ptr, i64 } { ptr @camlExn_part2__immstring6, i64 1 }, section ".data", align 8
@header.camlExn_part2__immstring6 = global i64 3068, section ".data", align 8
@camlExn_part2__immstring6 = global { [ 14 x i8 ], [ 1 x i8 ], i8 } { [ 14 x i8 ] c"\45\78\6e\5f\70\61\72\74\32\2e\45\78\6e\33", [ 1 x i8 ] zeroinitializer, i8 1 }, section ".data", align 8
@header.camlExn_part2__immstring215 = global i64 2044, section ".data", align 8
@camlExn_part2__immstring215 = global { [ 6 x i8 ], [ 1 x i8 ], i8 } { [ 6 x i8 ] c"\63\61\75\67\68\74", [ 1 x i8 ] zeroinitializer, i8 1 }, section ".data", align 8
@header.camlExn_part2__Pmakeblock195 = global i64 2816, section ".data", align 8
@camlExn_part2__Pmakeblock195 = global { ptr, ptr } { ptr @caml_exn_Assert_failure, ptr @camlExn_part2__const_block192 }, section ".data", align 8
@header.camlExn_part2__const_block192 = global i64 3840, section ".data", align 8
@camlExn_part2__const_block192 = global { ptr, i64, i64 } { ptr @camlExn_part2__immstring190, i64 101, i64 95 }, section ".data", align 8
@header.camlExn_part2__immstring190 = global i64 3068, section ".data", align 8
@camlExn_part2__immstring190 = global { [ 12 x i8 ], [ 3 x i8 ], i8 } { [ 12 x i8 ] c"\65\78\6e\5f\70\61\72\74\32\2e\6d\6c", [ 3 x i8 ] zeroinitializer, i8 3 }, section ".data", align 8
@camlExn_part2__catch_wildcard_HIDE_STAMP.recover_rbp_asm.L427 = external global ptr
@camlExn_part2__catch_wildcard_HIDE_STAMP.recover_rbp_var.L427 = global ptr zeroinitializer, section ".data", align 8
@camlExn_part2__raise_in_loop_HIDE_STAMP.recover_rbp_asm.L394 = external global ptr
@camlExn_part2__raise_in_loop_HIDE_STAMP.recover_rbp_var.L394 = global ptr zeroinitializer, section ".data", align 8
@camlExn_part2__complicated_HIDE_STAMP.recover_rbp_asm.L332 = external global ptr
@camlExn_part2__complicated_HIDE_STAMP.recover_rbp_var.L332 = global ptr zeroinitializer, section ".data", align 8
@camlExn_part2__complicated_HIDE_STAMP.recover_rbp_asm.L334 = external global ptr
@camlExn_part2__complicated_HIDE_STAMP.recover_rbp_var.L334 = global ptr zeroinitializer, section ".data", align 8
@camlExn_part2__complicated_HIDE_STAMP.recover_rbp_asm.L336 = external global ptr
@camlExn_part2__complicated_HIDE_STAMP.recover_rbp_var.L336 = global ptr zeroinitializer, section ".data", align 8
@camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP.recover_rbp_asm.L218 = external global ptr
@camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP.recover_rbp_var.L218 = global ptr zeroinitializer, section ".data", align 8
@camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP.recover_rbp_asm.L176 = external global ptr
@camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP.recover_rbp_var.L176 = global ptr zeroinitializer, section ".data", align 8
@camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP.recover_rbp_asm.L142 = external global ptr
@camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP.recover_rbp_var.L142 = global ptr zeroinitializer, section ".data", align 8
@camlExn_part1 = external global ptr
@camlStdlib__print_endline_138 = external global ptr
@caml_c_call = external global ptr
@caml_curry2 = external global ptr
@caml_exn_Assert_failure = external global ptr
@caml_fresh_oo_id = external global ptr
@caml_initialize = external global ptr
@caml_ml_flush = external global ptr
@caml_ml_output = external global ptr
@caml_ml_output_char = external global ptr
@caml_raise_exn = external global ptr
@caml_reraise_exn = external global ptr

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.stackrestore(ptr)
declare ptr @llvm.stacksave()
declare void @llvm.write_register.i64(metadata, i64)

module asm "  .text"
module asm "camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP.recover_rbp_asm.L142:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP.recover_rbp_var.L142(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP.recover_rbp_asm.L176:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP.recover_rbp_var.L176(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP.recover_rbp_asm.L218:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP.recover_rbp_var.L218(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlExn_part2__complicated_HIDE_STAMP.recover_rbp_asm.L336:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlExn_part2__complicated_HIDE_STAMP.recover_rbp_var.L336(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlExn_part2__complicated_HIDE_STAMP.recover_rbp_asm.L334:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlExn_part2__complicated_HIDE_STAMP.recover_rbp_var.L334(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlExn_part2__complicated_HIDE_STAMP.recover_rbp_asm.L332:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlExn_part2__complicated_HIDE_STAMP.recover_rbp_var.L332(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlExn_part2__raise_in_loop_HIDE_STAMP.recover_rbp_asm.L394:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlExn_part2__raise_in_loop_HIDE_STAMP.recover_rbp_var.L394(%rip), %rbx"
module asm "  jmpq *%rbx"
module asm "  .text"
module asm "camlExn_part2__catch_wildcard_HIDE_STAMP.recover_rbp_asm.L427:"
module asm "  pop %rbp"
module asm "  addq $8, %rsp"
module asm "  movq camlExn_part2__catch_wildcard_HIDE_STAMP.recover_rbp_var.L427(%rip), %rbx"
module asm "  jmpq *%rbx"

!0 = !{ i32 1, !"oxcaml_module", !"Exn_part2" }
!llvm.module.flags = !{ !0 }
