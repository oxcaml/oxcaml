    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_start(param=0 : ocaml_value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_unit(x=() : unit @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_bool(x=true : bool @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_bool(x=false : bool @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int(x=0 : int @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int(x=123 : int @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int(x=9223372036854775766 : int @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int(x=4611686018427387903 : int @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int(x=4611686018427387904 : int @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_char(x='a' : char @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_char(x='Z' : char @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_char(x='0' : char @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_char(x=' ' : char @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_char(x='\n' : char @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_char(x='\255' : char @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float(x=0. : float @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float(x=4.1 : float @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float(x=-3.14 : float @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float(x=0.30000000000000004 : float @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float(x=0.3 : float @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float(x=1.0E+10 : float @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float(x=-1.0E-10 : float @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float(x=+Inf : float @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float(x=-Inf : float @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float(x=NaN : float @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float32(x=0.s : float32 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float32(x=4.1s : float32 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float32(x=-2.5s : float32 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float32(x=1.0E+5s : float32 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int32(x=0l : int32 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int32(x=42l : int32 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int32(x=-123l : int32 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int32(x=2147483647l : int32 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int32(x=-2147483648l : int32 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int64(x=0L : int64 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int64(x=1000L : int64 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int64(x=-5000L : int64 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int64(x=9223372036854775807L : int64 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_int64(x=-9223372036854775808L : int64 @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_nativeint(x=0n : nativeint @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_nativeint(x=999n : nativeint @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_nativeint(x=-777n : nativeint @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_nativeint(x=9223372036854775807n : nativeint @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_nativeint(x=-9223372036854775808n : nativeint @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_string(x="" : string @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_string(x="hello world!" : string @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_string(x="a" : string @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_string(x="special chars: 
	"" : string @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_string(x="unicode: αβγ" : string @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_bytes(x="" : bytes @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_bytes(x="abc" : bytes @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_bytes(x="single" : bytes @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_bytes(x="\0\x01\xff" : bytes @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_array(x=[|  |] : char array @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_array(x=[| 'a' |] : char array @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_array(x=[| 'a'; 'b'; 'c' |] : char array @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_array(x=[| 'x'; 'y'; 'z'; '1'; '2'; '3' |] : char array @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_list(x=[] : char list @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_list(x=(:: ('x', 0)) : char list @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_list(x=(:: ('a', [98, [99, 0]])) : char list @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_list(x=(:: ('1', [50, [51, [...]@<ADDRESS>]])) : char list @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_option(x=None : char option @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_option(x=(Some 'a') : char option @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_option(x=(Some 'Z') : char option @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_option(x=(Some '\000') : char option @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_lazy(x=97 : char lazy_t @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_lazy(x=88 : char lazy_t @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_lazy(x=57 : char lazy_t @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_exn(x={ exn = { name = "Failure"; id = 9223372036854775805 }; raw = [<object>@<ADDRESS>, "test"] } : exn @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_exn(x={ exn = { name = "Invalid_argument"; id = 9223372036854775804 }; raw = [<object>@<ADDRESS>, "bad arg"] } : exn @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_exn(x={ exn = { name = "Not_found"; id = 9223372036854775801 }; raw = <object>@<ADDRESS> } : exn @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_exn(x={ exn = { name = "Sys_error"; id = 9223372036854775806 }; raw = [<object>@<ADDRESS>, "io error"] } : exn @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float_array(x=[|  |] : float array @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float_array(x=[| 1. |] : float array @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float_array(x=[| 4.1; 4.2; 4.3; 4.4; 4.5 |] : float array @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float_array(x=[| 4.1; 4.2; 4.3; 4.4; 4.5; 4.6; 4.7; 4.8; 4.9; 5.; <5 more elements in floatarray> |] : float array @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_float_array(x=[| 0.; -1.5; +Inf; NaN |] : float array @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=0 : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=1 : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=0 : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=9223372036854775685 : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=122 : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=3.14 : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=0.30000000000000004 : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=0.3 : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=2.7s : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=-456l : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=-789L : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=-999n : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x="polymorphic" : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x="poly" : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=[112, 111, 108, 121] : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=[112, [111, [...]@<ADDRESS>]] : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=[112] : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=112 : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=[<object>@<ADDRESS>, "poly error"] : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=[| 1.; 2.; 3. |] : 'a @ value)
    frame #N: <ADDRESS> test_basic_dwarf.exe`Test_basic_dwarf.f_poly(x=[| 4.1; 4.2; 4.3; 4.4; 4.5; 4.6; 4.7; 4.8; 4.9; 5.; <5 more elements in floatarray> |] : 'a @ value)
