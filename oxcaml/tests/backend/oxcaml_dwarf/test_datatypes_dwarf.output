    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_start(param=0 : ocaml_value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_simple_variant(x=A : simple_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_simple_variant(x=B : simple_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_simple_variant(x=(C 42) : simple_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_simple_variant(x=(D 3.14) : simple_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant(x=Empty : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant(x=(Single 123) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant(x=(Pair (42, 1.5)) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant(x=(Record { x = 10; y = 2.5 }) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant(x=(Mixed { a = 100; c = true; b = #3.14 }) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_basic_record(x={ x = 42; y = 3.14 } : basic_record @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_basic_record(x={ x = 0; y = 0. } : basic_record @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_basic_record(x={ x = 9223372036854775685; y = -2.5 } : basic_record @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_mixed_record(x={ a = 42; c = true; d = 1000l; b = #3.14 } : mixed_record @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_mixed_record(x={ a = 0; c = false; d = 0l; b = #0. } : mixed_record @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_float(x=(Simple #4.1) : unboxed_variant_float @ float64)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_float(x=(Simple #0.) : unboxed_variant_float @ float64)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_float(x=(Simple #-2.5) : unboxed_variant_float @ float64)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_int(x=(Complex 42) : unboxed_variant_int @ bits32)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_int(x=(Complex 0) : unboxed_variant_int @ bits32)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_int(x=(ValueInt 42) : unboxed_variant_value_int @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_int(x=(ValueInt 0) : unboxed_variant_value_int @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_string(x=(ValueString "hello") : unboxed_variant_value_string @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_string(x=(ValueString "") : unboxed_variant_value_string @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_bool(x=(ValueBool true) : unboxed_variant_value_bool @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_bool(x=(ValueBool false) : unboxed_variant_value_bool @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_record_simple(x={ value = 42 } : unboxed_record_simple @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_record_simple(x={ value = 0 } : unboxed_record_simple @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_record_simple(x={ value = 9223372036854774809 } : unboxed_record_simple @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_record_complex(x={ data = { x = 10; y = 2. } } : unboxed_record_complex @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_record_complex(x={ data = { x = 0; y = 0. } } : unboxed_record_complex @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_variant(x=`Red : poly_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_variant(x=(`Blue 42) : poly_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_variant(x=(`Green 3.14) : poly_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_variant(x=(`Yellow "test") : poly_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_open_poly_variant(x=`Alpha : [> `Alpha | `Beta of int ] @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_open_poly_variant(x=(`Beta 123) : [> `Alpha | `Beta of int ] @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_nested_variant(x=(Leaf 42) : nested_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_nested_variant(x=(Node { left = [1]; right = [2]; value = 3.14 }) : nested_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_mixed_combo(x={ boxed_field = 42; variant_field = (C 100); record_field = { x = 10; y = 2.5 }; unboxed_field = #3.14 } : mixed_combo @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_option_variant(x=None : int option_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_option_variant(x=(Some 42) : int option_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_either(x=(Left 42) : (int, string) either @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_either(x=(Right "hello") : (int, string) either @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_float64(x=#4.1 : a @ float64)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_float64(x=#2.5 : a @ float64)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_bits32(x=42 : a/2 @ bits32)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_bits32(x=-123 : a/2 @ bits32)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_tuple_field(x={ f.#1 = 24; s = "hello"; b = true; f.#0 = 42 } : t @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_tuple_field(x={ f.#1 = 1; s = ""; b = false; f.#0 = 0 } : t @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_tuple_field(x={ f.#1 = 9223372036854775708; s = "world"; b = true; f.#0 = 10 } : t @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Simple_exception"; id = 1 }; raw = <object>@<ADDRESS> } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_int"; id = 2 }; raw = [<object>@<ADDRESS>, 42] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_string"; id = 3 }; raw = [<object>@<ADDRESS>, "error occurred"] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_multiple"; id = 4 }; raw = [<object>@<ADDRESS>, 404, "not found", 1.5] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_record"; id = 5 }; raw = [<object>@<ADDRESS>, [500, "internal error"]] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_unboxed_record"; id = 6 }; raw = [<object>@<ADDRESS>, [...]@<ADDRESS>] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Failure"; id = 9223372036854775805 }; raw = [<object>@<ADDRESS>, "standard failure"] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Invalid_argument"; id = 9223372036854775804 }; raw = [<object>@<ADDRESS>, "bad input"] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=<object>@<ADDRESS> : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, 123] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, "polymorphic error"] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, 200, "ok", 0.] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, [201, "created"]] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, [...]@<ADDRESS>] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, "polymorphic failure"] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_with_record(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_record"; id = 5 }; raw = [<object>@<ADDRESS>, [300, "redirect"]] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_with_unboxed(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_unboxed_record"; id = 6 }; raw = [<object>@<ADDRESS>, [...]@<ADDRESS>] } : exn @ value)
