    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_start(param=0 : ocaml_value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_simple_variant(x=A : simple_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_simple_variant(x=B : simple_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_simple_variant(x=(C 42) : simple_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_simple_variant(x=(D 3.14) : simple_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant(x=Empty : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant(x=(Single 123) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant(x=(Pair (42, 1.5)) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant(x=(Record { x = 10; y = 2.5 }) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant(x=(Mixed { a = 100; c = true; b = #3.14 }) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant_second(x=(Single 456) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant_second(x=(Pair (999, 9.99)) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant_second(x=(Record { x = 20; y = 5.0 }) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant_third(x=Empty : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant_third(x=(Mixed { a = 200; c = false; b = #1.41 }) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_complex_variant_third(x=(Pair (777, 7.77)) : complex_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_basic_record(x={ x = 42; y = 3.14 } : basic_record @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_basic_record(x={ x = 0; y = 0.0 } : basic_record @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_basic_record(x={ x = -123; y = -2.5 } : basic_record @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_mixed_record(x={ a = 42; c = true; d = 1000l; b = #3.14 } : mixed_record @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_mixed_record(x={ a = 0; c = false; d = 0l; b = #0.0 } : mixed_record @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_float(x=(Simple #4.1) : unboxed_variant_float @ float64)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_float(x=(Simple #0.0) : unboxed_variant_float @ float64)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_float(x=(Simple -#2.5) : unboxed_variant_float @ float64)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_int(x=(Complex #42l) : unboxed_variant_int @ bits32)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_int(x=(Complex #0l) : unboxed_variant_int @ bits32)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_int(x=(ValueInt 42) : unboxed_variant_value_int @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_int(x=(ValueInt 0) : unboxed_variant_value_int @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_string(x=(ValueString "hello") : unboxed_variant_value_string @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_string(x=(ValueString "") : unboxed_variant_value_string @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_bool(x=(ValueBool true) : unboxed_variant_value_bool @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_variant_value_bool(x=(ValueBool false) : unboxed_variant_value_bool @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_record_simple(x={ value = 42 } : unboxed_record_simple @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_record_simple(x={ value = 0 } : unboxed_record_simple @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_record_simple(x={ value = -999 } : unboxed_record_simple @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_record_complex(x={ data = { x = 10; y = 2.0 } } : unboxed_record_complex @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_record_complex(x={ data = { x = 0; y = 0.0 } } : unboxed_record_complex @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_variant(x=`Red : poly_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_variant(x=(`Blue 42) : poly_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_variant(x=(`Green 3.14) : poly_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_variant(x=(`Yellow "test") : poly_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_open_poly_variant(x=`Alpha : [> `Alpha | `Beta of int ] @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_open_poly_variant(x=(`Beta 123) : [> `Alpha | `Beta of int ] @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_nested_variant(x=(Leaf 42) : nested_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_nested_variant(x=(Node { left = (Leaf 1); right = (Leaf 2); value = 3.14 }) : nested_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_mixed_combo(x={ boxed_field = 42; variant_field = (C 100); record_field = { x = 10; y = 2.5 }; unboxed_field = #3.14 } : mixed_combo @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_option_variant(x=None : int option_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_option_variant(x=(Some 42) : int option_variant @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_either(x=(Left 42) : (int, string) either @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_either(x=(Right "hello") : (int, string) either @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_float64(x=#4.1 : a @ float64)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_float64(x=#2.5 : a @ float64)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_bits32(x=#42l : a/2 @ bits32)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_bits32(x=-#123l : a/2 @ bits32)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_tuple_field(x={ f.#2 = 24; s = "hello"; b = true; f.#1 = #42L } : t @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_tuple_field(x={ f.#2 = 1; s = ""; b = false; f.#1 = #0L } : t @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_unboxed_tuple_field(x={ f.#2 = -100; s = "world"; b = true; f.#1 = #10L } : t @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Simple_exception"; id = 7 }; raw = <object>@<ADDRESS> } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_int"; id = 8 }; raw = [<object>@<ADDRESS>, 42] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_string"; id = 9 }; raw = [<object>@<ADDRESS>, "error occurred"] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_multiple"; id = 10 }; raw = [<object>@<ADDRESS>, 404, "not found", 1.5] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_record"; id = 11 }; raw = [<object>@<ADDRESS>, [500, "internal error"]] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_unboxed_record"; id = 12 }; raw = [<object>@<ADDRESS>, [...]@<ADDRESS>] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Failure"; id = -3 }; raw = [<object>@<ADDRESS>, "standard failure"] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_specific(x={ exn = { name = "Invalid_argument"; id = -4 }; raw = [<object>@<ADDRESS>, "bad input"] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=<object>@<ADDRESS> : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, 123] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, "polymorphic error"] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, 200, "ok", 0.0] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, [201, "created"]] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, [...]@<ADDRESS>] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_poly(x=[<object>@<ADDRESS>, "polymorphic failure"] : 'a @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_with_record(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_record"; id = 11 }; raw = [<object>@<ADDRESS>, [300, "redirect"]] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_exception_with_unboxed(x={ exn = { name = "Test_datatypes_dwarf.Exception_with_unboxed_record"; id = 12 }; raw = [<object>@<ADDRESS>, [...]@<ADDRESS>] } : exn @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tree(x=Empty : tree @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tree(x=(Node { value = 42; children = EmptyForest }) : tree @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tree(x=(Node { value = 1; children = (WithTree { tree = (Node { value = 2; children = EmptyForest }); rest = (WithTree { tree = (Node { value = 3; children = (WithTree { tree = (Node { value = 4; children = EmptyForest }); rest = (WithTree { tree = (Node { value = 5; children = EmptyForest }); rest = EmptyForest }) }) }); rest = EmptyForest }) }) }) : tree @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_forest(x=EmptyForest : forest @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_forest(x=(WithTree { tree = (Node { value = 10; children = EmptyForest }); rest = EmptyForest }) : forest @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_forest(x=(WithTree { tree = (Node { value = 100; children = EmptyForest }); rest = (WithTree { tree = (Node { value = 200; children = (WithTree { tree = (Node { value = 201; children = EmptyForest }); rest = (WithTree { tree = (Node { value = 202; children = (WithTree { tree = (Node { value = 2021; children = EmptyForest }); rest = EmptyForest }) }); rest = EmptyForest }) }) }); rest = (WithTree { tree = (Node { value = 300; children = EmptyForest }); rest = EmptyForest }) }) }) : forest @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_int_int(x=(42, 123) : int * int @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_int_int(x=(0, -1) : int * int @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_int_int(x=(-999, 1000) : int * int @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_mixed_two(x=(3.14, "hello") : float * string @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_mixed_two(x=(0.0, "") : float * string @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_mixed_two(x=(-2.5, "world") : float * string @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_three(x=(42, true, 3.14) : int * bool * float @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_three(x=(0, false, 0.0) : int * bool * float @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_three(x=(-123, true, -1.5) : int * bool * float @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_nested(x=((1, 2), (3.14, true)) : (int * int) * (float * bool) @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_nested(x=((0, 0), (0.0, false)) : (int * int) * (float * bool) @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_nested(x=((-5, 10), (-2.5, true)) : (int * int) * (float * bool) @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_with_complex(x=((:: (1, (:: (2, (:: (3, [])))))), [| 'a'; 'b' |], (Some "test")) : int list * char array * string option @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_with_complex(x=([], [|  |], None) : int list * char array * string option @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_with_complex(x=((:: (42, [])), [| 'x' |], (Some "")) : int list * char array * string option @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_large(x=(42, 3.14, "hello", true, 'A', 123l) : int * float * string * bool * char * int32 @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_tuple_large(x=(0, 0.0, "", false, '\000', 0l) : int * float * string * bool * char * int32 @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_tuple(x=(42, "test") : 'a * 'b @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_tuple(x=(3.14, 1) : 'a * 'b @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_poly_tuple(x=("hello", [1, [2, [...]@<ADDRESS>]]) : 'a * 'b @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_bigarray1_int(x=<bigarray1|data=<ADDRESS>> : (int, Bigarray.int_elt, Bigarray.c_layout) Bigarray.Array1.t @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_bigarray1_float(x=<bigarray1|data=<ADDRESS>> : (float, Bigarray.float64_elt, Bigarray.c_layout) Bigarray.Array1.t @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_bigarray2_int(x=<bigarray2|data=<ADDRESS>> : (int, Bigarray.int_elt, Bigarray.c_layout) Bigarray.Array2.t @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_bigarray2_float(x=<bigarray2|data=<ADDRESS>> : (float, Bigarray.float64_elt, Bigarray.fortran_layout) Bigarray.Array2.t @ value)
    frame #N: <ADDRESS> test_datatypes_dwarf.exe`Test_datatypes_dwarf.f_bigarray3_int32(x=<bigarray3|data=<ADDRESS>> : (int32, Bigarray.int32_elt, Bigarray.c_layout) Bigarray.Array3.t @ value)
