    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_start(param=0 : ocaml_value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_set(x={ root = Empty; count = 0 } : IntSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_set(x={ root = (Node [42, 0, 0, 1]); count = 1 } : IntSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_set(x={ root = (Node [30, [[...]@<ADDRESS>], 0, 3]); count = 3 } : IntSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_set(x={ root = Empty; count = 0 } : StringSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_set(x={ root = (Node ["hello", 0, 0, 1]); count = 1 } : StringSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_set(x={ root = (Node ["foo", 0, [[...]@<ADDRESS>], 2]); count = 2 } : StringSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_float_set(x={ root = (Node [3.14, 0, 0, 1]); count = 1 } : FloatSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_float_set(x={ root = (Node [1.41, 0, [[...]@<ADDRESS>], 2]); count = 2 } : FloatSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_store(x=[] : IntStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_store(x=(:: ({ key = 1; value = 100 }, 0)) : IntStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_store(x=(:: ({ key = 2; value = 200 }, [[1, 100], 0])) : IntStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_store(x=[] : StringStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_store(x=(:: ({ key = "key1"; value = 100 }, 0)) : StringStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_store(x=(:: ({ key = "key2"; value = 200 }, [["key1", 100], 0])) : StringStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_set_operations [inlined] Test_simple_functor_dwarf.MakeSet.mem
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_store_operations(store=(:: ({ key = 2; value = 200 }, [[1, 100], 0])) : IntStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_compute_result(x={ value = 42; computed = 6.28; status = `Success } : IntCompute.result @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_compute_result(x={ value = 0; computed = 3.14; status = `Success } : IntCompute.result @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_compute_result(x={ value = "test"; computed = 12.56; status = `Success } : StringCompute.result @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_compute_result(x={ value = ""; computed = 0.; status = (`Error "empty representation") } : StringCompute.result @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_string_pair(x={ first = 42; second = "hello"; combined = "42+hello" } : IntStringAdvanced.pair_data @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_string_pair(x={ first = 0; second = "world"; combined = "0+world" } : IntStringAdvanced.pair_data @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_float_pair(x={ first = "test"; second = 3.14; combined = "test+3.14" } : StringFloatAdvanced.pair_data @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_comparison_result(x=Greater : IntStringAdvanced.comparison_result @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_comparison_result(x=Equal : IntStringAdvanced.comparison_result @ value)
