    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_start(param=0 : ocaml_value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_set(x={ root = Empty; count = 0 } : IntSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_set(x={ root = (Node { value = 42; left = Empty; right = Empty; height = 1 }); count = 1 } : IntSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_set(x={ root = (Node { value = 30; left = (Node { value = 20; left = (Node { value = 10; left = Empty; right = Empty; height = 1 }); right = Empty; height = 2 }); right = Empty; height = 3 }); count = 3 } : IntSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_set(x={ root = Empty; count = 0 } : StringSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_set(x={ root = (Node { value = "hello"; left = Empty; right = Empty; height = 1 }); count = 1 } : StringSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_set(x={ root = (Node { value = "foo"; left = Empty; right = (Node { value = "world"; left = Empty; right = Empty; height = 1 }); height = 2 }); count = 2 } : StringSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_float_set(x={ root = (Node { value = 3.14; left = Empty; right = Empty; height = 1 }); count = 1 } : FloatSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_float_set(x={ root = (Node { value = 1.41; left = Empty; right = (Node { value = 2.71; left = Empty; right = Empty; height = 1 }); height = 2 }); count = 2 } : FloatSet.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_store(x=[] : IntStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_store(x=(:: ({ key = 1; value = 100 }, [])) : IntStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_store(x=(:: ({ key = 2; value = 200 }, (:: ({ key = 1; value = 100 }, [])))) : IntStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_store(x=[] : StringStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_store(x=(:: ({ key = "key1"; value = 100 }, [])) : StringStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_store(x=(:: ({ key = "key2"; value = 200 }, (:: ({ key = "key1"; value = 100 }, [])))) : StringStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_set_operations [inlined] Test_simple_functor_dwarf.MakeSet.mem
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_store_operations(store=(:: ({ key = 2; value = 200 }, (:: ({ key = 1; value = 100 }, [])))) : IntStore.t @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_compute_result(x={ value = 42; computed = 6.28; status = `Success } : IntCompute.result @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_compute_result(x={ value = 0; computed = 3.14; status = `Success } : IntCompute.result @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_compute_result(x={ value = "test"; computed = 12.56; status = `Success } : StringCompute.result @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_compute_result(x={ value = ""; computed = 0.0; status = (`Error "empty representation") } : StringCompute.result @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_string_pair(x={ first = 42; second = "hello"; combined = "42+hello" } : IntStringAdvanced.pair_data @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_int_string_pair(x={ first = 0; second = "world"; combined = "0+world" } : IntStringAdvanced.pair_data @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_string_float_pair(x={ first = "test"; second = 3.14; combined = "test+3.14" } : StringFloatAdvanced.pair_data @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_comparison_result(x=Greater : IntStringAdvanced.comparison_result @ value)
    frame #N: <ADDRESS> test_simple_functor_dwarf.exe`Test_simple_functor_dwarf.f_comparison_result(x=Equal : IntStringAdvanced.comparison_result @ value)
