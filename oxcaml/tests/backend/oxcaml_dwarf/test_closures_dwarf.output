    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_start(param=0 : ocaml_value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_inline_closure_map(lst=(:: (1, (:: (2, (:: (3, [])))))) : int list @ value, f=test_closures_dwarf.exe`Test_closures_dwarf.(fun) at test_closures_dwarf.ml:10:49 : int -> int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_inline_closure_map(lst=(:: (4, (:: (5, (:: (6, [])))))) : int list @ value, f=test_closures_dwarf.exe`Test_closures_dwarf.(fun) at test_closures_dwarf.ml:12:49 : int -> int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_inline_closure_filter(lst=(:: (1, (:: (2, (:: (3, (:: (4, (:: (5, [])))))))))) : int list @ value, pred=test_closures_dwarf.exe`Test_closures_dwarf.(fun) at test_closures_dwarf.ml:21:58 : int -> bool @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_inline_closure_filter(lst=(:: (10, (:: (20, (:: (30, [])))))) : int list @ value, pred=test_closures_dwarf.exe`Test_closures_dwarf.(fun) at test_closures_dwarf.ml:23:45 : int -> bool @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_named_closure_with_capture(base=<unavailable>, lst=(:: (1, (:: (2, (:: (3, [])))))) : int list @ value, f=test_closures_dwarf.exe`Test_closures_dwarf at test_closures_dwarf.ml:36:51 : int -> int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_named_closure_with_capture(base=<unavailable>, lst=(:: (4, (:: (5, (:: (6, [])))))) : int list @ value, f=test_closures_dwarf.exe`Test_closures_dwarf at test_closures_dwarf.ml:38:51 : int -> int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_closure_with_env(outer=100 : int @ value, inner="hello" : string @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_closure_with_env(outer=50 : int @ value, inner="world" : string @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_higher_order(transformer=test_closures_dwarf.exe`Test_closures_dwarf.compose_with_double at test_closures_dwarf.ml:62:24 : (int -> int) -> int -> int @ value, base_func=test_closures_dwarf.exe`Test_closures_dwarf.square at test_closures_dwarf.ml:70:11 : int -> int @ value, value=5 : int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_higher_order(transformer=test_closures_dwarf.exe`Test_closures_dwarf.compose_with_increment at test_closures_dwarf.ml:66:27 : (int -> int) -> int -> int @ value, base_func=test_closures_dwarf.exe`Test_closures_dwarf.negate at test_closures_dwarf.ml:72:11 : int -> int @ value, value=10 : int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_partial_application(a=10 : int @ value, b=20 : int @ value, c=30 : int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_partial_application(a=10 : int @ value, b=20 : int @ value, c=40 : int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_curried_function(x=2 : int @ value, y=3 : int @ value, z=4 : int @ value, w=5 : int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_curried_function(x=2 : int @ value, y=3 : int @ value, z=4 : int @ value, w=6 : int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_compose(f=test_closures_dwarf.exe`Test_closures_dwarf.double at test_closures_dwarf.ml:108:15 : int -> int @ value, g=test_closures_dwarf.exe`Test_closures_dwarf.add_one at test_closures_dwarf.ml:106:16 : int -> int @ value, x=5 : int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_compose(f=test_closures_dwarf.exe`Test_closures_dwarf.add_one at test_closures_dwarf.ml:106:16 : int -> int @ value, g=test_closures_dwarf.exe`Test_closures_dwarf.double at test_closures_dwarf.ml:108:15 : int -> int @ value, x=7 : int @ value)
    frame #N: <ADDRESS> test_closures_dwarf.exe`Test_closures_dwarf.f_closure_factory(multiplier=3 : int @ value)
Process <PID> exited with status = 0 (0x00000000)
