name: build
on:
  push:
    branches:
      - main
      - '*microbranch'
    tags:
      - '*'
  pull_request:
jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    permissions:
      # Required for Magic Nix Cache authentication with GitHub's API
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: flambda2_runtime5
            nix_args: --arg runtime5 true
            os: ubuntu-latest

          - name: flambda2_stack_checks
            nix_args: --arg runtime5 true --arg stackChecks true
            os: ubuntu-latest

          - name: flambda2_poll_insertion
            nix_args: --arg runtime5 true --arg pollInsertion true
            os: ubuntu-latest

          - name: flambda2_multidomain
            nix_args: --arg runtime5 true --arg stackChecks true --arg pollInsertion true --arg multidomain true
            os: ubuntu-latest

          - name: flambda2_dev
            nix_args: --arg dev true
            os: ubuntu-latest

          - name: flambda2_dev_runtime5
            nix_args: --arg runtime5 true --arg dev true
            os: ubuntu-latest

          - name: flambda2_debug_runtime5
            nix_args: --arg runtime5 true --arg stackChecks true
            os: ubuntu-latest
            build_ocamlparam: ''
            use_runtime: d
            ocamlrunparam: "v=0,V=1"

          - name: flambda2_debug_runtime
            nix_args:
            os: ubuntu-latest
            build_ocamlparam: ''
            use_runtime: d
            ocamlrunparam: "v=0,V=1"

          - name: flambda2_o3
            nix_args:
            os: ubuntu-latest
            build_ocamlparam: ''
            ocamlparam: '_,O3=1'

          - name: flambda2_frame_pointers_oclassic_polling
            nix_args: --arg framePointers true --arg pollInsertion true --arg flambdaInvariants true
            os: ubuntu-latest
            build_ocamlparam: ''
            ocamlparam: '_,Oclassic=1'
            disable_testcases: 'testsuite/tests/typing-local/regression_cmm_unboxing.ml testsuite/tests/int64-unboxing/test.ml'

          - name: flambda2_macos_arm64
            nix_args: --arg warnError false
            os: macos-latest

          - name: flambda2_macos_arm64_runtime5_regalloc
            nix_args: --arg runtime5 true --arg warnError false
            os: macos-latest
            build_ocamlparam: '_,w=-46,save-ir-before=register_allocation'
            ocamlparam: '_,w=-46,save-ir-before=register_allocation'
            run_regalloc_tool: true

          - name: flambda2_macos_arm64_debug_runtime5_regalloc
            nix_args: --arg runtime5 true --arg warnError false
            os: macos-latest
            build_ocamlparam: '_,w=-46,save-ir-before=register_allocation'
            ocamlparam: '_,w=-46,save-ir-before=register_allocation'
            use_runtime: d
            ocamlrunparam: "v=0,V=1"
            run_regalloc_tool: true

          - name: flambda2_ubuntu_arm64_runtime5_regalloc
            nix_args: --arg runtime5 true --arg warnError false
            os: ubuntu-24.04-arm
            build_ocamlparam: '_,w=-46,save-ir-before=register_allocation'
            ocamlparam: '_,w=-46,save-ir-before=register_allocation'
            run_regalloc_tool: true

          - name: regalloc
            nix_args:
            os: ubuntu-latest
            build_ocamlparam: '_,w=-46,save-ir-before=register_allocation'
            ocamlparam: '_,w=-46,save-ir-before=register_allocation'
            check_arch: true
            run_regalloc_tool: true

          - name: irc_frame_pointers
            nix_args: --arg runtime5 true --arg framePointers true
            os: ubuntu-latest
            build_ocamlparam: '_,w=-46,regalloc=irc'
            ocamlparam: '_,w=-46,regalloc=irc'
            check_arch: true

          - name: cfg-invariants
            nix_args: --arg runtime5 true
            os: ubuntu-latest
            build_ocamlparam: '_,w=-46,regalloc=cfg,cfg-invariants=1,cfg-eliminate-dead-trap-handlers=1'
            ocamlparam: '_,w=-46,regalloc=cfg,cfg-invariants=1,cfg-eliminate-dead-trap-handlers=1'
            check_arch: true

          - name: vectorizer
            nix_args: --arg runtime5 true
            os: ubuntu-latest
            build_ocamlparam: '_,w=-46,regalloc=cfg,vectorize=1'
            ocamlparam: '_,w=-46,regalloc=cfg,vectorize=1'
            check_arch: true

          - name: address_sanitizer
            nix_args: --arg addressSanitizer true
            os: ubuntu-latest

          - name: address_sanitizer_runtime5
            nix_args: --arg addressSanitizer true --arg runtime5 true
            os: ubuntu-latest

          - name: dwarf_tests
            nix_args: --arg oxcamlLldb true
            os: ubuntu-latest
            dwarf_tests_only: true

          - name: llvmize_tests
            nix_args: --arg runtime5 true --arg oxcamlClang true
            os: ubuntu-latest
            llvmize_tests_only: true

    env:
      J: "3"

    steps:
      - name: Checkout the OxCaml repo
        uses: actions/checkout@master

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Set up Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          use-flakehub: false

      - name: Install Dependencies
        run: nix-shell ${{ matrix.nix_args }} --command true

      - name: Disable any testcases
        run: |
          disable_testcases="${{matrix.disable_testcases}}"
          if [ -n "$disable_testcases" ]; then
            rm -fv $disable_testcases
          fi

      - name: Setup for saving core files (not for macOS)
        if: matrix.os != 'macos-latest'
        run: |
          sudo mkdir /cores
          sudo chmod 777 /cores
          # Core filenames will be of the form executable.pid.timestamp:
          sudo bash -c 'echo "/cores/%e.%p.%t" > /proc/sys/kernel/core_pattern'

      - name: Setup for saving core files (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          nix-shell ${{ matrix.nix_args }} --run "
            set -euo pipefail

            sudo chmod 1777 /cores
            sudo sysctl kern.coredump=1
          "

      - name: Build, install and test OxCaml
        if: matrix.dwarf_tests_only != true && matrix.llvmize_tests_only != true
        run: |
          nix-shell ${{ matrix.nix_args }} --run "
            set -euo pipefail
            ulimit -c unlimited

            configurePhase
            buildPhase
            checkPhase
          "
        env:
          BUILD_OCAMLPARAM: ${{ matrix.build_ocamlparam }}
          OCAMLPARAM: ${{ matrix.ocamlparam }}
          OCAMLRUNPARAM: ${{ matrix.ocamlrunparam }}
          USE_RUNTIME: ${{ matrix.use_runtime }}

      - name: Build and test OxCaml DWARF
        if: matrix.dwarf_tests_only == true
        run: |
          nix-shell ${{ matrix.nix_args }} --run "
            set -euo pipefail
            ulimit -c unlimited

            configurePhase
            buildPhase
            make runtest-dwarf
          "

      - name: Build and test OxCaml Llvmize
        if: matrix.llvmize_tests_only == true && contains(matrix.os, 'ubuntu')
        run: |
          nix-shell ${{ matrix.nix_args }} --run "
            set -euo pipefail
            ulimit -c unlimited

            configurePhase
            buildPhase
            make runtest-llvmize
          "

      - name: Check other architectures
        if: matrix.check_arch == true
        run: |
          nix-shell ${{ matrix.nix_args }} --run "make check_all_arches"

      - name: Run register allocation on artifacts
        if: matrix.run_regalloc_tool == true
        run: |
          nix-shell ${{ matrix.nix_args }} --run "
            for allocator in irc ls gi; do
              ./_build/main/tools/regalloc/regalloc.exe _build \
                -validate -summary -regalloc \$allocator || exit 1;
            done
            for allocator in irc ls gi; do
              ./_build/main/tools/regalloc/regalloc.exe _build \
                -validate -param SPLIT_AROUND_LOOPS:on -regalloc \$allocator || exit 1;
            done
          "

      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: cores-${{ github.sha }}-${{ github.run_id }}-${{ matrix.name }}
          path: /cores

      - uses: actions/upload-artifact@v4
        if: ${{ failure() }} && matrix.os == 'macos-latest'
        with:
          name: DiagnosticReports-${{ github.sha }}-${{ github.run_id }}-${{ matrix.name }}
          path: /Users/runner/Library/Logs/DiagnosticReports

      # - uses: actions/upload-artifact@v4
      #   if: ${{ failure() }}
      #   with:
      #     name: _build-${{ github.sha }}-${{ github.run_id }}-${{ matrix.name }}
      #     path: ${{ github.workspace }}/oxcaml/_build

      # - uses: actions/upload-artifact@v4
      #   if: ${{ failure() }}
      #   with:
      #     name: _runtest-${{ github.sha }}-${{ github.run_id }}-${{ matrix.name }}
      #     path: ${{ github.workspace }}/oxcaml/_runtest

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
