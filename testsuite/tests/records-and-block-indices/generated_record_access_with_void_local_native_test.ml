(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 modules = "stubs.c";
 flags = "-extension simd_beta -extension layouts_alpha";
 flambda2;
 stack-allocation;
 native;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
type unit_u : void
external unbox_unit : unit -> unit_u = "%unbox_unit"
external globalize : local_ 'a -> 'a = "%obj_dup";;
external box_int64x2 : int64x2# -> int64x2 = "%box_vec128"
external unbox_int64x2 : int64x2 -> int64x2# = "%unbox_vec128"
external interleave_low_64 : int64x2# -> int64x2# -> int64x2# = "caml_vec128_unreachable" "caml_simd_vec128_interleave_low_64" [@@unboxed] [@@builtin]
external interleave_high_64 : int64x2# -> int64x2# -> int64x2# = "caml_vec128_unreachable" "caml_simd_vec128_interleave_high_64" [@@unboxed] [@@builtin]
external int64x2_of_int64 : int64 -> int64x2# = "caml_vec128_unreachable" "caml_int64x2_low_of_int64" [@@unboxed] [@@builtin]
external int64_of_int64x2 : int64x2# -> int64 = "caml_vec128_unreachable" "caml_int64x2_low_to_int64" [@@unboxed] [@@builtin]

let int64x2_u_equal i1 i2 =
    let a1 = int64_of_int64x2 i1 in
    let b1 = int64_of_int64x2 (interleave_high_64 i1 i1) in
    let a2 = int64_of_int64x2 i2 in
    let b2 = int64_of_int64x2 (interleave_high_64 i2 i2) in
    Int64.equal a1 a2 && Int64.equal b1 b2

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any mod separable) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any mod separable) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int; mutable b0 : unit_u } (* { int; unit_u } *)
type v1 = C1_0 of unit_u (* (| unit_u) *)
type t2 = { mutable a2 : int; mutable b2 : v1 } (* { int; (| unit_u) } *)
type t3 = { mutable a3 : int64; mutable b3 : unit_u } (* { int64; unit_u } *)
type t4 = { mutable a4 : int64; mutable b4 : v1 } (* { int64; (| unit_u) } *)
type t5 = { mutable a5 : int64#; mutable b5 : unit_u } (* { int64#; unit_u } *)
type t6 = { mutable a6 : int64#; mutable b6 : v1 } (* { int64#; (| unit_u) } *)
type t7 = { mutable a7 : int32#; mutable b7 : unit_u } (* { int32#; unit_u } *)
type t8 = { mutable a8 : int32#; mutable b8 : v1 } (* { int32#; (| unit_u) } *)
type t9 = { mutable a9 : nativeint#; mutable b9 : unit_u } (* { nativeint#; unit_u } *)
type t10 = { mutable a10 : nativeint#; mutable b10 : v1 } (* { nativeint#; (| unit_u) } *)
type t11 = { mutable a11 : unit_u; mutable b11 : int } (* { unit_u; int } *)
type t12 = { mutable a12 : unit_u; mutable b12 : int64 } (* { unit_u; int64 } *)
type t13 = { mutable a13 : unit_u; mutable b13 : int64# } (* { unit_u; int64# } *)
type t14 = { mutable a14 : unit_u; mutable b14 : int32# } (* { unit_u; int32# } *)
type t15 = { mutable a15 : unit_u; mutable b15 : nativeint# } (* { unit_u; nativeint# } *)
type t16 = { mutable a16 : unit_u; mutable b16 : unit_u; mutable c16 : string } (* { unit_u; unit_u; string } *)
type t17 = { mutable a17 : unit_u; mutable b17 : float } (* { unit_u; float } *)
type t18 = { mutable a18 : unit_u; mutable b18 : string } (* { unit_u; string } *)
type t19 = { mutable a19 : unit_u; mutable b19 : string; mutable c19 : unit_u } (* { unit_u; string; unit_u } *)
type t20 = { mutable a20 : unit_u; mutable b20 : string; mutable c20 : string } (* { unit_u; string; string } *)
type t21 = { mutable a21 : unit_u; mutable b21 : v1 } (* { unit_u; (| unit_u) } *)
type t22 = #{ a22 : unit_u; b22 : string } (* #{ unit_u; string } *)
type t23 = { mutable a23 : unit_u; mutable b23 : t22 } (* { unit_u; #{ unit_u; string } } *)
type t24 = #{ a24 : string } (* #{ string } *)
type t25 = { mutable a25 : unit_u; mutable b25 : t24 } (* { unit_u; #{ string } } *)
type t26 = #{ a26 : string; b26 : unit_u } (* #{ string; unit_u } *)
type t27 = { mutable a27 : unit_u; mutable b27 : t26 } (* { unit_u; #{ string; unit_u } } *)
type t28 = #{ a28 : string; b28 : string } (* #{ string; string } *)
type t29 = { mutable a29 : unit_u; mutable b29 : t28 } (* { unit_u; #{ string; string } } *)
type t30 = { mutable a30 : float; mutable b30 : unit_u } (* { float; unit_u } *)
type t31 = { mutable a31 : float; mutable b31 : v1 } (* { float; (| unit_u) } *)
type t32 = { mutable a32 : string; mutable b32 : unit_u } (* { string; unit_u } *)
type t33 = { mutable a33 : string; mutable b33 : unit_u; mutable c33 : unit_u } (* { string; unit_u; unit_u } *)
type t34 = { mutable a34 : string; mutable b34 : unit_u; mutable c34 : string } (* { string; unit_u; string } *)
type t35 = { mutable a35 : string; mutable b35 : string; mutable c35 : unit_u } (* { string; string; unit_u } *)
type t36 = #{ a36 : unit_u } (* #{ unit_u } *)
type t37 = { mutable a37 : string; mutable b37 : t36 } (* { string; #{ unit_u } } *)
type t38 = #{ a38 : unit_u; b38 : unit_u } (* #{ unit_u; unit_u } *)
type t39 = { mutable a39 : string; mutable b39 : t38 } (* { string; #{ unit_u; unit_u } } *)
type t40 = { mutable a40 : string; mutable b40 : t22 } (* { string; #{ unit_u; string } } *)
type t41 = { mutable a41 : string; mutable b41 : t26 } (* { string; #{ string; unit_u } } *)
type t42 = { mutable a42 : v1 } (* { (| unit_u) } *)
type t43 = { mutable a43 : v1; mutable b43 : int } (* { (| unit_u); int } *)
type t44 = { mutable a44 : v1; mutable b44 : int64 } (* { (| unit_u); int64 } *)
type t45 = { mutable a45 : v1; mutable b45 : int64# } (* { (| unit_u); int64# } *)
type t46 = { mutable a46 : v1; mutable b46 : int32# } (* { (| unit_u); int32# } *)
type t47 = { mutable a47 : v1; mutable b47 : nativeint# } (* { (| unit_u); nativeint# } *)
type t48 = { mutable a48 : v1; mutable b48 : unit_u } (* { (| unit_u); unit_u } *)
type t49 = { mutable a49 : v1; mutable b49 : float } (* { (| unit_u); float } *)
type t50 = { mutable a50 : v1; mutable b50 : v1 } (* { (| unit_u); (| unit_u) } *)
type t51 = { mutable a51 : t36; mutable b51 : string } (* { #{ unit_u }; string } *)
type t52 = { mutable a52 : t38; mutable b52 : string } (* { #{ unit_u; unit_u }; string } *)
type t53 = { mutable a53 : t22 } (* { #{ unit_u; string } } *)
type t54 = { mutable a54 : t22; mutable b54 : unit_u } (* { #{ unit_u; string }; unit_u } *)
type t55 = { mutable a55 : t22; mutable b55 : string } (* { #{ unit_u; string }; string } *)
type t56 = { mutable a56 : t24; mutable b56 : unit_u } (* { #{ string }; unit_u } *)
type t57 = { mutable a57 : t26 } (* { #{ string; unit_u } } *)
type t58 = { mutable a58 : t26; mutable b58 : unit_u } (* { #{ string; unit_u }; unit_u } *)
type t59 = { mutable a59 : t26; mutable b59 : string } (* { #{ string; unit_u }; string } *)
type t60 = { mutable a60 : t28; mutable b60 : unit_u } (* { #{ string; string }; unit_u } *)

let to_run () =
  (****************************)
  (*   t0 = { int; unit_u }   *)
  (****************************)
  let r = stack_ { a0 = 0; b0 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a0 *)
  let actual = r.a0 in
  let expected = 0 in
  mark_test_run 1;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1 failed";
  (* Paths of depth 1 *)
  (* .b0 *)
  let actual = r.b0 in
  let expected = (unbox_unit ()) in
  mark_test_run 2;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a0 = a01; b0 = b01 } { a0 = a02; b0 = b02 } -> (fun a b -> Int.equal a b) a01 a02 && (fun _ _ -> true) b01 b02) in
  let next_r = stack_ { a0 = 100; b0 = (unbox_unit ()) } in
  let r_expected = stack_ { a0 = 0; b0 = (unbox_unit ()) } in
  (* .a0 *)
  r.a0 <- next_r.a0;
  let r_expected = { r_expected with a0 = next_r.a0 } in
  mark_test_run 3;
  let test = eq r r_expected in
  if not test then failwithf "test 3 failed";
  Gc.compact ();
  (* .b0 *)
  r.b0 <- next_r.b0;
  let r_expected = { r_expected with b0 = next_r.b0 } in
  mark_test_run 4;
  let test = eq r r_expected in
  if not test then failwithf "test 4 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a0; b0 } = r in
  let expected_a0 = 100 in
  mark_test_run 5;
  let test = (fun a b -> Int.equal a b) expected_a0 a0 in
  if not test then failwithf "test 5 failed";
  let expected_b0 = (unbox_unit ()) in
  mark_test_run 6;
  let test = (fun _ _ -> true) expected_b0 b0 in
  if not test then failwithf "test 6 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a0; b0 } = r in
  let expected_a0 = 100 in
  mark_test_run 7;
  let test = (fun a b -> Int.equal a b) expected_a0 a0 in
  if not test then failwithf "test 7 failed";
  let expected_b0 = (unbox_unit ()) in
  mark_test_run 8;
  let test = (fun _ _ -> true) expected_b0 b0 in
  if not test then failwithf "test 8 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************)
  (*   t2 = { int; (| unit_u) }   *)
  (********************************)
  let r = stack_ { a2 = 0; b2 = C1_0((unbox_unit ())) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a2 *)
  let actual = r.a2 in
  let expected = 0 in
  mark_test_run 9;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 9 failed";
  (* Paths of depth 1 *)
  (* .b2 *)
  let actual = r.b2 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 10;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 10 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a2 = a21; b2 = b21 } { a2 = a22; b2 = b22 } -> (fun a b -> Int.equal a b) a21 a22 && (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) b21 b22) in
  let next_r = stack_ { a2 = 100; b2 = C1_0((unbox_unit ())) } in
  let r_expected = stack_ { a2 = 0; b2 = C1_0((unbox_unit ())) } in
  (* .a2 *)
  r.a2 <- next_r.a2;
  let r_expected = { r_expected with a2 = next_r.a2 } in
  mark_test_run 11;
  let test = eq r r_expected in
  if not test then failwithf "test 11 failed";
  Gc.compact ();
  (* .b2 *)
  r.b2 <- next_r.b2;
  let r_expected = { r_expected with b2 = next_r.b2 } in
  mark_test_run 12;
  let test = eq r r_expected in
  if not test then failwithf "test 12 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a2; b2 } = r in
  let expected_a2 = 100 in
  mark_test_run 13;
  let test = (fun a b -> Int.equal a b) expected_a2 a2 in
  if not test then failwithf "test 13 failed";
  let expected_b2 = C1_0((unbox_unit ())) in
  mark_test_run 14;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b2 b2 in
  if not test then failwithf "test 14 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a2; b2 } = r in
  let expected_a2 = 100 in
  mark_test_run 15;
  let test = (fun a b -> Int.equal a b) expected_a2 a2 in
  if not test then failwithf "test 15 failed";
  let expected_b2 = C1_0((unbox_unit ())) in
  mark_test_run 16;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b2 b2 in
  if not test then failwithf "test 16 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************)
  (*   t3 = { int64; unit_u }   *)
  (******************************)
  let r = stack_ { a3 = 0L; b3 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a3 *)
  let actual = r.a3 in
  let expected = 0L in
  mark_test_run 17;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 17 failed";
  (* Paths of depth 1 *)
  (* .b3 *)
  let actual = r.b3 in
  let expected = (unbox_unit ()) in
  mark_test_run 18;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 18 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a3 = a31; b3 = b31 } { a3 = a32; b3 = b32 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a31 a32 && (fun _ _ -> true) b31 b32) in
  let next_r = stack_ { a3 = 100L; b3 = (unbox_unit ()) } in
  let r_expected = stack_ { a3 = 0L; b3 = (unbox_unit ()) } in
  (* .a3 *)
  r.a3 <- next_r.a3;
  let r_expected = { r_expected with a3 = next_r.a3 } in
  mark_test_run 19;
  let test = eq r r_expected in
  if not test then failwithf "test 19 failed";
  Gc.compact ();
  (* .b3 *)
  r.b3 <- next_r.b3;
  let r_expected = { r_expected with b3 = next_r.b3 } in
  mark_test_run 20;
  let test = eq r r_expected in
  if not test then failwithf "test 20 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a3; b3 } = r in
  let expected_a3 = 100L in
  mark_test_run 21;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a3 a3 in
  if not test then failwithf "test 21 failed";
  let expected_b3 = (unbox_unit ()) in
  mark_test_run 22;
  let test = (fun _ _ -> true) expected_b3 b3 in
  if not test then failwithf "test 22 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a3; b3 } = r in
  let expected_a3 = 100L in
  mark_test_run 23;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a3 a3 in
  if not test then failwithf "test 23 failed";
  let expected_b3 = (unbox_unit ()) in
  mark_test_run 24;
  let test = (fun _ _ -> true) expected_b3 b3 in
  if not test then failwithf "test 24 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (**********************************)
  (*   t4 = { int64; (| unit_u) }   *)
  (**********************************)
  let r = stack_ { a4 = 0L; b4 = C1_0((unbox_unit ())) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a4 *)
  let actual = r.a4 in
  let expected = 0L in
  mark_test_run 25;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 25 failed";
  (* Paths of depth 1 *)
  (* .b4 *)
  let actual = r.b4 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 26;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 26 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a4 = a41; b4 = b41 } { a4 = a42; b4 = b42 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a41 a42 && (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) b41 b42) in
  let next_r = stack_ { a4 = 100L; b4 = C1_0((unbox_unit ())) } in
  let r_expected = stack_ { a4 = 0L; b4 = C1_0((unbox_unit ())) } in
  (* .a4 *)
  r.a4 <- next_r.a4;
  let r_expected = { r_expected with a4 = next_r.a4 } in
  mark_test_run 27;
  let test = eq r r_expected in
  if not test then failwithf "test 27 failed";
  Gc.compact ();
  (* .b4 *)
  r.b4 <- next_r.b4;
  let r_expected = { r_expected with b4 = next_r.b4 } in
  mark_test_run 28;
  let test = eq r r_expected in
  if not test then failwithf "test 28 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a4; b4 } = r in
  let expected_a4 = 100L in
  mark_test_run 29;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a4 a4 in
  if not test then failwithf "test 29 failed";
  let expected_b4 = C1_0((unbox_unit ())) in
  mark_test_run 30;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b4 b4 in
  if not test then failwithf "test 30 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a4; b4 } = r in
  let expected_a4 = 100L in
  mark_test_run 31;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a4 a4 in
  if not test then failwithf "test 31 failed";
  let expected_b4 = C1_0((unbox_unit ())) in
  mark_test_run 32;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b4 b4 in
  if not test then failwithf "test 32 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t5 = { int64#; unit_u }   *)
  (*******************************)
  let r = stack_ { a5 = #0L; b5 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a5 *)
  let actual = r.a5 in
  let expected = #0L in
  mark_test_run 33;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 33 failed";
  (* Paths of depth 1 *)
  (* .b5 *)
  let actual = r.b5 in
  let expected = (unbox_unit ()) in
  mark_test_run 34;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 34 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a5 = a51; b5 = b51 } { a5 = a52; b5 = b52 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a51 a52 && (fun _ _ -> true) b51 b52) in
  let next_r = stack_ { a5 = #100L; b5 = (unbox_unit ()) } in
  let r_expected = stack_ { a5 = #0L; b5 = (unbox_unit ()) } in
  (* .a5 *)
  r.a5 <- next_r.a5;
  let r_expected = { r_expected with a5 = next_r.a5 } in
  mark_test_run 35;
  let test = eq r r_expected in
  if not test then failwithf "test 35 failed";
  Gc.compact ();
  (* .b5 *)
  r.b5 <- next_r.b5;
  let r_expected = { r_expected with b5 = next_r.b5 } in
  mark_test_run 36;
  let test = eq r r_expected in
  if not test then failwithf "test 36 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a5; b5 } = r in
  let expected_a5 = #100L in
  mark_test_run 37;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a5 a5 in
  if not test then failwithf "test 37 failed";
  let expected_b5 = (unbox_unit ()) in
  mark_test_run 38;
  let test = (fun _ _ -> true) expected_b5 b5 in
  if not test then failwithf "test 38 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a5; b5 } = r in
  let expected_a5 = #100L in
  mark_test_run 39;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a5 a5 in
  if not test then failwithf "test 39 failed";
  let expected_b5 = (unbox_unit ()) in
  mark_test_run 40;
  let test = (fun _ _ -> true) expected_b5 b5 in
  if not test then failwithf "test 40 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t6 = { int64#; (| unit_u) }   *)
  (***********************************)
  let r = stack_ { a6 = #0L; b6 = C1_0((unbox_unit ())) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a6 *)
  let actual = r.a6 in
  let expected = #0L in
  mark_test_run 41;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 41 failed";
  (* Paths of depth 1 *)
  (* .b6 *)
  let actual = r.b6 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 42;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 42 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a6 = a61; b6 = b61 } { a6 = a62; b6 = b62 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a61 a62 && (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) b61 b62) in
  let next_r = stack_ { a6 = #100L; b6 = C1_0((unbox_unit ())) } in
  let r_expected = stack_ { a6 = #0L; b6 = C1_0((unbox_unit ())) } in
  (* .a6 *)
  r.a6 <- next_r.a6;
  let r_expected = { r_expected with a6 = next_r.a6 } in
  mark_test_run 43;
  let test = eq r r_expected in
  if not test then failwithf "test 43 failed";
  Gc.compact ();
  (* .b6 *)
  r.b6 <- next_r.b6;
  let r_expected = { r_expected with b6 = next_r.b6 } in
  mark_test_run 44;
  let test = eq r r_expected in
  if not test then failwithf "test 44 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a6; b6 } = r in
  let expected_a6 = #100L in
  mark_test_run 45;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a6 a6 in
  if not test then failwithf "test 45 failed";
  let expected_b6 = C1_0((unbox_unit ())) in
  mark_test_run 46;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b6 b6 in
  if not test then failwithf "test 46 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a6; b6 } = r in
  let expected_a6 = #100L in
  mark_test_run 47;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a6 a6 in
  if not test then failwithf "test 47 failed";
  let expected_b6 = C1_0((unbox_unit ())) in
  mark_test_run 48;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b6 b6 in
  if not test then failwithf "test 48 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t7 = { int32#; unit_u }   *)
  (*******************************)
  let r = stack_ { a7 = #0l; b7 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a7 *)
  let actual = r.a7 in
  let expected = #0l in
  mark_test_run 49;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 49 failed";
  (* Paths of depth 1 *)
  (* .b7 *)
  let actual = r.b7 in
  let expected = (unbox_unit ()) in
  mark_test_run 50;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 50 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a7 = a71; b7 = b71 } { a7 = a72; b7 = b72 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a71 a72 && (fun _ _ -> true) b71 b72) in
  let next_r = stack_ { a7 = #100l; b7 = (unbox_unit ()) } in
  let r_expected = stack_ { a7 = #0l; b7 = (unbox_unit ()) } in
  (* .a7 *)
  r.a7 <- next_r.a7;
  let r_expected = { r_expected with a7 = next_r.a7 } in
  mark_test_run 51;
  let test = eq r r_expected in
  if not test then failwithf "test 51 failed";
  Gc.compact ();
  (* .b7 *)
  r.b7 <- next_r.b7;
  let r_expected = { r_expected with b7 = next_r.b7 } in
  mark_test_run 52;
  let test = eq r r_expected in
  if not test then failwithf "test 52 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a7; b7 } = r in
  let expected_a7 = #100l in
  mark_test_run 53;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a7 a7 in
  if not test then failwithf "test 53 failed";
  let expected_b7 = (unbox_unit ()) in
  mark_test_run 54;
  let test = (fun _ _ -> true) expected_b7 b7 in
  if not test then failwithf "test 54 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a7; b7 } = r in
  let expected_a7 = #100l in
  mark_test_run 55;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a7 a7 in
  if not test then failwithf "test 55 failed";
  let expected_b7 = (unbox_unit ()) in
  mark_test_run 56;
  let test = (fun _ _ -> true) expected_b7 b7 in
  if not test then failwithf "test 56 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t8 = { int32#; (| unit_u) }   *)
  (***********************************)
  let r = stack_ { a8 = #0l; b8 = C1_0((unbox_unit ())) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a8 *)
  let actual = r.a8 in
  let expected = #0l in
  mark_test_run 57;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 57 failed";
  (* Paths of depth 1 *)
  (* .b8 *)
  let actual = r.b8 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 58;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 58 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a8 = a81; b8 = b81 } { a8 = a82; b8 = b82 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82 && (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) b81 b82) in
  let next_r = stack_ { a8 = #100l; b8 = C1_0((unbox_unit ())) } in
  let r_expected = stack_ { a8 = #0l; b8 = C1_0((unbox_unit ())) } in
  (* .a8 *)
  r.a8 <- next_r.a8;
  let r_expected = { r_expected with a8 = next_r.a8 } in
  mark_test_run 59;
  let test = eq r r_expected in
  if not test then failwithf "test 59 failed";
  Gc.compact ();
  (* .b8 *)
  r.b8 <- next_r.b8;
  let r_expected = { r_expected with b8 = next_r.b8 } in
  mark_test_run 60;
  let test = eq r r_expected in
  if not test then failwithf "test 60 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a8; b8 } = r in
  let expected_a8 = #100l in
  mark_test_run 61;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a8 a8 in
  if not test then failwithf "test 61 failed";
  let expected_b8 = C1_0((unbox_unit ())) in
  mark_test_run 62;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b8 b8 in
  if not test then failwithf "test 62 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a8; b8 } = r in
  let expected_a8 = #100l in
  mark_test_run 63;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a8 a8 in
  if not test then failwithf "test 63 failed";
  let expected_b8 = C1_0((unbox_unit ())) in
  mark_test_run 64;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b8 b8 in
  if not test then failwithf "test 64 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t9 = { nativeint#; unit_u }   *)
  (***********************************)
  let r = stack_ { a9 = #0n; b9 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a9 *)
  let actual = r.a9 in
  let expected = #0n in
  mark_test_run 65;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 65 failed";
  (* Paths of depth 1 *)
  (* .b9 *)
  let actual = r.b9 in
  let expected = (unbox_unit ()) in
  mark_test_run 66;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 66 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a9 = a91; b9 = b91 } { a9 = a92; b9 = b92 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a91 a92 && (fun _ _ -> true) b91 b92) in
  let next_r = stack_ { a9 = #100n; b9 = (unbox_unit ()) } in
  let r_expected = stack_ { a9 = #0n; b9 = (unbox_unit ()) } in
  (* .a9 *)
  r.a9 <- next_r.a9;
  let r_expected = { r_expected with a9 = next_r.a9 } in
  mark_test_run 67;
  let test = eq r r_expected in
  if not test then failwithf "test 67 failed";
  Gc.compact ();
  (* .b9 *)
  r.b9 <- next_r.b9;
  let r_expected = { r_expected with b9 = next_r.b9 } in
  mark_test_run 68;
  let test = eq r r_expected in
  if not test then failwithf "test 68 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a9; b9 } = r in
  let expected_a9 = #100n in
  mark_test_run 69;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a9 a9 in
  if not test then failwithf "test 69 failed";
  let expected_b9 = (unbox_unit ()) in
  mark_test_run 70;
  let test = (fun _ _ -> true) expected_b9 b9 in
  if not test then failwithf "test 70 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a9; b9 } = r in
  let expected_a9 = #100n in
  mark_test_run 71;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a9 a9 in
  if not test then failwithf "test 71 failed";
  let expected_b9 = (unbox_unit ()) in
  mark_test_run 72;
  let test = (fun _ _ -> true) expected_b9 b9 in
  if not test then failwithf "test 72 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t10 = { nativeint#; (| unit_u) }   *)
  (****************************************)
  let r = stack_ { a10 = #0n; b10 = C1_0((unbox_unit ())) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a10 *)
  let actual = r.a10 in
  let expected = #0n in
  mark_test_run 73;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 73 failed";
  (* Paths of depth 1 *)
  (* .b10 *)
  let actual = r.b10 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 74;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 74 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a10 = a101; b10 = b101 } { a10 = a102; b10 = b102 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a101 a102 && (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) b101 b102) in
  let next_r = stack_ { a10 = #100n; b10 = C1_0((unbox_unit ())) } in
  let r_expected = stack_ { a10 = #0n; b10 = C1_0((unbox_unit ())) } in
  (* .a10 *)
  r.a10 <- next_r.a10;
  let r_expected = { r_expected with a10 = next_r.a10 } in
  mark_test_run 75;
  let test = eq r r_expected in
  if not test then failwithf "test 75 failed";
  Gc.compact ();
  (* .b10 *)
  r.b10 <- next_r.b10;
  let r_expected = { r_expected with b10 = next_r.b10 } in
  mark_test_run 76;
  let test = eq r r_expected in
  if not test then failwithf "test 76 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a10; b10 } = r in
  let expected_a10 = #100n in
  mark_test_run 77;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a10 a10 in
  if not test then failwithf "test 77 failed";
  let expected_b10 = C1_0((unbox_unit ())) in
  mark_test_run 78;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b10 b10 in
  if not test then failwithf "test 78 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a10; b10 } = r in
  let expected_a10 = #100n in
  mark_test_run 79;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a10 a10 in
  if not test then failwithf "test 79 failed";
  let expected_b10 = C1_0((unbox_unit ())) in
  mark_test_run 80;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b10 b10 in
  if not test then failwithf "test 80 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*****************************)
  (*   t11 = { unit_u; int }   *)
  (*****************************)
  let r = stack_ { a11 = (unbox_unit ()); b11 = 0 } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a11 *)
  let actual = r.a11 in
  let expected = (unbox_unit ()) in
  mark_test_run 81;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 81 failed";
  (* Paths of depth 1 *)
  (* .b11 *)
  let actual = r.b11 in
  let expected = 0 in
  mark_test_run 82;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 82 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a11 = a111; b11 = b111 } { a11 = a112; b11 = b112 } -> (fun _ _ -> true) a111 a112 && (fun a b -> Int.equal a b) b111 b112) in
  let next_r = stack_ { a11 = (unbox_unit ()); b11 = 100 } in
  let r_expected = stack_ { a11 = (unbox_unit ()); b11 = 0 } in
  (* .a11 *)
  r.a11 <- next_r.a11;
  let r_expected = { r_expected with a11 = next_r.a11 } in
  mark_test_run 83;
  let test = eq r r_expected in
  if not test then failwithf "test 83 failed";
  Gc.compact ();
  (* .b11 *)
  r.b11 <- next_r.b11;
  let r_expected = { r_expected with b11 = next_r.b11 } in
  mark_test_run 84;
  let test = eq r r_expected in
  if not test then failwithf "test 84 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a11; b11 } = r in
  let expected_a11 = (unbox_unit ()) in
  mark_test_run 85;
  let test = (fun _ _ -> true) expected_a11 a11 in
  if not test then failwithf "test 85 failed";
  let expected_b11 = 100 in
  mark_test_run 86;
  let test = (fun a b -> Int.equal a b) expected_b11 b11 in
  if not test then failwithf "test 86 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a11; b11 } = r in
  let expected_a11 = (unbox_unit ()) in
  mark_test_run 87;
  let test = (fun _ _ -> true) expected_a11 a11 in
  if not test then failwithf "test 87 failed";
  let expected_b11 = 100 in
  mark_test_run 88;
  let test = (fun a b -> Int.equal a b) expected_b11 b11 in
  if not test then failwithf "test 88 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t12 = { unit_u; int64 }   *)
  (*******************************)
  let r = stack_ { a12 = (unbox_unit ()); b12 = 0L } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a12 *)
  let actual = r.a12 in
  let expected = (unbox_unit ()) in
  mark_test_run 89;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 89 failed";
  (* Paths of depth 1 *)
  (* .b12 *)
  let actual = r.b12 in
  let expected = 0L in
  mark_test_run 90;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 90 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a12 = a121; b12 = b121 } { a12 = a122; b12 = b122 } -> (fun _ _ -> true) a121 a122 && (fun a b -> Int64.equal (globalize a) (globalize b)) b121 b122) in
  let next_r = stack_ { a12 = (unbox_unit ()); b12 = 100L } in
  let r_expected = stack_ { a12 = (unbox_unit ()); b12 = 0L } in
  (* .a12 *)
  r.a12 <- next_r.a12;
  let r_expected = { r_expected with a12 = next_r.a12 } in
  mark_test_run 91;
  let test = eq r r_expected in
  if not test then failwithf "test 91 failed";
  Gc.compact ();
  (* .b12 *)
  r.b12 <- next_r.b12;
  let r_expected = { r_expected with b12 = next_r.b12 } in
  mark_test_run 92;
  let test = eq r r_expected in
  if not test then failwithf "test 92 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a12; b12 } = r in
  let expected_a12 = (unbox_unit ()) in
  mark_test_run 93;
  let test = (fun _ _ -> true) expected_a12 a12 in
  if not test then failwithf "test 93 failed";
  let expected_b12 = 100L in
  mark_test_run 94;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b12 b12 in
  if not test then failwithf "test 94 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a12; b12 } = r in
  let expected_a12 = (unbox_unit ()) in
  mark_test_run 95;
  let test = (fun _ _ -> true) expected_a12 a12 in
  if not test then failwithf "test 95 failed";
  let expected_b12 = 100L in
  mark_test_run 96;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b12 b12 in
  if not test then failwithf "test 96 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************)
  (*   t13 = { unit_u; int64# }   *)
  (********************************)
  let r = stack_ { a13 = (unbox_unit ()); b13 = #0L } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a13 *)
  let actual = r.a13 in
  let expected = (unbox_unit ()) in
  mark_test_run 97;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 97 failed";
  (* Paths of depth 1 *)
  (* .b13 *)
  let actual = r.b13 in
  let expected = #0L in
  mark_test_run 98;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 98 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a13 = a131; b13 = b131 } { a13 = a132; b13 = b132 } -> (fun _ _ -> true) a131 a132 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b131 b132) in
  let next_r = stack_ { a13 = (unbox_unit ()); b13 = #100L } in
  let r_expected = stack_ { a13 = (unbox_unit ()); b13 = #0L } in
  (* .a13 *)
  r.a13 <- next_r.a13;
  let r_expected = { r_expected with a13 = next_r.a13 } in
  mark_test_run 99;
  let test = eq r r_expected in
  if not test then failwithf "test 99 failed";
  Gc.compact ();
  (* .b13 *)
  r.b13 <- next_r.b13;
  let r_expected = { r_expected with b13 = next_r.b13 } in
  mark_test_run 100;
  let test = eq r r_expected in
  if not test then failwithf "test 100 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a13; b13 } = r in
  let expected_a13 = (unbox_unit ()) in
  mark_test_run 101;
  let test = (fun _ _ -> true) expected_a13 a13 in
  if not test then failwithf "test 101 failed";
  let expected_b13 = #100L in
  mark_test_run 102;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b13 b13 in
  if not test then failwithf "test 102 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a13; b13 } = r in
  let expected_a13 = (unbox_unit ()) in
  mark_test_run 103;
  let test = (fun _ _ -> true) expected_a13 a13 in
  if not test then failwithf "test 103 failed";
  let expected_b13 = #100L in
  mark_test_run 104;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b13 b13 in
  if not test then failwithf "test 104 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************)
  (*   t14 = { unit_u; int32# }   *)
  (********************************)
  let r = stack_ { a14 = (unbox_unit ()); b14 = #0l } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a14 *)
  let actual = r.a14 in
  let expected = (unbox_unit ()) in
  mark_test_run 105;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 105 failed";
  (* Paths of depth 1 *)
  (* .b14 *)
  let actual = r.b14 in
  let expected = #0l in
  mark_test_run 106;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 106 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a14 = a141; b14 = b141 } { a14 = a142; b14 = b142 } -> (fun _ _ -> true) a141 a142 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b141 b142) in
  let next_r = stack_ { a14 = (unbox_unit ()); b14 = #100l } in
  let r_expected = stack_ { a14 = (unbox_unit ()); b14 = #0l } in
  (* .a14 *)
  r.a14 <- next_r.a14;
  let r_expected = { r_expected with a14 = next_r.a14 } in
  mark_test_run 107;
  let test = eq r r_expected in
  if not test then failwithf "test 107 failed";
  Gc.compact ();
  (* .b14 *)
  r.b14 <- next_r.b14;
  let r_expected = { r_expected with b14 = next_r.b14 } in
  mark_test_run 108;
  let test = eq r r_expected in
  if not test then failwithf "test 108 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a14; b14 } = r in
  let expected_a14 = (unbox_unit ()) in
  mark_test_run 109;
  let test = (fun _ _ -> true) expected_a14 a14 in
  if not test then failwithf "test 109 failed";
  let expected_b14 = #100l in
  mark_test_run 110;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b14 b14 in
  if not test then failwithf "test 110 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a14; b14 } = r in
  let expected_a14 = (unbox_unit ()) in
  mark_test_run 111;
  let test = (fun _ _ -> true) expected_a14 a14 in
  if not test then failwithf "test 111 failed";
  let expected_b14 = #100l in
  mark_test_run 112;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b14 b14 in
  if not test then failwithf "test 112 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t15 = { unit_u; nativeint# }   *)
  (************************************)
  let r = stack_ { a15 = (unbox_unit ()); b15 = #0n } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a15 *)
  let actual = r.a15 in
  let expected = (unbox_unit ()) in
  mark_test_run 113;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 113 failed";
  (* Paths of depth 1 *)
  (* .b15 *)
  let actual = r.b15 in
  let expected = #0n in
  mark_test_run 114;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 114 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a15 = a151; b15 = b151 } { a15 = a152; b15 = b152 } -> (fun _ _ -> true) a151 a152 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b151 b152) in
  let next_r = stack_ { a15 = (unbox_unit ()); b15 = #100n } in
  let r_expected = stack_ { a15 = (unbox_unit ()); b15 = #0n } in
  (* .a15 *)
  r.a15 <- next_r.a15;
  let r_expected = { r_expected with a15 = next_r.a15 } in
  mark_test_run 115;
  let test = eq r r_expected in
  if not test then failwithf "test 115 failed";
  Gc.compact ();
  (* .b15 *)
  r.b15 <- next_r.b15;
  let r_expected = { r_expected with b15 = next_r.b15 } in
  mark_test_run 116;
  let test = eq r r_expected in
  if not test then failwithf "test 116 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a15; b15 } = r in
  let expected_a15 = (unbox_unit ()) in
  mark_test_run 117;
  let test = (fun _ _ -> true) expected_a15 a15 in
  if not test then failwithf "test 117 failed";
  let expected_b15 = #100n in
  mark_test_run 118;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b15 b15 in
  if not test then failwithf "test 118 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a15; b15 } = r in
  let expected_a15 = (unbox_unit ()) in
  mark_test_run 119;
  let test = (fun _ _ -> true) expected_a15 a15 in
  if not test then failwithf "test 119 failed";
  let expected_b15 = #100n in
  mark_test_run 120;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b15 b15 in
  if not test then failwithf "test 120 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t16 = { unit_u; unit_u; string }   *)
  (****************************************)
  let r = stack_ { a16 = (unbox_unit ()); b16 = (unbox_unit ()); c16 = "0" } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a16 *)
  let actual = r.a16 in
  let expected = (unbox_unit ()) in
  mark_test_run 121;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 121 failed";
  (* Paths of depth 1 *)
  (* .b16 *)
  let actual = r.b16 in
  let expected = (unbox_unit ()) in
  mark_test_run 122;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 122 failed";
  (* Paths of depth 1 *)
  (* .c16 *)
  let actual = r.c16 in
  let expected = "0" in
  mark_test_run 123;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 123 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a16 = a161; b16 = b161; c16 = c161 } { a16 = a162; b16 = b162; c16 = c162 } -> (fun _ _ -> true) a161 a162 && (fun _ _ -> true) b161 b162 && (fun a b -> String.equal (globalize a) (globalize b)) c161 c162) in
  let next_r = stack_ { a16 = (unbox_unit ()); b16 = (unbox_unit ()); c16 = "100" } in
  let r_expected = stack_ { a16 = (unbox_unit ()); b16 = (unbox_unit ()); c16 = "0" } in
  (* .a16 *)
  r.a16 <- next_r.a16;
  let r_expected = { r_expected with a16 = next_r.a16 } in
  mark_test_run 124;
  let test = eq r r_expected in
  if not test then failwithf "test 124 failed";
  Gc.compact ();
  (* .b16 *)
  r.b16 <- next_r.b16;
  let r_expected = { r_expected with b16 = next_r.b16 } in
  mark_test_run 125;
  let test = eq r r_expected in
  if not test then failwithf "test 125 failed";
  Gc.compact ();
  (* .c16 *)
  r.c16 <- next_r.c16;
  let r_expected = { r_expected with c16 = next_r.c16 } in
  mark_test_run 126;
  let test = eq r r_expected in
  if not test then failwithf "test 126 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a16; b16; c16 } = r in
  let expected_a16 = (unbox_unit ()) in
  mark_test_run 127;
  let test = (fun _ _ -> true) expected_a16 a16 in
  if not test then failwithf "test 127 failed";
  let expected_b16 = (unbox_unit ()) in
  mark_test_run 128;
  let test = (fun _ _ -> true) expected_b16 b16 in
  if not test then failwithf "test 128 failed";
  let expected_c16 = "100" in
  mark_test_run 129;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c16 c16 in
  if not test then failwithf "test 129 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a16; b16; c16 } = r in
  let expected_a16 = (unbox_unit ()) in
  mark_test_run 130;
  let test = (fun _ _ -> true) expected_a16 a16 in
  if not test then failwithf "test 130 failed";
  let expected_b16 = (unbox_unit ()) in
  mark_test_run 131;
  let test = (fun _ _ -> true) expected_b16 b16 in
  if not test then failwithf "test 131 failed";
  let expected_c16 = "100" in
  mark_test_run 132;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c16 c16 in
  if not test then failwithf "test 132 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t17 = { unit_u; float }   *)
  (*******************************)
  let r = stack_ { a17 = (unbox_unit ()); b17 = 0. } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a17 *)
  let actual = r.a17 in
  let expected = (unbox_unit ()) in
  mark_test_run 133;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 133 failed";
  (* Paths of depth 1 *)
  (* .b17 *)
  let actual = r.b17 in
  let expected = 0. in
  mark_test_run 134;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 134 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a17 = a171; b17 = b171 } { a17 = a172; b17 = b172 } -> (fun _ _ -> true) a171 a172 && (fun a b -> Float.equal (globalize a) (globalize b)) b171 b172) in
  let next_r = stack_ { a17 = (unbox_unit ()); b17 = 100. } in
  let r_expected = stack_ { a17 = (unbox_unit ()); b17 = 0. } in
  (* .a17 *)
  r.a17 <- next_r.a17;
  let r_expected = { r_expected with a17 = next_r.a17 } in
  mark_test_run 135;
  let test = eq r r_expected in
  if not test then failwithf "test 135 failed";
  Gc.compact ();
  (* .b17 *)
  r.b17 <- next_r.b17;
  let r_expected = { r_expected with b17 = next_r.b17 } in
  mark_test_run 136;
  let test = eq r r_expected in
  if not test then failwithf "test 136 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a17; b17 } = r in
  let expected_a17 = (unbox_unit ()) in
  mark_test_run 137;
  let test = (fun _ _ -> true) expected_a17 a17 in
  if not test then failwithf "test 137 failed";
  let expected_b17 = 100. in
  mark_test_run 138;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b17 b17 in
  if not test then failwithf "test 138 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a17; b17 } = r in
  let expected_a17 = (unbox_unit ()) in
  mark_test_run 139;
  let test = (fun _ _ -> true) expected_a17 a17 in
  if not test then failwithf "test 139 failed";
  let expected_b17 = 100. in
  mark_test_run 140;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b17 b17 in
  if not test then failwithf "test 140 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************)
  (*   t18 = { unit_u; string }   *)
  (********************************)
  let r = stack_ { a18 = (unbox_unit ()); b18 = "0" } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a18 *)
  let actual = r.a18 in
  let expected = (unbox_unit ()) in
  mark_test_run 141;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 141 failed";
  (* Paths of depth 1 *)
  (* .b18 *)
  let actual = r.b18 in
  let expected = "0" in
  mark_test_run 142;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 142 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a18 = a181; b18 = b181 } { a18 = a182; b18 = b182 } -> (fun _ _ -> true) a181 a182 && (fun a b -> String.equal (globalize a) (globalize b)) b181 b182) in
  let next_r = stack_ { a18 = (unbox_unit ()); b18 = "100" } in
  let r_expected = stack_ { a18 = (unbox_unit ()); b18 = "0" } in
  (* .a18 *)
  r.a18 <- next_r.a18;
  let r_expected = { r_expected with a18 = next_r.a18 } in
  mark_test_run 143;
  let test = eq r r_expected in
  if not test then failwithf "test 143 failed";
  Gc.compact ();
  (* .b18 *)
  r.b18 <- next_r.b18;
  let r_expected = { r_expected with b18 = next_r.b18 } in
  mark_test_run 144;
  let test = eq r r_expected in
  if not test then failwithf "test 144 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a18; b18 } = r in
  let expected_a18 = (unbox_unit ()) in
  mark_test_run 145;
  let test = (fun _ _ -> true) expected_a18 a18 in
  if not test then failwithf "test 145 failed";
  let expected_b18 = "100" in
  mark_test_run 146;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b18 b18 in
  if not test then failwithf "test 146 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a18; b18 } = r in
  let expected_a18 = (unbox_unit ()) in
  mark_test_run 147;
  let test = (fun _ _ -> true) expected_a18 a18 in
  if not test then failwithf "test 147 failed";
  let expected_b18 = "100" in
  mark_test_run 148;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b18 b18 in
  if not test then failwithf "test 148 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t19 = { unit_u; string; unit_u }   *)
  (****************************************)
  let r = stack_ { a19 = (unbox_unit ()); b19 = "0"; c19 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a19 *)
  let actual = r.a19 in
  let expected = (unbox_unit ()) in
  mark_test_run 149;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 149 failed";
  (* Paths of depth 1 *)
  (* .b19 *)
  let actual = r.b19 in
  let expected = "0" in
  mark_test_run 150;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 150 failed";
  (* Paths of depth 1 *)
  (* .c19 *)
  let actual = r.c19 in
  let expected = (unbox_unit ()) in
  mark_test_run 151;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 151 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a19 = a191; b19 = b191; c19 = c191 } { a19 = a192; b19 = b192; c19 = c192 } -> (fun _ _ -> true) a191 a192 && (fun a b -> String.equal (globalize a) (globalize b)) b191 b192 && (fun _ _ -> true) c191 c192) in
  let next_r = stack_ { a19 = (unbox_unit ()); b19 = "100"; c19 = (unbox_unit ()) } in
  let r_expected = stack_ { a19 = (unbox_unit ()); b19 = "0"; c19 = (unbox_unit ()) } in
  (* .a19 *)
  r.a19 <- next_r.a19;
  let r_expected = { r_expected with a19 = next_r.a19 } in
  mark_test_run 152;
  let test = eq r r_expected in
  if not test then failwithf "test 152 failed";
  Gc.compact ();
  (* .b19 *)
  r.b19 <- next_r.b19;
  let r_expected = { r_expected with b19 = next_r.b19 } in
  mark_test_run 153;
  let test = eq r r_expected in
  if not test then failwithf "test 153 failed";
  Gc.compact ();
  (* .c19 *)
  r.c19 <- next_r.c19;
  let r_expected = { r_expected with c19 = next_r.c19 } in
  mark_test_run 154;
  let test = eq r r_expected in
  if not test then failwithf "test 154 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a19; b19; c19 } = r in
  let expected_a19 = (unbox_unit ()) in
  mark_test_run 155;
  let test = (fun _ _ -> true) expected_a19 a19 in
  if not test then failwithf "test 155 failed";
  let expected_b19 = "100" in
  mark_test_run 156;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b19 b19 in
  if not test then failwithf "test 156 failed";
  let expected_c19 = (unbox_unit ()) in
  mark_test_run 157;
  let test = (fun _ _ -> true) expected_c19 c19 in
  if not test then failwithf "test 157 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a19; b19; c19 } = r in
  let expected_a19 = (unbox_unit ()) in
  mark_test_run 158;
  let test = (fun _ _ -> true) expected_a19 a19 in
  if not test then failwithf "test 158 failed";
  let expected_b19 = "100" in
  mark_test_run 159;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b19 b19 in
  if not test then failwithf "test 159 failed";
  let expected_c19 = (unbox_unit ()) in
  mark_test_run 160;
  let test = (fun _ _ -> true) expected_c19 c19 in
  if not test then failwithf "test 160 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t20 = { unit_u; string; string }   *)
  (****************************************)
  let r = stack_ { a20 = (unbox_unit ()); b20 = "0"; c20 = "1" } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a20 *)
  let actual = r.a20 in
  let expected = (unbox_unit ()) in
  mark_test_run 161;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 161 failed";
  (* Paths of depth 1 *)
  (* .b20 *)
  let actual = r.b20 in
  let expected = "0" in
  mark_test_run 162;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 162 failed";
  (* Paths of depth 1 *)
  (* .c20 *)
  let actual = r.c20 in
  let expected = "1" in
  mark_test_run 163;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 163 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a20 = a201; b20 = b201; c20 = c201 } { a20 = a202; b20 = b202; c20 = c202 } -> (fun _ _ -> true) a201 a202 && (fun a b -> String.equal (globalize a) (globalize b)) b201 b202 && (fun a b -> String.equal (globalize a) (globalize b)) c201 c202) in
  let next_r = stack_ { a20 = (unbox_unit ()); b20 = "100"; c20 = "101" } in
  let r_expected = stack_ { a20 = (unbox_unit ()); b20 = "0"; c20 = "1" } in
  (* .a20 *)
  r.a20 <- next_r.a20;
  let r_expected = { r_expected with a20 = next_r.a20 } in
  mark_test_run 164;
  let test = eq r r_expected in
  if not test then failwithf "test 164 failed";
  Gc.compact ();
  (* .b20 *)
  r.b20 <- next_r.b20;
  let r_expected = { r_expected with b20 = next_r.b20 } in
  mark_test_run 165;
  let test = eq r r_expected in
  if not test then failwithf "test 165 failed";
  Gc.compact ();
  (* .c20 *)
  r.c20 <- next_r.c20;
  let r_expected = { r_expected with c20 = next_r.c20 } in
  mark_test_run 166;
  let test = eq r r_expected in
  if not test then failwithf "test 166 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a20; b20; c20 } = r in
  let expected_a20 = (unbox_unit ()) in
  mark_test_run 167;
  let test = (fun _ _ -> true) expected_a20 a20 in
  if not test then failwithf "test 167 failed";
  let expected_b20 = "100" in
  mark_test_run 168;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 168 failed";
  let expected_c20 = "101" in
  mark_test_run 169;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c20 c20 in
  if not test then failwithf "test 169 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a20; b20; c20 } = r in
  let expected_a20 = (unbox_unit ()) in
  mark_test_run 170;
  let test = (fun _ _ -> true) expected_a20 a20 in
  if not test then failwithf "test 170 failed";
  let expected_b20 = "100" in
  mark_test_run 171;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 171 failed";
  let expected_c20 = "101" in
  mark_test_run 172;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c20 c20 in
  if not test then failwithf "test 172 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t21 = { unit_u; (| unit_u) }   *)
  (************************************)
  let r = stack_ { a21 = (unbox_unit ()); b21 = C1_0((unbox_unit ())) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a21 *)
  let actual = r.a21 in
  let expected = (unbox_unit ()) in
  mark_test_run 173;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 173 failed";
  (* Paths of depth 1 *)
  (* .b21 *)
  let actual = r.b21 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 174;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 174 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a21 = a211; b21 = b211 } { a21 = a212; b21 = b212 } -> (fun _ _ -> true) a211 a212 && (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) b211 b212) in
  let next_r = stack_ { a21 = (unbox_unit ()); b21 = C1_0((unbox_unit ())) } in
  let r_expected = stack_ { a21 = (unbox_unit ()); b21 = C1_0((unbox_unit ())) } in
  (* .a21 *)
  r.a21 <- next_r.a21;
  let r_expected = { r_expected with a21 = next_r.a21 } in
  mark_test_run 175;
  let test = eq r r_expected in
  if not test then failwithf "test 175 failed";
  Gc.compact ();
  (* .b21 *)
  r.b21 <- next_r.b21;
  let r_expected = { r_expected with b21 = next_r.b21 } in
  mark_test_run 176;
  let test = eq r r_expected in
  if not test then failwithf "test 176 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a21; b21 } = r in
  let expected_a21 = (unbox_unit ()) in
  mark_test_run 177;
  let test = (fun _ _ -> true) expected_a21 a21 in
  if not test then failwithf "test 177 failed";
  let expected_b21 = C1_0((unbox_unit ())) in
  mark_test_run 178;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b21 b21 in
  if not test then failwithf "test 178 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a21; b21 } = r in
  let expected_a21 = (unbox_unit ()) in
  mark_test_run 179;
  let test = (fun _ _ -> true) expected_a21 a21 in
  if not test then failwithf "test 179 failed";
  let expected_b21 = C1_0((unbox_unit ())) in
  mark_test_run 180;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b21 b21 in
  if not test then failwithf "test 180 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t23 = { unit_u; #{ unit_u; string } }   *)
  (*********************************************)
  let r = stack_ { a23 = (unbox_unit ()); b23 = #{ a22 = (unbox_unit ()); b22 = "0" } } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a23 *)
  let actual = r.a23 in
  let expected = (unbox_unit ()) in
  mark_test_run 181;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 181 failed";
  (* Paths of depth 1 *)
  (* .b23 *)
  let actual = r.b23 in
  let expected = #{ a22 = (unbox_unit ()); b22 = "0" } in
  mark_test_run 182;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) actual expected in
  if not test then failwithf "test 182 failed";
  (* Paths of depth 2 *)
  (* .b23.#a22 *)
  let actual = r.b23.#a22 in
  let expected = (unbox_unit ()) in
  mark_test_run 183;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 183 failed";
  (* .b23.#b22 *)
  let actual = r.b23.#b22 in
  let expected = "0" in
  mark_test_run 184;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 184 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a23 = a231; b23 = b231 } { a23 = a232; b23 = b232 } -> (fun _ _ -> true) a231 a232 && (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) b231 b232) in
  let next_r = stack_ { a23 = (unbox_unit ()); b23 = #{ a22 = (unbox_unit ()); b22 = "100" } } in
  let r_expected = stack_ { a23 = (unbox_unit ()); b23 = #{ a22 = (unbox_unit ()); b22 = "0" } } in
  (* .a23 *)
  r.a23 <- next_r.a23;
  let r_expected = { r_expected with a23 = next_r.a23 } in
  mark_test_run 185;
  let test = eq r r_expected in
  if not test then failwithf "test 185 failed";
  Gc.compact ();
  (* .b23 *)
  r.b23 <- next_r.b23;
  let r_expected = { r_expected with b23 = next_r.b23 } in
  mark_test_run 186;
  let test = eq r r_expected in
  if not test then failwithf "test 186 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a23; b23 = #{ a22; b22 } } = r in
  let expected_a23 = (unbox_unit ()) in
  mark_test_run 187;
  let test = (fun _ _ -> true) expected_a23 a23 in
  if not test then failwithf "test 187 failed";
  let expected_a22 = (unbox_unit ()) in
  mark_test_run 188;
  let test = (fun _ _ -> true) expected_a22 a22 in
  if not test then failwithf "test 188 failed";
  let expected_b22 = "100" in
  mark_test_run 189;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b22 b22 in
  if not test then failwithf "test 189 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a23; b23 } = r in
  let expected_a23 = (unbox_unit ()) in
  mark_test_run 190;
  let test = (fun _ _ -> true) expected_a23 a23 in
  if not test then failwithf "test 190 failed";
  let expected_b23 = #{ a22 = (unbox_unit ()); b22 = "100" } in
  mark_test_run 191;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) expected_b23 b23 in
  if not test then failwithf "test 191 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t25 = { unit_u; #{ string } }   *)
  (*************************************)
  let r = stack_ { a25 = (unbox_unit ()); b25 = #{ a24 = "0" } } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a25 *)
  let actual = r.a25 in
  let expected = (unbox_unit ()) in
  mark_test_run 192;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 192 failed";
  (* Paths of depth 1 *)
  (* .b25 *)
  let actual = r.b25 in
  let expected = #{ a24 = "0" } in
  mark_test_run 193;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> String.equal (globalize a) (globalize b)) a241 a242) actual expected in
  if not test then failwithf "test 193 failed";
  (* Paths of depth 2 *)
  (* .b25.#a24 *)
  let actual = r.b25.#a24 in
  let expected = "0" in
  mark_test_run 194;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 194 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a25 = a251; b25 = b251 } { a25 = a252; b25 = b252 } -> (fun _ _ -> true) a251 a252 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> String.equal (globalize a) (globalize b)) a241 a242) b251 b252) in
  let next_r = stack_ { a25 = (unbox_unit ()); b25 = #{ a24 = "100" } } in
  let r_expected = stack_ { a25 = (unbox_unit ()); b25 = #{ a24 = "0" } } in
  (* .a25 *)
  r.a25 <- next_r.a25;
  let r_expected = { r_expected with a25 = next_r.a25 } in
  mark_test_run 195;
  let test = eq r r_expected in
  if not test then failwithf "test 195 failed";
  Gc.compact ();
  (* .b25 *)
  r.b25 <- next_r.b25;
  let r_expected = { r_expected with b25 = next_r.b25 } in
  mark_test_run 196;
  let test = eq r r_expected in
  if not test then failwithf "test 196 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a25; b25 = #{ a24 } } = r in
  let expected_a25 = (unbox_unit ()) in
  mark_test_run 197;
  let test = (fun _ _ -> true) expected_a25 a25 in
  if not test then failwithf "test 197 failed";
  let expected_a24 = "100" in
  mark_test_run 198;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a24 a24 in
  if not test then failwithf "test 198 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a25; b25 } = r in
  let expected_a25 = (unbox_unit ()) in
  mark_test_run 199;
  let test = (fun _ _ -> true) expected_a25 a25 in
  if not test then failwithf "test 199 failed";
  let expected_b25 = #{ a24 = "100" } in
  mark_test_run 200;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> String.equal (globalize a) (globalize b)) a241 a242) expected_b25 b25 in
  if not test then failwithf "test 200 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t27 = { unit_u; #{ string; unit_u } }   *)
  (*********************************************)
  let r = stack_ { a27 = (unbox_unit ()); b27 = #{ a26 = "0"; b26 = (unbox_unit ()) } } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a27 *)
  let actual = r.a27 in
  let expected = (unbox_unit ()) in
  mark_test_run 201;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 201 failed";
  (* Paths of depth 1 *)
  (* .b27 *)
  let actual = r.b27 in
  let expected = #{ a26 = "0"; b26 = (unbox_unit ()) } in
  mark_test_run 202;
  let test = (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) actual expected in
  if not test then failwithf "test 202 failed";
  (* Paths of depth 2 *)
  (* .b27.#a26 *)
  let actual = r.b27.#a26 in
  let expected = "0" in
  mark_test_run 203;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 203 failed";
  (* .b27.#b26 *)
  let actual = r.b27.#b26 in
  let expected = (unbox_unit ()) in
  mark_test_run 204;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 204 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a27 = a271; b27 = b271 } { a27 = a272; b27 = b272 } -> (fun _ _ -> true) a271 a272 && (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) b271 b272) in
  let next_r = stack_ { a27 = (unbox_unit ()); b27 = #{ a26 = "100"; b26 = (unbox_unit ()) } } in
  let r_expected = stack_ { a27 = (unbox_unit ()); b27 = #{ a26 = "0"; b26 = (unbox_unit ()) } } in
  (* .a27 *)
  r.a27 <- next_r.a27;
  let r_expected = { r_expected with a27 = next_r.a27 } in
  mark_test_run 205;
  let test = eq r r_expected in
  if not test then failwithf "test 205 failed";
  Gc.compact ();
  (* .b27 *)
  r.b27 <- next_r.b27;
  let r_expected = { r_expected with b27 = next_r.b27 } in
  mark_test_run 206;
  let test = eq r r_expected in
  if not test then failwithf "test 206 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a27; b27 = #{ a26; b26 } } = r in
  let expected_a27 = (unbox_unit ()) in
  mark_test_run 207;
  let test = (fun _ _ -> true) expected_a27 a27 in
  if not test then failwithf "test 207 failed";
  let expected_a26 = "100" in
  mark_test_run 208;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a26 a26 in
  if not test then failwithf "test 208 failed";
  let expected_b26 = (unbox_unit ()) in
  mark_test_run 209;
  let test = (fun _ _ -> true) expected_b26 b26 in
  if not test then failwithf "test 209 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a27; b27 } = r in
  let expected_a27 = (unbox_unit ()) in
  mark_test_run 210;
  let test = (fun _ _ -> true) expected_a27 a27 in
  if not test then failwithf "test 210 failed";
  let expected_b27 = #{ a26 = "100"; b26 = (unbox_unit ()) } in
  mark_test_run 211;
  let test = (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) expected_b27 b27 in
  if not test then failwithf "test 211 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t29 = { unit_u; #{ string; string } }   *)
  (*********************************************)
  let r = stack_ { a29 = (unbox_unit ()); b29 = #{ a28 = "0"; b28 = "1" } } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a29 *)
  let actual = r.a29 in
  let expected = (unbox_unit ()) in
  mark_test_run 212;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 212 failed";
  (* Paths of depth 1 *)
  (* .b29 *)
  let actual = r.b29 in
  let expected = #{ a28 = "0"; b28 = "1" } in
  mark_test_run 213;
  let test = (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> String.equal (globalize a) (globalize b)) a281 a282 && (fun a b -> String.equal (globalize a) (globalize b)) b281 b282) actual expected in
  if not test then failwithf "test 213 failed";
  (* Paths of depth 2 *)
  (* .b29.#a28 *)
  let actual = r.b29.#a28 in
  let expected = "0" in
  mark_test_run 214;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 214 failed";
  (* .b29.#b28 *)
  let actual = r.b29.#b28 in
  let expected = "1" in
  mark_test_run 215;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 215 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a29 = a291; b29 = b291 } { a29 = a292; b29 = b292 } -> (fun _ _ -> true) a291 a292 && (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> String.equal (globalize a) (globalize b)) a281 a282 && (fun a b -> String.equal (globalize a) (globalize b)) b281 b282) b291 b292) in
  let next_r = stack_ { a29 = (unbox_unit ()); b29 = #{ a28 = "100"; b28 = "101" } } in
  let r_expected = stack_ { a29 = (unbox_unit ()); b29 = #{ a28 = "0"; b28 = "1" } } in
  (* .a29 *)
  r.a29 <- next_r.a29;
  let r_expected = { r_expected with a29 = next_r.a29 } in
  mark_test_run 216;
  let test = eq r r_expected in
  if not test then failwithf "test 216 failed";
  Gc.compact ();
  (* .b29 *)
  r.b29 <- next_r.b29;
  let r_expected = { r_expected with b29 = next_r.b29 } in
  mark_test_run 217;
  let test = eq r r_expected in
  if not test then failwithf "test 217 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a29; b29 = #{ a28; b28 } } = r in
  let expected_a29 = (unbox_unit ()) in
  mark_test_run 218;
  let test = (fun _ _ -> true) expected_a29 a29 in
  if not test then failwithf "test 218 failed";
  let expected_a28 = "100" in
  mark_test_run 219;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a28 a28 in
  if not test then failwithf "test 219 failed";
  let expected_b28 = "101" in
  mark_test_run 220;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b28 b28 in
  if not test then failwithf "test 220 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a29; b29 } = r in
  let expected_a29 = (unbox_unit ()) in
  mark_test_run 221;
  let test = (fun _ _ -> true) expected_a29 a29 in
  if not test then failwithf "test 221 failed";
  let expected_b29 = #{ a28 = "100"; b28 = "101" } in
  mark_test_run 222;
  let test = (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> String.equal (globalize a) (globalize b)) a281 a282 && (fun a b -> String.equal (globalize a) (globalize b)) b281 b282) expected_b29 b29 in
  if not test then failwithf "test 222 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t30 = { float; unit_u }   *)
  (*******************************)
  let r = stack_ { a30 = 0.; b30 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a30 *)
  let actual = r.a30 in
  let expected = 0. in
  mark_test_run 223;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 223 failed";
  (* Paths of depth 1 *)
  (* .b30 *)
  let actual = r.b30 in
  let expected = (unbox_unit ()) in
  mark_test_run 224;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 224 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a30 = a301; b30 = b301 } { a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun _ _ -> true) b301 b302) in
  let next_r = stack_ { a30 = 100.; b30 = (unbox_unit ()) } in
  let r_expected = stack_ { a30 = 0.; b30 = (unbox_unit ()) } in
  (* .a30 *)
  r.a30 <- next_r.a30;
  let r_expected = { r_expected with a30 = next_r.a30 } in
  mark_test_run 225;
  let test = eq r r_expected in
  if not test then failwithf "test 225 failed";
  Gc.compact ();
  (* .b30 *)
  r.b30 <- next_r.b30;
  let r_expected = { r_expected with b30 = next_r.b30 } in
  mark_test_run 226;
  let test = eq r r_expected in
  if not test then failwithf "test 226 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a30; b30 } = r in
  let expected_a30 = 100. in
  mark_test_run 227;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a30 a30 in
  if not test then failwithf "test 227 failed";
  let expected_b30 = (unbox_unit ()) in
  mark_test_run 228;
  let test = (fun _ _ -> true) expected_b30 b30 in
  if not test then failwithf "test 228 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a30; b30 } = r in
  let expected_a30 = 100. in
  mark_test_run 229;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a30 a30 in
  if not test then failwithf "test 229 failed";
  let expected_b30 = (unbox_unit ()) in
  mark_test_run 230;
  let test = (fun _ _ -> true) expected_b30 b30 in
  if not test then failwithf "test 230 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t31 = { float; (| unit_u) }   *)
  (***********************************)
  let r = stack_ { a31 = 0.; b31 = C1_0((unbox_unit ())) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a31 *)
  let actual = r.a31 in
  let expected = 0. in
  mark_test_run 231;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 231 failed";
  (* Paths of depth 1 *)
  (* .b31 *)
  let actual = r.b31 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 232;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 232 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a31 = a311; b31 = b311 } { a31 = a312; b31 = b312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a311 a312 && (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) b311 b312) in
  let next_r = stack_ { a31 = 100.; b31 = C1_0((unbox_unit ())) } in
  let r_expected = stack_ { a31 = 0.; b31 = C1_0((unbox_unit ())) } in
  (* .a31 *)
  r.a31 <- next_r.a31;
  let r_expected = { r_expected with a31 = next_r.a31 } in
  mark_test_run 233;
  let test = eq r r_expected in
  if not test then failwithf "test 233 failed";
  Gc.compact ();
  (* .b31 *)
  r.b31 <- next_r.b31;
  let r_expected = { r_expected with b31 = next_r.b31 } in
  mark_test_run 234;
  let test = eq r r_expected in
  if not test then failwithf "test 234 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a31; b31 } = r in
  let expected_a31 = 100. in
  mark_test_run 235;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a31 a31 in
  if not test then failwithf "test 235 failed";
  let expected_b31 = C1_0((unbox_unit ())) in
  mark_test_run 236;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b31 b31 in
  if not test then failwithf "test 236 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a31; b31 } = r in
  let expected_a31 = 100. in
  mark_test_run 237;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a31 a31 in
  if not test then failwithf "test 237 failed";
  let expected_b31 = C1_0((unbox_unit ())) in
  mark_test_run 238;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b31 b31 in
  if not test then failwithf "test 238 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************)
  (*   t32 = { string; unit_u }   *)
  (********************************)
  let r = stack_ { a32 = "0"; b32 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a32 *)
  let actual = r.a32 in
  let expected = "0" in
  mark_test_run 239;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 239 failed";
  (* Paths of depth 1 *)
  (* .b32 *)
  let actual = r.b32 in
  let expected = (unbox_unit ()) in
  mark_test_run 240;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 240 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a32 = a321; b32 = b321 } { a32 = a322; b32 = b322 } -> (fun a b -> String.equal (globalize a) (globalize b)) a321 a322 && (fun _ _ -> true) b321 b322) in
  let next_r = stack_ { a32 = "100"; b32 = (unbox_unit ()) } in
  let r_expected = stack_ { a32 = "0"; b32 = (unbox_unit ()) } in
  (* .a32 *)
  r.a32 <- next_r.a32;
  let r_expected = { r_expected with a32 = next_r.a32 } in
  mark_test_run 241;
  let test = eq r r_expected in
  if not test then failwithf "test 241 failed";
  Gc.compact ();
  (* .b32 *)
  r.b32 <- next_r.b32;
  let r_expected = { r_expected with b32 = next_r.b32 } in
  mark_test_run 242;
  let test = eq r r_expected in
  if not test then failwithf "test 242 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a32; b32 } = r in
  let expected_a32 = "100" in
  mark_test_run 243;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a32 a32 in
  if not test then failwithf "test 243 failed";
  let expected_b32 = (unbox_unit ()) in
  mark_test_run 244;
  let test = (fun _ _ -> true) expected_b32 b32 in
  if not test then failwithf "test 244 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a32; b32 } = r in
  let expected_a32 = "100" in
  mark_test_run 245;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a32 a32 in
  if not test then failwithf "test 245 failed";
  let expected_b32 = (unbox_unit ()) in
  mark_test_run 246;
  let test = (fun _ _ -> true) expected_b32 b32 in
  if not test then failwithf "test 246 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t33 = { string; unit_u; unit_u }   *)
  (****************************************)
  let r = stack_ { a33 = "0"; b33 = (unbox_unit ()); c33 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a33 *)
  let actual = r.a33 in
  let expected = "0" in
  mark_test_run 247;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 247 failed";
  (* Paths of depth 1 *)
  (* .b33 *)
  let actual = r.b33 in
  let expected = (unbox_unit ()) in
  mark_test_run 248;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 248 failed";
  (* Paths of depth 1 *)
  (* .c33 *)
  let actual = r.c33 in
  let expected = (unbox_unit ()) in
  mark_test_run 249;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 249 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a33 = a331; b33 = b331; c33 = c331 } { a33 = a332; b33 = b332; c33 = c332 } -> (fun a b -> String.equal (globalize a) (globalize b)) a331 a332 && (fun _ _ -> true) b331 b332 && (fun _ _ -> true) c331 c332) in
  let next_r = stack_ { a33 = "100"; b33 = (unbox_unit ()); c33 = (unbox_unit ()) } in
  let r_expected = stack_ { a33 = "0"; b33 = (unbox_unit ()); c33 = (unbox_unit ()) } in
  (* .a33 *)
  r.a33 <- next_r.a33;
  let r_expected = { r_expected with a33 = next_r.a33 } in
  mark_test_run 250;
  let test = eq r r_expected in
  if not test then failwithf "test 250 failed";
  Gc.compact ();
  (* .b33 *)
  r.b33 <- next_r.b33;
  let r_expected = { r_expected with b33 = next_r.b33 } in
  mark_test_run 251;
  let test = eq r r_expected in
  if not test then failwithf "test 251 failed";
  Gc.compact ();
  (* .c33 *)
  r.c33 <- next_r.c33;
  let r_expected = { r_expected with c33 = next_r.c33 } in
  mark_test_run 252;
  let test = eq r r_expected in
  if not test then failwithf "test 252 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a33; b33; c33 } = r in
  let expected_a33 = "100" in
  mark_test_run 253;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a33 a33 in
  if not test then failwithf "test 253 failed";
  let expected_b33 = (unbox_unit ()) in
  mark_test_run 254;
  let test = (fun _ _ -> true) expected_b33 b33 in
  if not test then failwithf "test 254 failed";
  let expected_c33 = (unbox_unit ()) in
  mark_test_run 255;
  let test = (fun _ _ -> true) expected_c33 c33 in
  if not test then failwithf "test 255 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a33; b33; c33 } = r in
  let expected_a33 = "100" in
  mark_test_run 256;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a33 a33 in
  if not test then failwithf "test 256 failed";
  let expected_b33 = (unbox_unit ()) in
  mark_test_run 257;
  let test = (fun _ _ -> true) expected_b33 b33 in
  if not test then failwithf "test 257 failed";
  let expected_c33 = (unbox_unit ()) in
  mark_test_run 258;
  let test = (fun _ _ -> true) expected_c33 c33 in
  if not test then failwithf "test 258 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t34 = { string; unit_u; string }   *)
  (****************************************)
  let r = stack_ { a34 = "0"; b34 = (unbox_unit ()); c34 = "1" } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a34 *)
  let actual = r.a34 in
  let expected = "0" in
  mark_test_run 259;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 259 failed";
  (* Paths of depth 1 *)
  (* .b34 *)
  let actual = r.b34 in
  let expected = (unbox_unit ()) in
  mark_test_run 260;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 260 failed";
  (* Paths of depth 1 *)
  (* .c34 *)
  let actual = r.c34 in
  let expected = "1" in
  mark_test_run 261;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 261 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a34 = a341; b34 = b341; c34 = c341 } { a34 = a342; b34 = b342; c34 = c342 } -> (fun a b -> String.equal (globalize a) (globalize b)) a341 a342 && (fun _ _ -> true) b341 b342 && (fun a b -> String.equal (globalize a) (globalize b)) c341 c342) in
  let next_r = stack_ { a34 = "100"; b34 = (unbox_unit ()); c34 = "101" } in
  let r_expected = stack_ { a34 = "0"; b34 = (unbox_unit ()); c34 = "1" } in
  (* .a34 *)
  r.a34 <- next_r.a34;
  let r_expected = { r_expected with a34 = next_r.a34 } in
  mark_test_run 262;
  let test = eq r r_expected in
  if not test then failwithf "test 262 failed";
  Gc.compact ();
  (* .b34 *)
  r.b34 <- next_r.b34;
  let r_expected = { r_expected with b34 = next_r.b34 } in
  mark_test_run 263;
  let test = eq r r_expected in
  if not test then failwithf "test 263 failed";
  Gc.compact ();
  (* .c34 *)
  r.c34 <- next_r.c34;
  let r_expected = { r_expected with c34 = next_r.c34 } in
  mark_test_run 264;
  let test = eq r r_expected in
  if not test then failwithf "test 264 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a34; b34; c34 } = r in
  let expected_a34 = "100" in
  mark_test_run 265;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a34 a34 in
  if not test then failwithf "test 265 failed";
  let expected_b34 = (unbox_unit ()) in
  mark_test_run 266;
  let test = (fun _ _ -> true) expected_b34 b34 in
  if not test then failwithf "test 266 failed";
  let expected_c34 = "101" in
  mark_test_run 267;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c34 c34 in
  if not test then failwithf "test 267 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a34; b34; c34 } = r in
  let expected_a34 = "100" in
  mark_test_run 268;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a34 a34 in
  if not test then failwithf "test 268 failed";
  let expected_b34 = (unbox_unit ()) in
  mark_test_run 269;
  let test = (fun _ _ -> true) expected_b34 b34 in
  if not test then failwithf "test 269 failed";
  let expected_c34 = "101" in
  mark_test_run 270;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c34 c34 in
  if not test then failwithf "test 270 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t35 = { string; string; unit_u }   *)
  (****************************************)
  let r = stack_ { a35 = "0"; b35 = "1"; c35 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a35 *)
  let actual = r.a35 in
  let expected = "0" in
  mark_test_run 271;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 271 failed";
  (* Paths of depth 1 *)
  (* .b35 *)
  let actual = r.b35 in
  let expected = "1" in
  mark_test_run 272;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 272 failed";
  (* Paths of depth 1 *)
  (* .c35 *)
  let actual = r.c35 in
  let expected = (unbox_unit ()) in
  mark_test_run 273;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 273 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a35 = a351; b35 = b351; c35 = c351 } { a35 = a352; b35 = b352; c35 = c352 } -> (fun a b -> String.equal (globalize a) (globalize b)) a351 a352 && (fun a b -> String.equal (globalize a) (globalize b)) b351 b352 && (fun _ _ -> true) c351 c352) in
  let next_r = stack_ { a35 = "100"; b35 = "101"; c35 = (unbox_unit ()) } in
  let r_expected = stack_ { a35 = "0"; b35 = "1"; c35 = (unbox_unit ()) } in
  (* .a35 *)
  r.a35 <- next_r.a35;
  let r_expected = { r_expected with a35 = next_r.a35 } in
  mark_test_run 274;
  let test = eq r r_expected in
  if not test then failwithf "test 274 failed";
  Gc.compact ();
  (* .b35 *)
  r.b35 <- next_r.b35;
  let r_expected = { r_expected with b35 = next_r.b35 } in
  mark_test_run 275;
  let test = eq r r_expected in
  if not test then failwithf "test 275 failed";
  Gc.compact ();
  (* .c35 *)
  r.c35 <- next_r.c35;
  let r_expected = { r_expected with c35 = next_r.c35 } in
  mark_test_run 276;
  let test = eq r r_expected in
  if not test then failwithf "test 276 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a35; b35; c35 } = r in
  let expected_a35 = "100" in
  mark_test_run 277;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a35 a35 in
  if not test then failwithf "test 277 failed";
  let expected_b35 = "101" in
  mark_test_run 278;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b35 b35 in
  if not test then failwithf "test 278 failed";
  let expected_c35 = (unbox_unit ()) in
  mark_test_run 279;
  let test = (fun _ _ -> true) expected_c35 c35 in
  if not test then failwithf "test 279 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a35; b35; c35 } = r in
  let expected_a35 = "100" in
  mark_test_run 280;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a35 a35 in
  if not test then failwithf "test 280 failed";
  let expected_b35 = "101" in
  mark_test_run 281;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b35 b35 in
  if not test then failwithf "test 281 failed";
  let expected_c35 = (unbox_unit ()) in
  mark_test_run 282;
  let test = (fun _ _ -> true) expected_c35 c35 in
  if not test then failwithf "test 282 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t37 = { string; #{ unit_u } }   *)
  (*************************************)
  let r = stack_ { a37 = "0"; b37 = #{ a36 = (unbox_unit ()) } } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a37 *)
  let actual = r.a37 in
  let expected = "0" in
  mark_test_run 283;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 283 failed";
  (* Paths of depth 1 *)
  (* .b37 *)
  let actual = r.b37 in
  let expected = #{ a36 = (unbox_unit ()) } in
  mark_test_run 284;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun _ _ -> true) a361 a362) actual expected in
  if not test then failwithf "test 284 failed";
  (* Paths of depth 2 *)
  (* .b37.#a36 *)
  let actual = r.b37.#a36 in
  let expected = (unbox_unit ()) in
  mark_test_run 285;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 285 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a37 = a371; b37 = b371 } { a37 = a372; b37 = b372 } -> (fun a b -> String.equal (globalize a) (globalize b)) a371 a372 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun _ _ -> true) a361 a362) b371 b372) in
  let next_r = stack_ { a37 = "100"; b37 = #{ a36 = (unbox_unit ()) } } in
  let r_expected = stack_ { a37 = "0"; b37 = #{ a36 = (unbox_unit ()) } } in
  (* .a37 *)
  r.a37 <- next_r.a37;
  let r_expected = { r_expected with a37 = next_r.a37 } in
  mark_test_run 286;
  let test = eq r r_expected in
  if not test then failwithf "test 286 failed";
  Gc.compact ();
  (* .b37 *)
  r.b37 <- next_r.b37;
  let r_expected = { r_expected with b37 = next_r.b37 } in
  mark_test_run 287;
  let test = eq r r_expected in
  if not test then failwithf "test 287 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a37; b37 = #{ a36 } } = r in
  let expected_a37 = "100" in
  mark_test_run 288;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a37 a37 in
  if not test then failwithf "test 288 failed";
  let expected_a36 = (unbox_unit ()) in
  mark_test_run 289;
  let test = (fun _ _ -> true) expected_a36 a36 in
  if not test then failwithf "test 289 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a37; b37 } = r in
  let expected_a37 = "100" in
  mark_test_run 290;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a37 a37 in
  if not test then failwithf "test 290 failed";
  let expected_b37 = #{ a36 = (unbox_unit ()) } in
  mark_test_run 291;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun _ _ -> true) a361 a362) expected_b37 b37 in
  if not test then failwithf "test 291 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t39 = { string; #{ unit_u; unit_u } }   *)
  (*********************************************)
  let r = stack_ { a39 = "0"; b39 = #{ a38 = (unbox_unit ()); b38 = (unbox_unit ()) } } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a39 *)
  let actual = r.a39 in
  let expected = "0" in
  mark_test_run 292;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 292 failed";
  (* Paths of depth 1 *)
  (* .b39 *)
  let actual = r.b39 in
  let expected = #{ a38 = (unbox_unit ()); b38 = (unbox_unit ()) } in
  mark_test_run 293;
  let test = (fun #{ a38 = a381; b38 = b381 } #{ a38 = a382; b38 = b382 } -> (fun _ _ -> true) a381 a382 && (fun _ _ -> true) b381 b382) actual expected in
  if not test then failwithf "test 293 failed";
  (* Paths of depth 2 *)
  (* .b39.#a38 *)
  let actual = r.b39.#a38 in
  let expected = (unbox_unit ()) in
  mark_test_run 294;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 294 failed";
  (* .b39.#b38 *)
  let actual = r.b39.#b38 in
  let expected = (unbox_unit ()) in
  mark_test_run 295;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 295 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a39 = a391; b39 = b391 } { a39 = a392; b39 = b392 } -> (fun a b -> String.equal (globalize a) (globalize b)) a391 a392 && (fun #{ a38 = a381; b38 = b381 } #{ a38 = a382; b38 = b382 } -> (fun _ _ -> true) a381 a382 && (fun _ _ -> true) b381 b382) b391 b392) in
  let next_r = stack_ { a39 = "100"; b39 = #{ a38 = (unbox_unit ()); b38 = (unbox_unit ()) } } in
  let r_expected = stack_ { a39 = "0"; b39 = #{ a38 = (unbox_unit ()); b38 = (unbox_unit ()) } } in
  (* .a39 *)
  r.a39 <- next_r.a39;
  let r_expected = { r_expected with a39 = next_r.a39 } in
  mark_test_run 296;
  let test = eq r r_expected in
  if not test then failwithf "test 296 failed";
  Gc.compact ();
  (* .b39 *)
  r.b39 <- next_r.b39;
  let r_expected = { r_expected with b39 = next_r.b39 } in
  mark_test_run 297;
  let test = eq r r_expected in
  if not test then failwithf "test 297 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a39; b39 = #{ a38; b38 } } = r in
  let expected_a39 = "100" in
  mark_test_run 298;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a39 a39 in
  if not test then failwithf "test 298 failed";
  let expected_a38 = (unbox_unit ()) in
  mark_test_run 299;
  let test = (fun _ _ -> true) expected_a38 a38 in
  if not test then failwithf "test 299 failed";
  let expected_b38 = (unbox_unit ()) in
  mark_test_run 300;
  let test = (fun _ _ -> true) expected_b38 b38 in
  if not test then failwithf "test 300 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a39; b39 } = r in
  let expected_a39 = "100" in
  mark_test_run 301;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a39 a39 in
  if not test then failwithf "test 301 failed";
  let expected_b39 = #{ a38 = (unbox_unit ()); b38 = (unbox_unit ()) } in
  mark_test_run 302;
  let test = (fun #{ a38 = a381; b38 = b381 } #{ a38 = a382; b38 = b382 } -> (fun _ _ -> true) a381 a382 && (fun _ _ -> true) b381 b382) expected_b39 b39 in
  if not test then failwithf "test 302 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t40 = { string; #{ unit_u; string } }   *)
  (*********************************************)
  let r = stack_ { a40 = "0"; b40 = #{ a22 = (unbox_unit ()); b22 = "1" } } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a40 *)
  let actual = r.a40 in
  let expected = "0" in
  mark_test_run 303;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 303 failed";
  (* Paths of depth 1 *)
  (* .b40 *)
  let actual = r.b40 in
  let expected = #{ a22 = (unbox_unit ()); b22 = "1" } in
  mark_test_run 304;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) actual expected in
  if not test then failwithf "test 304 failed";
  (* Paths of depth 2 *)
  (* .b40.#a22 *)
  let actual = r.b40.#a22 in
  let expected = (unbox_unit ()) in
  mark_test_run 305;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 305 failed";
  (* .b40.#b22 *)
  let actual = r.b40.#b22 in
  let expected = "1" in
  mark_test_run 306;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 306 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a40 = a401; b40 = b401 } { a40 = a402; b40 = b402 } -> (fun a b -> String.equal (globalize a) (globalize b)) a401 a402 && (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) b401 b402) in
  let next_r = stack_ { a40 = "100"; b40 = #{ a22 = (unbox_unit ()); b22 = "101" } } in
  let r_expected = stack_ { a40 = "0"; b40 = #{ a22 = (unbox_unit ()); b22 = "1" } } in
  (* .a40 *)
  r.a40 <- next_r.a40;
  let r_expected = { r_expected with a40 = next_r.a40 } in
  mark_test_run 307;
  let test = eq r r_expected in
  if not test then failwithf "test 307 failed";
  Gc.compact ();
  (* .b40 *)
  r.b40 <- next_r.b40;
  let r_expected = { r_expected with b40 = next_r.b40 } in
  mark_test_run 308;
  let test = eq r r_expected in
  if not test then failwithf "test 308 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a40; b40 = #{ a22; b22 } } = r in
  let expected_a40 = "100" in
  mark_test_run 309;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 309 failed";
  let expected_a22 = (unbox_unit ()) in
  mark_test_run 310;
  let test = (fun _ _ -> true) expected_a22 a22 in
  if not test then failwithf "test 310 failed";
  let expected_b22 = "101" in
  mark_test_run 311;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b22 b22 in
  if not test then failwithf "test 311 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a40; b40 } = r in
  let expected_a40 = "100" in
  mark_test_run 312;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 312 failed";
  let expected_b40 = #{ a22 = (unbox_unit ()); b22 = "101" } in
  mark_test_run 313;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) expected_b40 b40 in
  if not test then failwithf "test 313 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t41 = { string; #{ string; unit_u } }   *)
  (*********************************************)
  let r = stack_ { a41 = "0"; b41 = #{ a26 = "1"; b26 = (unbox_unit ()) } } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a41 *)
  let actual = r.a41 in
  let expected = "0" in
  mark_test_run 314;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 314 failed";
  (* Paths of depth 1 *)
  (* .b41 *)
  let actual = r.b41 in
  let expected = #{ a26 = "1"; b26 = (unbox_unit ()) } in
  mark_test_run 315;
  let test = (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) actual expected in
  if not test then failwithf "test 315 failed";
  (* Paths of depth 2 *)
  (* .b41.#a26 *)
  let actual = r.b41.#a26 in
  let expected = "1" in
  mark_test_run 316;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 316 failed";
  (* .b41.#b26 *)
  let actual = r.b41.#b26 in
  let expected = (unbox_unit ()) in
  mark_test_run 317;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 317 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a41 = a411; b41 = b411 } { a41 = a412; b41 = b412 } -> (fun a b -> String.equal (globalize a) (globalize b)) a411 a412 && (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) b411 b412) in
  let next_r = stack_ { a41 = "100"; b41 = #{ a26 = "101"; b26 = (unbox_unit ()) } } in
  let r_expected = stack_ { a41 = "0"; b41 = #{ a26 = "1"; b26 = (unbox_unit ()) } } in
  (* .a41 *)
  r.a41 <- next_r.a41;
  let r_expected = { r_expected with a41 = next_r.a41 } in
  mark_test_run 318;
  let test = eq r r_expected in
  if not test then failwithf "test 318 failed";
  Gc.compact ();
  (* .b41 *)
  r.b41 <- next_r.b41;
  let r_expected = { r_expected with b41 = next_r.b41 } in
  mark_test_run 319;
  let test = eq r r_expected in
  if not test then failwithf "test 319 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a41; b41 = #{ a26; b26 } } = r in
  let expected_a41 = "100" in
  mark_test_run 320;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a41 a41 in
  if not test then failwithf "test 320 failed";
  let expected_a26 = "101" in
  mark_test_run 321;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a26 a26 in
  if not test then failwithf "test 321 failed";
  let expected_b26 = (unbox_unit ()) in
  mark_test_run 322;
  let test = (fun _ _ -> true) expected_b26 b26 in
  if not test then failwithf "test 322 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a41; b41 } = r in
  let expected_a41 = "100" in
  mark_test_run 323;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a41 a41 in
  if not test then failwithf "test 323 failed";
  let expected_b41 = #{ a26 = "101"; b26 = (unbox_unit ()) } in
  mark_test_run 324;
  let test = (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) expected_b41 b41 in
  if not test then failwithf "test 324 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************)
  (*   t42 = { (| unit_u) }   *)
  (****************************)
  let r = stack_ { a42 = C1_0((unbox_unit ())) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a42 *)
  let actual = r.a42 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 325;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 325 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a42 = a421 } { a42 = a422 } -> (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) a421 a422) in
  let next_r = stack_ { a42 = C1_0((unbox_unit ())) } in
  let r_expected = stack_ { a42 = C1_0((unbox_unit ())) } in
  (* .a42 *)
  r.a42 <- next_r.a42;
  let r_expected = { r_expected with a42 = next_r.a42 } in
  mark_test_run 326;
  let test = eq r r_expected in
  if not test then failwithf "test 326 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a42 } = r in
  let expected_a42 = C1_0((unbox_unit ())) in
  mark_test_run 327;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a42 a42 in
  if not test then failwithf "test 327 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a42 } = r in
  let expected_a42 = C1_0((unbox_unit ())) in
  mark_test_run 328;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a42 a42 in
  if not test then failwithf "test 328 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************)
  (*   t43 = { (| unit_u); int }   *)
  (*********************************)
  let r = stack_ { a43 = C1_0((unbox_unit ())); b43 = 0 } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a43 *)
  let actual = r.a43 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 329;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 329 failed";
  (* Paths of depth 1 *)
  (* .b43 *)
  let actual = r.b43 in
  let expected = 0 in
  mark_test_run 330;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 330 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a43 = a431; b43 = b431 } { a43 = a432; b43 = b432 } -> (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) a431 a432 && (fun a b -> Int.equal a b) b431 b432) in
  let next_r = stack_ { a43 = C1_0((unbox_unit ())); b43 = 100 } in
  let r_expected = stack_ { a43 = C1_0((unbox_unit ())); b43 = 0 } in
  (* .a43 *)
  r.a43 <- next_r.a43;
  let r_expected = { r_expected with a43 = next_r.a43 } in
  mark_test_run 331;
  let test = eq r r_expected in
  if not test then failwithf "test 331 failed";
  Gc.compact ();
  (* .b43 *)
  r.b43 <- next_r.b43;
  let r_expected = { r_expected with b43 = next_r.b43 } in
  mark_test_run 332;
  let test = eq r r_expected in
  if not test then failwithf "test 332 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a43; b43 } = r in
  let expected_a43 = C1_0((unbox_unit ())) in
  mark_test_run 333;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a43 a43 in
  if not test then failwithf "test 333 failed";
  let expected_b43 = 100 in
  mark_test_run 334;
  let test = (fun a b -> Int.equal a b) expected_b43 b43 in
  if not test then failwithf "test 334 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a43; b43 } = r in
  let expected_a43 = C1_0((unbox_unit ())) in
  mark_test_run 335;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a43 a43 in
  if not test then failwithf "test 335 failed";
  let expected_b43 = 100 in
  mark_test_run 336;
  let test = (fun a b -> Int.equal a b) expected_b43 b43 in
  if not test then failwithf "test 336 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t44 = { (| unit_u); int64 }   *)
  (***********************************)
  let r = stack_ { a44 = C1_0((unbox_unit ())); b44 = 0L } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a44 *)
  let actual = r.a44 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 337;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 337 failed";
  (* Paths of depth 1 *)
  (* .b44 *)
  let actual = r.b44 in
  let expected = 0L in
  mark_test_run 338;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 338 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a44 = a441; b44 = b441 } { a44 = a442; b44 = b442 } -> (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) a441 a442 && (fun a b -> Int64.equal (globalize a) (globalize b)) b441 b442) in
  let next_r = stack_ { a44 = C1_0((unbox_unit ())); b44 = 100L } in
  let r_expected = stack_ { a44 = C1_0((unbox_unit ())); b44 = 0L } in
  (* .a44 *)
  r.a44 <- next_r.a44;
  let r_expected = { r_expected with a44 = next_r.a44 } in
  mark_test_run 339;
  let test = eq r r_expected in
  if not test then failwithf "test 339 failed";
  Gc.compact ();
  (* .b44 *)
  r.b44 <- next_r.b44;
  let r_expected = { r_expected with b44 = next_r.b44 } in
  mark_test_run 340;
  let test = eq r r_expected in
  if not test then failwithf "test 340 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a44; b44 } = r in
  let expected_a44 = C1_0((unbox_unit ())) in
  mark_test_run 341;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a44 a44 in
  if not test then failwithf "test 341 failed";
  let expected_b44 = 100L in
  mark_test_run 342;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b44 b44 in
  if not test then failwithf "test 342 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a44; b44 } = r in
  let expected_a44 = C1_0((unbox_unit ())) in
  mark_test_run 343;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a44 a44 in
  if not test then failwithf "test 343 failed";
  let expected_b44 = 100L in
  mark_test_run 344;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b44 b44 in
  if not test then failwithf "test 344 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t45 = { (| unit_u); int64# }   *)
  (************************************)
  let r = stack_ { a45 = C1_0((unbox_unit ())); b45 = #0L } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a45 *)
  let actual = r.a45 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 345;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 345 failed";
  (* Paths of depth 1 *)
  (* .b45 *)
  let actual = r.b45 in
  let expected = #0L in
  mark_test_run 346;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 346 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a45 = a451; b45 = b451 } { a45 = a452; b45 = b452 } -> (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) a451 a452 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b451 b452) in
  let next_r = stack_ { a45 = C1_0((unbox_unit ())); b45 = #100L } in
  let r_expected = stack_ { a45 = C1_0((unbox_unit ())); b45 = #0L } in
  (* .a45 *)
  r.a45 <- next_r.a45;
  let r_expected = { r_expected with a45 = next_r.a45 } in
  mark_test_run 347;
  let test = eq r r_expected in
  if not test then failwithf "test 347 failed";
  Gc.compact ();
  (* .b45 *)
  r.b45 <- next_r.b45;
  let r_expected = { r_expected with b45 = next_r.b45 } in
  mark_test_run 348;
  let test = eq r r_expected in
  if not test then failwithf "test 348 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a45; b45 } = r in
  let expected_a45 = C1_0((unbox_unit ())) in
  mark_test_run 349;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a45 a45 in
  if not test then failwithf "test 349 failed";
  let expected_b45 = #100L in
  mark_test_run 350;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b45 b45 in
  if not test then failwithf "test 350 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a45; b45 } = r in
  let expected_a45 = C1_0((unbox_unit ())) in
  mark_test_run 351;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a45 a45 in
  if not test then failwithf "test 351 failed";
  let expected_b45 = #100L in
  mark_test_run 352;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b45 b45 in
  if not test then failwithf "test 352 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t46 = { (| unit_u); int32# }   *)
  (************************************)
  let r = stack_ { a46 = C1_0((unbox_unit ())); b46 = #0l } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a46 *)
  let actual = r.a46 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 353;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 353 failed";
  (* Paths of depth 1 *)
  (* .b46 *)
  let actual = r.b46 in
  let expected = #0l in
  mark_test_run 354;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 354 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a46 = a461; b46 = b461 } { a46 = a462; b46 = b462 } -> (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) a461 a462 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b461 b462) in
  let next_r = stack_ { a46 = C1_0((unbox_unit ())); b46 = #100l } in
  let r_expected = stack_ { a46 = C1_0((unbox_unit ())); b46 = #0l } in
  (* .a46 *)
  r.a46 <- next_r.a46;
  let r_expected = { r_expected with a46 = next_r.a46 } in
  mark_test_run 355;
  let test = eq r r_expected in
  if not test then failwithf "test 355 failed";
  Gc.compact ();
  (* .b46 *)
  r.b46 <- next_r.b46;
  let r_expected = { r_expected with b46 = next_r.b46 } in
  mark_test_run 356;
  let test = eq r r_expected in
  if not test then failwithf "test 356 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a46; b46 } = r in
  let expected_a46 = C1_0((unbox_unit ())) in
  mark_test_run 357;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a46 a46 in
  if not test then failwithf "test 357 failed";
  let expected_b46 = #100l in
  mark_test_run 358;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b46 b46 in
  if not test then failwithf "test 358 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a46; b46 } = r in
  let expected_a46 = C1_0((unbox_unit ())) in
  mark_test_run 359;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a46 a46 in
  if not test then failwithf "test 359 failed";
  let expected_b46 = #100l in
  mark_test_run 360;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b46 b46 in
  if not test then failwithf "test 360 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t47 = { (| unit_u); nativeint# }   *)
  (****************************************)
  let r = stack_ { a47 = C1_0((unbox_unit ())); b47 = #0n } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a47 *)
  let actual = r.a47 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 361;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 361 failed";
  (* Paths of depth 1 *)
  (* .b47 *)
  let actual = r.b47 in
  let expected = #0n in
  mark_test_run 362;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 362 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a47 = a471; b47 = b471 } { a47 = a472; b47 = b472 } -> (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) a471 a472 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b471 b472) in
  let next_r = stack_ { a47 = C1_0((unbox_unit ())); b47 = #100n } in
  let r_expected = stack_ { a47 = C1_0((unbox_unit ())); b47 = #0n } in
  (* .a47 *)
  r.a47 <- next_r.a47;
  let r_expected = { r_expected with a47 = next_r.a47 } in
  mark_test_run 363;
  let test = eq r r_expected in
  if not test then failwithf "test 363 failed";
  Gc.compact ();
  (* .b47 *)
  r.b47 <- next_r.b47;
  let r_expected = { r_expected with b47 = next_r.b47 } in
  mark_test_run 364;
  let test = eq r r_expected in
  if not test then failwithf "test 364 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a47; b47 } = r in
  let expected_a47 = C1_0((unbox_unit ())) in
  mark_test_run 365;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a47 a47 in
  if not test then failwithf "test 365 failed";
  let expected_b47 = #100n in
  mark_test_run 366;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b47 b47 in
  if not test then failwithf "test 366 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a47; b47 } = r in
  let expected_a47 = C1_0((unbox_unit ())) in
  mark_test_run 367;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a47 a47 in
  if not test then failwithf "test 367 failed";
  let expected_b47 = #100n in
  mark_test_run 368;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b47 b47 in
  if not test then failwithf "test 368 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t48 = { (| unit_u); unit_u }   *)
  (************************************)
  let r = stack_ { a48 = C1_0((unbox_unit ())); b48 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a48 *)
  let actual = r.a48 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 369;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 369 failed";
  (* Paths of depth 1 *)
  (* .b48 *)
  let actual = r.b48 in
  let expected = (unbox_unit ()) in
  mark_test_run 370;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 370 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a48 = a481; b48 = b481 } { a48 = a482; b48 = b482 } -> (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) a481 a482 && (fun _ _ -> true) b481 b482) in
  let next_r = stack_ { a48 = C1_0((unbox_unit ())); b48 = (unbox_unit ()) } in
  let r_expected = stack_ { a48 = C1_0((unbox_unit ())); b48 = (unbox_unit ()) } in
  (* .a48 *)
  r.a48 <- next_r.a48;
  let r_expected = { r_expected with a48 = next_r.a48 } in
  mark_test_run 371;
  let test = eq r r_expected in
  if not test then failwithf "test 371 failed";
  Gc.compact ();
  (* .b48 *)
  r.b48 <- next_r.b48;
  let r_expected = { r_expected with b48 = next_r.b48 } in
  mark_test_run 372;
  let test = eq r r_expected in
  if not test then failwithf "test 372 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a48; b48 } = r in
  let expected_a48 = C1_0((unbox_unit ())) in
  mark_test_run 373;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a48 a48 in
  if not test then failwithf "test 373 failed";
  let expected_b48 = (unbox_unit ()) in
  mark_test_run 374;
  let test = (fun _ _ -> true) expected_b48 b48 in
  if not test then failwithf "test 374 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a48; b48 } = r in
  let expected_a48 = C1_0((unbox_unit ())) in
  mark_test_run 375;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a48 a48 in
  if not test then failwithf "test 375 failed";
  let expected_b48 = (unbox_unit ()) in
  mark_test_run 376;
  let test = (fun _ _ -> true) expected_b48 b48 in
  if not test then failwithf "test 376 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t49 = { (| unit_u); float }   *)
  (***********************************)
  let r = stack_ { a49 = C1_0((unbox_unit ())); b49 = 0. } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a49 *)
  let actual = r.a49 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 377;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 377 failed";
  (* Paths of depth 1 *)
  (* .b49 *)
  let actual = r.b49 in
  let expected = 0. in
  mark_test_run 378;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 378 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a49 = a491; b49 = b491 } { a49 = a492; b49 = b492 } -> (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) a491 a492 && (fun a b -> Float.equal (globalize a) (globalize b)) b491 b492) in
  let next_r = stack_ { a49 = C1_0((unbox_unit ())); b49 = 100. } in
  let r_expected = stack_ { a49 = C1_0((unbox_unit ())); b49 = 0. } in
  (* .a49 *)
  r.a49 <- next_r.a49;
  let r_expected = { r_expected with a49 = next_r.a49 } in
  mark_test_run 379;
  let test = eq r r_expected in
  if not test then failwithf "test 379 failed";
  Gc.compact ();
  (* .b49 *)
  r.b49 <- next_r.b49;
  let r_expected = { r_expected with b49 = next_r.b49 } in
  mark_test_run 380;
  let test = eq r r_expected in
  if not test then failwithf "test 380 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a49; b49 } = r in
  let expected_a49 = C1_0((unbox_unit ())) in
  mark_test_run 381;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a49 a49 in
  if not test then failwithf "test 381 failed";
  let expected_b49 = 100. in
  mark_test_run 382;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b49 b49 in
  if not test then failwithf "test 382 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a49; b49 } = r in
  let expected_a49 = C1_0((unbox_unit ())) in
  mark_test_run 383;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a49 a49 in
  if not test then failwithf "test 383 failed";
  let expected_b49 = 100. in
  mark_test_run 384;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b49 b49 in
  if not test then failwithf "test 384 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t50 = { (| unit_u); (| unit_u) }   *)
  (****************************************)
  let r = stack_ { a50 = C1_0((unbox_unit ())); b50 = C1_0((unbox_unit ())) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a50 *)
  let actual = r.a50 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 385;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 385 failed";
  (* Paths of depth 1 *)
  (* .b50 *)
  let actual = r.b50 in
  let expected = C1_0((unbox_unit ())) in
  mark_test_run 386;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 386 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a50 = a501; b50 = b501 } { a50 = a502; b50 = b502 } -> (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) a501 a502 && (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) b501 b502) in
  let next_r = stack_ { a50 = C1_0((unbox_unit ())); b50 = C1_0((unbox_unit ())) } in
  let r_expected = stack_ { a50 = C1_0((unbox_unit ())); b50 = C1_0((unbox_unit ())) } in
  (* .a50 *)
  r.a50 <- next_r.a50;
  let r_expected = { r_expected with a50 = next_r.a50 } in
  mark_test_run 387;
  let test = eq r r_expected in
  if not test then failwithf "test 387 failed";
  Gc.compact ();
  (* .b50 *)
  r.b50 <- next_r.b50;
  let r_expected = { r_expected with b50 = next_r.b50 } in
  mark_test_run 388;
  let test = eq r r_expected in
  if not test then failwithf "test 388 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a50; b50 } = r in
  let expected_a50 = C1_0((unbox_unit ())) in
  mark_test_run 389;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a50 a50 in
  if not test then failwithf "test 389 failed";
  let expected_b50 = C1_0((unbox_unit ())) in
  mark_test_run 390;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b50 b50 in
  if not test then failwithf "test 390 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a50; b50 } = r in
  let expected_a50 = C1_0((unbox_unit ())) in
  mark_test_run 391;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_a50 a50 in
  if not test then failwithf "test 391 failed";
  let expected_b50 = C1_0((unbox_unit ())) in
  mark_test_run 392;
  let test = (fun a b -> match a, b with C1_0(a0), C1_0(b0) -> (fun _ _ -> true) a0 b0) expected_b50 b50 in
  if not test then failwithf "test 392 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t51 = { #{ unit_u }; string }   *)
  (*************************************)
  let r = stack_ { a51 = #{ a36 = (unbox_unit ()) }; b51 = "0" } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a51 *)
  let actual = r.a51 in
  let expected = #{ a36 = (unbox_unit ()) } in
  mark_test_run 393;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun _ _ -> true) a361 a362) actual expected in
  if not test then failwithf "test 393 failed";
  (* Paths of depth 2 *)
  (* .a51.#a36 *)
  let actual = r.a51.#a36 in
  let expected = (unbox_unit ()) in
  mark_test_run 394;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 394 failed";
  (* Paths of depth 1 *)
  (* .b51 *)
  let actual = r.b51 in
  let expected = "0" in
  mark_test_run 395;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 395 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a51 = a511; b51 = b511 } { a51 = a512; b51 = b512 } -> (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun _ _ -> true) a361 a362) a511 a512 && (fun a b -> String.equal (globalize a) (globalize b)) b511 b512) in
  let next_r = stack_ { a51 = #{ a36 = (unbox_unit ()) }; b51 = "100" } in
  let r_expected = stack_ { a51 = #{ a36 = (unbox_unit ()) }; b51 = "0" } in
  (* .a51 *)
  r.a51 <- next_r.a51;
  let r_expected = { r_expected with a51 = next_r.a51 } in
  mark_test_run 396;
  let test = eq r r_expected in
  if not test then failwithf "test 396 failed";
  Gc.compact ();
  (* .b51 *)
  r.b51 <- next_r.b51;
  let r_expected = { r_expected with b51 = next_r.b51 } in
  mark_test_run 397;
  let test = eq r r_expected in
  if not test then failwithf "test 397 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a51 = #{ a36 }; b51 } = r in
  let expected_a36 = (unbox_unit ()) in
  mark_test_run 398;
  let test = (fun _ _ -> true) expected_a36 a36 in
  if not test then failwithf "test 398 failed";
  let expected_b51 = "100" in
  mark_test_run 399;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 399 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a51; b51 } = r in
  let expected_a51 = #{ a36 = (unbox_unit ()) } in
  mark_test_run 400;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun _ _ -> true) a361 a362) expected_a51 a51 in
  if not test then failwithf "test 400 failed";
  let expected_b51 = "100" in
  mark_test_run 401;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 401 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t52 = { #{ unit_u; unit_u }; string }   *)
  (*********************************************)
  let r = stack_ { a52 = #{ a38 = (unbox_unit ()); b38 = (unbox_unit ()) }; b52 = "0" } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a52 *)
  let actual = r.a52 in
  let expected = #{ a38 = (unbox_unit ()); b38 = (unbox_unit ()) } in
  mark_test_run 402;
  let test = (fun #{ a38 = a381; b38 = b381 } #{ a38 = a382; b38 = b382 } -> (fun _ _ -> true) a381 a382 && (fun _ _ -> true) b381 b382) actual expected in
  if not test then failwithf "test 402 failed";
  (* Paths of depth 2 *)
  (* .a52.#a38 *)
  let actual = r.a52.#a38 in
  let expected = (unbox_unit ()) in
  mark_test_run 403;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 403 failed";
  (* .a52.#b38 *)
  let actual = r.a52.#b38 in
  let expected = (unbox_unit ()) in
  mark_test_run 404;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 404 failed";
  (* Paths of depth 1 *)
  (* .b52 *)
  let actual = r.b52 in
  let expected = "0" in
  mark_test_run 405;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 405 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a52 = a521; b52 = b521 } { a52 = a522; b52 = b522 } -> (fun #{ a38 = a381; b38 = b381 } #{ a38 = a382; b38 = b382 } -> (fun _ _ -> true) a381 a382 && (fun _ _ -> true) b381 b382) a521 a522 && (fun a b -> String.equal (globalize a) (globalize b)) b521 b522) in
  let next_r = stack_ { a52 = #{ a38 = (unbox_unit ()); b38 = (unbox_unit ()) }; b52 = "100" } in
  let r_expected = stack_ { a52 = #{ a38 = (unbox_unit ()); b38 = (unbox_unit ()) }; b52 = "0" } in
  (* .a52 *)
  r.a52 <- next_r.a52;
  let r_expected = { r_expected with a52 = next_r.a52 } in
  mark_test_run 406;
  let test = eq r r_expected in
  if not test then failwithf "test 406 failed";
  Gc.compact ();
  (* .b52 *)
  r.b52 <- next_r.b52;
  let r_expected = { r_expected with b52 = next_r.b52 } in
  mark_test_run 407;
  let test = eq r r_expected in
  if not test then failwithf "test 407 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a52 = #{ a38; b38 }; b52 } = r in
  let expected_a38 = (unbox_unit ()) in
  mark_test_run 408;
  let test = (fun _ _ -> true) expected_a38 a38 in
  if not test then failwithf "test 408 failed";
  let expected_b38 = (unbox_unit ()) in
  mark_test_run 409;
  let test = (fun _ _ -> true) expected_b38 b38 in
  if not test then failwithf "test 409 failed";
  let expected_b52 = "100" in
  mark_test_run 410;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b52 b52 in
  if not test then failwithf "test 410 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a52; b52 } = r in
  let expected_a52 = #{ a38 = (unbox_unit ()); b38 = (unbox_unit ()) } in
  mark_test_run 411;
  let test = (fun #{ a38 = a381; b38 = b381 } #{ a38 = a382; b38 = b382 } -> (fun _ _ -> true) a381 a382 && (fun _ _ -> true) b381 b382) expected_a52 a52 in
  if not test then failwithf "test 411 failed";
  let expected_b52 = "100" in
  mark_test_run 412;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b52 b52 in
  if not test then failwithf "test 412 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t53 = { #{ unit_u; string } }   *)
  (*************************************)
  let r = stack_ { a53 = #{ a22 = (unbox_unit ()); b22 = "0" } } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a53 *)
  let actual = r.a53 in
  let expected = #{ a22 = (unbox_unit ()); b22 = "0" } in
  mark_test_run 413;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) actual expected in
  if not test then failwithf "test 413 failed";
  (* Paths of depth 2 *)
  (* .a53.#a22 *)
  let actual = r.a53.#a22 in
  let expected = (unbox_unit ()) in
  mark_test_run 414;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 414 failed";
  (* .a53.#b22 *)
  let actual = r.a53.#b22 in
  let expected = "0" in
  mark_test_run 415;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 415 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a53 = a531 } { a53 = a532 } -> (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) a531 a532) in
  let next_r = stack_ { a53 = #{ a22 = (unbox_unit ()); b22 = "100" } } in
  let r_expected = stack_ { a53 = #{ a22 = (unbox_unit ()); b22 = "0" } } in
  (* .a53 *)
  r.a53 <- next_r.a53;
  let r_expected = { r_expected with a53 = next_r.a53 } in
  mark_test_run 416;
  let test = eq r r_expected in
  if not test then failwithf "test 416 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a53 = #{ a22; b22 } } = r in
  let expected_a22 = (unbox_unit ()) in
  mark_test_run 417;
  let test = (fun _ _ -> true) expected_a22 a22 in
  if not test then failwithf "test 417 failed";
  let expected_b22 = "100" in
  mark_test_run 418;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b22 b22 in
  if not test then failwithf "test 418 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a53 } = r in
  let expected_a53 = #{ a22 = (unbox_unit ()); b22 = "100" } in
  mark_test_run 419;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) expected_a53 a53 in
  if not test then failwithf "test 419 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t54 = { #{ unit_u; string }; unit_u }   *)
  (*********************************************)
  let r = stack_ { a54 = #{ a22 = (unbox_unit ()); b22 = "0" }; b54 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a54 *)
  let actual = r.a54 in
  let expected = #{ a22 = (unbox_unit ()); b22 = "0" } in
  mark_test_run 420;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) actual expected in
  if not test then failwithf "test 420 failed";
  (* Paths of depth 2 *)
  (* .a54.#a22 *)
  let actual = r.a54.#a22 in
  let expected = (unbox_unit ()) in
  mark_test_run 421;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 421 failed";
  (* .a54.#b22 *)
  let actual = r.a54.#b22 in
  let expected = "0" in
  mark_test_run 422;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 422 failed";
  (* Paths of depth 1 *)
  (* .b54 *)
  let actual = r.b54 in
  let expected = (unbox_unit ()) in
  mark_test_run 423;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 423 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a54 = a541; b54 = b541 } { a54 = a542; b54 = b542 } -> (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) a541 a542 && (fun _ _ -> true) b541 b542) in
  let next_r = stack_ { a54 = #{ a22 = (unbox_unit ()); b22 = "100" }; b54 = (unbox_unit ()) } in
  let r_expected = stack_ { a54 = #{ a22 = (unbox_unit ()); b22 = "0" }; b54 = (unbox_unit ()) } in
  (* .a54 *)
  r.a54 <- next_r.a54;
  let r_expected = { r_expected with a54 = next_r.a54 } in
  mark_test_run 424;
  let test = eq r r_expected in
  if not test then failwithf "test 424 failed";
  Gc.compact ();
  (* .b54 *)
  r.b54 <- next_r.b54;
  let r_expected = { r_expected with b54 = next_r.b54 } in
  mark_test_run 425;
  let test = eq r r_expected in
  if not test then failwithf "test 425 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a54 = #{ a22; b22 }; b54 } = r in
  let expected_a22 = (unbox_unit ()) in
  mark_test_run 426;
  let test = (fun _ _ -> true) expected_a22 a22 in
  if not test then failwithf "test 426 failed";
  let expected_b22 = "100" in
  mark_test_run 427;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b22 b22 in
  if not test then failwithf "test 427 failed";
  let expected_b54 = (unbox_unit ()) in
  mark_test_run 428;
  let test = (fun _ _ -> true) expected_b54 b54 in
  if not test then failwithf "test 428 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a54; b54 } = r in
  let expected_a54 = #{ a22 = (unbox_unit ()); b22 = "100" } in
  mark_test_run 429;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) expected_a54 a54 in
  if not test then failwithf "test 429 failed";
  let expected_b54 = (unbox_unit ()) in
  mark_test_run 430;
  let test = (fun _ _ -> true) expected_b54 b54 in
  if not test then failwithf "test 430 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t55 = { #{ unit_u; string }; string }   *)
  (*********************************************)
  let r = stack_ { a55 = #{ a22 = (unbox_unit ()); b22 = "0" }; b55 = "1" } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a55 *)
  let actual = r.a55 in
  let expected = #{ a22 = (unbox_unit ()); b22 = "0" } in
  mark_test_run 431;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) actual expected in
  if not test then failwithf "test 431 failed";
  (* Paths of depth 2 *)
  (* .a55.#a22 *)
  let actual = r.a55.#a22 in
  let expected = (unbox_unit ()) in
  mark_test_run 432;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 432 failed";
  (* .a55.#b22 *)
  let actual = r.a55.#b22 in
  let expected = "0" in
  mark_test_run 433;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 433 failed";
  (* Paths of depth 1 *)
  (* .b55 *)
  let actual = r.b55 in
  let expected = "1" in
  mark_test_run 434;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 434 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a55 = a551; b55 = b551 } { a55 = a552; b55 = b552 } -> (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) a551 a552 && (fun a b -> String.equal (globalize a) (globalize b)) b551 b552) in
  let next_r = stack_ { a55 = #{ a22 = (unbox_unit ()); b22 = "100" }; b55 = "101" } in
  let r_expected = stack_ { a55 = #{ a22 = (unbox_unit ()); b22 = "0" }; b55 = "1" } in
  (* .a55 *)
  r.a55 <- next_r.a55;
  let r_expected = { r_expected with a55 = next_r.a55 } in
  mark_test_run 435;
  let test = eq r r_expected in
  if not test then failwithf "test 435 failed";
  Gc.compact ();
  (* .b55 *)
  r.b55 <- next_r.b55;
  let r_expected = { r_expected with b55 = next_r.b55 } in
  mark_test_run 436;
  let test = eq r r_expected in
  if not test then failwithf "test 436 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a55 = #{ a22; b22 }; b55 } = r in
  let expected_a22 = (unbox_unit ()) in
  mark_test_run 437;
  let test = (fun _ _ -> true) expected_a22 a22 in
  if not test then failwithf "test 437 failed";
  let expected_b22 = "100" in
  mark_test_run 438;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b22 b22 in
  if not test then failwithf "test 438 failed";
  let expected_b55 = "101" in
  mark_test_run 439;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b55 b55 in
  if not test then failwithf "test 439 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a55; b55 } = r in
  let expected_a55 = #{ a22 = (unbox_unit ()); b22 = "100" } in
  mark_test_run 440;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun _ _ -> true) a221 a222 && (fun a b -> String.equal (globalize a) (globalize b)) b221 b222) expected_a55 a55 in
  if not test then failwithf "test 440 failed";
  let expected_b55 = "101" in
  mark_test_run 441;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b55 b55 in
  if not test then failwithf "test 441 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t56 = { #{ string }; unit_u }   *)
  (*************************************)
  let r = stack_ { a56 = #{ a24 = "0" }; b56 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a56 *)
  let actual = r.a56 in
  let expected = #{ a24 = "0" } in
  mark_test_run 442;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> String.equal (globalize a) (globalize b)) a241 a242) actual expected in
  if not test then failwithf "test 442 failed";
  (* Paths of depth 2 *)
  (* .a56.#a24 *)
  let actual = r.a56.#a24 in
  let expected = "0" in
  mark_test_run 443;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 443 failed";
  (* Paths of depth 1 *)
  (* .b56 *)
  let actual = r.b56 in
  let expected = (unbox_unit ()) in
  mark_test_run 444;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 444 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a56 = a561; b56 = b561 } { a56 = a562; b56 = b562 } -> (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> String.equal (globalize a) (globalize b)) a241 a242) a561 a562 && (fun _ _ -> true) b561 b562) in
  let next_r = stack_ { a56 = #{ a24 = "100" }; b56 = (unbox_unit ()) } in
  let r_expected = stack_ { a56 = #{ a24 = "0" }; b56 = (unbox_unit ()) } in
  (* .a56 *)
  r.a56 <- next_r.a56;
  let r_expected = { r_expected with a56 = next_r.a56 } in
  mark_test_run 445;
  let test = eq r r_expected in
  if not test then failwithf "test 445 failed";
  Gc.compact ();
  (* .b56 *)
  r.b56 <- next_r.b56;
  let r_expected = { r_expected with b56 = next_r.b56 } in
  mark_test_run 446;
  let test = eq r r_expected in
  if not test then failwithf "test 446 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a56 = #{ a24 }; b56 } = r in
  let expected_a24 = "100" in
  mark_test_run 447;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a24 a24 in
  if not test then failwithf "test 447 failed";
  let expected_b56 = (unbox_unit ()) in
  mark_test_run 448;
  let test = (fun _ _ -> true) expected_b56 b56 in
  if not test then failwithf "test 448 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a56; b56 } = r in
  let expected_a56 = #{ a24 = "100" } in
  mark_test_run 449;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> String.equal (globalize a) (globalize b)) a241 a242) expected_a56 a56 in
  if not test then failwithf "test 449 failed";
  let expected_b56 = (unbox_unit ()) in
  mark_test_run 450;
  let test = (fun _ _ -> true) expected_b56 b56 in
  if not test then failwithf "test 450 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t57 = { #{ string; unit_u } }   *)
  (*************************************)
  let r = stack_ { a57 = #{ a26 = "0"; b26 = (unbox_unit ()) } } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a57 *)
  let actual = r.a57 in
  let expected = #{ a26 = "0"; b26 = (unbox_unit ()) } in
  mark_test_run 451;
  let test = (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) actual expected in
  if not test then failwithf "test 451 failed";
  (* Paths of depth 2 *)
  (* .a57.#a26 *)
  let actual = r.a57.#a26 in
  let expected = "0" in
  mark_test_run 452;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 452 failed";
  (* .a57.#b26 *)
  let actual = r.a57.#b26 in
  let expected = (unbox_unit ()) in
  mark_test_run 453;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 453 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a57 = a571 } { a57 = a572 } -> (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) a571 a572) in
  let next_r = stack_ { a57 = #{ a26 = "100"; b26 = (unbox_unit ()) } } in
  let r_expected = stack_ { a57 = #{ a26 = "0"; b26 = (unbox_unit ()) } } in
  (* .a57 *)
  r.a57 <- next_r.a57;
  let r_expected = { r_expected with a57 = next_r.a57 } in
  mark_test_run 454;
  let test = eq r r_expected in
  if not test then failwithf "test 454 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a57 = #{ a26; b26 } } = r in
  let expected_a26 = "100" in
  mark_test_run 455;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a26 a26 in
  if not test then failwithf "test 455 failed";
  let expected_b26 = (unbox_unit ()) in
  mark_test_run 456;
  let test = (fun _ _ -> true) expected_b26 b26 in
  if not test then failwithf "test 456 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a57 } = r in
  let expected_a57 = #{ a26 = "100"; b26 = (unbox_unit ()) } in
  mark_test_run 457;
  let test = (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) expected_a57 a57 in
  if not test then failwithf "test 457 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t58 = { #{ string; unit_u }; unit_u }   *)
  (*********************************************)
  let r = stack_ { a58 = #{ a26 = "0"; b26 = (unbox_unit ()) }; b58 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a58 *)
  let actual = r.a58 in
  let expected = #{ a26 = "0"; b26 = (unbox_unit ()) } in
  mark_test_run 458;
  let test = (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) actual expected in
  if not test then failwithf "test 458 failed";
  (* Paths of depth 2 *)
  (* .a58.#a26 *)
  let actual = r.a58.#a26 in
  let expected = "0" in
  mark_test_run 459;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 459 failed";
  (* .a58.#b26 *)
  let actual = r.a58.#b26 in
  let expected = (unbox_unit ()) in
  mark_test_run 460;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 460 failed";
  (* Paths of depth 1 *)
  (* .b58 *)
  let actual = r.b58 in
  let expected = (unbox_unit ()) in
  mark_test_run 461;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 461 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a58 = a581; b58 = b581 } { a58 = a582; b58 = b582 } -> (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) a581 a582 && (fun _ _ -> true) b581 b582) in
  let next_r = stack_ { a58 = #{ a26 = "100"; b26 = (unbox_unit ()) }; b58 = (unbox_unit ()) } in
  let r_expected = stack_ { a58 = #{ a26 = "0"; b26 = (unbox_unit ()) }; b58 = (unbox_unit ()) } in
  (* .a58 *)
  r.a58 <- next_r.a58;
  let r_expected = { r_expected with a58 = next_r.a58 } in
  mark_test_run 462;
  let test = eq r r_expected in
  if not test then failwithf "test 462 failed";
  Gc.compact ();
  (* .b58 *)
  r.b58 <- next_r.b58;
  let r_expected = { r_expected with b58 = next_r.b58 } in
  mark_test_run 463;
  let test = eq r r_expected in
  if not test then failwithf "test 463 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a58 = #{ a26; b26 }; b58 } = r in
  let expected_a26 = "100" in
  mark_test_run 464;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a26 a26 in
  if not test then failwithf "test 464 failed";
  let expected_b26 = (unbox_unit ()) in
  mark_test_run 465;
  let test = (fun _ _ -> true) expected_b26 b26 in
  if not test then failwithf "test 465 failed";
  let expected_b58 = (unbox_unit ()) in
  mark_test_run 466;
  let test = (fun _ _ -> true) expected_b58 b58 in
  if not test then failwithf "test 466 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a58; b58 } = r in
  let expected_a58 = #{ a26 = "100"; b26 = (unbox_unit ()) } in
  mark_test_run 467;
  let test = (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) expected_a58 a58 in
  if not test then failwithf "test 467 failed";
  let expected_b58 = (unbox_unit ()) in
  mark_test_run 468;
  let test = (fun _ _ -> true) expected_b58 b58 in
  if not test then failwithf "test 468 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t59 = { #{ string; unit_u }; string }   *)
  (*********************************************)
  let r = stack_ { a59 = #{ a26 = "0"; b26 = (unbox_unit ()) }; b59 = "1" } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a59 *)
  let actual = r.a59 in
  let expected = #{ a26 = "0"; b26 = (unbox_unit ()) } in
  mark_test_run 469;
  let test = (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) actual expected in
  if not test then failwithf "test 469 failed";
  (* Paths of depth 2 *)
  (* .a59.#a26 *)
  let actual = r.a59.#a26 in
  let expected = "0" in
  mark_test_run 470;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 470 failed";
  (* .a59.#b26 *)
  let actual = r.a59.#b26 in
  let expected = (unbox_unit ()) in
  mark_test_run 471;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 471 failed";
  (* Paths of depth 1 *)
  (* .b59 *)
  let actual = r.b59 in
  let expected = "1" in
  mark_test_run 472;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 472 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a59 = a591; b59 = b591 } { a59 = a592; b59 = b592 } -> (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) a591 a592 && (fun a b -> String.equal (globalize a) (globalize b)) b591 b592) in
  let next_r = stack_ { a59 = #{ a26 = "100"; b26 = (unbox_unit ()) }; b59 = "101" } in
  let r_expected = stack_ { a59 = #{ a26 = "0"; b26 = (unbox_unit ()) }; b59 = "1" } in
  (* .a59 *)
  r.a59 <- next_r.a59;
  let r_expected = { r_expected with a59 = next_r.a59 } in
  mark_test_run 473;
  let test = eq r r_expected in
  if not test then failwithf "test 473 failed";
  Gc.compact ();
  (* .b59 *)
  r.b59 <- next_r.b59;
  let r_expected = { r_expected with b59 = next_r.b59 } in
  mark_test_run 474;
  let test = eq r r_expected in
  if not test then failwithf "test 474 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a59 = #{ a26; b26 }; b59 } = r in
  let expected_a26 = "100" in
  mark_test_run 475;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a26 a26 in
  if not test then failwithf "test 475 failed";
  let expected_b26 = (unbox_unit ()) in
  mark_test_run 476;
  let test = (fun _ _ -> true) expected_b26 b26 in
  if not test then failwithf "test 476 failed";
  let expected_b59 = "101" in
  mark_test_run 477;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b59 b59 in
  if not test then failwithf "test 477 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a59; b59 } = r in
  let expected_a59 = #{ a26 = "100"; b26 = (unbox_unit ()) } in
  mark_test_run 478;
  let test = (fun #{ a26 = a261; b26 = b261 } #{ a26 = a262; b26 = b262 } -> (fun a b -> String.equal (globalize a) (globalize b)) a261 a262 && (fun _ _ -> true) b261 b262) expected_a59 a59 in
  if not test then failwithf "test 478 failed";
  let expected_b59 = "101" in
  mark_test_run 479;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b59 b59 in
  if not test then failwithf "test 479 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t60 = { #{ string; string }; unit_u }   *)
  (*********************************************)
  let r = stack_ { a60 = #{ a28 = "0"; b28 = "1" }; b60 = (unbox_unit ()) } in
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a60 *)
  let actual = r.a60 in
  let expected = #{ a28 = "0"; b28 = "1" } in
  mark_test_run 480;
  let test = (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> String.equal (globalize a) (globalize b)) a281 a282 && (fun a b -> String.equal (globalize a) (globalize b)) b281 b282) actual expected in
  if not test then failwithf "test 480 failed";
  (* Paths of depth 2 *)
  (* .a60.#a28 *)
  let actual = r.a60.#a28 in
  let expected = "0" in
  mark_test_run 481;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 481 failed";
  (* .a60.#b28 *)
  let actual = r.a60.#b28 in
  let expected = "1" in
  mark_test_run 482;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 482 failed";
  (* Paths of depth 1 *)
  (* .b60 *)
  let actual = r.b60 in
  let expected = (unbox_unit ()) in
  mark_test_run 483;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 483 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a60 = a601; b60 = b601 } { a60 = a602; b60 = b602 } -> (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> String.equal (globalize a) (globalize b)) a281 a282 && (fun a b -> String.equal (globalize a) (globalize b)) b281 b282) a601 a602 && (fun _ _ -> true) b601 b602) in
  let next_r = stack_ { a60 = #{ a28 = "100"; b28 = "101" }; b60 = (unbox_unit ()) } in
  let r_expected = stack_ { a60 = #{ a28 = "0"; b28 = "1" }; b60 = (unbox_unit ()) } in
  (* .a60 *)
  r.a60 <- next_r.a60;
  let r_expected = { r_expected with a60 = next_r.a60 } in
  mark_test_run 484;
  let test = eq r r_expected in
  if not test then failwithf "test 484 failed";
  Gc.compact ();
  (* .b60 *)
  r.b60 <- next_r.b60;
  let r_expected = { r_expected with b60 = next_r.b60 } in
  mark_test_run 485;
  let test = eq r r_expected in
  if not test then failwithf "test 485 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a60 = #{ a28; b28 }; b60 } = r in
  let expected_a28 = "100" in
  mark_test_run 486;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a28 a28 in
  if not test then failwithf "test 486 failed";
  let expected_b28 = "101" in
  mark_test_run 487;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b28 b28 in
  if not test then failwithf "test 487 failed";
  let expected_b60 = (unbox_unit ()) in
  mark_test_run 488;
  let test = (fun _ _ -> true) expected_b60 b60 in
  if not test then failwithf "test 488 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a60; b60 } = r in
  let expected_a60 = #{ a28 = "100"; b28 = "101" } in
  mark_test_run 489;
  let test = (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> String.equal (globalize a) (globalize b)) a281 a282 && (fun a b -> String.equal (globalize a) (globalize b)) b281 b282) expected_a60 a60 in
  if not test then failwithf "test 489 failed";
  let expected_b60 = (unbox_unit ()) in
  mark_test_run 490;
  let test = (fun _ _ -> true) expected_b60 b60 in
  if not test then failwithf "test 490 failed";

  ()
;;
let () = to_run ();;

for i = 1 to 490 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
