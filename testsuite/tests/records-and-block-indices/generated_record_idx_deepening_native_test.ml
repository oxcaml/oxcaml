(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 modules = "idx_repr.ml stubs.c";
 flags = "-extension simd_beta -extension layouts_alpha";
 flambda2;
 stack-allocation;
 native;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
type unit_u : void mod everything
external unbox_unit : unit -> unit_u = "%unbox_unit"
external globalize : local_ 'a -> 'a = "%obj_dup";;
external box_int64x2 : int64x2# -> int64x2 = "%box_vec128"
external unbox_int64x2 : int64x2 -> int64x2# = "%unbox_vec128"
external interleave_low_64 : int64x2# -> int64x2# -> int64x2# = "caml_vec128_unreachable" "caml_simd_vec128_interleave_low_64" [@@unboxed] [@@builtin]
external interleave_high_64 : int64x2# -> int64x2# -> int64x2# = "caml_vec128_unreachable" "caml_simd_vec128_interleave_high_64" [@@unboxed] [@@builtin]
external int64x2_of_int64 : int64 -> int64x2# = "caml_vec128_unreachable" "caml_int64x2_low_of_int64" [@@unboxed] [@@builtin]
external int64_of_int64x2 : int64x2# -> int64 = "caml_vec128_unreachable" "caml_int64x2_low_to_int64" [@@unboxed] [@@builtin]

let int64x2_u_equal i1 i2 =
    let a1 = int64_of_int64x2 i1 in
    let b1 = int64_of_int64x2 (interleave_high_64 i1 i1) in
    let a2 = int64_of_int64x2 i2 in
    let b2 = int64_of_int64x2 (interleave_high_64 i2 i2) in
    Int64.equal a1 a2 && Int64.equal b1 b2

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any mod separable) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any mod separable) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int } (* { int } *)
type t1 = { mutable a1 : int; mutable b1 : int } (* { int; int } *)
type t2 = { mutable a2 : int; mutable b2 : int; mutable c2 : int } (* { int; int; int } *)
type t3 = { mutable a3 : int; mutable b3 : int; mutable c3 : int32# } (* { int; int; int32# } *)
type t4 = { mutable a4 : int; mutable b4 : int; mutable c4 : float } (* { int; int; float } *)
type t5 = { mutable a5 : int; mutable b5 : int; mutable c5 : int64x2# } (* { int; int; int64x2# } *)
type t6 = { mutable a6 : int; mutable b6 : int64 } (* { int; int64 } *)
type t7 = { mutable a7 : int; mutable b7 : int64# } (* { int; int64# } *)
type t8 = { mutable a8 : int; mutable b8 : int32# } (* { int; int32# } *)
type t9 = { mutable a9 : int; mutable b9 : int32#; mutable c9 : int } (* { int; int32#; int } *)
type t10 = { mutable a10 : int; mutable b10 : int32#; mutable c10 : int32# } (* { int; int32#; int32# } *)
type t11 = { mutable a11 : int; mutable b11 : nativeint# } (* { int; nativeint# } *)
type t12 = { mutable a12 : int; mutable b12 : unit_u } (* { int; unit_u } *)
type t13 = { mutable a13 : int; mutable b13 : float } (* { int; float } *)
type t14 = { mutable a14 : int; mutable b14 : float; mutable c14 : int } (* { int; float; int } *)
type t15 = { mutable a15 : int; mutable b15 : float; mutable c15 : float } (* { int; float; float } *)
type t16 = { mutable a16 : int; mutable b16 : int64x2# } (* { int; int64x2# } *)
type t17 = { mutable a17 : int; mutable b17 : int64x2#; mutable c17 : int } (* { int; int64x2#; int } *)
type t18 = { mutable a18 : int; mutable b18 : int64x2#; mutable c18 : int64x2# } (* { int; int64x2#; int64x2# } *)
type v19 = C19_0 of unit_u (* (| unit_u) *)
type t20 = { mutable a20 : int; mutable b20 : v19 } (* { int; (| unit_u) } *)
type t21 = #{ a21 : int } (* #{ int } *)
type t22 = { mutable a22 : int; mutable b22 : t21 } (* { int; #{ int } } *)
type t23 = #{ a23 : int; b23 : int } (* #{ int; int } *)
type t24 = { mutable a24 : int; mutable b24 : t23 } (* { int; #{ int; int } } *)
type t25 = #{ a25 : int; b25 : int32# } (* #{ int; int32# } *)
type t26 = { mutable a26 : int; mutable b26 : t25 } (* { int; #{ int; int32# } } *)
type t27 = #{ a27 : int; b27 : float } (* #{ int; float } *)
type t28 = { mutable a28 : int; mutable b28 : t27 } (* { int; #{ int; float } } *)
type t29 = #{ a29 : int; b29 : int64x2# } (* #{ int; int64x2# } *)
type t30 = { mutable a30 : int; mutable b30 : t29 } (* { int; #{ int; int64x2# } } *)
type t31 = #{ a31 : int32# } (* #{ int32# } *)
type t32 = { mutable a32 : int; mutable b32 : t31 } (* { int; #{ int32# } } *)
type t33 = #{ a33 : int32#; b33 : int } (* #{ int32#; int } *)
type t34 = { mutable a34 : int; mutable b34 : t33 } (* { int; #{ int32#; int } } *)
type t35 = #{ a35 : int32#; b35 : int32# } (* #{ int32#; int32# } *)
type t36 = { mutable a36 : int; mutable b36 : t35 } (* { int; #{ int32#; int32# } } *)
type t37 = #{ a37 : float } (* #{ float } *)
type t38 = { mutable a38 : int; mutable b38 : t37 } (* { int; #{ float } } *)
type t39 = #{ a39 : float; b39 : int } (* #{ float; int } *)
type t40 = { mutable a40 : int; mutable b40 : t39 } (* { int; #{ float; int } } *)
type t41 = #{ a41 : float; b41 : float } (* #{ float; float } *)
type t42 = { mutable a42 : int; mutable b42 : t41 } (* { int; #{ float; float } } *)
type t43 = #{ a43 : int64x2# } (* #{ int64x2# } *)
type t44 = { mutable a44 : int; mutable b44 : t43 } (* { int; #{ int64x2# } } *)
type t45 = #{ a45 : int64x2#; b45 : int } (* #{ int64x2#; int } *)
type t46 = { mutable a46 : int; mutable b46 : t45 } (* { int; #{ int64x2#; int } } *)
type t47 = #{ a47 : int64x2#; b47 : int64x2# } (* #{ int64x2#; int64x2# } *)
type t48 = { mutable a48 : int; mutable b48 : t47 } (* { int; #{ int64x2#; int64x2# } } *)
type t49 = { mutable a49 : int64 } (* { int64 } *)
type t50 = { mutable a50 : int64; mutable b50 : int } (* { int64; int } *)
type t51 = { mutable a51 : int64; mutable b51 : int64 } (* { int64; int64 } *)
type t52 = { mutable a52 : int64; mutable b52 : int64# } (* { int64; int64# } *)
type t53 = { mutable a53 : int64; mutable b53 : int32# } (* { int64; int32# } *)
type t54 = { mutable a54 : int64; mutable b54 : nativeint# } (* { int64; nativeint# } *)
type t55 = { mutable a55 : int64; mutable b55 : unit_u } (* { int64; unit_u } *)
type t56 = { mutable a56 : int64; mutable b56 : float } (* { int64; float } *)
type t57 = { mutable a57 : int64; mutable b57 : v19 } (* { int64; (| unit_u) } *)
type t58 = { mutable a58 : int64# } (* { int64# } *)
type t59 = { mutable a59 : int64#; mutable b59 : int } (* { int64#; int } *)
type t60 = { mutable a60 : int64#; mutable b60 : int64 } (* { int64#; int64 } *)
type t61 = { mutable a61 : int64#; mutable b61 : int64# } (* { int64#; int64# } *)
type t62 = { mutable a62 : int64#; mutable b62 : int32# } (* { int64#; int32# } *)
type t63 = { mutable a63 : int64#; mutable b63 : nativeint# } (* { int64#; nativeint# } *)
type t64 = { mutable a64 : int64#; mutable b64 : unit_u } (* { int64#; unit_u } *)
type t65 = { mutable a65 : int64#; mutable b65 : float } (* { int64#; float } *)
type t66 = { mutable a66 : int64#; mutable b66 : v19 } (* { int64#; (| unit_u) } *)
type t67 = { mutable a67 : int32# } (* { int32# } *)
type t68 = { mutable a68 : int32#; mutable b68 : int } (* { int32#; int } *)
type t69 = { mutable a69 : int32#; mutable b69 : int; mutable c69 : int } (* { int32#; int; int } *)
type t70 = { mutable a70 : int32#; mutable b70 : int; mutable c70 : int32# } (* { int32#; int; int32# } *)
type t71 = { mutable a71 : int32#; mutable b71 : int64 } (* { int32#; int64 } *)
type t72 = { mutable a72 : int32#; mutable b72 : int64# } (* { int32#; int64# } *)
type t73 = { mutable a73 : int32#; mutable b73 : int32# } (* { int32#; int32# } *)
type t74 = { mutable a74 : int32#; mutable b74 : int32#; mutable c74 : int } (* { int32#; int32#; int } *)
type t75 = { mutable a75 : int32#; mutable b75 : int32#; mutable c75 : int32# } (* { int32#; int32#; int32# } *)
type t76 = { mutable a76 : int32#; mutable b76 : nativeint# } (* { int32#; nativeint# } *)
type t77 = { mutable a77 : int32#; mutable b77 : unit_u } (* { int32#; unit_u } *)
type t78 = { mutable a78 : int32#; mutable b78 : float } (* { int32#; float } *)
type t79 = { mutable a79 : int32#; mutable b79 : v19 } (* { int32#; (| unit_u) } *)
type t80 = { mutable a80 : int32#; mutable b80 : t21 } (* { int32#; #{ int } } *)
type t81 = { mutable a81 : int32#; mutable b81 : t23 } (* { int32#; #{ int; int } } *)
type t82 = { mutable a82 : int32#; mutable b82 : t25 } (* { int32#; #{ int; int32# } } *)
type t83 = { mutable a83 : int32#; mutable b83 : t31 } (* { int32#; #{ int32# } } *)
type t84 = { mutable a84 : int32#; mutable b84 : t33 } (* { int32#; #{ int32#; int } } *)
type t85 = { mutable a85 : int32#; mutable b85 : t35 } (* { int32#; #{ int32#; int32# } } *)
type t86 = { mutable a86 : nativeint# } (* { nativeint# } *)
type t87 = { mutable a87 : nativeint#; mutable b87 : int } (* { nativeint#; int } *)
type t88 = { mutable a88 : nativeint#; mutable b88 : int64 } (* { nativeint#; int64 } *)
type t89 = { mutable a89 : nativeint#; mutable b89 : int64# } (* { nativeint#; int64# } *)
type t90 = { mutable a90 : nativeint#; mutable b90 : int32# } (* { nativeint#; int32# } *)
type t91 = { mutable a91 : nativeint#; mutable b91 : nativeint# } (* { nativeint#; nativeint# } *)
type t92 = { mutable a92 : nativeint#; mutable b92 : unit_u } (* { nativeint#; unit_u } *)
type t93 = { mutable a93 : nativeint#; mutable b93 : float } (* { nativeint#; float } *)
type t94 = { mutable a94 : nativeint#; mutable b94 : v19 } (* { nativeint#; (| unit_u) } *)
type t95 = { mutable a95 : unit_u; mutable b95 : int } (* { unit_u; int } *)
type t96 = { mutable a96 : unit_u; mutable b96 : int64 } (* { unit_u; int64 } *)
type t97 = { mutable a97 : unit_u; mutable b97 : int64# } (* { unit_u; int64# } *)
type t98 = { mutable a98 : unit_u; mutable b98 : int32# } (* { unit_u; int32# } *)
type t99 = { mutable a99 : unit_u; mutable b99 : nativeint# } (* { unit_u; nativeint# } *)
type t100 = { mutable a100 : unit_u; mutable b100 : unit_u; mutable c100 : string } (* { unit_u; unit_u; string } *)
type t101 = { mutable a101 : unit_u; mutable b101 : float } (* { unit_u; float } *)
type t102 = { mutable a102 : unit_u; mutable b102 : string } (* { unit_u; string } *)
type t103 = { mutable a103 : unit_u; mutable b103 : string; mutable c103 : unit_u } (* { unit_u; string; unit_u } *)
type t104 = { mutable a104 : unit_u; mutable b104 : string; mutable c104 : string } (* { unit_u; string; string } *)
type t105 = { mutable a105 : unit_u; mutable b105 : v19 } (* { unit_u; (| unit_u) } *)
type t106 = #{ a106 : unit_u; b106 : string } (* #{ unit_u; string } *)
type t107 = { mutable a107 : unit_u; mutable b107 : t106 } (* { unit_u; #{ unit_u; string } } *)
type t108 = #{ a108 : string } (* #{ string } *)
type t109 = { mutable a109 : unit_u; mutable b109 : t108 } (* { unit_u; #{ string } } *)
type t110 = #{ a110 : string; b110 : unit_u } (* #{ string; unit_u } *)
type t111 = { mutable a111 : unit_u; mutable b111 : t110 } (* { unit_u; #{ string; unit_u } } *)
type t112 = #{ a112 : string; b112 : string } (* #{ string; string } *)
type t113 = { mutable a113 : unit_u; mutable b113 : t112 } (* { unit_u; #{ string; string } } *)
type t114 = { mutable a114 : float } (* { float } *)
type t115 = { mutable a115 : float; mutable b115 : int } (* { float; int } *)
type t116 = { mutable a116 : float; mutable b116 : int; mutable c116 : int } (* { float; int; int } *)
type t117 = { mutable a117 : float; mutable b117 : int; mutable c117 : float } (* { float; int; float } *)
type t118 = { mutable a118 : float; mutable b118 : int64 } (* { float; int64 } *)
type t119 = { mutable a119 : float; mutable b119 : int64# } (* { float; int64# } *)
type t120 = { mutable a120 : float; mutable b120 : int32# } (* { float; int32# } *)
type t121 = { mutable a121 : float; mutable b121 : nativeint# } (* { float; nativeint# } *)
type t122 = { mutable a122 : float; mutable b122 : unit_u } (* { float; unit_u } *)
type t123 = { mutable a123 : float; mutable b123 : float } (* { float; float } *)
type t124 = { mutable a124 : float; mutable b124 : float; mutable c124 : int } (* { float; float; int } *)
type t125 = { mutable a125 : float; mutable b125 : float; mutable c125 : float } (* { float; float; float } *)
type t126 = { mutable a126 : float; mutable b126 : float; mutable c126 : float# } (* { float; float; float# } *)
type t127 = { mutable a127 : float; mutable b127 : float# } (* { float; float# } *)
type t128 = { mutable a128 : float; mutable b128 : float#; mutable c128 : float } (* { float; float#; float } *)
type t129 = { mutable a129 : float; mutable b129 : float#; mutable c129 : float# } (* { float; float#; float# } *)
type t130 = { mutable a130 : float; mutable b130 : v19 } (* { float; (| unit_u) } *)
type t131 = { mutable a131 : float; mutable b131 : t21 } (* { float; #{ int } } *)
type t132 = { mutable a132 : float; mutable b132 : t23 } (* { float; #{ int; int } } *)
type t133 = { mutable a133 : float; mutable b133 : t27 } (* { float; #{ int; float } } *)
type t134 = { mutable a134 : float; mutable b134 : t37 } (* { float; #{ float } } *)
type t135 = { mutable a135 : float; mutable b135 : t39 } (* { float; #{ float; int } } *)
type t136 = { mutable a136 : float; mutable b136 : t41 } (* { float; #{ float; float } } *)
type t137 = #{ a137 : float; b137 : float# } (* #{ float; float# } *)
type t138 = { mutable a138 : float; mutable b138 : t137 } (* { float; #{ float; float# } } *)
type t139 = #{ a139 : float# } (* #{ float# } *)
type t140 = { mutable a140 : float; mutable b140 : t139 } (* { float; #{ float# } } *)
type t141 = #{ a141 : float#; b141 : float } (* #{ float#; float } *)
type t142 = { mutable a142 : float; mutable b142 : t141 } (* { float; #{ float#; float } } *)
type t143 = #{ a143 : float#; b143 : float# } (* #{ float#; float# } *)
type t144 = { mutable a144 : float; mutable b144 : t143 } (* { float; #{ float#; float# } } *)
type t145 = { mutable a145 : float# } (* { float# } *)
type t146 = { mutable a146 : float#; mutable b146 : float } (* { float#; float } *)
type t147 = { mutable a147 : float#; mutable b147 : float; mutable c147 : float } (* { float#; float; float } *)
type t148 = { mutable a148 : float#; mutable b148 : float; mutable c148 : float# } (* { float#; float; float# } *)
type t149 = { mutable a149 : float#; mutable b149 : float# } (* { float#; float# } *)
type t150 = { mutable a150 : float#; mutable b150 : float#; mutable c150 : float } (* { float#; float#; float } *)
type t151 = { mutable a151 : float#; mutable b151 : float#; mutable c151 : float# } (* { float#; float#; float# } *)
type t152 = { mutable a152 : float#; mutable b152 : t37 } (* { float#; #{ float } } *)
type t153 = { mutable a153 : float#; mutable b153 : t41 } (* { float#; #{ float; float } } *)
type t154 = { mutable a154 : float#; mutable b154 : t137 } (* { float#; #{ float; float# } } *)
type t155 = { mutable a155 : float#; mutable b155 : t139 } (* { float#; #{ float# } } *)
type t156 = { mutable a156 : float#; mutable b156 : t141 } (* { float#; #{ float#; float } } *)
type t157 = { mutable a157 : float#; mutable b157 : t143 } (* { float#; #{ float#; float# } } *)
type t158 = { mutable a158 : string } (* { string } *)
type t159 = { mutable a159 : string; mutable b159 : unit_u } (* { string; unit_u } *)
type t160 = { mutable a160 : string; mutable b160 : unit_u; mutable c160 : unit_u } (* { string; unit_u; unit_u } *)
type t161 = { mutable a161 : string; mutable b161 : unit_u; mutable c161 : string } (* { string; unit_u; string } *)
type t162 = { mutable a162 : string; mutable b162 : string } (* { string; string } *)
type t163 = { mutable a163 : string; mutable b163 : string; mutable c163 : unit_u } (* { string; string; unit_u } *)
type t164 = { mutable a164 : string; mutable b164 : string; mutable c164 : string } (* { string; string; string } *)
type t165 = #{ a165 : unit_u } (* #{ unit_u } *)
type t166 = { mutable a166 : string; mutable b166 : t165 } (* { string; #{ unit_u } } *)
type t167 = #{ a167 : unit_u; b167 : unit_u } (* #{ unit_u; unit_u } *)
type t168 = { mutable a168 : string; mutable b168 : t167 } (* { string; #{ unit_u; unit_u } } *)
type t169 = { mutable a169 : string; mutable b169 : t106 } (* { string; #{ unit_u; string } } *)
type t170 = { mutable a170 : string; mutable b170 : t108 } (* { string; #{ string } } *)
type t171 = { mutable a171 : string; mutable b171 : t110 } (* { string; #{ string; unit_u } } *)
type t172 = { mutable a172 : string; mutable b172 : t112 } (* { string; #{ string; string } } *)
type t173 = { mutable a173 : int64x2# } (* { int64x2# } *)
type t174 = { mutable a174 : int64x2#; mutable b174 : int } (* { int64x2#; int } *)
type t175 = { mutable a175 : int64x2#; mutable b175 : int; mutable c175 : int } (* { int64x2#; int; int } *)
type t176 = { mutable a176 : int64x2#; mutable b176 : int; mutable c176 : int64x2# } (* { int64x2#; int; int64x2# } *)
type t177 = { mutable a177 : int64x2#; mutable b177 : int64x2# } (* { int64x2#; int64x2# } *)
type t178 = { mutable a178 : int64x2#; mutable b178 : int64x2#; mutable c178 : int } (* { int64x2#; int64x2#; int } *)
type t179 = { mutable a179 : int64x2#; mutable b179 : int64x2#; mutable c179 : int64x2# } (* { int64x2#; int64x2#; int64x2# } *)
type t180 = { mutable a180 : int64x2#; mutable b180 : t21 } (* { int64x2#; #{ int } } *)
type t181 = { mutable a181 : int64x2#; mutable b181 : t23 } (* { int64x2#; #{ int; int } } *)
type t182 = { mutable a182 : int64x2#; mutable b182 : t29 } (* { int64x2#; #{ int; int64x2# } } *)
type t183 = #{ a183 : string; b183 : float# } (* #{ string; float# } *)
type t184 = { mutable a184 : int64x2#; mutable b184 : t183 } (* { int64x2#; #{ string; float# } } *)
type t185 = { mutable a185 : int64x2#; mutable b185 : t43 } (* { int64x2#; #{ int64x2# } } *)
type t186 = { mutable a186 : int64x2#; mutable b186 : t45 } (* { int64x2#; #{ int64x2#; int } } *)
type t187 = { mutable a187 : int64x2#; mutable b187 : t47 } (* { int64x2#; #{ int64x2#; int64x2# } } *)
type t188 = { mutable a188 : v19 } (* { (| unit_u) } *)
type t189 = { mutable a189 : v19; mutable b189 : int } (* { (| unit_u); int } *)
type t190 = { mutable a190 : v19; mutable b190 : int64 } (* { (| unit_u); int64 } *)
type t191 = { mutable a191 : v19; mutable b191 : int64# } (* { (| unit_u); int64# } *)
type t192 = { mutable a192 : v19; mutable b192 : int32# } (* { (| unit_u); int32# } *)
type t193 = { mutable a193 : v19; mutable b193 : nativeint# } (* { (| unit_u); nativeint# } *)
type t194 = { mutable a194 : v19; mutable b194 : unit_u } (* { (| unit_u); unit_u } *)
type t195 = { mutable a195 : v19; mutable b195 : float } (* { (| unit_u); float } *)
type t196 = { mutable a196 : v19; mutable b196 : v19 } (* { (| unit_u); (| unit_u) } *)
type t197 = { mutable a197 : t21 } (* { #{ int } } *)
type t198 = { mutable a198 : t21; mutable b198 : int } (* { #{ int }; int } *)
type t199 = { mutable a199 : t21; mutable b199 : int32# } (* { #{ int }; int32# } *)
type t200 = { mutable a200 : t21; mutable b200 : float } (* { #{ int }; float } *)
type t201 = { mutable a201 : t21; mutable b201 : int64x2# } (* { #{ int }; int64x2# } *)
type t202 = { mutable a202 : t23 } (* { #{ int; int } } *)
type t203 = { mutable a203 : t23; mutable b203 : int } (* { #{ int; int }; int } *)
type t204 = { mutable a204 : t23; mutable b204 : int32# } (* { #{ int; int }; int32# } *)
type t205 = { mutable a205 : t23; mutable b205 : float } (* { #{ int; int }; float } *)
type t206 = { mutable a206 : t23; mutable b206 : int64x2# } (* { #{ int; int }; int64x2# } *)
type t207 = { mutable a207 : t25 } (* { #{ int; int32# } } *)
type t208 = { mutable a208 : t25; mutable b208 : int } (* { #{ int; int32# }; int } *)
type t209 = { mutable a209 : t25; mutable b209 : int32# } (* { #{ int; int32# }; int32# } *)
type t210 = { mutable a210 : t27 } (* { #{ int; float } } *)
type t211 = { mutable a211 : t27; mutable b211 : int } (* { #{ int; float }; int } *)
type t212 = { mutable a212 : t27; mutable b212 : float } (* { #{ int; float }; float } *)
type t213 = { mutable a213 : t29 } (* { #{ int; int64x2# } } *)
type t214 = { mutable a214 : t29; mutable b214 : int } (* { #{ int; int64x2# }; int } *)
type t215 = { mutable a215 : t29; mutable b215 : int64x2# } (* { #{ int; int64x2# }; int64x2# } *)
type t216 = #{ a216 : int64; b216 : int64# } (* #{ int64; int64# } *)
type t217 = #{ a217 : int64#; b217 : float# } (* #{ int64#; float# } *)
type t218 = { mutable a218 : t216; mutable b218 : t217 } (* { #{ int64; int64# }; #{ int64#; float# } } *)
type t219 = #{ a219 : int64; b219 : string } (* #{ int64; string } *)
type t220 = #{ a220 : int64#; b220 : string } (* #{ int64#; string } *)
type t221 = { mutable a221 : t219; mutable b221 : t220 } (* { #{ int64; string }; #{ int64#; string } } *)
type t222 = #{ a222 : int64#; b222 : int64 } (* #{ int64#; int64 } *)
type t223 = #{ a223 : int64; b223 : int64 } (* #{ int64; int64 } *)
type t224 = { mutable a224 : t222; mutable b224 : t223 } (* { #{ int64#; int64 }; #{ int64; int64 } } *)
type t225 = #{ a225 : float32#; b225 : float } (* #{ float32#; float } *)
type t226 = { mutable a226 : t222; mutable b226 : t225 } (* { #{ int64#; int64 }; #{ float32#; float } } *)
type t227 = { mutable a227 : t31 } (* { #{ int32# } } *)
type t228 = { mutable a228 : t31; mutable b228 : int } (* { #{ int32# }; int } *)
type t229 = { mutable a229 : t31; mutable b229 : int32# } (* { #{ int32# }; int32# } *)
type t230 = { mutable a230 : t33 } (* { #{ int32#; int } } *)
type t231 = { mutable a231 : t33; mutable b231 : int } (* { #{ int32#; int }; int } *)
type t232 = { mutable a232 : t33; mutable b232 : int32# } (* { #{ int32#; int }; int32# } *)
type t233 = { mutable a233 : t35 } (* { #{ int32#; int32# } } *)
type t234 = { mutable a234 : t35; mutable b234 : int } (* { #{ int32#; int32# }; int } *)
type t235 = { mutable a235 : t35; mutable b235 : int32# } (* { #{ int32#; int32# }; int32# } *)
type t236 = { mutable a236 : t165; mutable b236 : string } (* { #{ unit_u }; string } *)
type t237 = { mutable a237 : t167; mutable b237 : string } (* { #{ unit_u; unit_u }; string } *)
type t238 = { mutable a238 : t106 } (* { #{ unit_u; string } } *)
type t239 = { mutable a239 : t106; mutable b239 : unit_u } (* { #{ unit_u; string }; unit_u } *)
type t240 = { mutable a240 : t106; mutable b240 : string } (* { #{ unit_u; string }; string } *)
type t241 = { mutable a241 : t37 } (* { #{ float } } *)
type t242 = { mutable a242 : t37; mutable b242 : int } (* { #{ float }; int } *)
type t243 = { mutable a243 : t37; mutable b243 : float } (* { #{ float }; float } *)
type t244 = { mutable a244 : t37; mutable b244 : float# } (* { #{ float }; float# } *)
type t245 = { mutable a245 : t39 } (* { #{ float; int } } *)
type t246 = { mutable a246 : t39; mutable b246 : int } (* { #{ float; int }; int } *)
type t247 = { mutable a247 : t39; mutable b247 : float } (* { #{ float; int }; float } *)
type t248 = { mutable a248 : t41 } (* { #{ float; float } } *)
type t249 = { mutable a249 : t41; mutable b249 : int } (* { #{ float; float }; int } *)
type t250 = { mutable a250 : t41; mutable b250 : float } (* { #{ float; float }; float } *)
type t251 = { mutable a251 : t41; mutable b251 : float# } (* { #{ float; float }; float# } *)
type t252 = { mutable a252 : t137 } (* { #{ float; float# } } *)
type t253 = { mutable a253 : t137; mutable b253 : float } (* { #{ float; float# }; float } *)
type t254 = { mutable a254 : t137; mutable b254 : float# } (* { #{ float; float# }; float# } *)
type t255 = { mutable a255 : t139 } (* { #{ float# } } *)
type t256 = { mutable a256 : t139; mutable b256 : float } (* { #{ float# }; float } *)
type t257 = { mutable a257 : t139; mutable b257 : float# } (* { #{ float# }; float# } *)
type t258 = { mutable a258 : t141 } (* { #{ float#; float } } *)
type t259 = { mutable a259 : t141; mutable b259 : float } (* { #{ float#; float }; float } *)
type t260 = { mutable a260 : t141; mutable b260 : float# } (* { #{ float#; float }; float# } *)
type t261 = { mutable a261 : t143 } (* { #{ float#; float# } } *)
type t262 = { mutable a262 : t143; mutable b262 : float } (* { #{ float#; float# }; float } *)
type t263 = { mutable a263 : t143; mutable b263 : float# } (* { #{ float#; float# }; float# } *)
type t264 = #{ a264 : float32#; b264 : int64# } (* #{ float32#; int64# } *)
type t265 = #{ a265 : string; b265 : int64# } (* #{ string; int64# } *)
type t266 = { mutable a266 : t264; mutable b266 : t265 } (* { #{ float32#; int64# }; #{ string; int64# } } *)
type t267 = { mutable a267 : t108 } (* { #{ string } } *)
type t268 = { mutable a268 : t108; mutable b268 : unit_u } (* { #{ string }; unit_u } *)
type t269 = { mutable a269 : t108; mutable b269 : string } (* { #{ string }; string } *)
type t270 = { mutable a270 : t110 } (* { #{ string; unit_u } } *)
type t271 = { mutable a271 : t110; mutable b271 : unit_u } (* { #{ string; unit_u }; unit_u } *)
type t272 = { mutable a272 : t110; mutable b272 : string } (* { #{ string; unit_u }; string } *)
type t273 = { mutable a273 : t112 } (* { #{ string; string } } *)
type t274 = { mutable a274 : t112; mutable b274 : unit_u } (* { #{ string; string }; unit_u } *)
type t275 = { mutable a275 : t112; mutable b275 : string } (* { #{ string; string }; string } *)
type t276 = { mutable a276 : t43 } (* { #{ int64x2# } } *)
type t277 = { mutable a277 : t43; mutable b277 : int } (* { #{ int64x2# }; int } *)
type t278 = { mutable a278 : t43; mutable b278 : int64x2# } (* { #{ int64x2# }; int64x2# } *)
type t279 = { mutable a279 : t45 } (* { #{ int64x2#; int } } *)
type t280 = { mutable a280 : t45; mutable b280 : int } (* { #{ int64x2#; int }; int } *)
type t281 = { mutable a281 : t45; mutable b281 : int64x2# } (* { #{ int64x2#; int }; int64x2# } *)
type t282 = #{ a282 : int64x2#; b282 : string } (* #{ int64x2#; string } *)
type t283 = #{ a283 : int64; b283 : float# } (* #{ int64; float# } *)
type t284 = { mutable a284 : t282; mutable b284 : t283 } (* { #{ int64x2#; string }; #{ int64; float# } } *)
type t285 = { mutable a285 : t47 } (* { #{ int64x2#; int64x2# } } *)
type t286 = { mutable a286 : t47; mutable b286 : int } (* { #{ int64x2#; int64x2# }; int } *)
type t287 = { mutable a287 : t47; mutable b287 : int64x2# } (* { #{ int64x2#; int64x2# }; int64x2# } *)

let to_run () =
  (********************)
  (*   t0 = { int }   *)
  (********************)
  (* Deepening to (.a0) *)
  let idx : (t0, _) idx_mut = (.a0) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a0) *)
    let shallow : (t0, _) idx_mut = (.a0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1 failed %d" i;
  );

  (*************************)
  (*   t1 = { int; int }   *)
  (*************************)
  (* Deepening to (.a1) *)
  let idx : (t1, _) idx_mut = (.a1) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a1) *)
    let shallow : (t1, _) idx_mut = (.a1) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 2;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 2 failed %d" i;
  );
  (* Deepening to (.b1) *)
  let idx : (t1, _) idx_mut = (.b1) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b1) *)
    let shallow : (t1, _) idx_mut = (.b1) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 3;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 3 failed %d" i;
  );

  (******************************)
  (*   t2 = { int; int; int }   *)
  (******************************)
  (* Deepening to (.a2) *)
  let idx : (t2, _) idx_mut = (.a2) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a2) *)
    let shallow : (t2, _) idx_mut = (.a2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 4;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 4 failed %d" i;
  );
  (* Deepening to (.b2) *)
  let idx : (t2, _) idx_mut = (.b2) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b2) *)
    let shallow : (t2, _) idx_mut = (.b2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 5;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 5 failed %d" i;
  );
  (* Deepening to (.c2) *)
  let idx : (t2, _) idx_mut = (.c2) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c2) *)
    let shallow : (t2, _) idx_mut = (.c2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 6;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 6 failed %d" i;
  );

  (*********************************)
  (*   t3 = { int; int; int32# }   *)
  (*********************************)
  (* Deepening to (.a3) *)
  let idx : (t3, _) idx_mut = (.a3) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a3) *)
    let shallow : (t3, _) idx_mut = (.a3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 7;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 7 failed %d" i;
  );
  (* Deepening to (.b3) *)
  let idx : (t3, _) idx_mut = (.b3) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b3) *)
    let shallow : (t3, _) idx_mut = (.b3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 8;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 8 failed %d" i;
  );
  (* Deepening to (.c3) *)
  let idx : (t3, _) idx_mut = (.c3) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c3) *)
    let shallow : (t3, _) idx_mut = (.c3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 9;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 9 failed %d" i;
  );

  (********************************)
  (*   t4 = { int; int; float }   *)
  (********************************)
  (* Deepening to (.a4) *)
  let idx : (t4, _) idx_mut = (.a4) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a4) *)
    let shallow : (t4, _) idx_mut = (.a4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 10;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 10 failed %d" i;
  );
  (* Deepening to (.b4) *)
  let idx : (t4, _) idx_mut = (.b4) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b4) *)
    let shallow : (t4, _) idx_mut = (.b4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 11;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 11 failed %d" i;
  );
  (* Deepening to (.c4) *)
  let idx : (t4, _) idx_mut = (.c4) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c4) *)
    let shallow : (t4, _) idx_mut = (.c4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 12;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 12 failed %d" i;
  );

  (***********************************)
  (*   t5 = { int; int; int64x2# }   *)
  (***********************************)
  (* Deepening to (.a5) *)
  let idx : (t5, _) idx_mut = (.a5) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a5) *)
    let shallow : (t5, _) idx_mut = (.a5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 13;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 13 failed %d" i;
  );
  (* Deepening to (.b5) *)
  let idx : (t5, _) idx_mut = (.b5) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b5) *)
    let shallow : (t5, _) idx_mut = (.b5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 14;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 14 failed %d" i;
  );
  (* Deepening to (.c5) *)
  let idx : (t5, _) idx_mut = (.c5) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c5) *)
    let shallow : (t5, _) idx_mut = (.c5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 15;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 15 failed %d" i;
  );

  (***************************)
  (*   t6 = { int; int64 }   *)
  (***************************)
  (* Deepening to (.a6) *)
  let idx : (t6, _) idx_mut = (.a6) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a6) *)
    let shallow : (t6, _) idx_mut = (.a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 16;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 16 failed %d" i;
  );
  (* Deepening to (.b6) *)
  let idx : (t6, _) idx_mut = (.b6) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b6) *)
    let shallow : (t6, _) idx_mut = (.b6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 17;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 17 failed %d" i;
  );

  (****************************)
  (*   t7 = { int; int64# }   *)
  (****************************)
  (* Deepening to (.a7) *)
  let idx : (t7, _) idx_mut = (.a7) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a7) *)
    let shallow : (t7, _) idx_mut = (.a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 18;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 18 failed %d" i;
  );
  (* Deepening to (.b7) *)
  let idx : (t7, _) idx_mut = (.b7) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b7) *)
    let shallow : (t7, _) idx_mut = (.b7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 19;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 19 failed %d" i;
  );

  (****************************)
  (*   t8 = { int; int32# }   *)
  (****************************)
  (* Deepening to (.a8) *)
  let idx : (t8, _) idx_mut = (.a8) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a8) *)
    let shallow : (t8, _) idx_mut = (.a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 20;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 20 failed %d" i;
  );
  (* Deepening to (.b8) *)
  let idx : (t8, _) idx_mut = (.b8) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b8) *)
    let shallow : (t8, _) idx_mut = (.b8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 21;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 21 failed %d" i;
  );

  (*********************************)
  (*   t9 = { int; int32#; int }   *)
  (*********************************)
  (* Deepening to (.a9) *)
  let idx : (t9, _) idx_mut = (.a9) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a9) *)
    let shallow : (t9, _) idx_mut = (.a9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 22;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 22 failed %d" i;
  );
  (* Deepening to (.b9) *)
  let idx : (t9, _) idx_mut = (.b9) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b9) *)
    let shallow : (t9, _) idx_mut = (.b9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 23;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 23 failed %d" i;
  );
  (* Deepening to (.c9) *)
  let idx : (t9, _) idx_mut = (.c9) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c9) *)
    let shallow : (t9, _) idx_mut = (.c9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 24;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 24 failed %d" i;
  );

  (*************************************)
  (*   t10 = { int; int32#; int32# }   *)
  (*************************************)
  (* Deepening to (.a10) *)
  let idx : (t10, _) idx_mut = (.a10) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a10) *)
    let shallow : (t10, _) idx_mut = (.a10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 25;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 25 failed %d" i;
  );
  (* Deepening to (.b10) *)
  let idx : (t10, _) idx_mut = (.b10) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b10) *)
    let shallow : (t10, _) idx_mut = (.b10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 26;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 26 failed %d" i;
  );
  (* Deepening to (.c10) *)
  let idx : (t10, _) idx_mut = (.c10) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c10) *)
    let shallow : (t10, _) idx_mut = (.c10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 27;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 27 failed %d" i;
  );

  (*********************************)
  (*   t11 = { int; nativeint# }   *)
  (*********************************)
  (* Deepening to (.a11) *)
  let idx : (t11, _) idx_mut = (.a11) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a11) *)
    let shallow : (t11, _) idx_mut = (.a11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 28;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 28 failed %d" i;
  );
  (* Deepening to (.b11) *)
  let idx : (t11, _) idx_mut = (.b11) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b11) *)
    let shallow : (t11, _) idx_mut = (.b11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 29;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 29 failed %d" i;
  );

  (*****************************)
  (*   t12 = { int; unit_u }   *)
  (*****************************)
  (* Deepening to (.a12) *)
  let idx : (t12, _) idx_mut = (.a12) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a12) *)
    let shallow : (t12, _) idx_mut = (.a12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 30;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 30 failed %d" i;
  );
  (* Deepening to (.b12) *)
  let idx : (t12, _) idx_mut = (.b12) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b12) *)
    let shallow : (t12, _) idx_mut = (.b12) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (****************************)
  (*   t13 = { int; float }   *)
  (****************************)
  (* Deepening to (.a13) *)
  let idx : (t13, _) idx_mut = (.a13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a13) *)
    let shallow : (t13, _) idx_mut = (.a13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 31;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 31 failed %d" i;
  );
  (* Deepening to (.b13) *)
  let idx : (t13, _) idx_mut = (.b13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b13) *)
    let shallow : (t13, _) idx_mut = (.b13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 32;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 32 failed %d" i;
  );

  (*********************************)
  (*   t14 = { int; float; int }   *)
  (*********************************)
  (* Deepening to (.a14) *)
  let idx : (t14, _) idx_mut = (.a14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a14) *)
    let shallow : (t14, _) idx_mut = (.a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 33;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 33 failed %d" i;
  );
  (* Deepening to (.b14) *)
  let idx : (t14, _) idx_mut = (.b14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b14) *)
    let shallow : (t14, _) idx_mut = (.b14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 34;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 34 failed %d" i;
  );
  (* Deepening to (.c14) *)
  let idx : (t14, _) idx_mut = (.c14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c14) *)
    let shallow : (t14, _) idx_mut = (.c14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 35;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 35 failed %d" i;
  );

  (***********************************)
  (*   t15 = { int; float; float }   *)
  (***********************************)
  (* Deepening to (.a15) *)
  let idx : (t15, _) idx_mut = (.a15) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a15) *)
    let shallow : (t15, _) idx_mut = (.a15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 36;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 36 failed %d" i;
  );
  (* Deepening to (.b15) *)
  let idx : (t15, _) idx_mut = (.b15) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b15) *)
    let shallow : (t15, _) idx_mut = (.b15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 37;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 37 failed %d" i;
  );
  (* Deepening to (.c15) *)
  let idx : (t15, _) idx_mut = (.c15) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c15) *)
    let shallow : (t15, _) idx_mut = (.c15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 38;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 38 failed %d" i;
  );

  (*******************************)
  (*   t16 = { int; int64x2# }   *)
  (*******************************)
  (* Deepening to (.a16) *)
  let idx : (t16, _) idx_mut = (.a16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a16) *)
    let shallow : (t16, _) idx_mut = (.a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 39;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 39 failed %d" i;
  );
  (* Deepening to (.b16) *)
  let idx : (t16, _) idx_mut = (.b16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b16) *)
    let shallow : (t16, _) idx_mut = (.b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 40;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 40 failed %d" i;
  );

  (************************************)
  (*   t17 = { int; int64x2#; int }   *)
  (************************************)
  (* Deepening to (.a17) *)
  let idx : (t17, _) idx_mut = (.a17) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a17) *)
    let shallow : (t17, _) idx_mut = (.a17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 41;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 41 failed %d" i;
  );
  (* Deepening to (.b17) *)
  let idx : (t17, _) idx_mut = (.b17) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b17) *)
    let shallow : (t17, _) idx_mut = (.b17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 42;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 42 failed %d" i;
  );
  (* Deepening to (.c17) *)
  let idx : (t17, _) idx_mut = (.c17) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c17) *)
    let shallow : (t17, _) idx_mut = (.c17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 43;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 43 failed %d" i;
  );

  (*****************************************)
  (*   t18 = { int; int64x2#; int64x2# }   *)
  (*****************************************)
  (* Deepening to (.a18) *)
  let idx : (t18, _) idx_mut = (.a18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a18) *)
    let shallow : (t18, _) idx_mut = (.a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 44;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 44 failed %d" i;
  );
  (* Deepening to (.b18) *)
  let idx : (t18, _) idx_mut = (.b18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b18) *)
    let shallow : (t18, _) idx_mut = (.b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 45;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 45 failed %d" i;
  );
  (* Deepening to (.c18) *)
  let idx : (t18, _) idx_mut = (.c18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c18) *)
    let shallow : (t18, _) idx_mut = (.c18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 46;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 46 failed %d" i;
  );

  (*********************************)
  (*   t20 = { int; (| unit_u) }   *)
  (*********************************)
  (* Deepening to (.a20) *)
  let idx : (t20, _) idx_mut = (.a20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a20) *)
    let shallow : (t20, _) idx_mut = (.a20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 47;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 47 failed %d" i;
  );
  (* Deepening to (.b20) *)
  let idx : (t20, _) idx_mut = (.b20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b20) *)
    let shallow : (t20, _) idx_mut = (.b20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 48;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 48 failed %d" i;
  );

  (*******************************)
  (*   t22 = { int; #{ int } }   *)
  (*******************************)
  (* Deepening to (.a22) *)
  let idx : (t22, _) idx_mut = (.a22) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a22) *)
    let shallow : (t22, _) idx_mut = (.a22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 49;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 49 failed %d" i;
  );
  (* Deepening to (.b22) *)
  let idx : (t22, _) idx_mut = (.b22) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b22) *)
    let shallow : (t22, _) idx_mut = (.b22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 50;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 50 failed %d" i;
  );
  (* Deepening to (.b22.#a21) *)
  let idx : (t22, _) idx_mut = (.b22.#a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b22) *)
    let shallow : (t22, _) idx_mut = (.b22) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 51;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 51 failed %d" i;
    (* from (.b22.#a21) *)
    let shallow : (t22, _) idx_mut = (.b22.#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 52;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 52 failed %d" i;
  );

  (************************************)
  (*   t24 = { int; #{ int; int } }   *)
  (************************************)
  (* Deepening to (.a24) *)
  let idx : (t24, _) idx_mut = (.a24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a24) *)
    let shallow : (t24, _) idx_mut = (.a24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 53;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 53 failed %d" i;
  );
  (* Deepening to (.b24) *)
  let idx : (t24, _) idx_mut = (.b24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b24) *)
    let shallow : (t24, _) idx_mut = (.b24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 54;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 54 failed %d" i;
  );
  (* Deepening to (.b24.#a23) *)
  let idx : (t24, _) idx_mut = (.b24.#a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b24) *)
    let shallow : (t24, _) idx_mut = (.b24) in
    let deepened = (.idx_mut(shallow).#a23) in
    mark_test_run 55;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 55 failed %d" i;
    (* from (.b24.#a23) *)
    let shallow : (t24, _) idx_mut = (.b24.#a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 56;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 56 failed %d" i;
  );
  (* Deepening to (.b24.#b23) *)
  let idx : (t24, _) idx_mut = (.b24.#b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b24) *)
    let shallow : (t24, _) idx_mut = (.b24) in
    let deepened = (.idx_mut(shallow).#b23) in
    mark_test_run 57;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 57 failed %d" i;
    (* from (.b24.#b23) *)
    let shallow : (t24, _) idx_mut = (.b24.#b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 58;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 58 failed %d" i;
  );

  (***************************************)
  (*   t26 = { int; #{ int; int32# } }   *)
  (***************************************)
  (* Deepening to (.a26) *)
  let idx : (t26, _) idx_mut = (.a26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a26) *)
    let shallow : (t26, _) idx_mut = (.a26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 59;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 59 failed %d" i;
  );
  (* Deepening to (.b26) *)
  let idx : (t26, _) idx_mut = (.b26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b26) *)
    let shallow : (t26, _) idx_mut = (.b26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 60;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 60 failed %d" i;
  );
  (* Deepening to (.b26.#a25) *)
  let idx : (t26, _) idx_mut = (.b26.#a25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b26) *)
    let shallow : (t26, _) idx_mut = (.b26) in
    let deepened = (.idx_mut(shallow).#a25) in
    mark_test_run 61;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 61 failed %d" i;
    (* from (.b26.#a25) *)
    let shallow : (t26, _) idx_mut = (.b26.#a25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 62;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 62 failed %d" i;
  );
  (* Deepening to (.b26.#b25) *)
  let idx : (t26, _) idx_mut = (.b26.#b25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b26) *)
    let shallow : (t26, _) idx_mut = (.b26) in
    let deepened = (.idx_mut(shallow).#b25) in
    mark_test_run 63;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 63 failed %d" i;
    (* from (.b26.#b25) *)
    let shallow : (t26, _) idx_mut = (.b26.#b25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 64;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 64 failed %d" i;
  );

  (**************************************)
  (*   t28 = { int; #{ int; float } }   *)
  (**************************************)
  (* Deepening to (.a28) *)
  let idx : (t28, _) idx_mut = (.a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a28) *)
    let shallow : (t28, _) idx_mut = (.a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 65;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 65 failed %d" i;
  );
  (* Deepening to (.b28) *)
  let idx : (t28, _) idx_mut = (.b28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b28) *)
    let shallow : (t28, _) idx_mut = (.b28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 66;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 66 failed %d" i;
  );
  (* Deepening to (.b28.#a27) *)
  let idx : (t28, _) idx_mut = (.b28.#a27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b28) *)
    let shallow : (t28, _) idx_mut = (.b28) in
    let deepened = (.idx_mut(shallow).#a27) in
    mark_test_run 67;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 67 failed %d" i;
    (* from (.b28.#a27) *)
    let shallow : (t28, _) idx_mut = (.b28.#a27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 68;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 68 failed %d" i;
  );
  (* Deepening to (.b28.#b27) *)
  let idx : (t28, _) idx_mut = (.b28.#b27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b28) *)
    let shallow : (t28, _) idx_mut = (.b28) in
    let deepened = (.idx_mut(shallow).#b27) in
    mark_test_run 69;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 69 failed %d" i;
    (* from (.b28.#b27) *)
    let shallow : (t28, _) idx_mut = (.b28.#b27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 70;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 70 failed %d" i;
  );

  (*****************************************)
  (*   t30 = { int; #{ int; int64x2# } }   *)
  (*****************************************)
  (* Deepening to (.a30) *)
  let idx : (t30, _) idx_mut = (.a30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a30) *)
    let shallow : (t30, _) idx_mut = (.a30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 71;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 71 failed %d" i;
  );
  (* Deepening to (.b30) *)
  let idx : (t30, _) idx_mut = (.b30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b30) *)
    let shallow : (t30, _) idx_mut = (.b30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 72;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 72 failed %d" i;
  );
  (* Deepening to (.b30.#a29) *)
  let idx : (t30, _) idx_mut = (.b30.#a29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b30) *)
    let shallow : (t30, _) idx_mut = (.b30) in
    let deepened = (.idx_mut(shallow).#a29) in
    mark_test_run 73;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 73 failed %d" i;
    (* from (.b30.#a29) *)
    let shallow : (t30, _) idx_mut = (.b30.#a29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 74;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 74 failed %d" i;
  );
  (* Deepening to (.b30.#b29) *)
  let idx : (t30, _) idx_mut = (.b30.#b29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b30) *)
    let shallow : (t30, _) idx_mut = (.b30) in
    let deepened = (.idx_mut(shallow).#b29) in
    mark_test_run 75;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 75 failed %d" i;
    (* from (.b30.#b29) *)
    let shallow : (t30, _) idx_mut = (.b30.#b29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 76;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 76 failed %d" i;
  );

  (**********************************)
  (*   t32 = { int; #{ int32# } }   *)
  (**********************************)
  (* Deepening to (.a32) *)
  let idx : (t32, _) idx_mut = (.a32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a32) *)
    let shallow : (t32, _) idx_mut = (.a32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 77;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 77 failed %d" i;
  );
  (* Deepening to (.b32) *)
  let idx : (t32, _) idx_mut = (.b32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b32) *)
    let shallow : (t32, _) idx_mut = (.b32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 78;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 78 failed %d" i;
  );
  (* Deepening to (.b32.#a31) *)
  let idx : (t32, _) idx_mut = (.b32.#a31) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b32) *)
    let shallow : (t32, _) idx_mut = (.b32) in
    let deepened = (.idx_mut(shallow).#a31) in
    mark_test_run 79;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 79 failed %d" i;
    (* from (.b32.#a31) *)
    let shallow : (t32, _) idx_mut = (.b32.#a31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 80;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 80 failed %d" i;
  );

  (***************************************)
  (*   t34 = { int; #{ int32#; int } }   *)
  (***************************************)
  (* Deepening to (.a34) *)
  let idx : (t34, _) idx_mut = (.a34) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a34) *)
    let shallow : (t34, _) idx_mut = (.a34) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 81;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 81 failed %d" i;
  );
  (* Deepening to (.b34) *)
  let idx : (t34, _) idx_mut = (.b34) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b34) *)
    let shallow : (t34, _) idx_mut = (.b34) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 82;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 82 failed %d" i;
  );
  (* Deepening to (.b34.#a33) *)
  let idx : (t34, _) idx_mut = (.b34.#a33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b34) *)
    let shallow : (t34, _) idx_mut = (.b34) in
    let deepened = (.idx_mut(shallow).#a33) in
    mark_test_run 83;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 83 failed %d" i;
    (* from (.b34.#a33) *)
    let shallow : (t34, _) idx_mut = (.b34.#a33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 84;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 84 failed %d" i;
  );
  (* Deepening to (.b34.#b33) *)
  let idx : (t34, _) idx_mut = (.b34.#b33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b34) *)
    let shallow : (t34, _) idx_mut = (.b34) in
    let deepened = (.idx_mut(shallow).#b33) in
    mark_test_run 85;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 85 failed %d" i;
    (* from (.b34.#b33) *)
    let shallow : (t34, _) idx_mut = (.b34.#b33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 86;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 86 failed %d" i;
  );

  (******************************************)
  (*   t36 = { int; #{ int32#; int32# } }   *)
  (******************************************)
  (* Deepening to (.a36) *)
  let idx : (t36, _) idx_mut = (.a36) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a36) *)
    let shallow : (t36, _) idx_mut = (.a36) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 87;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 87 failed %d" i;
  );
  (* Deepening to (.b36) *)
  let idx : (t36, _) idx_mut = (.b36) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b36) *)
    let shallow : (t36, _) idx_mut = (.b36) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 88;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 88 failed %d" i;
  );
  (* Deepening to (.b36.#a35) *)
  let idx : (t36, _) idx_mut = (.b36.#a35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b36) *)
    let shallow : (t36, _) idx_mut = (.b36) in
    let deepened = (.idx_mut(shallow).#a35) in
    mark_test_run 89;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 89 failed %d" i;
    (* from (.b36.#a35) *)
    let shallow : (t36, _) idx_mut = (.b36.#a35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 90;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 90 failed %d" i;
  );
  (* Deepening to (.b36.#b35) *)
  let idx : (t36, _) idx_mut = (.b36.#b35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b36) *)
    let shallow : (t36, _) idx_mut = (.b36) in
    let deepened = (.idx_mut(shallow).#b35) in
    mark_test_run 91;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 91 failed %d" i;
    (* from (.b36.#b35) *)
    let shallow : (t36, _) idx_mut = (.b36.#b35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 92;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 92 failed %d" i;
  );

  (*********************************)
  (*   t38 = { int; #{ float } }   *)
  (*********************************)
  (* Deepening to (.a38) *)
  let idx : (t38, _) idx_mut = (.a38) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a38) *)
    let shallow : (t38, _) idx_mut = (.a38) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 93;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 93 failed %d" i;
  );
  (* Deepening to (.b38) *)
  let idx : (t38, _) idx_mut = (.b38) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b38) *)
    let shallow : (t38, _) idx_mut = (.b38) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 94;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 94 failed %d" i;
  );
  (* Deepening to (.b38.#a37) *)
  let idx : (t38, _) idx_mut = (.b38.#a37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b38) *)
    let shallow : (t38, _) idx_mut = (.b38) in
    let deepened = (.idx_mut(shallow).#a37) in
    mark_test_run 95;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 95 failed %d" i;
    (* from (.b38.#a37) *)
    let shallow : (t38, _) idx_mut = (.b38.#a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 96;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 96 failed %d" i;
  );

  (**************************************)
  (*   t40 = { int; #{ float; int } }   *)
  (**************************************)
  (* Deepening to (.a40) *)
  let idx : (t40, _) idx_mut = (.a40) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a40) *)
    let shallow : (t40, _) idx_mut = (.a40) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 97;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 97 failed %d" i;
  );
  (* Deepening to (.b40) *)
  let idx : (t40, _) idx_mut = (.b40) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b40) *)
    let shallow : (t40, _) idx_mut = (.b40) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 98;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 98 failed %d" i;
  );
  (* Deepening to (.b40.#a39) *)
  let idx : (t40, _) idx_mut = (.b40.#a39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b40) *)
    let shallow : (t40, _) idx_mut = (.b40) in
    let deepened = (.idx_mut(shallow).#a39) in
    mark_test_run 99;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 99 failed %d" i;
    (* from (.b40.#a39) *)
    let shallow : (t40, _) idx_mut = (.b40.#a39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 100;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 100 failed %d" i;
  );
  (* Deepening to (.b40.#b39) *)
  let idx : (t40, _) idx_mut = (.b40.#b39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b40) *)
    let shallow : (t40, _) idx_mut = (.b40) in
    let deepened = (.idx_mut(shallow).#b39) in
    mark_test_run 101;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 101 failed %d" i;
    (* from (.b40.#b39) *)
    let shallow : (t40, _) idx_mut = (.b40.#b39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 102;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 102 failed %d" i;
  );

  (****************************************)
  (*   t42 = { int; #{ float; float } }   *)
  (****************************************)
  (* Deepening to (.a42) *)
  let idx : (t42, _) idx_mut = (.a42) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a42) *)
    let shallow : (t42, _) idx_mut = (.a42) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 103;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 103 failed %d" i;
  );
  (* Deepening to (.b42) *)
  let idx : (t42, _) idx_mut = (.b42) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b42) *)
    let shallow : (t42, _) idx_mut = (.b42) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 104;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 104 failed %d" i;
  );
  (* Deepening to (.b42.#a41) *)
  let idx : (t42, _) idx_mut = (.b42.#a41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b42) *)
    let shallow : (t42, _) idx_mut = (.b42) in
    let deepened = (.idx_mut(shallow).#a41) in
    mark_test_run 105;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 105 failed %d" i;
    (* from (.b42.#a41) *)
    let shallow : (t42, _) idx_mut = (.b42.#a41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 106;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 106 failed %d" i;
  );
  (* Deepening to (.b42.#b41) *)
  let idx : (t42, _) idx_mut = (.b42.#b41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b42) *)
    let shallow : (t42, _) idx_mut = (.b42) in
    let deepened = (.idx_mut(shallow).#b41) in
    mark_test_run 107;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 107 failed %d" i;
    (* from (.b42.#b41) *)
    let shallow : (t42, _) idx_mut = (.b42.#b41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 108;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 108 failed %d" i;
  );

  (************************************)
  (*   t44 = { int; #{ int64x2# } }   *)
  (************************************)
  (* Deepening to (.a44) *)
  let idx : (t44, _) idx_mut = (.a44) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a44) *)
    let shallow : (t44, _) idx_mut = (.a44) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 109;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 109 failed %d" i;
  );
  (* Deepening to (.b44) *)
  let idx : (t44, _) idx_mut = (.b44) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b44) *)
    let shallow : (t44, _) idx_mut = (.b44) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 110;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 110 failed %d" i;
  );
  (* Deepening to (.b44.#a43) *)
  let idx : (t44, _) idx_mut = (.b44.#a43) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b44) *)
    let shallow : (t44, _) idx_mut = (.b44) in
    let deepened = (.idx_mut(shallow).#a43) in
    mark_test_run 111;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 111 failed %d" i;
    (* from (.b44.#a43) *)
    let shallow : (t44, _) idx_mut = (.b44.#a43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 112;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 112 failed %d" i;
  );

  (*****************************************)
  (*   t46 = { int; #{ int64x2#; int } }   *)
  (*****************************************)
  (* Deepening to (.a46) *)
  let idx : (t46, _) idx_mut = (.a46) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a46) *)
    let shallow : (t46, _) idx_mut = (.a46) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 113;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 113 failed %d" i;
  );
  (* Deepening to (.b46) *)
  let idx : (t46, _) idx_mut = (.b46) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b46) *)
    let shallow : (t46, _) idx_mut = (.b46) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 114;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 114 failed %d" i;
  );
  (* Deepening to (.b46.#a45) *)
  let idx : (t46, _) idx_mut = (.b46.#a45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b46) *)
    let shallow : (t46, _) idx_mut = (.b46) in
    let deepened = (.idx_mut(shallow).#a45) in
    mark_test_run 115;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 115 failed %d" i;
    (* from (.b46.#a45) *)
    let shallow : (t46, _) idx_mut = (.b46.#a45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 116;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 116 failed %d" i;
  );
  (* Deepening to (.b46.#b45) *)
  let idx : (t46, _) idx_mut = (.b46.#b45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b46) *)
    let shallow : (t46, _) idx_mut = (.b46) in
    let deepened = (.idx_mut(shallow).#b45) in
    mark_test_run 117;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 117 failed %d" i;
    (* from (.b46.#b45) *)
    let shallow : (t46, _) idx_mut = (.b46.#b45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 118;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 118 failed %d" i;
  );

  (**********************************************)
  (*   t48 = { int; #{ int64x2#; int64x2# } }   *)
  (**********************************************)
  (* Deepening to (.a48) *)
  let idx : (t48, _) idx_mut = (.a48) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a48) *)
    let shallow : (t48, _) idx_mut = (.a48) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 119;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 119 failed %d" i;
  );
  (* Deepening to (.b48) *)
  let idx : (t48, _) idx_mut = (.b48) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b48) *)
    let shallow : (t48, _) idx_mut = (.b48) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 120;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 120 failed %d" i;
  );
  (* Deepening to (.b48.#a47) *)
  let idx : (t48, _) idx_mut = (.b48.#a47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b48) *)
    let shallow : (t48, _) idx_mut = (.b48) in
    let deepened = (.idx_mut(shallow).#a47) in
    mark_test_run 121;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 121 failed %d" i;
    (* from (.b48.#a47) *)
    let shallow : (t48, _) idx_mut = (.b48.#a47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 122;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 122 failed %d" i;
  );
  (* Deepening to (.b48.#b47) *)
  let idx : (t48, _) idx_mut = (.b48.#b47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b48) *)
    let shallow : (t48, _) idx_mut = (.b48) in
    let deepened = (.idx_mut(shallow).#b47) in
    mark_test_run 123;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 123 failed %d" i;
    (* from (.b48.#b47) *)
    let shallow : (t48, _) idx_mut = (.b48.#b47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 124;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 124 failed %d" i;
  );

  (***********************)
  (*   t49 = { int64 }   *)
  (***********************)
  (* Deepening to (.a49) *)
  let idx : (t49, _) idx_mut = (.a49) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a49) *)
    let shallow : (t49, _) idx_mut = (.a49) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 125;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 125 failed %d" i;
  );

  (****************************)
  (*   t50 = { int64; int }   *)
  (****************************)
  (* Deepening to (.a50) *)
  let idx : (t50, _) idx_mut = (.a50) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a50) *)
    let shallow : (t50, _) idx_mut = (.a50) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 126;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 126 failed %d" i;
  );
  (* Deepening to (.b50) *)
  let idx : (t50, _) idx_mut = (.b50) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b50) *)
    let shallow : (t50, _) idx_mut = (.b50) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 127;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 127 failed %d" i;
  );

  (******************************)
  (*   t51 = { int64; int64 }   *)
  (******************************)
  (* Deepening to (.a51) *)
  let idx : (t51, _) idx_mut = (.a51) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a51) *)
    let shallow : (t51, _) idx_mut = (.a51) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 128;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 128 failed %d" i;
  );
  (* Deepening to (.b51) *)
  let idx : (t51, _) idx_mut = (.b51) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b51) *)
    let shallow : (t51, _) idx_mut = (.b51) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 129;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 129 failed %d" i;
  );

  (*******************************)
  (*   t52 = { int64; int64# }   *)
  (*******************************)
  (* Deepening to (.a52) *)
  let idx : (t52, _) idx_mut = (.a52) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a52) *)
    let shallow : (t52, _) idx_mut = (.a52) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 130;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 130 failed %d" i;
  );
  (* Deepening to (.b52) *)
  let idx : (t52, _) idx_mut = (.b52) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b52) *)
    let shallow : (t52, _) idx_mut = (.b52) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 131;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 131 failed %d" i;
  );

  (*******************************)
  (*   t53 = { int64; int32# }   *)
  (*******************************)
  (* Deepening to (.a53) *)
  let idx : (t53, _) idx_mut = (.a53) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a53) *)
    let shallow : (t53, _) idx_mut = (.a53) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 132;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 132 failed %d" i;
  );
  (* Deepening to (.b53) *)
  let idx : (t53, _) idx_mut = (.b53) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b53) *)
    let shallow : (t53, _) idx_mut = (.b53) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 133;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 133 failed %d" i;
  );

  (***********************************)
  (*   t54 = { int64; nativeint# }   *)
  (***********************************)
  (* Deepening to (.a54) *)
  let idx : (t54, _) idx_mut = (.a54) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a54) *)
    let shallow : (t54, _) idx_mut = (.a54) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 134;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 134 failed %d" i;
  );
  (* Deepening to (.b54) *)
  let idx : (t54, _) idx_mut = (.b54) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b54) *)
    let shallow : (t54, _) idx_mut = (.b54) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 135;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 135 failed %d" i;
  );

  (*******************************)
  (*   t55 = { int64; unit_u }   *)
  (*******************************)
  (* Deepening to (.a55) *)
  let idx : (t55, _) idx_mut = (.a55) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a55) *)
    let shallow : (t55, _) idx_mut = (.a55) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 136;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 136 failed %d" i;
  );
  (* Deepening to (.b55) *)
  let idx : (t55, _) idx_mut = (.b55) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b55) *)
    let shallow : (t55, _) idx_mut = (.b55) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (******************************)
  (*   t56 = { int64; float }   *)
  (******************************)
  (* Deepening to (.a56) *)
  let idx : (t56, _) idx_mut = (.a56) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a56) *)
    let shallow : (t56, _) idx_mut = (.a56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 137;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 137 failed %d" i;
  );
  (* Deepening to (.b56) *)
  let idx : (t56, _) idx_mut = (.b56) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b56) *)
    let shallow : (t56, _) idx_mut = (.b56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 138;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 138 failed %d" i;
  );

  (***********************************)
  (*   t57 = { int64; (| unit_u) }   *)
  (***********************************)
  (* Deepening to (.a57) *)
  let idx : (t57, _) idx_mut = (.a57) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a57) *)
    let shallow : (t57, _) idx_mut = (.a57) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 139;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 139 failed %d" i;
  );
  (* Deepening to (.b57) *)
  let idx : (t57, _) idx_mut = (.b57) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b57) *)
    let shallow : (t57, _) idx_mut = (.b57) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 140;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 140 failed %d" i;
  );

  (************************)
  (*   t58 = { int64# }   *)
  (************************)
  (* Deepening to (.a58) *)
  let idx : (t58, _) idx_mut = (.a58) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a58) *)
    let shallow : (t58, _) idx_mut = (.a58) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 141;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 141 failed %d" i;
  );

  (*****************************)
  (*   t59 = { int64#; int }   *)
  (*****************************)
  (* Deepening to (.a59) *)
  let idx : (t59, _) idx_mut = (.a59) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a59) *)
    let shallow : (t59, _) idx_mut = (.a59) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 142;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 142 failed %d" i;
  );
  (* Deepening to (.b59) *)
  let idx : (t59, _) idx_mut = (.b59) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b59) *)
    let shallow : (t59, _) idx_mut = (.b59) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 143;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 143 failed %d" i;
  );

  (*******************************)
  (*   t60 = { int64#; int64 }   *)
  (*******************************)
  (* Deepening to (.a60) *)
  let idx : (t60, _) idx_mut = (.a60) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a60) *)
    let shallow : (t60, _) idx_mut = (.a60) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 144;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 144 failed %d" i;
  );
  (* Deepening to (.b60) *)
  let idx : (t60, _) idx_mut = (.b60) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b60) *)
    let shallow : (t60, _) idx_mut = (.b60) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 145;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 145 failed %d" i;
  );

  (********************************)
  (*   t61 = { int64#; int64# }   *)
  (********************************)
  (* Deepening to (.a61) *)
  let idx : (t61, _) idx_mut = (.a61) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a61) *)
    let shallow : (t61, _) idx_mut = (.a61) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 146;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 146 failed %d" i;
  );
  (* Deepening to (.b61) *)
  let idx : (t61, _) idx_mut = (.b61) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b61) *)
    let shallow : (t61, _) idx_mut = (.b61) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 147;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 147 failed %d" i;
  );

  (********************************)
  (*   t62 = { int64#; int32# }   *)
  (********************************)
  (* Deepening to (.a62) *)
  let idx : (t62, _) idx_mut = (.a62) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a62) *)
    let shallow : (t62, _) idx_mut = (.a62) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 148;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 148 failed %d" i;
  );
  (* Deepening to (.b62) *)
  let idx : (t62, _) idx_mut = (.b62) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b62) *)
    let shallow : (t62, _) idx_mut = (.b62) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 149;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 149 failed %d" i;
  );

  (************************************)
  (*   t63 = { int64#; nativeint# }   *)
  (************************************)
  (* Deepening to (.a63) *)
  let idx : (t63, _) idx_mut = (.a63) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a63) *)
    let shallow : (t63, _) idx_mut = (.a63) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 150;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 150 failed %d" i;
  );
  (* Deepening to (.b63) *)
  let idx : (t63, _) idx_mut = (.b63) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b63) *)
    let shallow : (t63, _) idx_mut = (.b63) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 151;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 151 failed %d" i;
  );

  (********************************)
  (*   t64 = { int64#; unit_u }   *)
  (********************************)
  (* Deepening to (.a64) *)
  let idx : (t64, _) idx_mut = (.a64) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a64) *)
    let shallow : (t64, _) idx_mut = (.a64) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 152;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 152 failed %d" i;
  );
  (* Deepening to (.b64) *)
  let idx : (t64, _) idx_mut = (.b64) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b64) *)
    let shallow : (t64, _) idx_mut = (.b64) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (*******************************)
  (*   t65 = { int64#; float }   *)
  (*******************************)
  (* Deepening to (.a65) *)
  let idx : (t65, _) idx_mut = (.a65) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a65) *)
    let shallow : (t65, _) idx_mut = (.a65) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 153;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 153 failed %d" i;
  );
  (* Deepening to (.b65) *)
  let idx : (t65, _) idx_mut = (.b65) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b65) *)
    let shallow : (t65, _) idx_mut = (.b65) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 154;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 154 failed %d" i;
  );

  (************************************)
  (*   t66 = { int64#; (| unit_u) }   *)
  (************************************)
  (* Deepening to (.a66) *)
  let idx : (t66, _) idx_mut = (.a66) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a66) *)
    let shallow : (t66, _) idx_mut = (.a66) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 155;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 155 failed %d" i;
  );
  (* Deepening to (.b66) *)
  let idx : (t66, _) idx_mut = (.b66) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b66) *)
    let shallow : (t66, _) idx_mut = (.b66) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 156;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 156 failed %d" i;
  );

  (************************)
  (*   t67 = { int32# }   *)
  (************************)
  (* Deepening to (.a67) *)
  let idx : (t67, _) idx_mut = (.a67) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a67) *)
    let shallow : (t67, _) idx_mut = (.a67) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 157;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 157 failed %d" i;
  );

  (*****************************)
  (*   t68 = { int32#; int }   *)
  (*****************************)
  (* Deepening to (.a68) *)
  let idx : (t68, _) idx_mut = (.a68) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a68) *)
    let shallow : (t68, _) idx_mut = (.a68) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 158;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 158 failed %d" i;
  );
  (* Deepening to (.b68) *)
  let idx : (t68, _) idx_mut = (.b68) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b68) *)
    let shallow : (t68, _) idx_mut = (.b68) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 159;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 159 failed %d" i;
  );

  (**********************************)
  (*   t69 = { int32#; int; int }   *)
  (**********************************)
  (* Deepening to (.a69) *)
  let idx : (t69, _) idx_mut = (.a69) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a69) *)
    let shallow : (t69, _) idx_mut = (.a69) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 160;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 160 failed %d" i;
  );
  (* Deepening to (.b69) *)
  let idx : (t69, _) idx_mut = (.b69) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b69) *)
    let shallow : (t69, _) idx_mut = (.b69) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 161;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 161 failed %d" i;
  );
  (* Deepening to (.c69) *)
  let idx : (t69, _) idx_mut = (.c69) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c69) *)
    let shallow : (t69, _) idx_mut = (.c69) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 162;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 162 failed %d" i;
  );

  (*************************************)
  (*   t70 = { int32#; int; int32# }   *)
  (*************************************)
  (* Deepening to (.a70) *)
  let idx : (t70, _) idx_mut = (.a70) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a70) *)
    let shallow : (t70, _) idx_mut = (.a70) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 163;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 163 failed %d" i;
  );
  (* Deepening to (.b70) *)
  let idx : (t70, _) idx_mut = (.b70) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b70) *)
    let shallow : (t70, _) idx_mut = (.b70) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 164;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 164 failed %d" i;
  );
  (* Deepening to (.c70) *)
  let idx : (t70, _) idx_mut = (.c70) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c70) *)
    let shallow : (t70, _) idx_mut = (.c70) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 165;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 165 failed %d" i;
  );

  (*******************************)
  (*   t71 = { int32#; int64 }   *)
  (*******************************)
  (* Deepening to (.a71) *)
  let idx : (t71, _) idx_mut = (.a71) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a71) *)
    let shallow : (t71, _) idx_mut = (.a71) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 166;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 166 failed %d" i;
  );
  (* Deepening to (.b71) *)
  let idx : (t71, _) idx_mut = (.b71) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b71) *)
    let shallow : (t71, _) idx_mut = (.b71) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 167;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 167 failed %d" i;
  );

  (********************************)
  (*   t72 = { int32#; int64# }   *)
  (********************************)
  (* Deepening to (.a72) *)
  let idx : (t72, _) idx_mut = (.a72) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a72) *)
    let shallow : (t72, _) idx_mut = (.a72) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 168;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 168 failed %d" i;
  );
  (* Deepening to (.b72) *)
  let idx : (t72, _) idx_mut = (.b72) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b72) *)
    let shallow : (t72, _) idx_mut = (.b72) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 169;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 169 failed %d" i;
  );

  (********************************)
  (*   t73 = { int32#; int32# }   *)
  (********************************)
  (* Deepening to (.a73) *)
  let idx : (t73, _) idx_mut = (.a73) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a73) *)
    let shallow : (t73, _) idx_mut = (.a73) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 170;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 170 failed %d" i;
  );
  (* Deepening to (.b73) *)
  let idx : (t73, _) idx_mut = (.b73) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b73) *)
    let shallow : (t73, _) idx_mut = (.b73) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 171;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 171 failed %d" i;
  );

  (*************************************)
  (*   t74 = { int32#; int32#; int }   *)
  (*************************************)
  (* Deepening to (.a74) *)
  let idx : (t74, _) idx_mut = (.a74) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a74) *)
    let shallow : (t74, _) idx_mut = (.a74) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 172;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 172 failed %d" i;
  );
  (* Deepening to (.b74) *)
  let idx : (t74, _) idx_mut = (.b74) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b74) *)
    let shallow : (t74, _) idx_mut = (.b74) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 173;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 173 failed %d" i;
  );
  (* Deepening to (.c74) *)
  let idx : (t74, _) idx_mut = (.c74) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c74) *)
    let shallow : (t74, _) idx_mut = (.c74) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 174;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 174 failed %d" i;
  );

  (****************************************)
  (*   t75 = { int32#; int32#; int32# }   *)
  (****************************************)
  (* Deepening to (.a75) *)
  let idx : (t75, _) idx_mut = (.a75) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a75) *)
    let shallow : (t75, _) idx_mut = (.a75) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 175;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 175 failed %d" i;
  );
  (* Deepening to (.b75) *)
  let idx : (t75, _) idx_mut = (.b75) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b75) *)
    let shallow : (t75, _) idx_mut = (.b75) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 176;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 176 failed %d" i;
  );
  (* Deepening to (.c75) *)
  let idx : (t75, _) idx_mut = (.c75) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c75) *)
    let shallow : (t75, _) idx_mut = (.c75) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 177;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 177 failed %d" i;
  );

  (************************************)
  (*   t76 = { int32#; nativeint# }   *)
  (************************************)
  (* Deepening to (.a76) *)
  let idx : (t76, _) idx_mut = (.a76) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a76) *)
    let shallow : (t76, _) idx_mut = (.a76) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 178;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 178 failed %d" i;
  );
  (* Deepening to (.b76) *)
  let idx : (t76, _) idx_mut = (.b76) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b76) *)
    let shallow : (t76, _) idx_mut = (.b76) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 179;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 179 failed %d" i;
  );

  (********************************)
  (*   t77 = { int32#; unit_u }   *)
  (********************************)
  (* Deepening to (.a77) *)
  let idx : (t77, _) idx_mut = (.a77) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a77) *)
    let shallow : (t77, _) idx_mut = (.a77) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 180;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 180 failed %d" i;
  );
  (* Deepening to (.b77) *)
  let idx : (t77, _) idx_mut = (.b77) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b77) *)
    let shallow : (t77, _) idx_mut = (.b77) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (*******************************)
  (*   t78 = { int32#; float }   *)
  (*******************************)
  (* Deepening to (.a78) *)
  let idx : (t78, _) idx_mut = (.a78) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a78) *)
    let shallow : (t78, _) idx_mut = (.a78) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 181;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 181 failed %d" i;
  );
  (* Deepening to (.b78) *)
  let idx : (t78, _) idx_mut = (.b78) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b78) *)
    let shallow : (t78, _) idx_mut = (.b78) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 182;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 182 failed %d" i;
  );

  (************************************)
  (*   t79 = { int32#; (| unit_u) }   *)
  (************************************)
  (* Deepening to (.a79) *)
  let idx : (t79, _) idx_mut = (.a79) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a79) *)
    let shallow : (t79, _) idx_mut = (.a79) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 183;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 183 failed %d" i;
  );
  (* Deepening to (.b79) *)
  let idx : (t79, _) idx_mut = (.b79) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b79) *)
    let shallow : (t79, _) idx_mut = (.b79) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 184;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 184 failed %d" i;
  );

  (**********************************)
  (*   t80 = { int32#; #{ int } }   *)
  (**********************************)
  (* Deepening to (.a80) *)
  let idx : (t80, _) idx_mut = (.a80) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a80) *)
    let shallow : (t80, _) idx_mut = (.a80) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 185;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 185 failed %d" i;
  );
  (* Deepening to (.b80) *)
  let idx : (t80, _) idx_mut = (.b80) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b80) *)
    let shallow : (t80, _) idx_mut = (.b80) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 186;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 186 failed %d" i;
  );
  (* Deepening to (.b80.#a21) *)
  let idx : (t80, _) idx_mut = (.b80.#a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b80) *)
    let shallow : (t80, _) idx_mut = (.b80) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 187;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 187 failed %d" i;
    (* from (.b80.#a21) *)
    let shallow : (t80, _) idx_mut = (.b80.#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 188;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 188 failed %d" i;
  );

  (***************************************)
  (*   t81 = { int32#; #{ int; int } }   *)
  (***************************************)
  (* Deepening to (.a81) *)
  let idx : (t81, _) idx_mut = (.a81) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a81) *)
    let shallow : (t81, _) idx_mut = (.a81) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 189;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 189 failed %d" i;
  );
  (* Deepening to (.b81) *)
  let idx : (t81, _) idx_mut = (.b81) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b81) *)
    let shallow : (t81, _) idx_mut = (.b81) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 190;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 190 failed %d" i;
  );
  (* Deepening to (.b81.#a23) *)
  let idx : (t81, _) idx_mut = (.b81.#a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b81) *)
    let shallow : (t81, _) idx_mut = (.b81) in
    let deepened = (.idx_mut(shallow).#a23) in
    mark_test_run 191;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 191 failed %d" i;
    (* from (.b81.#a23) *)
    let shallow : (t81, _) idx_mut = (.b81.#a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 192;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 192 failed %d" i;
  );
  (* Deepening to (.b81.#b23) *)
  let idx : (t81, _) idx_mut = (.b81.#b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b81) *)
    let shallow : (t81, _) idx_mut = (.b81) in
    let deepened = (.idx_mut(shallow).#b23) in
    mark_test_run 193;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 193 failed %d" i;
    (* from (.b81.#b23) *)
    let shallow : (t81, _) idx_mut = (.b81.#b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 194;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 194 failed %d" i;
  );

  (******************************************)
  (*   t82 = { int32#; #{ int; int32# } }   *)
  (******************************************)
  (* Deepening to (.a82) *)
  let idx : (t82, _) idx_mut = (.a82) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a82) *)
    let shallow : (t82, _) idx_mut = (.a82) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 195;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 195 failed %d" i;
  );
  (* Deepening to (.b82) *)
  let idx : (t82, _) idx_mut = (.b82) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b82) *)
    let shallow : (t82, _) idx_mut = (.b82) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 196;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 196 failed %d" i;
  );
  (* Deepening to (.b82.#a25) *)
  let idx : (t82, _) idx_mut = (.b82.#a25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b82) *)
    let shallow : (t82, _) idx_mut = (.b82) in
    let deepened = (.idx_mut(shallow).#a25) in
    mark_test_run 197;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 197 failed %d" i;
    (* from (.b82.#a25) *)
    let shallow : (t82, _) idx_mut = (.b82.#a25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 198;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 198 failed %d" i;
  );
  (* Deepening to (.b82.#b25) *)
  let idx : (t82, _) idx_mut = (.b82.#b25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b82) *)
    let shallow : (t82, _) idx_mut = (.b82) in
    let deepened = (.idx_mut(shallow).#b25) in
    mark_test_run 199;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 199 failed %d" i;
    (* from (.b82.#b25) *)
    let shallow : (t82, _) idx_mut = (.b82.#b25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 200;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 200 failed %d" i;
  );

  (*************************************)
  (*   t83 = { int32#; #{ int32# } }   *)
  (*************************************)
  (* Deepening to (.a83) *)
  let idx : (t83, _) idx_mut = (.a83) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a83) *)
    let shallow : (t83, _) idx_mut = (.a83) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 201;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 201 failed %d" i;
  );
  (* Deepening to (.b83) *)
  let idx : (t83, _) idx_mut = (.b83) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b83) *)
    let shallow : (t83, _) idx_mut = (.b83) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 202;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 202 failed %d" i;
  );
  (* Deepening to (.b83.#a31) *)
  let idx : (t83, _) idx_mut = (.b83.#a31) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b83) *)
    let shallow : (t83, _) idx_mut = (.b83) in
    let deepened = (.idx_mut(shallow).#a31) in
    mark_test_run 203;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 203 failed %d" i;
    (* from (.b83.#a31) *)
    let shallow : (t83, _) idx_mut = (.b83.#a31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 204;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 204 failed %d" i;
  );

  (******************************************)
  (*   t84 = { int32#; #{ int32#; int } }   *)
  (******************************************)
  (* Deepening to (.a84) *)
  let idx : (t84, _) idx_mut = (.a84) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a84) *)
    let shallow : (t84, _) idx_mut = (.a84) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 205;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 205 failed %d" i;
  );
  (* Deepening to (.b84) *)
  let idx : (t84, _) idx_mut = (.b84) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b84) *)
    let shallow : (t84, _) idx_mut = (.b84) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 206;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 206 failed %d" i;
  );
  (* Deepening to (.b84.#a33) *)
  let idx : (t84, _) idx_mut = (.b84.#a33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b84) *)
    let shallow : (t84, _) idx_mut = (.b84) in
    let deepened = (.idx_mut(shallow).#a33) in
    mark_test_run 207;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 207 failed %d" i;
    (* from (.b84.#a33) *)
    let shallow : (t84, _) idx_mut = (.b84.#a33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 208;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 208 failed %d" i;
  );
  (* Deepening to (.b84.#b33) *)
  let idx : (t84, _) idx_mut = (.b84.#b33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b84) *)
    let shallow : (t84, _) idx_mut = (.b84) in
    let deepened = (.idx_mut(shallow).#b33) in
    mark_test_run 209;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 209 failed %d" i;
    (* from (.b84.#b33) *)
    let shallow : (t84, _) idx_mut = (.b84.#b33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 210;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 210 failed %d" i;
  );

  (*********************************************)
  (*   t85 = { int32#; #{ int32#; int32# } }   *)
  (*********************************************)
  (* Deepening to (.a85) *)
  let idx : (t85, _) idx_mut = (.a85) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a85) *)
    let shallow : (t85, _) idx_mut = (.a85) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 211;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 211 failed %d" i;
  );
  (* Deepening to (.b85) *)
  let idx : (t85, _) idx_mut = (.b85) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b85) *)
    let shallow : (t85, _) idx_mut = (.b85) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 212;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 212 failed %d" i;
  );
  (* Deepening to (.b85.#a35) *)
  let idx : (t85, _) idx_mut = (.b85.#a35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b85) *)
    let shallow : (t85, _) idx_mut = (.b85) in
    let deepened = (.idx_mut(shallow).#a35) in
    mark_test_run 213;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 213 failed %d" i;
    (* from (.b85.#a35) *)
    let shallow : (t85, _) idx_mut = (.b85.#a35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 214;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 214 failed %d" i;
  );
  (* Deepening to (.b85.#b35) *)
  let idx : (t85, _) idx_mut = (.b85.#b35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b85) *)
    let shallow : (t85, _) idx_mut = (.b85) in
    let deepened = (.idx_mut(shallow).#b35) in
    mark_test_run 215;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 215 failed %d" i;
    (* from (.b85.#b35) *)
    let shallow : (t85, _) idx_mut = (.b85.#b35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 216;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 216 failed %d" i;
  );

  (****************************)
  (*   t86 = { nativeint# }   *)
  (****************************)
  (* Deepening to (.a86) *)
  let idx : (t86, _) idx_mut = (.a86) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a86) *)
    let shallow : (t86, _) idx_mut = (.a86) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 217;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 217 failed %d" i;
  );

  (*********************************)
  (*   t87 = { nativeint#; int }   *)
  (*********************************)
  (* Deepening to (.a87) *)
  let idx : (t87, _) idx_mut = (.a87) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a87) *)
    let shallow : (t87, _) idx_mut = (.a87) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 218;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 218 failed %d" i;
  );
  (* Deepening to (.b87) *)
  let idx : (t87, _) idx_mut = (.b87) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b87) *)
    let shallow : (t87, _) idx_mut = (.b87) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 219;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 219 failed %d" i;
  );

  (***********************************)
  (*   t88 = { nativeint#; int64 }   *)
  (***********************************)
  (* Deepening to (.a88) *)
  let idx : (t88, _) idx_mut = (.a88) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a88) *)
    let shallow : (t88, _) idx_mut = (.a88) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 220;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 220 failed %d" i;
  );
  (* Deepening to (.b88) *)
  let idx : (t88, _) idx_mut = (.b88) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b88) *)
    let shallow : (t88, _) idx_mut = (.b88) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 221;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 221 failed %d" i;
  );

  (************************************)
  (*   t89 = { nativeint#; int64# }   *)
  (************************************)
  (* Deepening to (.a89) *)
  let idx : (t89, _) idx_mut = (.a89) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a89) *)
    let shallow : (t89, _) idx_mut = (.a89) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 222;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 222 failed %d" i;
  );
  (* Deepening to (.b89) *)
  let idx : (t89, _) idx_mut = (.b89) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b89) *)
    let shallow : (t89, _) idx_mut = (.b89) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 223;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 223 failed %d" i;
  );

  (************************************)
  (*   t90 = { nativeint#; int32# }   *)
  (************************************)
  (* Deepening to (.a90) *)
  let idx : (t90, _) idx_mut = (.a90) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a90) *)
    let shallow : (t90, _) idx_mut = (.a90) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 224;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 224 failed %d" i;
  );
  (* Deepening to (.b90) *)
  let idx : (t90, _) idx_mut = (.b90) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b90) *)
    let shallow : (t90, _) idx_mut = (.b90) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 225;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 225 failed %d" i;
  );

  (****************************************)
  (*   t91 = { nativeint#; nativeint# }   *)
  (****************************************)
  (* Deepening to (.a91) *)
  let idx : (t91, _) idx_mut = (.a91) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a91) *)
    let shallow : (t91, _) idx_mut = (.a91) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 226;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 226 failed %d" i;
  );
  (* Deepening to (.b91) *)
  let idx : (t91, _) idx_mut = (.b91) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b91) *)
    let shallow : (t91, _) idx_mut = (.b91) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 227;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 227 failed %d" i;
  );

  (************************************)
  (*   t92 = { nativeint#; unit_u }   *)
  (************************************)
  (* Deepening to (.a92) *)
  let idx : (t92, _) idx_mut = (.a92) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a92) *)
    let shallow : (t92, _) idx_mut = (.a92) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 228;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 228 failed %d" i;
  );
  (* Deepening to (.b92) *)
  let idx : (t92, _) idx_mut = (.b92) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b92) *)
    let shallow : (t92, _) idx_mut = (.b92) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (***********************************)
  (*   t93 = { nativeint#; float }   *)
  (***********************************)
  (* Deepening to (.a93) *)
  let idx : (t93, _) idx_mut = (.a93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a93) *)
    let shallow : (t93, _) idx_mut = (.a93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 229;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 229 failed %d" i;
  );
  (* Deepening to (.b93) *)
  let idx : (t93, _) idx_mut = (.b93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b93) *)
    let shallow : (t93, _) idx_mut = (.b93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 230;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 230 failed %d" i;
  );

  (****************************************)
  (*   t94 = { nativeint#; (| unit_u) }   *)
  (****************************************)
  (* Deepening to (.a94) *)
  let idx : (t94, _) idx_mut = (.a94) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a94) *)
    let shallow : (t94, _) idx_mut = (.a94) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 231;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 231 failed %d" i;
  );
  (* Deepening to (.b94) *)
  let idx : (t94, _) idx_mut = (.b94) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b94) *)
    let shallow : (t94, _) idx_mut = (.b94) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 232;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 232 failed %d" i;
  );

  (*****************************)
  (*   t95 = { unit_u; int }   *)
  (*****************************)
  (* Deepening to (.a95) *)
  let idx : (t95, _) idx_mut = (.a95) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a95) *)
    let shallow : (t95, _) idx_mut = (.a95) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b95) *)
  let idx : (t95, _) idx_mut = (.b95) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b95) *)
    let shallow : (t95, _) idx_mut = (.b95) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 233;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 233 failed %d" i;
  );

  (*******************************)
  (*   t96 = { unit_u; int64 }   *)
  (*******************************)
  (* Deepening to (.a96) *)
  let idx : (t96, _) idx_mut = (.a96) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a96) *)
    let shallow : (t96, _) idx_mut = (.a96) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b96) *)
  let idx : (t96, _) idx_mut = (.b96) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b96) *)
    let shallow : (t96, _) idx_mut = (.b96) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 234;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 234 failed %d" i;
  );

  (********************************)
  (*   t97 = { unit_u; int64# }   *)
  (********************************)
  (* Deepening to (.a97) *)
  let idx : (t97, _) idx_mut = (.a97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a97) *)
    let shallow : (t97, _) idx_mut = (.a97) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b97) *)
  let idx : (t97, _) idx_mut = (.b97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b97) *)
    let shallow : (t97, _) idx_mut = (.b97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 235;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 235 failed %d" i;
  );

  (********************************)
  (*   t98 = { unit_u; int32# }   *)
  (********************************)
  (* Deepening to (.a98) *)
  let idx : (t98, _) idx_mut = (.a98) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a98) *)
    let shallow : (t98, _) idx_mut = (.a98) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b98) *)
  let idx : (t98, _) idx_mut = (.b98) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b98) *)
    let shallow : (t98, _) idx_mut = (.b98) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 236;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 236 failed %d" i;
  );

  (************************************)
  (*   t99 = { unit_u; nativeint# }   *)
  (************************************)
  (* Deepening to (.a99) *)
  let idx : (t99, _) idx_mut = (.a99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a99) *)
    let shallow : (t99, _) idx_mut = (.a99) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b99) *)
  let idx : (t99, _) idx_mut = (.b99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b99) *)
    let shallow : (t99, _) idx_mut = (.b99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 237;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 237 failed %d" i;
  );

  (*****************************************)
  (*   t100 = { unit_u; unit_u; string }   *)
  (*****************************************)
  (* Deepening to (.a100) *)
  let idx : (t100, _) idx_mut = (.a100) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a100) *)
    let shallow : (t100, _) idx_mut = (.a100) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b100) *)
  let idx : (t100, _) idx_mut = (.b100) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b100) *)
    let shallow : (t100, _) idx_mut = (.b100) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.c100) *)
  let idx : (t100, _) idx_mut = (.c100) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c100) *)
    let shallow : (t100, _) idx_mut = (.c100) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 238;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 238 failed %d" i;
  );

  (********************************)
  (*   t101 = { unit_u; float }   *)
  (********************************)
  (* Deepening to (.a101) *)
  let idx : (t101, _) idx_mut = (.a101) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a101) *)
    let shallow : (t101, _) idx_mut = (.a101) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b101) *)
  let idx : (t101, _) idx_mut = (.b101) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b101) *)
    let shallow : (t101, _) idx_mut = (.b101) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 239;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 239 failed %d" i;
  );

  (*********************************)
  (*   t102 = { unit_u; string }   *)
  (*********************************)
  (* Deepening to (.a102) *)
  let idx : (t102, _) idx_mut = (.a102) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a102) *)
    let shallow : (t102, _) idx_mut = (.a102) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b102) *)
  let idx : (t102, _) idx_mut = (.b102) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b102) *)
    let shallow : (t102, _) idx_mut = (.b102) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 240;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 240 failed %d" i;
  );

  (*****************************************)
  (*   t103 = { unit_u; string; unit_u }   *)
  (*****************************************)
  (* Deepening to (.a103) *)
  let idx : (t103, _) idx_mut = (.a103) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a103) *)
    let shallow : (t103, _) idx_mut = (.a103) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b103) *)
  let idx : (t103, _) idx_mut = (.b103) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b103) *)
    let shallow : (t103, _) idx_mut = (.b103) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 241;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 241 failed %d" i;
  );
  (* Deepening to (.c103) *)
  let idx : (t103, _) idx_mut = (.c103) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c103) *)
    let shallow : (t103, _) idx_mut = (.c103) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (*****************************************)
  (*   t104 = { unit_u; string; string }   *)
  (*****************************************)
  (* Deepening to (.a104) *)
  let idx : (t104, _) idx_mut = (.a104) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a104) *)
    let shallow : (t104, _) idx_mut = (.a104) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b104) *)
  let idx : (t104, _) idx_mut = (.b104) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b104) *)
    let shallow : (t104, _) idx_mut = (.b104) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 242;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 242 failed %d" i;
  );
  (* Deepening to (.c104) *)
  let idx : (t104, _) idx_mut = (.c104) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c104) *)
    let shallow : (t104, _) idx_mut = (.c104) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 243;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 243 failed %d" i;
  );

  (*************************************)
  (*   t105 = { unit_u; (| unit_u) }   *)
  (*************************************)
  (* Deepening to (.a105) *)
  let idx : (t105, _) idx_mut = (.a105) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a105) *)
    let shallow : (t105, _) idx_mut = (.a105) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b105) *)
  let idx : (t105, _) idx_mut = (.b105) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b105) *)
    let shallow : (t105, _) idx_mut = (.b105) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 244;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 244 failed %d" i;
  );

  (**********************************************)
  (*   t107 = { unit_u; #{ unit_u; string } }   *)
  (**********************************************)
  (* Deepening to (.a107) *)
  let idx : (t107, _) idx_mut = (.a107) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a107) *)
    let shallow : (t107, _) idx_mut = (.a107) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b107) *)
  let idx : (t107, _) idx_mut = (.b107) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b107) *)
    let shallow : (t107, _) idx_mut = (.b107) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 245;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 245 failed %d" i;
  );
  (* Deepening to (.b107.#a106) *)
  let idx : (t107, _) idx_mut = (.b107.#a106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b107) *)
    let shallow : (t107, _) idx_mut = (.b107) in
    let deepened = (.idx_mut(shallow).#a106) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.b107.#a106) *)
    let shallow : (t107, _) idx_mut = (.b107.#a106) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b107.#b106) *)
  let idx : (t107, _) idx_mut = (.b107.#b106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b107) *)
    let shallow : (t107, _) idx_mut = (.b107) in
    let deepened = (.idx_mut(shallow).#b106) in
    mark_test_run 246;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 246 failed %d" i;
    (* from (.b107.#b106) *)
    let shallow : (t107, _) idx_mut = (.b107.#b106) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 247;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 247 failed %d" i;
  );

  (**************************************)
  (*   t109 = { unit_u; #{ string } }   *)
  (**************************************)
  (* Deepening to (.a109) *)
  let idx : (t109, _) idx_mut = (.a109) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a109) *)
    let shallow : (t109, _) idx_mut = (.a109) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b109) *)
  let idx : (t109, _) idx_mut = (.b109) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b109) *)
    let shallow : (t109, _) idx_mut = (.b109) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 248;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 248 failed %d" i;
  );
  (* Deepening to (.b109.#a108) *)
  let idx : (t109, _) idx_mut = (.b109.#a108) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b109) *)
    let shallow : (t109, _) idx_mut = (.b109) in
    let deepened = (.idx_mut(shallow).#a108) in
    mark_test_run 249;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 249 failed %d" i;
    (* from (.b109.#a108) *)
    let shallow : (t109, _) idx_mut = (.b109.#a108) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 250;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 250 failed %d" i;
  );

  (**********************************************)
  (*   t111 = { unit_u; #{ string; unit_u } }   *)
  (**********************************************)
  (* Deepening to (.a111) *)
  let idx : (t111, _) idx_mut = (.a111) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a111) *)
    let shallow : (t111, _) idx_mut = (.a111) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b111) *)
  let idx : (t111, _) idx_mut = (.b111) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b111) *)
    let shallow : (t111, _) idx_mut = (.b111) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 251;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 251 failed %d" i;
  );
  (* Deepening to (.b111.#a110) *)
  let idx : (t111, _) idx_mut = (.b111.#a110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b111) *)
    let shallow : (t111, _) idx_mut = (.b111) in
    let deepened = (.idx_mut(shallow).#a110) in
    mark_test_run 252;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 252 failed %d" i;
    (* from (.b111.#a110) *)
    let shallow : (t111, _) idx_mut = (.b111.#a110) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 253;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 253 failed %d" i;
  );
  (* Deepening to (.b111.#b110) *)
  let idx : (t111, _) idx_mut = (.b111.#b110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b111) *)
    let shallow : (t111, _) idx_mut = (.b111) in
    let deepened = (.idx_mut(shallow).#b110) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.b111.#b110) *)
    let shallow : (t111, _) idx_mut = (.b111.#b110) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (**********************************************)
  (*   t113 = { unit_u; #{ string; string } }   *)
  (**********************************************)
  (* Deepening to (.a113) *)
  let idx : (t113, _) idx_mut = (.a113) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a113) *)
    let shallow : (t113, _) idx_mut = (.a113) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b113) *)
  let idx : (t113, _) idx_mut = (.b113) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b113) *)
    let shallow : (t113, _) idx_mut = (.b113) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 254;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 254 failed %d" i;
  );
  (* Deepening to (.b113.#a112) *)
  let idx : (t113, _) idx_mut = (.b113.#a112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b113) *)
    let shallow : (t113, _) idx_mut = (.b113) in
    let deepened = (.idx_mut(shallow).#a112) in
    mark_test_run 255;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 255 failed %d" i;
    (* from (.b113.#a112) *)
    let shallow : (t113, _) idx_mut = (.b113.#a112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 256;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 256 failed %d" i;
  );
  (* Deepening to (.b113.#b112) *)
  let idx : (t113, _) idx_mut = (.b113.#b112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b113) *)
    let shallow : (t113, _) idx_mut = (.b113) in
    let deepened = (.idx_mut(shallow).#b112) in
    mark_test_run 257;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 257 failed %d" i;
    (* from (.b113.#b112) *)
    let shallow : (t113, _) idx_mut = (.b113.#b112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 258;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 258 failed %d" i;
  );

  (************************)
  (*   t114 = { float }   *)
  (************************)
  (* Deepening to (.a114) *)
  let idx : (t114, _) idx_mut = (.a114) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a114) *)
    let shallow : (t114, _) idx_mut = (.a114) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 259;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 259 failed %d" i;
  );

  (*****************************)
  (*   t115 = { float; int }   *)
  (*****************************)
  (* Deepening to (.a115) *)
  let idx : (t115, _) idx_mut = (.a115) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a115) *)
    let shallow : (t115, _) idx_mut = (.a115) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 260;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 260 failed %d" i;
  );
  (* Deepening to (.b115) *)
  let idx : (t115, _) idx_mut = (.b115) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b115) *)
    let shallow : (t115, _) idx_mut = (.b115) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 261;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 261 failed %d" i;
  );

  (**********************************)
  (*   t116 = { float; int; int }   *)
  (**********************************)
  (* Deepening to (.a116) *)
  let idx : (t116, _) idx_mut = (.a116) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a116) *)
    let shallow : (t116, _) idx_mut = (.a116) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 262;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 262 failed %d" i;
  );
  (* Deepening to (.b116) *)
  let idx : (t116, _) idx_mut = (.b116) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b116) *)
    let shallow : (t116, _) idx_mut = (.b116) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 263;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 263 failed %d" i;
  );
  (* Deepening to (.c116) *)
  let idx : (t116, _) idx_mut = (.c116) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c116) *)
    let shallow : (t116, _) idx_mut = (.c116) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 264;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 264 failed %d" i;
  );

  (************************************)
  (*   t117 = { float; int; float }   *)
  (************************************)
  (* Deepening to (.a117) *)
  let idx : (t117, _) idx_mut = (.a117) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a117) *)
    let shallow : (t117, _) idx_mut = (.a117) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 265;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 265 failed %d" i;
  );
  (* Deepening to (.b117) *)
  let idx : (t117, _) idx_mut = (.b117) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b117) *)
    let shallow : (t117, _) idx_mut = (.b117) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 266;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 266 failed %d" i;
  );
  (* Deepening to (.c117) *)
  let idx : (t117, _) idx_mut = (.c117) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c117) *)
    let shallow : (t117, _) idx_mut = (.c117) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 267;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 267 failed %d" i;
  );

  (*******************************)
  (*   t118 = { float; int64 }   *)
  (*******************************)
  (* Deepening to (.a118) *)
  let idx : (t118, _) idx_mut = (.a118) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a118) *)
    let shallow : (t118, _) idx_mut = (.a118) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 268;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 268 failed %d" i;
  );
  (* Deepening to (.b118) *)
  let idx : (t118, _) idx_mut = (.b118) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b118) *)
    let shallow : (t118, _) idx_mut = (.b118) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 269;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 269 failed %d" i;
  );

  (********************************)
  (*   t119 = { float; int64# }   *)
  (********************************)
  (* Deepening to (.a119) *)
  let idx : (t119, _) idx_mut = (.a119) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a119) *)
    let shallow : (t119, _) idx_mut = (.a119) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 270;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 270 failed %d" i;
  );
  (* Deepening to (.b119) *)
  let idx : (t119, _) idx_mut = (.b119) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b119) *)
    let shallow : (t119, _) idx_mut = (.b119) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 271;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 271 failed %d" i;
  );

  (********************************)
  (*   t120 = { float; int32# }   *)
  (********************************)
  (* Deepening to (.a120) *)
  let idx : (t120, _) idx_mut = (.a120) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a120) *)
    let shallow : (t120, _) idx_mut = (.a120) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 272;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 272 failed %d" i;
  );
  (* Deepening to (.b120) *)
  let idx : (t120, _) idx_mut = (.b120) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b120) *)
    let shallow : (t120, _) idx_mut = (.b120) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 273;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 273 failed %d" i;
  );

  (************************************)
  (*   t121 = { float; nativeint# }   *)
  (************************************)
  (* Deepening to (.a121) *)
  let idx : (t121, _) idx_mut = (.a121) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a121) *)
    let shallow : (t121, _) idx_mut = (.a121) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 274;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 274 failed %d" i;
  );
  (* Deepening to (.b121) *)
  let idx : (t121, _) idx_mut = (.b121) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b121) *)
    let shallow : (t121, _) idx_mut = (.b121) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 275;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 275 failed %d" i;
  );

  (********************************)
  (*   t122 = { float; unit_u }   *)
  (********************************)
  (* Deepening to (.a122) *)
  let idx : (t122, _) idx_mut = (.a122) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a122) *)
    let shallow : (t122, _) idx_mut = (.a122) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 276;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 276 failed %d" i;
  );
  (* Deepening to (.b122) *)
  let idx : (t122, _) idx_mut = (.b122) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b122) *)
    let shallow : (t122, _) idx_mut = (.b122) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (*******************************)
  (*   t123 = { float; float }   *)
  (*******************************)
  (* Deepening to (.a123) *)
  let idx : (t123, _) idx_mut = (.a123) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a123) *)
    let shallow : (t123, _) idx_mut = (.a123) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 277;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 277 failed %d" i;
  );
  (* Deepening to (.b123) *)
  let idx : (t123, _) idx_mut = (.b123) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b123) *)
    let shallow : (t123, _) idx_mut = (.b123) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 278;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 278 failed %d" i;
  );

  (************************************)
  (*   t124 = { float; float; int }   *)
  (************************************)
  (* Deepening to (.a124) *)
  let idx : (t124, _) idx_mut = (.a124) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a124) *)
    let shallow : (t124, _) idx_mut = (.a124) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 279;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 279 failed %d" i;
  );
  (* Deepening to (.b124) *)
  let idx : (t124, _) idx_mut = (.b124) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b124) *)
    let shallow : (t124, _) idx_mut = (.b124) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 280;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 280 failed %d" i;
  );
  (* Deepening to (.c124) *)
  let idx : (t124, _) idx_mut = (.c124) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c124) *)
    let shallow : (t124, _) idx_mut = (.c124) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 281;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 281 failed %d" i;
  );

  (**************************************)
  (*   t125 = { float; float; float }   *)
  (**************************************)
  (* Deepening to (.a125) *)
  let idx : (t125, _) idx_mut = (.a125) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a125) *)
    let shallow : (t125, _) idx_mut = (.a125) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 282;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 282 failed %d" i;
  );
  (* Deepening to (.b125) *)
  let idx : (t125, _) idx_mut = (.b125) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b125) *)
    let shallow : (t125, _) idx_mut = (.b125) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 283;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 283 failed %d" i;
  );
  (* Deepening to (.c125) *)
  let idx : (t125, _) idx_mut = (.c125) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c125) *)
    let shallow : (t125, _) idx_mut = (.c125) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 284;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 284 failed %d" i;
  );

  (***************************************)
  (*   t126 = { float; float; float# }   *)
  (***************************************)
  (* Deepening to (.a126) *)
  let idx : (t126, _) idx_mut = (.a126) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a126) *)
    let shallow : (t126, _) idx_mut = (.a126) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 285;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 285 failed %d" i;
  );
  (* Deepening to (.b126) *)
  let idx : (t126, _) idx_mut = (.b126) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b126) *)
    let shallow : (t126, _) idx_mut = (.b126) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 286;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 286 failed %d" i;
  );
  (* Deepening to (.c126) *)
  let idx : (t126, _) idx_mut = (.c126) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c126) *)
    let shallow : (t126, _) idx_mut = (.c126) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 287;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 287 failed %d" i;
  );

  (********************************)
  (*   t127 = { float; float# }   *)
  (********************************)
  (* Deepening to (.a127) *)
  let idx : (t127, _) idx_mut = (.a127) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a127) *)
    let shallow : (t127, _) idx_mut = (.a127) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 288;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 288 failed %d" i;
  );
  (* Deepening to (.b127) *)
  let idx : (t127, _) idx_mut = (.b127) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b127) *)
    let shallow : (t127, _) idx_mut = (.b127) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 289;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 289 failed %d" i;
  );

  (***************************************)
  (*   t128 = { float; float#; float }   *)
  (***************************************)
  (* Deepening to (.a128) *)
  let idx : (t128, _) idx_mut = (.a128) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a128) *)
    let shallow : (t128, _) idx_mut = (.a128) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 290;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 290 failed %d" i;
  );
  (* Deepening to (.b128) *)
  let idx : (t128, _) idx_mut = (.b128) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b128) *)
    let shallow : (t128, _) idx_mut = (.b128) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 291;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 291 failed %d" i;
  );
  (* Deepening to (.c128) *)
  let idx : (t128, _) idx_mut = (.c128) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c128) *)
    let shallow : (t128, _) idx_mut = (.c128) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 292;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 292 failed %d" i;
  );

  (****************************************)
  (*   t129 = { float; float#; float# }   *)
  (****************************************)
  (* Deepening to (.a129) *)
  let idx : (t129, _) idx_mut = (.a129) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a129) *)
    let shallow : (t129, _) idx_mut = (.a129) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 293;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 293 failed %d" i;
  );
  (* Deepening to (.b129) *)
  let idx : (t129, _) idx_mut = (.b129) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b129) *)
    let shallow : (t129, _) idx_mut = (.b129) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 294;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 294 failed %d" i;
  );
  (* Deepening to (.c129) *)
  let idx : (t129, _) idx_mut = (.c129) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c129) *)
    let shallow : (t129, _) idx_mut = (.c129) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 295;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 295 failed %d" i;
  );

  (************************************)
  (*   t130 = { float; (| unit_u) }   *)
  (************************************)
  (* Deepening to (.a130) *)
  let idx : (t130, _) idx_mut = (.a130) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a130) *)
    let shallow : (t130, _) idx_mut = (.a130) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 296;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 296 failed %d" i;
  );
  (* Deepening to (.b130) *)
  let idx : (t130, _) idx_mut = (.b130) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b130) *)
    let shallow : (t130, _) idx_mut = (.b130) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 297;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 297 failed %d" i;
  );

  (**********************************)
  (*   t131 = { float; #{ int } }   *)
  (**********************************)
  (* Deepening to (.a131) *)
  let idx : (t131, _) idx_mut = (.a131) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a131) *)
    let shallow : (t131, _) idx_mut = (.a131) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 298;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 298 failed %d" i;
  );
  (* Deepening to (.b131) *)
  let idx : (t131, _) idx_mut = (.b131) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b131) *)
    let shallow : (t131, _) idx_mut = (.b131) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 299;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 299 failed %d" i;
  );
  (* Deepening to (.b131.#a21) *)
  let idx : (t131, _) idx_mut = (.b131.#a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b131) *)
    let shallow : (t131, _) idx_mut = (.b131) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 300;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 300 failed %d" i;
    (* from (.b131.#a21) *)
    let shallow : (t131, _) idx_mut = (.b131.#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 301;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 301 failed %d" i;
  );

  (***************************************)
  (*   t132 = { float; #{ int; int } }   *)
  (***************************************)
  (* Deepening to (.a132) *)
  let idx : (t132, _) idx_mut = (.a132) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a132) *)
    let shallow : (t132, _) idx_mut = (.a132) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 302;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 302 failed %d" i;
  );
  (* Deepening to (.b132) *)
  let idx : (t132, _) idx_mut = (.b132) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b132) *)
    let shallow : (t132, _) idx_mut = (.b132) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 303;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 303 failed %d" i;
  );
  (* Deepening to (.b132.#a23) *)
  let idx : (t132, _) idx_mut = (.b132.#a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b132) *)
    let shallow : (t132, _) idx_mut = (.b132) in
    let deepened = (.idx_mut(shallow).#a23) in
    mark_test_run 304;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 304 failed %d" i;
    (* from (.b132.#a23) *)
    let shallow : (t132, _) idx_mut = (.b132.#a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 305;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 305 failed %d" i;
  );
  (* Deepening to (.b132.#b23) *)
  let idx : (t132, _) idx_mut = (.b132.#b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b132) *)
    let shallow : (t132, _) idx_mut = (.b132) in
    let deepened = (.idx_mut(shallow).#b23) in
    mark_test_run 306;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 306 failed %d" i;
    (* from (.b132.#b23) *)
    let shallow : (t132, _) idx_mut = (.b132.#b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 307;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 307 failed %d" i;
  );

  (*****************************************)
  (*   t133 = { float; #{ int; float } }   *)
  (*****************************************)
  (* Deepening to (.a133) *)
  let idx : (t133, _) idx_mut = (.a133) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a133) *)
    let shallow : (t133, _) idx_mut = (.a133) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 308;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 308 failed %d" i;
  );
  (* Deepening to (.b133) *)
  let idx : (t133, _) idx_mut = (.b133) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b133) *)
    let shallow : (t133, _) idx_mut = (.b133) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 309;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 309 failed %d" i;
  );
  (* Deepening to (.b133.#a27) *)
  let idx : (t133, _) idx_mut = (.b133.#a27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b133) *)
    let shallow : (t133, _) idx_mut = (.b133) in
    let deepened = (.idx_mut(shallow).#a27) in
    mark_test_run 310;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 310 failed %d" i;
    (* from (.b133.#a27) *)
    let shallow : (t133, _) idx_mut = (.b133.#a27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 311;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 311 failed %d" i;
  );
  (* Deepening to (.b133.#b27) *)
  let idx : (t133, _) idx_mut = (.b133.#b27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b133) *)
    let shallow : (t133, _) idx_mut = (.b133) in
    let deepened = (.idx_mut(shallow).#b27) in
    mark_test_run 312;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 312 failed %d" i;
    (* from (.b133.#b27) *)
    let shallow : (t133, _) idx_mut = (.b133.#b27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 313;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 313 failed %d" i;
  );

  (************************************)
  (*   t134 = { float; #{ float } }   *)
  (************************************)
  (* Deepening to (.a134) *)
  let idx : (t134, _) idx_mut = (.a134) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a134) *)
    let shallow : (t134, _) idx_mut = (.a134) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 314;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 314 failed %d" i;
  );
  (* Deepening to (.b134) *)
  let idx : (t134, _) idx_mut = (.b134) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b134) *)
    let shallow : (t134, _) idx_mut = (.b134) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 315;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 315 failed %d" i;
  );
  (* Deepening to (.b134.#a37) *)
  let idx : (t134, _) idx_mut = (.b134.#a37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.b134) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.b134.#a37) *)
    let shallow : (t134, _) idx_mut = (.b134.#a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 316;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 316 failed %d" i;
  );

  (*****************************************)
  (*   t135 = { float; #{ float; int } }   *)
  (*****************************************)
  (* Deepening to (.a135) *)
  let idx : (t135, _) idx_mut = (.a135) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a135) *)
    let shallow : (t135, _) idx_mut = (.a135) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 317;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 317 failed %d" i;
  );
  (* Deepening to (.b135) *)
  let idx : (t135, _) idx_mut = (.b135) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b135) *)
    let shallow : (t135, _) idx_mut = (.b135) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 318;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 318 failed %d" i;
  );
  (* Deepening to (.b135.#a39) *)
  let idx : (t135, _) idx_mut = (.b135.#a39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b135) *)
    let shallow : (t135, _) idx_mut = (.b135) in
    let deepened = (.idx_mut(shallow).#a39) in
    mark_test_run 319;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 319 failed %d" i;
    (* from (.b135.#a39) *)
    let shallow : (t135, _) idx_mut = (.b135.#a39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 320;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 320 failed %d" i;
  );
  (* Deepening to (.b135.#b39) *)
  let idx : (t135, _) idx_mut = (.b135.#b39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b135) *)
    let shallow : (t135, _) idx_mut = (.b135) in
    let deepened = (.idx_mut(shallow).#b39) in
    mark_test_run 321;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 321 failed %d" i;
    (* from (.b135.#b39) *)
    let shallow : (t135, _) idx_mut = (.b135.#b39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 322;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 322 failed %d" i;
  );

  (*******************************************)
  (*   t136 = { float; #{ float; float } }   *)
  (*******************************************)
  (* Deepening to (.a136) *)
  let idx : (t136, _) idx_mut = (.a136) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a136) *)
    let shallow : (t136, _) idx_mut = (.a136) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 323;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 323 failed %d" i;
  );
  (* Deepening to (.b136) *)
  let idx : (t136, _) idx_mut = (.b136) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b136) *)
    let shallow : (t136, _) idx_mut = (.b136) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 324;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 324 failed %d" i;
  );
  (* Deepening to (.b136.#a41) *)
  let idx : (t136, _) idx_mut = (.b136.#a41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b136) *)
    let shallow : (t136, _) idx_mut = (.b136) in
    let deepened = (.idx_mut(shallow).#a41) in
    mark_test_run 325;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 325 failed %d" i;
    (* from (.b136.#a41) *)
    let shallow : (t136, _) idx_mut = (.b136.#a41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 326;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 326 failed %d" i;
  );
  (* Deepening to (.b136.#b41) *)
  let idx : (t136, _) idx_mut = (.b136.#b41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b136) *)
    let shallow : (t136, _) idx_mut = (.b136) in
    let deepened = (.idx_mut(shallow).#b41) in
    mark_test_run 327;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 327 failed %d" i;
    (* from (.b136.#b41) *)
    let shallow : (t136, _) idx_mut = (.b136.#b41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 328;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 328 failed %d" i;
  );

  (********************************************)
  (*   t138 = { float; #{ float; float# } }   *)
  (********************************************)
  (* Deepening to (.a138) *)
  let idx : (t138, _) idx_mut = (.a138) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a138) *)
    let shallow : (t138, _) idx_mut = (.a138) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 329;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 329 failed %d" i;
  );
  (* Deepening to (.b138) *)
  let idx : (t138, _) idx_mut = (.b138) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b138) *)
    let shallow : (t138, _) idx_mut = (.b138) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 330;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 330 failed %d" i;
  );
  (* Deepening to (.b138.#a137) *)
  let idx : (t138, _) idx_mut = (.b138.#a137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b138) *)
    let shallow : (t138, _) idx_mut = (.b138) in
    let deepened = (.idx_mut(shallow).#a137) in
    mark_test_run 331;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 331 failed %d" i;
    (* from (.b138.#a137) *)
    let shallow : (t138, _) idx_mut = (.b138.#a137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 332;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 332 failed %d" i;
  );
  (* Deepening to (.b138.#b137) *)
  let idx : (t138, _) idx_mut = (.b138.#b137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b138) *)
    let shallow : (t138, _) idx_mut = (.b138) in
    let deepened = (.idx_mut(shallow).#b137) in
    mark_test_run 333;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 333 failed %d" i;
    (* from (.b138.#b137) *)
    let shallow : (t138, _) idx_mut = (.b138.#b137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 334;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 334 failed %d" i;
  );

  (*************************************)
  (*   t140 = { float; #{ float# } }   *)
  (*************************************)
  (* Deepening to (.a140) *)
  let idx : (t140, _) idx_mut = (.a140) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a140) *)
    let shallow : (t140, _) idx_mut = (.a140) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 335;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 335 failed %d" i;
  );
  (* Deepening to (.b140) *)
  let idx : (t140, _) idx_mut = (.b140) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b140) *)
    let shallow : (t140, _) idx_mut = (.b140) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 336;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 336 failed %d" i;
  );
  (* Deepening to (.b140.#a139) *)
  let idx : (t140, _) idx_mut = (.b140.#a139) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b140) *)
    let shallow : (t140, _) idx_mut = (.b140) in
    let deepened = (.idx_mut(shallow).#a139) in
    mark_test_run 337;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 337 failed %d" i;
    (* from (.b140.#a139) *)
    let shallow : (t140, _) idx_mut = (.b140.#a139) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 338;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 338 failed %d" i;
  );

  (********************************************)
  (*   t142 = { float; #{ float#; float } }   *)
  (********************************************)
  (* Deepening to (.a142) *)
  let idx : (t142, _) idx_mut = (.a142) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a142) *)
    let shallow : (t142, _) idx_mut = (.a142) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 339;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 339 failed %d" i;
  );
  (* Deepening to (.b142) *)
  let idx : (t142, _) idx_mut = (.b142) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b142) *)
    let shallow : (t142, _) idx_mut = (.b142) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 340;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 340 failed %d" i;
  );
  (* Deepening to (.b142.#a141) *)
  let idx : (t142, _) idx_mut = (.b142.#a141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b142) *)
    let shallow : (t142, _) idx_mut = (.b142) in
    let deepened = (.idx_mut(shallow).#a141) in
    mark_test_run 341;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 341 failed %d" i;
    (* from (.b142.#a141) *)
    let shallow : (t142, _) idx_mut = (.b142.#a141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 342;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 342 failed %d" i;
  );
  (* Deepening to (.b142.#b141) *)
  let idx : (t142, _) idx_mut = (.b142.#b141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b142) *)
    let shallow : (t142, _) idx_mut = (.b142) in
    let deepened = (.idx_mut(shallow).#b141) in
    mark_test_run 343;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 343 failed %d" i;
    (* from (.b142.#b141) *)
    let shallow : (t142, _) idx_mut = (.b142.#b141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 344;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 344 failed %d" i;
  );

  (*********************************************)
  (*   t144 = { float; #{ float#; float# } }   *)
  (*********************************************)
  (* Deepening to (.a144) *)
  let idx : (t144, _) idx_mut = (.a144) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a144) *)
    let shallow : (t144, _) idx_mut = (.a144) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 345;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 345 failed %d" i;
  );
  (* Deepening to (.b144) *)
  let idx : (t144, _) idx_mut = (.b144) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b144) *)
    let shallow : (t144, _) idx_mut = (.b144) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 346;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 346 failed %d" i;
  );
  (* Deepening to (.b144.#a143) *)
  let idx : (t144, _) idx_mut = (.b144.#a143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b144) *)
    let shallow : (t144, _) idx_mut = (.b144) in
    let deepened = (.idx_mut(shallow).#a143) in
    mark_test_run 347;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 347 failed %d" i;
    (* from (.b144.#a143) *)
    let shallow : (t144, _) idx_mut = (.b144.#a143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 348;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 348 failed %d" i;
  );
  (* Deepening to (.b144.#b143) *)
  let idx : (t144, _) idx_mut = (.b144.#b143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b144) *)
    let shallow : (t144, _) idx_mut = (.b144) in
    let deepened = (.idx_mut(shallow).#b143) in
    mark_test_run 349;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 349 failed %d" i;
    (* from (.b144.#b143) *)
    let shallow : (t144, _) idx_mut = (.b144.#b143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 350;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 350 failed %d" i;
  );

  (*************************)
  (*   t145 = { float# }   *)
  (*************************)
  (* Deepening to (.a145) *)
  let idx : (t145, _) idx_mut = (.a145) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a145) *)
    let shallow : (t145, _) idx_mut = (.a145) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 351;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 351 failed %d" i;
  );

  (********************************)
  (*   t146 = { float#; float }   *)
  (********************************)
  (* Deepening to (.a146) *)
  let idx : (t146, _) idx_mut = (.a146) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a146) *)
    let shallow : (t146, _) idx_mut = (.a146) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 352;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 352 failed %d" i;
  );
  (* Deepening to (.b146) *)
  let idx : (t146, _) idx_mut = (.b146) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b146) *)
    let shallow : (t146, _) idx_mut = (.b146) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 353;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 353 failed %d" i;
  );

  (***************************************)
  (*   t147 = { float#; float; float }   *)
  (***************************************)
  (* Deepening to (.a147) *)
  let idx : (t147, _) idx_mut = (.a147) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a147) *)
    let shallow : (t147, _) idx_mut = (.a147) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 354;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 354 failed %d" i;
  );
  (* Deepening to (.b147) *)
  let idx : (t147, _) idx_mut = (.b147) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b147) *)
    let shallow : (t147, _) idx_mut = (.b147) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 355;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 355 failed %d" i;
  );
  (* Deepening to (.c147) *)
  let idx : (t147, _) idx_mut = (.c147) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c147) *)
    let shallow : (t147, _) idx_mut = (.c147) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 356;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 356 failed %d" i;
  );

  (****************************************)
  (*   t148 = { float#; float; float# }   *)
  (****************************************)
  (* Deepening to (.a148) *)
  let idx : (t148, _) idx_mut = (.a148) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a148) *)
    let shallow : (t148, _) idx_mut = (.a148) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 357;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 357 failed %d" i;
  );
  (* Deepening to (.b148) *)
  let idx : (t148, _) idx_mut = (.b148) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b148) *)
    let shallow : (t148, _) idx_mut = (.b148) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 358;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 358 failed %d" i;
  );
  (* Deepening to (.c148) *)
  let idx : (t148, _) idx_mut = (.c148) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c148) *)
    let shallow : (t148, _) idx_mut = (.c148) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 359;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 359 failed %d" i;
  );

  (*********************************)
  (*   t149 = { float#; float# }   *)
  (*********************************)
  (* Deepening to (.a149) *)
  let idx : (t149, _) idx_mut = (.a149) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a149) *)
    let shallow : (t149, _) idx_mut = (.a149) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 360;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 360 failed %d" i;
  );
  (* Deepening to (.b149) *)
  let idx : (t149, _) idx_mut = (.b149) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b149) *)
    let shallow : (t149, _) idx_mut = (.b149) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 361;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 361 failed %d" i;
  );

  (****************************************)
  (*   t150 = { float#; float#; float }   *)
  (****************************************)
  (* Deepening to (.a150) *)
  let idx : (t150, _) idx_mut = (.a150) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a150) *)
    let shallow : (t150, _) idx_mut = (.a150) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 362;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 362 failed %d" i;
  );
  (* Deepening to (.b150) *)
  let idx : (t150, _) idx_mut = (.b150) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b150) *)
    let shallow : (t150, _) idx_mut = (.b150) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 363;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 363 failed %d" i;
  );
  (* Deepening to (.c150) *)
  let idx : (t150, _) idx_mut = (.c150) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c150) *)
    let shallow : (t150, _) idx_mut = (.c150) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 364;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 364 failed %d" i;
  );

  (*****************************************)
  (*   t151 = { float#; float#; float# }   *)
  (*****************************************)
  (* Deepening to (.a151) *)
  let idx : (t151, _) idx_mut = (.a151) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a151) *)
    let shallow : (t151, _) idx_mut = (.a151) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 365;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 365 failed %d" i;
  );
  (* Deepening to (.b151) *)
  let idx : (t151, _) idx_mut = (.b151) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b151) *)
    let shallow : (t151, _) idx_mut = (.b151) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 366;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 366 failed %d" i;
  );
  (* Deepening to (.c151) *)
  let idx : (t151, _) idx_mut = (.c151) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c151) *)
    let shallow : (t151, _) idx_mut = (.c151) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 367;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 367 failed %d" i;
  );

  (*************************************)
  (*   t152 = { float#; #{ float } }   *)
  (*************************************)
  (* Deepening to (.a152) *)
  let idx : (t152, _) idx_mut = (.a152) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a152) *)
    let shallow : (t152, _) idx_mut = (.a152) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 368;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 368 failed %d" i;
  );
  (* Deepening to (.b152) *)
  let idx : (t152, _) idx_mut = (.b152) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b152) *)
    let shallow : (t152, _) idx_mut = (.b152) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 369;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 369 failed %d" i;
  );
  (* Deepening to (.b152.#a37) *)
  let idx : (t152, _) idx_mut = (.b152.#a37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.b152) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.b152.#a37) *)
    let shallow : (t152, _) idx_mut = (.b152.#a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 370;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 370 failed %d" i;
  );

  (********************************************)
  (*   t153 = { float#; #{ float; float } }   *)
  (********************************************)
  (* Deepening to (.a153) *)
  let idx : (t153, _) idx_mut = (.a153) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a153) *)
    let shallow : (t153, _) idx_mut = (.a153) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 371;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 371 failed %d" i;
  );
  (* Deepening to (.b153) *)
  let idx : (t153, _) idx_mut = (.b153) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b153) *)
    let shallow : (t153, _) idx_mut = (.b153) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 372;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 372 failed %d" i;
  );
  (* Deepening to (.b153.#a41) *)
  let idx : (t153, _) idx_mut = (.b153.#a41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b153) *)
    let shallow : (t153, _) idx_mut = (.b153) in
    let deepened = (.idx_mut(shallow).#a41) in
    mark_test_run 373;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 373 failed %d" i;
    (* from (.b153.#a41) *)
    let shallow : (t153, _) idx_mut = (.b153.#a41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 374;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 374 failed %d" i;
  );
  (* Deepening to (.b153.#b41) *)
  let idx : (t153, _) idx_mut = (.b153.#b41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b153) *)
    let shallow : (t153, _) idx_mut = (.b153) in
    let deepened = (.idx_mut(shallow).#b41) in
    mark_test_run 375;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 375 failed %d" i;
    (* from (.b153.#b41) *)
    let shallow : (t153, _) idx_mut = (.b153.#b41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 376;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 376 failed %d" i;
  );

  (*********************************************)
  (*   t154 = { float#; #{ float; float# } }   *)
  (*********************************************)
  (* Deepening to (.a154) *)
  let idx : (t154, _) idx_mut = (.a154) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a154) *)
    let shallow : (t154, _) idx_mut = (.a154) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 377;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 377 failed %d" i;
  );
  (* Deepening to (.b154) *)
  let idx : (t154, _) idx_mut = (.b154) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b154) *)
    let shallow : (t154, _) idx_mut = (.b154) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 378;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 378 failed %d" i;
  );
  (* Deepening to (.b154.#a137) *)
  let idx : (t154, _) idx_mut = (.b154.#a137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b154) *)
    let shallow : (t154, _) idx_mut = (.b154) in
    let deepened = (.idx_mut(shallow).#a137) in
    mark_test_run 379;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 379 failed %d" i;
    (* from (.b154.#a137) *)
    let shallow : (t154, _) idx_mut = (.b154.#a137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 380;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 380 failed %d" i;
  );
  (* Deepening to (.b154.#b137) *)
  let idx : (t154, _) idx_mut = (.b154.#b137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b154) *)
    let shallow : (t154, _) idx_mut = (.b154) in
    let deepened = (.idx_mut(shallow).#b137) in
    mark_test_run 381;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 381 failed %d" i;
    (* from (.b154.#b137) *)
    let shallow : (t154, _) idx_mut = (.b154.#b137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 382;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 382 failed %d" i;
  );

  (**************************************)
  (*   t155 = { float#; #{ float# } }   *)
  (**************************************)
  (* Deepening to (.a155) *)
  let idx : (t155, _) idx_mut = (.a155) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a155) *)
    let shallow : (t155, _) idx_mut = (.a155) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 383;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 383 failed %d" i;
  );
  (* Deepening to (.b155) *)
  let idx : (t155, _) idx_mut = (.b155) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b155) *)
    let shallow : (t155, _) idx_mut = (.b155) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 384;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 384 failed %d" i;
  );
  (* Deepening to (.b155.#a139) *)
  let idx : (t155, _) idx_mut = (.b155.#a139) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b155) *)
    let shallow : (t155, _) idx_mut = (.b155) in
    let deepened = (.idx_mut(shallow).#a139) in
    mark_test_run 385;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 385 failed %d" i;
    (* from (.b155.#a139) *)
    let shallow : (t155, _) idx_mut = (.b155.#a139) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 386;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 386 failed %d" i;
  );

  (*********************************************)
  (*   t156 = { float#; #{ float#; float } }   *)
  (*********************************************)
  (* Deepening to (.a156) *)
  let idx : (t156, _) idx_mut = (.a156) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a156) *)
    let shallow : (t156, _) idx_mut = (.a156) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 387;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 387 failed %d" i;
  );
  (* Deepening to (.b156) *)
  let idx : (t156, _) idx_mut = (.b156) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b156) *)
    let shallow : (t156, _) idx_mut = (.b156) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 388;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 388 failed %d" i;
  );
  (* Deepening to (.b156.#a141) *)
  let idx : (t156, _) idx_mut = (.b156.#a141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b156) *)
    let shallow : (t156, _) idx_mut = (.b156) in
    let deepened = (.idx_mut(shallow).#a141) in
    mark_test_run 389;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 389 failed %d" i;
    (* from (.b156.#a141) *)
    let shallow : (t156, _) idx_mut = (.b156.#a141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 390;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 390 failed %d" i;
  );
  (* Deepening to (.b156.#b141) *)
  let idx : (t156, _) idx_mut = (.b156.#b141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b156) *)
    let shallow : (t156, _) idx_mut = (.b156) in
    let deepened = (.idx_mut(shallow).#b141) in
    mark_test_run 391;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 391 failed %d" i;
    (* from (.b156.#b141) *)
    let shallow : (t156, _) idx_mut = (.b156.#b141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 392;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 392 failed %d" i;
  );

  (**********************************************)
  (*   t157 = { float#; #{ float#; float# } }   *)
  (**********************************************)
  (* Deepening to (.a157) *)
  let idx : (t157, _) idx_mut = (.a157) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a157) *)
    let shallow : (t157, _) idx_mut = (.a157) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 393;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 393 failed %d" i;
  );
  (* Deepening to (.b157) *)
  let idx : (t157, _) idx_mut = (.b157) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b157) *)
    let shallow : (t157, _) idx_mut = (.b157) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 394;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 394 failed %d" i;
  );
  (* Deepening to (.b157.#a143) *)
  let idx : (t157, _) idx_mut = (.b157.#a143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b157) *)
    let shallow : (t157, _) idx_mut = (.b157) in
    let deepened = (.idx_mut(shallow).#a143) in
    mark_test_run 395;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 395 failed %d" i;
    (* from (.b157.#a143) *)
    let shallow : (t157, _) idx_mut = (.b157.#a143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 396;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 396 failed %d" i;
  );
  (* Deepening to (.b157.#b143) *)
  let idx : (t157, _) idx_mut = (.b157.#b143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b157) *)
    let shallow : (t157, _) idx_mut = (.b157) in
    let deepened = (.idx_mut(shallow).#b143) in
    mark_test_run 397;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 397 failed %d" i;
    (* from (.b157.#b143) *)
    let shallow : (t157, _) idx_mut = (.b157.#b143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 398;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 398 failed %d" i;
  );

  (*************************)
  (*   t158 = { string }   *)
  (*************************)
  (* Deepening to (.a158) *)
  let idx : (t158, _) idx_mut = (.a158) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a158) *)
    let shallow : (t158, _) idx_mut = (.a158) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 399;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 399 failed %d" i;
  );

  (*********************************)
  (*   t159 = { string; unit_u }   *)
  (*********************************)
  (* Deepening to (.a159) *)
  let idx : (t159, _) idx_mut = (.a159) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a159) *)
    let shallow : (t159, _) idx_mut = (.a159) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 400;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 400 failed %d" i;
  );
  (* Deepening to (.b159) *)
  let idx : (t159, _) idx_mut = (.b159) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b159) *)
    let shallow : (t159, _) idx_mut = (.b159) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (*****************************************)
  (*   t160 = { string; unit_u; unit_u }   *)
  (*****************************************)
  (* Deepening to (.a160) *)
  let idx : (t160, _) idx_mut = (.a160) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a160) *)
    let shallow : (t160, _) idx_mut = (.a160) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 401;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 401 failed %d" i;
  );
  (* Deepening to (.b160) *)
  let idx : (t160, _) idx_mut = (.b160) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b160) *)
    let shallow : (t160, _) idx_mut = (.b160) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.c160) *)
  let idx : (t160, _) idx_mut = (.c160) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c160) *)
    let shallow : (t160, _) idx_mut = (.c160) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (*****************************************)
  (*   t161 = { string; unit_u; string }   *)
  (*****************************************)
  (* Deepening to (.a161) *)
  let idx : (t161, _) idx_mut = (.a161) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a161) *)
    let shallow : (t161, _) idx_mut = (.a161) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 402;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 402 failed %d" i;
  );
  (* Deepening to (.b161) *)
  let idx : (t161, _) idx_mut = (.b161) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b161) *)
    let shallow : (t161, _) idx_mut = (.b161) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.c161) *)
  let idx : (t161, _) idx_mut = (.c161) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c161) *)
    let shallow : (t161, _) idx_mut = (.c161) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 403;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 403 failed %d" i;
  );

  (*********************************)
  (*   t162 = { string; string }   *)
  (*********************************)
  (* Deepening to (.a162) *)
  let idx : (t162, _) idx_mut = (.a162) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a162) *)
    let shallow : (t162, _) idx_mut = (.a162) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 404;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 404 failed %d" i;
  );
  (* Deepening to (.b162) *)
  let idx : (t162, _) idx_mut = (.b162) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b162) *)
    let shallow : (t162, _) idx_mut = (.b162) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 405;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 405 failed %d" i;
  );

  (*****************************************)
  (*   t163 = { string; string; unit_u }   *)
  (*****************************************)
  (* Deepening to (.a163) *)
  let idx : (t163, _) idx_mut = (.a163) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a163) *)
    let shallow : (t163, _) idx_mut = (.a163) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 406;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 406 failed %d" i;
  );
  (* Deepening to (.b163) *)
  let idx : (t163, _) idx_mut = (.b163) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b163) *)
    let shallow : (t163, _) idx_mut = (.b163) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 407;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 407 failed %d" i;
  );
  (* Deepening to (.c163) *)
  let idx : (t163, _) idx_mut = (.c163) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c163) *)
    let shallow : (t163, _) idx_mut = (.c163) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (*****************************************)
  (*   t164 = { string; string; string }   *)
  (*****************************************)
  (* Deepening to (.a164) *)
  let idx : (t164, _) idx_mut = (.a164) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a164) *)
    let shallow : (t164, _) idx_mut = (.a164) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 408;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 408 failed %d" i;
  );
  (* Deepening to (.b164) *)
  let idx : (t164, _) idx_mut = (.b164) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b164) *)
    let shallow : (t164, _) idx_mut = (.b164) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 409;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 409 failed %d" i;
  );
  (* Deepening to (.c164) *)
  let idx : (t164, _) idx_mut = (.c164) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c164) *)
    let shallow : (t164, _) idx_mut = (.c164) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 410;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 410 failed %d" i;
  );

  (**************************************)
  (*   t166 = { string; #{ unit_u } }   *)
  (**************************************)
  (* Deepening to (.a166) *)
  let idx : (t166, _) idx_mut = (.a166) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a166) *)
    let shallow : (t166, _) idx_mut = (.a166) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 411;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 411 failed %d" i;
  );
  (* Deepening to (.b166) *)
  let idx : (t166, _) idx_mut = (.b166) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b166) *)
    let shallow : (t166, _) idx_mut = (.b166) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b166.#a165) *)
  let idx : (t166, _) idx_mut = (.b166.#a165) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b166) *)
    let shallow : (t166, _) idx_mut = (.b166) in
    let deepened = (.idx_mut(shallow).#a165) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.b166.#a165) *)
    let shallow : (t166, _) idx_mut = (.b166.#a165) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (**********************************************)
  (*   t168 = { string; #{ unit_u; unit_u } }   *)
  (**********************************************)
  (* Deepening to (.a168) *)
  let idx : (t168, _) idx_mut = (.a168) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a168) *)
    let shallow : (t168, _) idx_mut = (.a168) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 412;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 412 failed %d" i;
  );
  (* Deepening to (.b168) *)
  let idx : (t168, _) idx_mut = (.b168) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b168) *)
    let shallow : (t168, _) idx_mut = (.b168) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 413;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 413 failed %d" i;
  );
  (* Deepening to (.b168.#a167) *)
  let idx : (t168, _) idx_mut = (.b168.#a167) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b168) *)
    let shallow : (t168, _) idx_mut = (.b168) in
    let deepened = (.idx_mut(shallow).#a167) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.b168.#a167) *)
    let shallow : (t168, _) idx_mut = (.b168.#a167) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b168.#b167) *)
  let idx : (t168, _) idx_mut = (.b168.#b167) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b168) *)
    let shallow : (t168, _) idx_mut = (.b168) in
    let deepened = (.idx_mut(shallow).#b167) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.b168.#b167) *)
    let shallow : (t168, _) idx_mut = (.b168.#b167) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (**********************************************)
  (*   t169 = { string; #{ unit_u; string } }   *)
  (**********************************************)
  (* Deepening to (.a169) *)
  let idx : (t169, _) idx_mut = (.a169) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a169) *)
    let shallow : (t169, _) idx_mut = (.a169) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 414;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 414 failed %d" i;
  );
  (* Deepening to (.b169) *)
  let idx : (t169, _) idx_mut = (.b169) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b169) *)
    let shallow : (t169, _) idx_mut = (.b169) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 415;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 415 failed %d" i;
  );
  (* Deepening to (.b169.#a106) *)
  let idx : (t169, _) idx_mut = (.b169.#a106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b169) *)
    let shallow : (t169, _) idx_mut = (.b169) in
    let deepened = (.idx_mut(shallow).#a106) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.b169.#a106) *)
    let shallow : (t169, _) idx_mut = (.b169.#a106) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b169.#b106) *)
  let idx : (t169, _) idx_mut = (.b169.#b106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b169) *)
    let shallow : (t169, _) idx_mut = (.b169) in
    let deepened = (.idx_mut(shallow).#b106) in
    mark_test_run 416;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 416 failed %d" i;
    (* from (.b169.#b106) *)
    let shallow : (t169, _) idx_mut = (.b169.#b106) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 417;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 417 failed %d" i;
  );

  (**************************************)
  (*   t170 = { string; #{ string } }   *)
  (**************************************)
  (* Deepening to (.a170) *)
  let idx : (t170, _) idx_mut = (.a170) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a170) *)
    let shallow : (t170, _) idx_mut = (.a170) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 418;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 418 failed %d" i;
  );
  (* Deepening to (.b170) *)
  let idx : (t170, _) idx_mut = (.b170) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b170) *)
    let shallow : (t170, _) idx_mut = (.b170) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 419;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 419 failed %d" i;
  );
  (* Deepening to (.b170.#a108) *)
  let idx : (t170, _) idx_mut = (.b170.#a108) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b170) *)
    let shallow : (t170, _) idx_mut = (.b170) in
    let deepened = (.idx_mut(shallow).#a108) in
    mark_test_run 420;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 420 failed %d" i;
    (* from (.b170.#a108) *)
    let shallow : (t170, _) idx_mut = (.b170.#a108) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 421;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 421 failed %d" i;
  );

  (**********************************************)
  (*   t171 = { string; #{ string; unit_u } }   *)
  (**********************************************)
  (* Deepening to (.a171) *)
  let idx : (t171, _) idx_mut = (.a171) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a171) *)
    let shallow : (t171, _) idx_mut = (.a171) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 422;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 422 failed %d" i;
  );
  (* Deepening to (.b171) *)
  let idx : (t171, _) idx_mut = (.b171) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b171) *)
    let shallow : (t171, _) idx_mut = (.b171) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 423;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 423 failed %d" i;
  );
  (* Deepening to (.b171.#a110) *)
  let idx : (t171, _) idx_mut = (.b171.#a110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b171) *)
    let shallow : (t171, _) idx_mut = (.b171) in
    let deepened = (.idx_mut(shallow).#a110) in
    mark_test_run 424;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 424 failed %d" i;
    (* from (.b171.#a110) *)
    let shallow : (t171, _) idx_mut = (.b171.#a110) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 425;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 425 failed %d" i;
  );
  (* Deepening to (.b171.#b110) *)
  let idx : (t171, _) idx_mut = (.b171.#b110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b171) *)
    let shallow : (t171, _) idx_mut = (.b171) in
    let deepened = (.idx_mut(shallow).#b110) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.b171.#b110) *)
    let shallow : (t171, _) idx_mut = (.b171.#b110) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (**********************************************)
  (*   t172 = { string; #{ string; string } }   *)
  (**********************************************)
  (* Deepening to (.a172) *)
  let idx : (t172, _) idx_mut = (.a172) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a172) *)
    let shallow : (t172, _) idx_mut = (.a172) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 426;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 426 failed %d" i;
  );
  (* Deepening to (.b172) *)
  let idx : (t172, _) idx_mut = (.b172) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b172) *)
    let shallow : (t172, _) idx_mut = (.b172) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 427;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 427 failed %d" i;
  );
  (* Deepening to (.b172.#a112) *)
  let idx : (t172, _) idx_mut = (.b172.#a112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b172) *)
    let shallow : (t172, _) idx_mut = (.b172) in
    let deepened = (.idx_mut(shallow).#a112) in
    mark_test_run 428;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 428 failed %d" i;
    (* from (.b172.#a112) *)
    let shallow : (t172, _) idx_mut = (.b172.#a112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 429;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 429 failed %d" i;
  );
  (* Deepening to (.b172.#b112) *)
  let idx : (t172, _) idx_mut = (.b172.#b112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b172) *)
    let shallow : (t172, _) idx_mut = (.b172) in
    let deepened = (.idx_mut(shallow).#b112) in
    mark_test_run 430;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 430 failed %d" i;
    (* from (.b172.#b112) *)
    let shallow : (t172, _) idx_mut = (.b172.#b112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 431;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 431 failed %d" i;
  );

  (***************************)
  (*   t173 = { int64x2# }   *)
  (***************************)
  (* Deepening to (.a173) *)
  let idx : (t173, _) idx_mut = (.a173) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a173) *)
    let shallow : (t173, _) idx_mut = (.a173) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 432;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 432 failed %d" i;
  );

  (********************************)
  (*   t174 = { int64x2#; int }   *)
  (********************************)
  (* Deepening to (.a174) *)
  let idx : (t174, _) idx_mut = (.a174) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a174) *)
    let shallow : (t174, _) idx_mut = (.a174) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 433;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 433 failed %d" i;
  );
  (* Deepening to (.b174) *)
  let idx : (t174, _) idx_mut = (.b174) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b174) *)
    let shallow : (t174, _) idx_mut = (.b174) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 434;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 434 failed %d" i;
  );

  (*************************************)
  (*   t175 = { int64x2#; int; int }   *)
  (*************************************)
  (* Deepening to (.a175) *)
  let idx : (t175, _) idx_mut = (.a175) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a175) *)
    let shallow : (t175, _) idx_mut = (.a175) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 435;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 435 failed %d" i;
  );
  (* Deepening to (.b175) *)
  let idx : (t175, _) idx_mut = (.b175) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b175) *)
    let shallow : (t175, _) idx_mut = (.b175) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 436;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 436 failed %d" i;
  );
  (* Deepening to (.c175) *)
  let idx : (t175, _) idx_mut = (.c175) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c175) *)
    let shallow : (t175, _) idx_mut = (.c175) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 437;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 437 failed %d" i;
  );

  (******************************************)
  (*   t176 = { int64x2#; int; int64x2# }   *)
  (******************************************)
  (* Deepening to (.a176) *)
  let idx : (t176, _) idx_mut = (.a176) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a176) *)
    let shallow : (t176, _) idx_mut = (.a176) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 438;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 438 failed %d" i;
  );
  (* Deepening to (.b176) *)
  let idx : (t176, _) idx_mut = (.b176) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b176) *)
    let shallow : (t176, _) idx_mut = (.b176) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 439;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 439 failed %d" i;
  );
  (* Deepening to (.c176) *)
  let idx : (t176, _) idx_mut = (.c176) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c176) *)
    let shallow : (t176, _) idx_mut = (.c176) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 440;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 440 failed %d" i;
  );

  (*************************************)
  (*   t177 = { int64x2#; int64x2# }   *)
  (*************************************)
  (* Deepening to (.a177) *)
  let idx : (t177, _) idx_mut = (.a177) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a177) *)
    let shallow : (t177, _) idx_mut = (.a177) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 441;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 441 failed %d" i;
  );
  (* Deepening to (.b177) *)
  let idx : (t177, _) idx_mut = (.b177) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b177) *)
    let shallow : (t177, _) idx_mut = (.b177) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 442;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 442 failed %d" i;
  );

  (******************************************)
  (*   t178 = { int64x2#; int64x2#; int }   *)
  (******************************************)
  (* Deepening to (.a178) *)
  let idx : (t178, _) idx_mut = (.a178) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a178) *)
    let shallow : (t178, _) idx_mut = (.a178) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 443;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 443 failed %d" i;
  );
  (* Deepening to (.b178) *)
  let idx : (t178, _) idx_mut = (.b178) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b178) *)
    let shallow : (t178, _) idx_mut = (.b178) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 444;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 444 failed %d" i;
  );
  (* Deepening to (.c178) *)
  let idx : (t178, _) idx_mut = (.c178) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c178) *)
    let shallow : (t178, _) idx_mut = (.c178) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 445;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 445 failed %d" i;
  );

  (***********************************************)
  (*   t179 = { int64x2#; int64x2#; int64x2# }   *)
  (***********************************************)
  (* Deepening to (.a179) *)
  let idx : (t179, _) idx_mut = (.a179) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a179) *)
    let shallow : (t179, _) idx_mut = (.a179) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 446;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 446 failed %d" i;
  );
  (* Deepening to (.b179) *)
  let idx : (t179, _) idx_mut = (.b179) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b179) *)
    let shallow : (t179, _) idx_mut = (.b179) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 447;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 447 failed %d" i;
  );
  (* Deepening to (.c179) *)
  let idx : (t179, _) idx_mut = (.c179) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c179) *)
    let shallow : (t179, _) idx_mut = (.c179) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 448;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 448 failed %d" i;
  );

  (*************************************)
  (*   t180 = { int64x2#; #{ int } }   *)
  (*************************************)
  (* Deepening to (.a180) *)
  let idx : (t180, _) idx_mut = (.a180) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a180) *)
    let shallow : (t180, _) idx_mut = (.a180) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 449;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 449 failed %d" i;
  );
  (* Deepening to (.b180) *)
  let idx : (t180, _) idx_mut = (.b180) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b180) *)
    let shallow : (t180, _) idx_mut = (.b180) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 450;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 450 failed %d" i;
  );
  (* Deepening to (.b180.#a21) *)
  let idx : (t180, _) idx_mut = (.b180.#a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b180) *)
    let shallow : (t180, _) idx_mut = (.b180) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 451;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 451 failed %d" i;
    (* from (.b180.#a21) *)
    let shallow : (t180, _) idx_mut = (.b180.#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 452;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 452 failed %d" i;
  );

  (******************************************)
  (*   t181 = { int64x2#; #{ int; int } }   *)
  (******************************************)
  (* Deepening to (.a181) *)
  let idx : (t181, _) idx_mut = (.a181) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a181) *)
    let shallow : (t181, _) idx_mut = (.a181) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 453;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 453 failed %d" i;
  );
  (* Deepening to (.b181) *)
  let idx : (t181, _) idx_mut = (.b181) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b181) *)
    let shallow : (t181, _) idx_mut = (.b181) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 454;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 454 failed %d" i;
  );
  (* Deepening to (.b181.#a23) *)
  let idx : (t181, _) idx_mut = (.b181.#a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b181) *)
    let shallow : (t181, _) idx_mut = (.b181) in
    let deepened = (.idx_mut(shallow).#a23) in
    mark_test_run 455;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 455 failed %d" i;
    (* from (.b181.#a23) *)
    let shallow : (t181, _) idx_mut = (.b181.#a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 456;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 456 failed %d" i;
  );
  (* Deepening to (.b181.#b23) *)
  let idx : (t181, _) idx_mut = (.b181.#b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b181) *)
    let shallow : (t181, _) idx_mut = (.b181) in
    let deepened = (.idx_mut(shallow).#b23) in
    mark_test_run 457;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 457 failed %d" i;
    (* from (.b181.#b23) *)
    let shallow : (t181, _) idx_mut = (.b181.#b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 458;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 458 failed %d" i;
  );

  (***********************************************)
  (*   t182 = { int64x2#; #{ int; int64x2# } }   *)
  (***********************************************)
  (* Deepening to (.a182) *)
  let idx : (t182, _) idx_mut = (.a182) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a182) *)
    let shallow : (t182, _) idx_mut = (.a182) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 459;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 459 failed %d" i;
  );
  (* Deepening to (.b182) *)
  let idx : (t182, _) idx_mut = (.b182) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b182) *)
    let shallow : (t182, _) idx_mut = (.b182) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 460;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 460 failed %d" i;
  );
  (* Deepening to (.b182.#a29) *)
  let idx : (t182, _) idx_mut = (.b182.#a29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b182) *)
    let shallow : (t182, _) idx_mut = (.b182) in
    let deepened = (.idx_mut(shallow).#a29) in
    mark_test_run 461;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 461 failed %d" i;
    (* from (.b182.#a29) *)
    let shallow : (t182, _) idx_mut = (.b182.#a29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 462;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 462 failed %d" i;
  );
  (* Deepening to (.b182.#b29) *)
  let idx : (t182, _) idx_mut = (.b182.#b29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b182) *)
    let shallow : (t182, _) idx_mut = (.b182) in
    let deepened = (.idx_mut(shallow).#b29) in
    mark_test_run 463;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 463 failed %d" i;
    (* from (.b182.#b29) *)
    let shallow : (t182, _) idx_mut = (.b182.#b29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 464;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 464 failed %d" i;
  );

  (************************************************)
  (*   t184 = { int64x2#; #{ string; float# } }   *)
  (************************************************)
  (* Deepening to (.a184) *)
  let idx : (t184, _) idx_mut = (.a184) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a184) *)
    let shallow : (t184, _) idx_mut = (.a184) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 465;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 465 failed %d" i;
  );
  (* Deepening to (.b184) *)
  let idx : (t184, _) idx_mut = (.b184) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b184) *)
    let shallow : (t184, _) idx_mut = (.b184) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 466;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 466 failed %d" i;
  );
  (* Deepening to (.b184.#a183) *)
  let idx : (t184, _) idx_mut = (.b184.#a183) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b184) *)
    let shallow : (t184, _) idx_mut = (.b184) in
    let deepened = (.idx_mut(shallow).#a183) in
    mark_test_run 467;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 467 failed %d" i;
    (* from (.b184.#a183) *)
    let shallow : (t184, _) idx_mut = (.b184.#a183) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 468;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 468 failed %d" i;
  );
  (* Deepening to (.b184.#b183) *)
  let idx : (t184, _) idx_mut = (.b184.#b183) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b184) *)
    let shallow : (t184, _) idx_mut = (.b184) in
    let deepened = (.idx_mut(shallow).#b183) in
    mark_test_run 469;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 469 failed %d" i;
    (* from (.b184.#b183) *)
    let shallow : (t184, _) idx_mut = (.b184.#b183) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 470;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 470 failed %d" i;
  );

  (******************************************)
  (*   t185 = { int64x2#; #{ int64x2# } }   *)
  (******************************************)
  (* Deepening to (.a185) *)
  let idx : (t185, _) idx_mut = (.a185) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a185) *)
    let shallow : (t185, _) idx_mut = (.a185) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 471;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 471 failed %d" i;
  );
  (* Deepening to (.b185) *)
  let idx : (t185, _) idx_mut = (.b185) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b185) *)
    let shallow : (t185, _) idx_mut = (.b185) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 472;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 472 failed %d" i;
  );
  (* Deepening to (.b185.#a43) *)
  let idx : (t185, _) idx_mut = (.b185.#a43) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b185) *)
    let shallow : (t185, _) idx_mut = (.b185) in
    let deepened = (.idx_mut(shallow).#a43) in
    mark_test_run 473;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 473 failed %d" i;
    (* from (.b185.#a43) *)
    let shallow : (t185, _) idx_mut = (.b185.#a43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 474;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 474 failed %d" i;
  );

  (***********************************************)
  (*   t186 = { int64x2#; #{ int64x2#; int } }   *)
  (***********************************************)
  (* Deepening to (.a186) *)
  let idx : (t186, _) idx_mut = (.a186) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a186) *)
    let shallow : (t186, _) idx_mut = (.a186) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 475;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 475 failed %d" i;
  );
  (* Deepening to (.b186) *)
  let idx : (t186, _) idx_mut = (.b186) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b186) *)
    let shallow : (t186, _) idx_mut = (.b186) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 476;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 476 failed %d" i;
  );
  (* Deepening to (.b186.#a45) *)
  let idx : (t186, _) idx_mut = (.b186.#a45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b186) *)
    let shallow : (t186, _) idx_mut = (.b186) in
    let deepened = (.idx_mut(shallow).#a45) in
    mark_test_run 477;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 477 failed %d" i;
    (* from (.b186.#a45) *)
    let shallow : (t186, _) idx_mut = (.b186.#a45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 478;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 478 failed %d" i;
  );
  (* Deepening to (.b186.#b45) *)
  let idx : (t186, _) idx_mut = (.b186.#b45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b186) *)
    let shallow : (t186, _) idx_mut = (.b186) in
    let deepened = (.idx_mut(shallow).#b45) in
    mark_test_run 479;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 479 failed %d" i;
    (* from (.b186.#b45) *)
    let shallow : (t186, _) idx_mut = (.b186.#b45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 480;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 480 failed %d" i;
  );

  (****************************************************)
  (*   t187 = { int64x2#; #{ int64x2#; int64x2# } }   *)
  (****************************************************)
  (* Deepening to (.a187) *)
  let idx : (t187, _) idx_mut = (.a187) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a187) *)
    let shallow : (t187, _) idx_mut = (.a187) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 481;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 481 failed %d" i;
  );
  (* Deepening to (.b187) *)
  let idx : (t187, _) idx_mut = (.b187) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b187) *)
    let shallow : (t187, _) idx_mut = (.b187) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 482;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 482 failed %d" i;
  );
  (* Deepening to (.b187.#a47) *)
  let idx : (t187, _) idx_mut = (.b187.#a47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b187) *)
    let shallow : (t187, _) idx_mut = (.b187) in
    let deepened = (.idx_mut(shallow).#a47) in
    mark_test_run 483;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 483 failed %d" i;
    (* from (.b187.#a47) *)
    let shallow : (t187, _) idx_mut = (.b187.#a47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 484;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 484 failed %d" i;
  );
  (* Deepening to (.b187.#b47) *)
  let idx : (t187, _) idx_mut = (.b187.#b47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b187) *)
    let shallow : (t187, _) idx_mut = (.b187) in
    let deepened = (.idx_mut(shallow).#b47) in
    mark_test_run 485;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 485 failed %d" i;
    (* from (.b187.#b47) *)
    let shallow : (t187, _) idx_mut = (.b187.#b47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 486;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 486 failed %d" i;
  );

  (*****************************)
  (*   t188 = { (| unit_u) }   *)
  (*****************************)
  (* Deepening to (.a188) *)
  let idx : (t188, _) idx_mut = (.a188) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a188) *)
    let shallow : (t188, _) idx_mut = (.a188) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 487;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 487 failed %d" i;
  );

  (**********************************)
  (*   t189 = { (| unit_u); int }   *)
  (**********************************)
  (* Deepening to (.a189) *)
  let idx : (t189, _) idx_mut = (.a189) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a189) *)
    let shallow : (t189, _) idx_mut = (.a189) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 488;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 488 failed %d" i;
  );
  (* Deepening to (.b189) *)
  let idx : (t189, _) idx_mut = (.b189) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b189) *)
    let shallow : (t189, _) idx_mut = (.b189) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 489;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 489 failed %d" i;
  );

  (************************************)
  (*   t190 = { (| unit_u); int64 }   *)
  (************************************)
  (* Deepening to (.a190) *)
  let idx : (t190, _) idx_mut = (.a190) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a190) *)
    let shallow : (t190, _) idx_mut = (.a190) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 490;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 490 failed %d" i;
  );
  (* Deepening to (.b190) *)
  let idx : (t190, _) idx_mut = (.b190) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b190) *)
    let shallow : (t190, _) idx_mut = (.b190) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 491;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 491 failed %d" i;
  );

  (*************************************)
  (*   t191 = { (| unit_u); int64# }   *)
  (*************************************)
  (* Deepening to (.a191) *)
  let idx : (t191, _) idx_mut = (.a191) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a191) *)
    let shallow : (t191, _) idx_mut = (.a191) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 492;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 492 failed %d" i;
  );
  (* Deepening to (.b191) *)
  let idx : (t191, _) idx_mut = (.b191) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b191) *)
    let shallow : (t191, _) idx_mut = (.b191) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 493;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 493 failed %d" i;
  );

  (*************************************)
  (*   t192 = { (| unit_u); int32# }   *)
  (*************************************)
  (* Deepening to (.a192) *)
  let idx : (t192, _) idx_mut = (.a192) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a192) *)
    let shallow : (t192, _) idx_mut = (.a192) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 494;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 494 failed %d" i;
  );
  (* Deepening to (.b192) *)
  let idx : (t192, _) idx_mut = (.b192) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b192) *)
    let shallow : (t192, _) idx_mut = (.b192) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 495;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 495 failed %d" i;
  );

  (*****************************************)
  (*   t193 = { (| unit_u); nativeint# }   *)
  (*****************************************)
  (* Deepening to (.a193) *)
  let idx : (t193, _) idx_mut = (.a193) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a193) *)
    let shallow : (t193, _) idx_mut = (.a193) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 496;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 496 failed %d" i;
  );
  (* Deepening to (.b193) *)
  let idx : (t193, _) idx_mut = (.b193) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b193) *)
    let shallow : (t193, _) idx_mut = (.b193) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 497;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 497 failed %d" i;
  );

  (*************************************)
  (*   t194 = { (| unit_u); unit_u }   *)
  (*************************************)
  (* Deepening to (.a194) *)
  let idx : (t194, _) idx_mut = (.a194) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a194) *)
    let shallow : (t194, _) idx_mut = (.a194) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 498;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 498 failed %d" i;
  );
  (* Deepening to (.b194) *)
  let idx : (t194, _) idx_mut = (.b194) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b194) *)
    let shallow : (t194, _) idx_mut = (.b194) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (************************************)
  (*   t195 = { (| unit_u); float }   *)
  (************************************)
  (* Deepening to (.a195) *)
  let idx : (t195, _) idx_mut = (.a195) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a195) *)
    let shallow : (t195, _) idx_mut = (.a195) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 499;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 499 failed %d" i;
  );
  (* Deepening to (.b195) *)
  let idx : (t195, _) idx_mut = (.b195) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b195) *)
    let shallow : (t195, _) idx_mut = (.b195) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 500;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 500 failed %d" i;
  );

  (*****************************************)
  (*   t196 = { (| unit_u); (| unit_u) }   *)
  (*****************************************)
  (* Deepening to (.a196) *)
  let idx : (t196, _) idx_mut = (.a196) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a196) *)
    let shallow : (t196, _) idx_mut = (.a196) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 501;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 501 failed %d" i;
  );
  (* Deepening to (.b196) *)
  let idx : (t196, _) idx_mut = (.b196) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b196) *)
    let shallow : (t196, _) idx_mut = (.b196) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 502;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 502 failed %d" i;
  );

  (***************************)
  (*   t197 = { #{ int } }   *)
  (***************************)
  (* Deepening to (.a197) *)
  let idx : (t197, _) idx_mut = (.a197) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a197) *)
    let shallow : (t197, _) idx_mut = (.a197) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 503;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 503 failed %d" i;
  );
  (* Deepening to (.a197.#a21) *)
  let idx : (t197, _) idx_mut = (.a197.#a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a197) *)
    let shallow : (t197, _) idx_mut = (.a197) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 504;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 504 failed %d" i;
    (* from (.a197.#a21) *)
    let shallow : (t197, _) idx_mut = (.a197.#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 505;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 505 failed %d" i;
  );

  (********************************)
  (*   t198 = { #{ int }; int }   *)
  (********************************)
  (* Deepening to (.a198) *)
  let idx : (t198, _) idx_mut = (.a198) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a198) *)
    let shallow : (t198, _) idx_mut = (.a198) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 506;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 506 failed %d" i;
  );
  (* Deepening to (.a198.#a21) *)
  let idx : (t198, _) idx_mut = (.a198.#a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a198) *)
    let shallow : (t198, _) idx_mut = (.a198) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 507;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 507 failed %d" i;
    (* from (.a198.#a21) *)
    let shallow : (t198, _) idx_mut = (.a198.#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 508;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 508 failed %d" i;
  );
  (* Deepening to (.b198) *)
  let idx : (t198, _) idx_mut = (.b198) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b198) *)
    let shallow : (t198, _) idx_mut = (.b198) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 509;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 509 failed %d" i;
  );

  (***********************************)
  (*   t199 = { #{ int }; int32# }   *)
  (***********************************)
  (* Deepening to (.a199) *)
  let idx : (t199, _) idx_mut = (.a199) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a199) *)
    let shallow : (t199, _) idx_mut = (.a199) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 510;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 510 failed %d" i;
  );
  (* Deepening to (.a199.#a21) *)
  let idx : (t199, _) idx_mut = (.a199.#a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a199) *)
    let shallow : (t199, _) idx_mut = (.a199) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 511;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 511 failed %d" i;
    (* from (.a199.#a21) *)
    let shallow : (t199, _) idx_mut = (.a199.#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 512;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 512 failed %d" i;
  );
  (* Deepening to (.b199) *)
  let idx : (t199, _) idx_mut = (.b199) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b199) *)
    let shallow : (t199, _) idx_mut = (.b199) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 513;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 513 failed %d" i;
  );

  (**********************************)
  (*   t200 = { #{ int }; float }   *)
  (**********************************)
  (* Deepening to (.a200) *)
  let idx : (t200, _) idx_mut = (.a200) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a200) *)
    let shallow : (t200, _) idx_mut = (.a200) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 514;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 514 failed %d" i;
  );
  (* Deepening to (.a200.#a21) *)
  let idx : (t200, _) idx_mut = (.a200.#a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a200) *)
    let shallow : (t200, _) idx_mut = (.a200) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 515;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 515 failed %d" i;
    (* from (.a200.#a21) *)
    let shallow : (t200, _) idx_mut = (.a200.#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 516;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 516 failed %d" i;
  );
  (* Deepening to (.b200) *)
  let idx : (t200, _) idx_mut = (.b200) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b200) *)
    let shallow : (t200, _) idx_mut = (.b200) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 517;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 517 failed %d" i;
  );

  (*************************************)
  (*   t201 = { #{ int }; int64x2# }   *)
  (*************************************)
  (* Deepening to (.a201) *)
  let idx : (t201, _) idx_mut = (.a201) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a201) *)
    let shallow : (t201, _) idx_mut = (.a201) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 518;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 518 failed %d" i;
  );
  (* Deepening to (.a201.#a21) *)
  let idx : (t201, _) idx_mut = (.a201.#a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a201) *)
    let shallow : (t201, _) idx_mut = (.a201) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 519;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 519 failed %d" i;
    (* from (.a201.#a21) *)
    let shallow : (t201, _) idx_mut = (.a201.#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 520;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 520 failed %d" i;
  );
  (* Deepening to (.b201) *)
  let idx : (t201, _) idx_mut = (.b201) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b201) *)
    let shallow : (t201, _) idx_mut = (.b201) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 521;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 521 failed %d" i;
  );

  (********************************)
  (*   t202 = { #{ int; int } }   *)
  (********************************)
  (* Deepening to (.a202) *)
  let idx : (t202, _) idx_mut = (.a202) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a202) *)
    let shallow : (t202, _) idx_mut = (.a202) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 522;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 522 failed %d" i;
  );
  (* Deepening to (.a202.#a23) *)
  let idx : (t202, _) idx_mut = (.a202.#a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a202) *)
    let shallow : (t202, _) idx_mut = (.a202) in
    let deepened = (.idx_mut(shallow).#a23) in
    mark_test_run 523;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 523 failed %d" i;
    (* from (.a202.#a23) *)
    let shallow : (t202, _) idx_mut = (.a202.#a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 524;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 524 failed %d" i;
  );
  (* Deepening to (.a202.#b23) *)
  let idx : (t202, _) idx_mut = (.a202.#b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a202) *)
    let shallow : (t202, _) idx_mut = (.a202) in
    let deepened = (.idx_mut(shallow).#b23) in
    mark_test_run 525;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 525 failed %d" i;
    (* from (.a202.#b23) *)
    let shallow : (t202, _) idx_mut = (.a202.#b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 526;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 526 failed %d" i;
  );

  (*************************************)
  (*   t203 = { #{ int; int }; int }   *)
  (*************************************)
  (* Deepening to (.a203) *)
  let idx : (t203, _) idx_mut = (.a203) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a203) *)
    let shallow : (t203, _) idx_mut = (.a203) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 527;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 527 failed %d" i;
  );
  (* Deepening to (.a203.#a23) *)
  let idx : (t203, _) idx_mut = (.a203.#a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a203) *)
    let shallow : (t203, _) idx_mut = (.a203) in
    let deepened = (.idx_mut(shallow).#a23) in
    mark_test_run 528;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 528 failed %d" i;
    (* from (.a203.#a23) *)
    let shallow : (t203, _) idx_mut = (.a203.#a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 529;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 529 failed %d" i;
  );
  (* Deepening to (.a203.#b23) *)
  let idx : (t203, _) idx_mut = (.a203.#b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a203) *)
    let shallow : (t203, _) idx_mut = (.a203) in
    let deepened = (.idx_mut(shallow).#b23) in
    mark_test_run 530;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 530 failed %d" i;
    (* from (.a203.#b23) *)
    let shallow : (t203, _) idx_mut = (.a203.#b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 531;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 531 failed %d" i;
  );
  (* Deepening to (.b203) *)
  let idx : (t203, _) idx_mut = (.b203) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b203) *)
    let shallow : (t203, _) idx_mut = (.b203) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 532;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 532 failed %d" i;
  );

  (****************************************)
  (*   t204 = { #{ int; int }; int32# }   *)
  (****************************************)
  (* Deepening to (.a204) *)
  let idx : (t204, _) idx_mut = (.a204) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a204) *)
    let shallow : (t204, _) idx_mut = (.a204) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 533;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 533 failed %d" i;
  );
  (* Deepening to (.a204.#a23) *)
  let idx : (t204, _) idx_mut = (.a204.#a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a204) *)
    let shallow : (t204, _) idx_mut = (.a204) in
    let deepened = (.idx_mut(shallow).#a23) in
    mark_test_run 534;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 534 failed %d" i;
    (* from (.a204.#a23) *)
    let shallow : (t204, _) idx_mut = (.a204.#a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 535;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 535 failed %d" i;
  );
  (* Deepening to (.a204.#b23) *)
  let idx : (t204, _) idx_mut = (.a204.#b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a204) *)
    let shallow : (t204, _) idx_mut = (.a204) in
    let deepened = (.idx_mut(shallow).#b23) in
    mark_test_run 536;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 536 failed %d" i;
    (* from (.a204.#b23) *)
    let shallow : (t204, _) idx_mut = (.a204.#b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 537;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 537 failed %d" i;
  );
  (* Deepening to (.b204) *)
  let idx : (t204, _) idx_mut = (.b204) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b204) *)
    let shallow : (t204, _) idx_mut = (.b204) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 538;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 538 failed %d" i;
  );

  (***************************************)
  (*   t205 = { #{ int; int }; float }   *)
  (***************************************)
  (* Deepening to (.a205) *)
  let idx : (t205, _) idx_mut = (.a205) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a205) *)
    let shallow : (t205, _) idx_mut = (.a205) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 539;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 539 failed %d" i;
  );
  (* Deepening to (.a205.#a23) *)
  let idx : (t205, _) idx_mut = (.a205.#a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a205) *)
    let shallow : (t205, _) idx_mut = (.a205) in
    let deepened = (.idx_mut(shallow).#a23) in
    mark_test_run 540;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 540 failed %d" i;
    (* from (.a205.#a23) *)
    let shallow : (t205, _) idx_mut = (.a205.#a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 541;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 541 failed %d" i;
  );
  (* Deepening to (.a205.#b23) *)
  let idx : (t205, _) idx_mut = (.a205.#b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a205) *)
    let shallow : (t205, _) idx_mut = (.a205) in
    let deepened = (.idx_mut(shallow).#b23) in
    mark_test_run 542;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 542 failed %d" i;
    (* from (.a205.#b23) *)
    let shallow : (t205, _) idx_mut = (.a205.#b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 543;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 543 failed %d" i;
  );
  (* Deepening to (.b205) *)
  let idx : (t205, _) idx_mut = (.b205) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b205) *)
    let shallow : (t205, _) idx_mut = (.b205) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 544;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 544 failed %d" i;
  );

  (******************************************)
  (*   t206 = { #{ int; int }; int64x2# }   *)
  (******************************************)
  (* Deepening to (.a206) *)
  let idx : (t206, _) idx_mut = (.a206) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a206) *)
    let shallow : (t206, _) idx_mut = (.a206) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 545;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 545 failed %d" i;
  );
  (* Deepening to (.a206.#a23) *)
  let idx : (t206, _) idx_mut = (.a206.#a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a206) *)
    let shallow : (t206, _) idx_mut = (.a206) in
    let deepened = (.idx_mut(shallow).#a23) in
    mark_test_run 546;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 546 failed %d" i;
    (* from (.a206.#a23) *)
    let shallow : (t206, _) idx_mut = (.a206.#a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 547;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 547 failed %d" i;
  );
  (* Deepening to (.a206.#b23) *)
  let idx : (t206, _) idx_mut = (.a206.#b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a206) *)
    let shallow : (t206, _) idx_mut = (.a206) in
    let deepened = (.idx_mut(shallow).#b23) in
    mark_test_run 548;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 548 failed %d" i;
    (* from (.a206.#b23) *)
    let shallow : (t206, _) idx_mut = (.a206.#b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 549;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 549 failed %d" i;
  );
  (* Deepening to (.b206) *)
  let idx : (t206, _) idx_mut = (.b206) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b206) *)
    let shallow : (t206, _) idx_mut = (.b206) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 550;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 550 failed %d" i;
  );

  (***********************************)
  (*   t207 = { #{ int; int32# } }   *)
  (***********************************)
  (* Deepening to (.a207) *)
  let idx : (t207, _) idx_mut = (.a207) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a207) *)
    let shallow : (t207, _) idx_mut = (.a207) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 551;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 551 failed %d" i;
  );
  (* Deepening to (.a207.#a25) *)
  let idx : (t207, _) idx_mut = (.a207.#a25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a207) *)
    let shallow : (t207, _) idx_mut = (.a207) in
    let deepened = (.idx_mut(shallow).#a25) in
    mark_test_run 552;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 552 failed %d" i;
    (* from (.a207.#a25) *)
    let shallow : (t207, _) idx_mut = (.a207.#a25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 553;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 553 failed %d" i;
  );
  (* Deepening to (.a207.#b25) *)
  let idx : (t207, _) idx_mut = (.a207.#b25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a207) *)
    let shallow : (t207, _) idx_mut = (.a207) in
    let deepened = (.idx_mut(shallow).#b25) in
    mark_test_run 554;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 554 failed %d" i;
    (* from (.a207.#b25) *)
    let shallow : (t207, _) idx_mut = (.a207.#b25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 555;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 555 failed %d" i;
  );

  (****************************************)
  (*   t208 = { #{ int; int32# }; int }   *)
  (****************************************)
  (* Deepening to (.a208) *)
  let idx : (t208, _) idx_mut = (.a208) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a208) *)
    let shallow : (t208, _) idx_mut = (.a208) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 556;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 556 failed %d" i;
  );
  (* Deepening to (.a208.#a25) *)
  let idx : (t208, _) idx_mut = (.a208.#a25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a208) *)
    let shallow : (t208, _) idx_mut = (.a208) in
    let deepened = (.idx_mut(shallow).#a25) in
    mark_test_run 557;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 557 failed %d" i;
    (* from (.a208.#a25) *)
    let shallow : (t208, _) idx_mut = (.a208.#a25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 558;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 558 failed %d" i;
  );
  (* Deepening to (.a208.#b25) *)
  let idx : (t208, _) idx_mut = (.a208.#b25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a208) *)
    let shallow : (t208, _) idx_mut = (.a208) in
    let deepened = (.idx_mut(shallow).#b25) in
    mark_test_run 559;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 559 failed %d" i;
    (* from (.a208.#b25) *)
    let shallow : (t208, _) idx_mut = (.a208.#b25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 560;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 560 failed %d" i;
  );
  (* Deepening to (.b208) *)
  let idx : (t208, _) idx_mut = (.b208) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b208) *)
    let shallow : (t208, _) idx_mut = (.b208) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 561;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 561 failed %d" i;
  );

  (*******************************************)
  (*   t209 = { #{ int; int32# }; int32# }   *)
  (*******************************************)
  (* Deepening to (.a209) *)
  let idx : (t209, _) idx_mut = (.a209) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a209) *)
    let shallow : (t209, _) idx_mut = (.a209) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 562;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 562 failed %d" i;
  );
  (* Deepening to (.a209.#a25) *)
  let idx : (t209, _) idx_mut = (.a209.#a25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a209) *)
    let shallow : (t209, _) idx_mut = (.a209) in
    let deepened = (.idx_mut(shallow).#a25) in
    mark_test_run 563;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 563 failed %d" i;
    (* from (.a209.#a25) *)
    let shallow : (t209, _) idx_mut = (.a209.#a25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 564;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 564 failed %d" i;
  );
  (* Deepening to (.a209.#b25) *)
  let idx : (t209, _) idx_mut = (.a209.#b25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a209) *)
    let shallow : (t209, _) idx_mut = (.a209) in
    let deepened = (.idx_mut(shallow).#b25) in
    mark_test_run 565;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 565 failed %d" i;
    (* from (.a209.#b25) *)
    let shallow : (t209, _) idx_mut = (.a209.#b25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 566;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 566 failed %d" i;
  );
  (* Deepening to (.b209) *)
  let idx : (t209, _) idx_mut = (.b209) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b209) *)
    let shallow : (t209, _) idx_mut = (.b209) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 567;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 567 failed %d" i;
  );

  (**********************************)
  (*   t210 = { #{ int; float } }   *)
  (**********************************)
  (* Deepening to (.a210) *)
  let idx : (t210, _) idx_mut = (.a210) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a210) *)
    let shallow : (t210, _) idx_mut = (.a210) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 568;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 568 failed %d" i;
  );
  (* Deepening to (.a210.#a27) *)
  let idx : (t210, _) idx_mut = (.a210.#a27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a210) *)
    let shallow : (t210, _) idx_mut = (.a210) in
    let deepened = (.idx_mut(shallow).#a27) in
    mark_test_run 569;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 569 failed %d" i;
    (* from (.a210.#a27) *)
    let shallow : (t210, _) idx_mut = (.a210.#a27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 570;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 570 failed %d" i;
  );
  (* Deepening to (.a210.#b27) *)
  let idx : (t210, _) idx_mut = (.a210.#b27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a210) *)
    let shallow : (t210, _) idx_mut = (.a210) in
    let deepened = (.idx_mut(shallow).#b27) in
    mark_test_run 571;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 571 failed %d" i;
    (* from (.a210.#b27) *)
    let shallow : (t210, _) idx_mut = (.a210.#b27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 572;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 572 failed %d" i;
  );

  (***************************************)
  (*   t211 = { #{ int; float }; int }   *)
  (***************************************)
  (* Deepening to (.a211) *)
  let idx : (t211, _) idx_mut = (.a211) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a211) *)
    let shallow : (t211, _) idx_mut = (.a211) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 573;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 573 failed %d" i;
  );
  (* Deepening to (.a211.#a27) *)
  let idx : (t211, _) idx_mut = (.a211.#a27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a211) *)
    let shallow : (t211, _) idx_mut = (.a211) in
    let deepened = (.idx_mut(shallow).#a27) in
    mark_test_run 574;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 574 failed %d" i;
    (* from (.a211.#a27) *)
    let shallow : (t211, _) idx_mut = (.a211.#a27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 575;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 575 failed %d" i;
  );
  (* Deepening to (.a211.#b27) *)
  let idx : (t211, _) idx_mut = (.a211.#b27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a211) *)
    let shallow : (t211, _) idx_mut = (.a211) in
    let deepened = (.idx_mut(shallow).#b27) in
    mark_test_run 576;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 576 failed %d" i;
    (* from (.a211.#b27) *)
    let shallow : (t211, _) idx_mut = (.a211.#b27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 577;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 577 failed %d" i;
  );
  (* Deepening to (.b211) *)
  let idx : (t211, _) idx_mut = (.b211) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b211) *)
    let shallow : (t211, _) idx_mut = (.b211) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 578;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 578 failed %d" i;
  );

  (*****************************************)
  (*   t212 = { #{ int; float }; float }   *)
  (*****************************************)
  (* Deepening to (.a212) *)
  let idx : (t212, _) idx_mut = (.a212) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a212) *)
    let shallow : (t212, _) idx_mut = (.a212) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 579;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 579 failed %d" i;
  );
  (* Deepening to (.a212.#a27) *)
  let idx : (t212, _) idx_mut = (.a212.#a27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a212) *)
    let shallow : (t212, _) idx_mut = (.a212) in
    let deepened = (.idx_mut(shallow).#a27) in
    mark_test_run 580;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 580 failed %d" i;
    (* from (.a212.#a27) *)
    let shallow : (t212, _) idx_mut = (.a212.#a27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 581;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 581 failed %d" i;
  );
  (* Deepening to (.a212.#b27) *)
  let idx : (t212, _) idx_mut = (.a212.#b27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a212) *)
    let shallow : (t212, _) idx_mut = (.a212) in
    let deepened = (.idx_mut(shallow).#b27) in
    mark_test_run 582;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 582 failed %d" i;
    (* from (.a212.#b27) *)
    let shallow : (t212, _) idx_mut = (.a212.#b27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 583;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 583 failed %d" i;
  );
  (* Deepening to (.b212) *)
  let idx : (t212, _) idx_mut = (.b212) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b212) *)
    let shallow : (t212, _) idx_mut = (.b212) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 584;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 584 failed %d" i;
  );

  (*************************************)
  (*   t213 = { #{ int; int64x2# } }   *)
  (*************************************)
  (* Deepening to (.a213) *)
  let idx : (t213, _) idx_mut = (.a213) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a213) *)
    let shallow : (t213, _) idx_mut = (.a213) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 585;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 585 failed %d" i;
  );
  (* Deepening to (.a213.#a29) *)
  let idx : (t213, _) idx_mut = (.a213.#a29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a213) *)
    let shallow : (t213, _) idx_mut = (.a213) in
    let deepened = (.idx_mut(shallow).#a29) in
    mark_test_run 586;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 586 failed %d" i;
    (* from (.a213.#a29) *)
    let shallow : (t213, _) idx_mut = (.a213.#a29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 587;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 587 failed %d" i;
  );
  (* Deepening to (.a213.#b29) *)
  let idx : (t213, _) idx_mut = (.a213.#b29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a213) *)
    let shallow : (t213, _) idx_mut = (.a213) in
    let deepened = (.idx_mut(shallow).#b29) in
    mark_test_run 588;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 588 failed %d" i;
    (* from (.a213.#b29) *)
    let shallow : (t213, _) idx_mut = (.a213.#b29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 589;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 589 failed %d" i;
  );

  (******************************************)
  (*   t214 = { #{ int; int64x2# }; int }   *)
  (******************************************)
  (* Deepening to (.a214) *)
  let idx : (t214, _) idx_mut = (.a214) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a214) *)
    let shallow : (t214, _) idx_mut = (.a214) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 590;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 590 failed %d" i;
  );
  (* Deepening to (.a214.#a29) *)
  let idx : (t214, _) idx_mut = (.a214.#a29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a214) *)
    let shallow : (t214, _) idx_mut = (.a214) in
    let deepened = (.idx_mut(shallow).#a29) in
    mark_test_run 591;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 591 failed %d" i;
    (* from (.a214.#a29) *)
    let shallow : (t214, _) idx_mut = (.a214.#a29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 592;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 592 failed %d" i;
  );
  (* Deepening to (.a214.#b29) *)
  let idx : (t214, _) idx_mut = (.a214.#b29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a214) *)
    let shallow : (t214, _) idx_mut = (.a214) in
    let deepened = (.idx_mut(shallow).#b29) in
    mark_test_run 593;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 593 failed %d" i;
    (* from (.a214.#b29) *)
    let shallow : (t214, _) idx_mut = (.a214.#b29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 594;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 594 failed %d" i;
  );
  (* Deepening to (.b214) *)
  let idx : (t214, _) idx_mut = (.b214) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b214) *)
    let shallow : (t214, _) idx_mut = (.b214) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 595;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 595 failed %d" i;
  );

  (***********************************************)
  (*   t215 = { #{ int; int64x2# }; int64x2# }   *)
  (***********************************************)
  (* Deepening to (.a215) *)
  let idx : (t215, _) idx_mut = (.a215) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a215) *)
    let shallow : (t215, _) idx_mut = (.a215) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 596;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 596 failed %d" i;
  );
  (* Deepening to (.a215.#a29) *)
  let idx : (t215, _) idx_mut = (.a215.#a29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a215) *)
    let shallow : (t215, _) idx_mut = (.a215) in
    let deepened = (.idx_mut(shallow).#a29) in
    mark_test_run 597;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 597 failed %d" i;
    (* from (.a215.#a29) *)
    let shallow : (t215, _) idx_mut = (.a215.#a29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 598;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 598 failed %d" i;
  );
  (* Deepening to (.a215.#b29) *)
  let idx : (t215, _) idx_mut = (.a215.#b29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a215) *)
    let shallow : (t215, _) idx_mut = (.a215) in
    let deepened = (.idx_mut(shallow).#b29) in
    mark_test_run 599;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 599 failed %d" i;
    (* from (.a215.#b29) *)
    let shallow : (t215, _) idx_mut = (.a215.#b29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 600;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 600 failed %d" i;
  );
  (* Deepening to (.b215) *)
  let idx : (t215, _) idx_mut = (.b215) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b215) *)
    let shallow : (t215, _) idx_mut = (.b215) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 601;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 601 failed %d" i;
  );

  (**********************************************************)
  (*   t218 = { #{ int64; int64# }; #{ int64#; float# } }   *)
  (**********************************************************)
  (* Deepening to (.a218) *)
  let idx : (t218, _) idx_mut = (.a218) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a218) *)
    let shallow : (t218, _) idx_mut = (.a218) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 602;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 602 failed %d" i;
  );
  (* Deepening to (.a218.#a216) *)
  let idx : (t218, _) idx_mut = (.a218.#a216) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a218) *)
    let shallow : (t218, _) idx_mut = (.a218) in
    let deepened = (.idx_mut(shallow).#a216) in
    mark_test_run 603;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 603 failed %d" i;
    (* from (.a218.#a216) *)
    let shallow : (t218, _) idx_mut = (.a218.#a216) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 604;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 604 failed %d" i;
  );
  (* Deepening to (.a218.#b216) *)
  let idx : (t218, _) idx_mut = (.a218.#b216) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a218) *)
    let shallow : (t218, _) idx_mut = (.a218) in
    let deepened = (.idx_mut(shallow).#b216) in
    mark_test_run 605;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 605 failed %d" i;
    (* from (.a218.#b216) *)
    let shallow : (t218, _) idx_mut = (.a218.#b216) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 606;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 606 failed %d" i;
  );
  (* Deepening to (.b218) *)
  let idx : (t218, _) idx_mut = (.b218) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b218) *)
    let shallow : (t218, _) idx_mut = (.b218) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 607;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 607 failed %d" i;
  );
  (* Deepening to (.b218.#a217) *)
  let idx : (t218, _) idx_mut = (.b218.#a217) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b218) *)
    let shallow : (t218, _) idx_mut = (.b218) in
    let deepened = (.idx_mut(shallow).#a217) in
    mark_test_run 608;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 608 failed %d" i;
    (* from (.b218.#a217) *)
    let shallow : (t218, _) idx_mut = (.b218.#a217) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 609;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 609 failed %d" i;
  );
  (* Deepening to (.b218.#b217) *)
  let idx : (t218, _) idx_mut = (.b218.#b217) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b218) *)
    let shallow : (t218, _) idx_mut = (.b218) in
    let deepened = (.idx_mut(shallow).#b217) in
    mark_test_run 610;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 610 failed %d" i;
    (* from (.b218.#b217) *)
    let shallow : (t218, _) idx_mut = (.b218.#b217) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 611;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 611 failed %d" i;
  );

  (**********************************************************)
  (*   t221 = { #{ int64; string }; #{ int64#; string } }   *)
  (**********************************************************)
  (* Deepening to (.a221) *)
  let idx : (t221, _) idx_mut = (.a221) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a221) *)
    let shallow : (t221, _) idx_mut = (.a221) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 612;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 612 failed %d" i;
  );
  (* Deepening to (.a221.#a219) *)
  let idx : (t221, _) idx_mut = (.a221.#a219) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a221) *)
    let shallow : (t221, _) idx_mut = (.a221) in
    let deepened = (.idx_mut(shallow).#a219) in
    mark_test_run 613;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 613 failed %d" i;
    (* from (.a221.#a219) *)
    let shallow : (t221, _) idx_mut = (.a221.#a219) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 614;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 614 failed %d" i;
  );
  (* Deepening to (.a221.#b219) *)
  let idx : (t221, _) idx_mut = (.a221.#b219) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a221) *)
    let shallow : (t221, _) idx_mut = (.a221) in
    let deepened = (.idx_mut(shallow).#b219) in
    mark_test_run 615;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 615 failed %d" i;
    (* from (.a221.#b219) *)
    let shallow : (t221, _) idx_mut = (.a221.#b219) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 616;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 616 failed %d" i;
  );
  (* Deepening to (.b221) *)
  let idx : (t221, _) idx_mut = (.b221) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b221) *)
    let shallow : (t221, _) idx_mut = (.b221) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 617;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 617 failed %d" i;
  );
  (* Deepening to (.b221.#a220) *)
  let idx : (t221, _) idx_mut = (.b221.#a220) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b221) *)
    let shallow : (t221, _) idx_mut = (.b221) in
    let deepened = (.idx_mut(shallow).#a220) in
    mark_test_run 618;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 618 failed %d" i;
    (* from (.b221.#a220) *)
    let shallow : (t221, _) idx_mut = (.b221.#a220) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 619;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 619 failed %d" i;
  );
  (* Deepening to (.b221.#b220) *)
  let idx : (t221, _) idx_mut = (.b221.#b220) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b221) *)
    let shallow : (t221, _) idx_mut = (.b221) in
    let deepened = (.idx_mut(shallow).#b220) in
    mark_test_run 620;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 620 failed %d" i;
    (* from (.b221.#b220) *)
    let shallow : (t221, _) idx_mut = (.b221.#b220) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 621;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 621 failed %d" i;
  );

  (********************************************************)
  (*   t224 = { #{ int64#; int64 }; #{ int64; int64 } }   *)
  (********************************************************)
  (* Deepening to (.a224) *)
  let idx : (t224, _) idx_mut = (.a224) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a224) *)
    let shallow : (t224, _) idx_mut = (.a224) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 622;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 622 failed %d" i;
  );
  (* Deepening to (.a224.#a222) *)
  let idx : (t224, _) idx_mut = (.a224.#a222) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a224) *)
    let shallow : (t224, _) idx_mut = (.a224) in
    let deepened = (.idx_mut(shallow).#a222) in
    mark_test_run 623;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 623 failed %d" i;
    (* from (.a224.#a222) *)
    let shallow : (t224, _) idx_mut = (.a224.#a222) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 624;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 624 failed %d" i;
  );
  (* Deepening to (.a224.#b222) *)
  let idx : (t224, _) idx_mut = (.a224.#b222) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a224) *)
    let shallow : (t224, _) idx_mut = (.a224) in
    let deepened = (.idx_mut(shallow).#b222) in
    mark_test_run 625;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 625 failed %d" i;
    (* from (.a224.#b222) *)
    let shallow : (t224, _) idx_mut = (.a224.#b222) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 626;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 626 failed %d" i;
  );
  (* Deepening to (.b224) *)
  let idx : (t224, _) idx_mut = (.b224) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b224) *)
    let shallow : (t224, _) idx_mut = (.b224) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 627;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 627 failed %d" i;
  );
  (* Deepening to (.b224.#a223) *)
  let idx : (t224, _) idx_mut = (.b224.#a223) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b224) *)
    let shallow : (t224, _) idx_mut = (.b224) in
    let deepened = (.idx_mut(shallow).#a223) in
    mark_test_run 628;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 628 failed %d" i;
    (* from (.b224.#a223) *)
    let shallow : (t224, _) idx_mut = (.b224.#a223) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 629;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 629 failed %d" i;
  );
  (* Deepening to (.b224.#b223) *)
  let idx : (t224, _) idx_mut = (.b224.#b223) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b224) *)
    let shallow : (t224, _) idx_mut = (.b224) in
    let deepened = (.idx_mut(shallow).#b223) in
    mark_test_run 630;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 630 failed %d" i;
    (* from (.b224.#b223) *)
    let shallow : (t224, _) idx_mut = (.b224.#b223) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 631;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 631 failed %d" i;
  );

  (***********************************************************)
  (*   t226 = { #{ int64#; int64 }; #{ float32#; float } }   *)
  (***********************************************************)
  (* Deepening to (.a226) *)
  let idx : (t226, _) idx_mut = (.a226) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a226) *)
    let shallow : (t226, _) idx_mut = (.a226) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 632;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 632 failed %d" i;
  );
  (* Deepening to (.a226.#a222) *)
  let idx : (t226, _) idx_mut = (.a226.#a222) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a226) *)
    let shallow : (t226, _) idx_mut = (.a226) in
    let deepened = (.idx_mut(shallow).#a222) in
    mark_test_run 633;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 633 failed %d" i;
    (* from (.a226.#a222) *)
    let shallow : (t226, _) idx_mut = (.a226.#a222) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 634;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 634 failed %d" i;
  );
  (* Deepening to (.a226.#b222) *)
  let idx : (t226, _) idx_mut = (.a226.#b222) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a226) *)
    let shallow : (t226, _) idx_mut = (.a226) in
    let deepened = (.idx_mut(shallow).#b222) in
    mark_test_run 635;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 635 failed %d" i;
    (* from (.a226.#b222) *)
    let shallow : (t226, _) idx_mut = (.a226.#b222) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 636;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 636 failed %d" i;
  );
  (* Deepening to (.b226) *)
  let idx : (t226, _) idx_mut = (.b226) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b226) *)
    let shallow : (t226, _) idx_mut = (.b226) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 637;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 637 failed %d" i;
  );
  (* Deepening to (.b226.#a225) *)
  let idx : (t226, _) idx_mut = (.b226.#a225) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b226) *)
    let shallow : (t226, _) idx_mut = (.b226) in
    let deepened = (.idx_mut(shallow).#a225) in
    mark_test_run 638;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 638 failed %d" i;
    (* from (.b226.#a225) *)
    let shallow : (t226, _) idx_mut = (.b226.#a225) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 639;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 639 failed %d" i;
  );
  (* Deepening to (.b226.#b225) *)
  let idx : (t226, _) idx_mut = (.b226.#b225) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b226) *)
    let shallow : (t226, _) idx_mut = (.b226) in
    let deepened = (.idx_mut(shallow).#b225) in
    mark_test_run 640;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 640 failed %d" i;
    (* from (.b226.#b225) *)
    let shallow : (t226, _) idx_mut = (.b226.#b225) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 641;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 641 failed %d" i;
  );

  (******************************)
  (*   t227 = { #{ int32# } }   *)
  (******************************)
  (* Deepening to (.a227) *)
  let idx : (t227, _) idx_mut = (.a227) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a227) *)
    let shallow : (t227, _) idx_mut = (.a227) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 642;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 642 failed %d" i;
  );
  (* Deepening to (.a227.#a31) *)
  let idx : (t227, _) idx_mut = (.a227.#a31) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a227) *)
    let shallow : (t227, _) idx_mut = (.a227) in
    let deepened = (.idx_mut(shallow).#a31) in
    mark_test_run 643;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 643 failed %d" i;
    (* from (.a227.#a31) *)
    let shallow : (t227, _) idx_mut = (.a227.#a31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 644;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 644 failed %d" i;
  );

  (***********************************)
  (*   t228 = { #{ int32# }; int }   *)
  (***********************************)
  (* Deepening to (.a228) *)
  let idx : (t228, _) idx_mut = (.a228) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a228) *)
    let shallow : (t228, _) idx_mut = (.a228) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 645;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 645 failed %d" i;
  );
  (* Deepening to (.a228.#a31) *)
  let idx : (t228, _) idx_mut = (.a228.#a31) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a228) *)
    let shallow : (t228, _) idx_mut = (.a228) in
    let deepened = (.idx_mut(shallow).#a31) in
    mark_test_run 646;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 646 failed %d" i;
    (* from (.a228.#a31) *)
    let shallow : (t228, _) idx_mut = (.a228.#a31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 647;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 647 failed %d" i;
  );
  (* Deepening to (.b228) *)
  let idx : (t228, _) idx_mut = (.b228) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b228) *)
    let shallow : (t228, _) idx_mut = (.b228) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 648;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 648 failed %d" i;
  );

  (**************************************)
  (*   t229 = { #{ int32# }; int32# }   *)
  (**************************************)
  (* Deepening to (.a229) *)
  let idx : (t229, _) idx_mut = (.a229) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a229) *)
    let shallow : (t229, _) idx_mut = (.a229) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 649;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 649 failed %d" i;
  );
  (* Deepening to (.a229.#a31) *)
  let idx : (t229, _) idx_mut = (.a229.#a31) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a229) *)
    let shallow : (t229, _) idx_mut = (.a229) in
    let deepened = (.idx_mut(shallow).#a31) in
    mark_test_run 650;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 650 failed %d" i;
    (* from (.a229.#a31) *)
    let shallow : (t229, _) idx_mut = (.a229.#a31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 651;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 651 failed %d" i;
  );
  (* Deepening to (.b229) *)
  let idx : (t229, _) idx_mut = (.b229) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b229) *)
    let shallow : (t229, _) idx_mut = (.b229) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 652;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 652 failed %d" i;
  );

  (***********************************)
  (*   t230 = { #{ int32#; int } }   *)
  (***********************************)
  (* Deepening to (.a230) *)
  let idx : (t230, _) idx_mut = (.a230) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a230) *)
    let shallow : (t230, _) idx_mut = (.a230) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 653;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 653 failed %d" i;
  );
  (* Deepening to (.a230.#a33) *)
  let idx : (t230, _) idx_mut = (.a230.#a33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a230) *)
    let shallow : (t230, _) idx_mut = (.a230) in
    let deepened = (.idx_mut(shallow).#a33) in
    mark_test_run 654;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 654 failed %d" i;
    (* from (.a230.#a33) *)
    let shallow : (t230, _) idx_mut = (.a230.#a33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 655;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 655 failed %d" i;
  );
  (* Deepening to (.a230.#b33) *)
  let idx : (t230, _) idx_mut = (.a230.#b33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a230) *)
    let shallow : (t230, _) idx_mut = (.a230) in
    let deepened = (.idx_mut(shallow).#b33) in
    mark_test_run 656;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 656 failed %d" i;
    (* from (.a230.#b33) *)
    let shallow : (t230, _) idx_mut = (.a230.#b33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 657;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 657 failed %d" i;
  );

  (****************************************)
  (*   t231 = { #{ int32#; int }; int }   *)
  (****************************************)
  (* Deepening to (.a231) *)
  let idx : (t231, _) idx_mut = (.a231) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a231) *)
    let shallow : (t231, _) idx_mut = (.a231) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 658;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 658 failed %d" i;
  );
  (* Deepening to (.a231.#a33) *)
  let idx : (t231, _) idx_mut = (.a231.#a33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a231) *)
    let shallow : (t231, _) idx_mut = (.a231) in
    let deepened = (.idx_mut(shallow).#a33) in
    mark_test_run 659;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 659 failed %d" i;
    (* from (.a231.#a33) *)
    let shallow : (t231, _) idx_mut = (.a231.#a33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 660;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 660 failed %d" i;
  );
  (* Deepening to (.a231.#b33) *)
  let idx : (t231, _) idx_mut = (.a231.#b33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a231) *)
    let shallow : (t231, _) idx_mut = (.a231) in
    let deepened = (.idx_mut(shallow).#b33) in
    mark_test_run 661;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 661 failed %d" i;
    (* from (.a231.#b33) *)
    let shallow : (t231, _) idx_mut = (.a231.#b33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 662;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 662 failed %d" i;
  );
  (* Deepening to (.b231) *)
  let idx : (t231, _) idx_mut = (.b231) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b231) *)
    let shallow : (t231, _) idx_mut = (.b231) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 663;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 663 failed %d" i;
  );

  (*******************************************)
  (*   t232 = { #{ int32#; int }; int32# }   *)
  (*******************************************)
  (* Deepening to (.a232) *)
  let idx : (t232, _) idx_mut = (.a232) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a232) *)
    let shallow : (t232, _) idx_mut = (.a232) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 664;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 664 failed %d" i;
  );
  (* Deepening to (.a232.#a33) *)
  let idx : (t232, _) idx_mut = (.a232.#a33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a232) *)
    let shallow : (t232, _) idx_mut = (.a232) in
    let deepened = (.idx_mut(shallow).#a33) in
    mark_test_run 665;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 665 failed %d" i;
    (* from (.a232.#a33) *)
    let shallow : (t232, _) idx_mut = (.a232.#a33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 666;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 666 failed %d" i;
  );
  (* Deepening to (.a232.#b33) *)
  let idx : (t232, _) idx_mut = (.a232.#b33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a232) *)
    let shallow : (t232, _) idx_mut = (.a232) in
    let deepened = (.idx_mut(shallow).#b33) in
    mark_test_run 667;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 667 failed %d" i;
    (* from (.a232.#b33) *)
    let shallow : (t232, _) idx_mut = (.a232.#b33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 668;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 668 failed %d" i;
  );
  (* Deepening to (.b232) *)
  let idx : (t232, _) idx_mut = (.b232) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b232) *)
    let shallow : (t232, _) idx_mut = (.b232) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 669;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 669 failed %d" i;
  );

  (**************************************)
  (*   t233 = { #{ int32#; int32# } }   *)
  (**************************************)
  (* Deepening to (.a233) *)
  let idx : (t233, _) idx_mut = (.a233) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a233) *)
    let shallow : (t233, _) idx_mut = (.a233) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 670;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 670 failed %d" i;
  );
  (* Deepening to (.a233.#a35) *)
  let idx : (t233, _) idx_mut = (.a233.#a35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a233) *)
    let shallow : (t233, _) idx_mut = (.a233) in
    let deepened = (.idx_mut(shallow).#a35) in
    mark_test_run 671;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 671 failed %d" i;
    (* from (.a233.#a35) *)
    let shallow : (t233, _) idx_mut = (.a233.#a35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 672;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 672 failed %d" i;
  );
  (* Deepening to (.a233.#b35) *)
  let idx : (t233, _) idx_mut = (.a233.#b35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a233) *)
    let shallow : (t233, _) idx_mut = (.a233) in
    let deepened = (.idx_mut(shallow).#b35) in
    mark_test_run 673;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 673 failed %d" i;
    (* from (.a233.#b35) *)
    let shallow : (t233, _) idx_mut = (.a233.#b35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 674;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 674 failed %d" i;
  );

  (*******************************************)
  (*   t234 = { #{ int32#; int32# }; int }   *)
  (*******************************************)
  (* Deepening to (.a234) *)
  let idx : (t234, _) idx_mut = (.a234) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a234) *)
    let shallow : (t234, _) idx_mut = (.a234) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 675;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 675 failed %d" i;
  );
  (* Deepening to (.a234.#a35) *)
  let idx : (t234, _) idx_mut = (.a234.#a35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a234) *)
    let shallow : (t234, _) idx_mut = (.a234) in
    let deepened = (.idx_mut(shallow).#a35) in
    mark_test_run 676;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 676 failed %d" i;
    (* from (.a234.#a35) *)
    let shallow : (t234, _) idx_mut = (.a234.#a35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 677;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 677 failed %d" i;
  );
  (* Deepening to (.a234.#b35) *)
  let idx : (t234, _) idx_mut = (.a234.#b35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a234) *)
    let shallow : (t234, _) idx_mut = (.a234) in
    let deepened = (.idx_mut(shallow).#b35) in
    mark_test_run 678;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 678 failed %d" i;
    (* from (.a234.#b35) *)
    let shallow : (t234, _) idx_mut = (.a234.#b35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 679;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 679 failed %d" i;
  );
  (* Deepening to (.b234) *)
  let idx : (t234, _) idx_mut = (.b234) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b234) *)
    let shallow : (t234, _) idx_mut = (.b234) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 680;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 680 failed %d" i;
  );

  (**********************************************)
  (*   t235 = { #{ int32#; int32# }; int32# }   *)
  (**********************************************)
  (* Deepening to (.a235) *)
  let idx : (t235, _) idx_mut = (.a235) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a235) *)
    let shallow : (t235, _) idx_mut = (.a235) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 681;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 681 failed %d" i;
  );
  (* Deepening to (.a235.#a35) *)
  let idx : (t235, _) idx_mut = (.a235.#a35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a235) *)
    let shallow : (t235, _) idx_mut = (.a235) in
    let deepened = (.idx_mut(shallow).#a35) in
    mark_test_run 682;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 682 failed %d" i;
    (* from (.a235.#a35) *)
    let shallow : (t235, _) idx_mut = (.a235.#a35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 683;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 683 failed %d" i;
  );
  (* Deepening to (.a235.#b35) *)
  let idx : (t235, _) idx_mut = (.a235.#b35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a235) *)
    let shallow : (t235, _) idx_mut = (.a235) in
    let deepened = (.idx_mut(shallow).#b35) in
    mark_test_run 684;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 684 failed %d" i;
    (* from (.a235.#b35) *)
    let shallow : (t235, _) idx_mut = (.a235.#b35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 685;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 685 failed %d" i;
  );
  (* Deepening to (.b235) *)
  let idx : (t235, _) idx_mut = (.b235) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b235) *)
    let shallow : (t235, _) idx_mut = (.b235) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 686;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 686 failed %d" i;
  );

  (**************************************)
  (*   t236 = { #{ unit_u }; string }   *)
  (**************************************)
  (* Deepening to (.a236) *)
  let idx : (t236, _) idx_mut = (.a236) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a236) *)
    let shallow : (t236, _) idx_mut = (.a236) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.a236.#a165) *)
  let idx : (t236, _) idx_mut = (.a236.#a165) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a236) *)
    let shallow : (t236, _) idx_mut = (.a236) in
    let deepened = (.idx_mut(shallow).#a165) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.a236.#a165) *)
    let shallow : (t236, _) idx_mut = (.a236.#a165) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b236) *)
  let idx : (t236, _) idx_mut = (.b236) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b236) *)
    let shallow : (t236, _) idx_mut = (.b236) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 687;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 687 failed %d" i;
  );

  (**********************************************)
  (*   t237 = { #{ unit_u; unit_u }; string }   *)
  (**********************************************)
  (* Deepening to (.a237) *)
  let idx : (t237, _) idx_mut = (.a237) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a237) *)
    let shallow : (t237, _) idx_mut = (.a237) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 688;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 688 failed %d" i;
  );
  (* Deepening to (.a237.#a167) *)
  let idx : (t237, _) idx_mut = (.a237.#a167) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a237) *)
    let shallow : (t237, _) idx_mut = (.a237) in
    let deepened = (.idx_mut(shallow).#a167) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.a237.#a167) *)
    let shallow : (t237, _) idx_mut = (.a237.#a167) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.a237.#b167) *)
  let idx : (t237, _) idx_mut = (.a237.#b167) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a237) *)
    let shallow : (t237, _) idx_mut = (.a237) in
    let deepened = (.idx_mut(shallow).#b167) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.a237.#b167) *)
    let shallow : (t237, _) idx_mut = (.a237.#b167) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b237) *)
  let idx : (t237, _) idx_mut = (.b237) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b237) *)
    let shallow : (t237, _) idx_mut = (.b237) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 689;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 689 failed %d" i;
  );

  (**************************************)
  (*   t238 = { #{ unit_u; string } }   *)
  (**************************************)
  (* Deepening to (.a238) *)
  let idx : (t238, _) idx_mut = (.a238) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a238) *)
    let shallow : (t238, _) idx_mut = (.a238) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 690;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 690 failed %d" i;
  );
  (* Deepening to (.a238.#a106) *)
  let idx : (t238, _) idx_mut = (.a238.#a106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a238) *)
    let shallow : (t238, _) idx_mut = (.a238) in
    let deepened = (.idx_mut(shallow).#a106) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.a238.#a106) *)
    let shallow : (t238, _) idx_mut = (.a238.#a106) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.a238.#b106) *)
  let idx : (t238, _) idx_mut = (.a238.#b106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a238) *)
    let shallow : (t238, _) idx_mut = (.a238) in
    let deepened = (.idx_mut(shallow).#b106) in
    mark_test_run 691;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 691 failed %d" i;
    (* from (.a238.#b106) *)
    let shallow : (t238, _) idx_mut = (.a238.#b106) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 692;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 692 failed %d" i;
  );

  (**********************************************)
  (*   t239 = { #{ unit_u; string }; unit_u }   *)
  (**********************************************)
  (* Deepening to (.a239) *)
  let idx : (t239, _) idx_mut = (.a239) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a239) *)
    let shallow : (t239, _) idx_mut = (.a239) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 693;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 693 failed %d" i;
  );
  (* Deepening to (.a239.#a106) *)
  let idx : (t239, _) idx_mut = (.a239.#a106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a239) *)
    let shallow : (t239, _) idx_mut = (.a239) in
    let deepened = (.idx_mut(shallow).#a106) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.a239.#a106) *)
    let shallow : (t239, _) idx_mut = (.a239.#a106) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.a239.#b106) *)
  let idx : (t239, _) idx_mut = (.a239.#b106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a239) *)
    let shallow : (t239, _) idx_mut = (.a239) in
    let deepened = (.idx_mut(shallow).#b106) in
    mark_test_run 694;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 694 failed %d" i;
    (* from (.a239.#b106) *)
    let shallow : (t239, _) idx_mut = (.a239.#b106) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 695;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 695 failed %d" i;
  );
  (* Deepening to (.b239) *)
  let idx : (t239, _) idx_mut = (.b239) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b239) *)
    let shallow : (t239, _) idx_mut = (.b239) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (**********************************************)
  (*   t240 = { #{ unit_u; string }; string }   *)
  (**********************************************)
  (* Deepening to (.a240) *)
  let idx : (t240, _) idx_mut = (.a240) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a240) *)
    let shallow : (t240, _) idx_mut = (.a240) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 696;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 696 failed %d" i;
  );
  (* Deepening to (.a240.#a106) *)
  let idx : (t240, _) idx_mut = (.a240.#a106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a240) *)
    let shallow : (t240, _) idx_mut = (.a240) in
    let deepened = (.idx_mut(shallow).#a106) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.a240.#a106) *)
    let shallow : (t240, _) idx_mut = (.a240.#a106) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.a240.#b106) *)
  let idx : (t240, _) idx_mut = (.a240.#b106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a240) *)
    let shallow : (t240, _) idx_mut = (.a240) in
    let deepened = (.idx_mut(shallow).#b106) in
    mark_test_run 697;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 697 failed %d" i;
    (* from (.a240.#b106) *)
    let shallow : (t240, _) idx_mut = (.a240.#b106) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 698;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 698 failed %d" i;
  );
  (* Deepening to (.b240) *)
  let idx : (t240, _) idx_mut = (.b240) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b240) *)
    let shallow : (t240, _) idx_mut = (.b240) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 699;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 699 failed %d" i;
  );

  (*****************************)
  (*   t241 = { #{ float } }   *)
  (*****************************)
  (* Deepening to (.a241) *)
  let idx : (t241, _) idx_mut = (.a241) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a241) *)
    let shallow : (t241, _) idx_mut = (.a241) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 700;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 700 failed %d" i;
  );
  (* Deepening to (.a241.#a37) *)
  let idx : (t241, _) idx_mut = (.a241.#a37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.a241) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.a241.#a37) *)
    let shallow : (t241, _) idx_mut = (.a241.#a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 701;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 701 failed %d" i;
  );

  (**********************************)
  (*   t242 = { #{ float }; int }   *)
  (**********************************)
  (* Deepening to (.a242) *)
  let idx : (t242, _) idx_mut = (.a242) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a242) *)
    let shallow : (t242, _) idx_mut = (.a242) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 702;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 702 failed %d" i;
  );
  (* Deepening to (.a242.#a37) *)
  let idx : (t242, _) idx_mut = (.a242.#a37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a242) *)
    let shallow : (t242, _) idx_mut = (.a242) in
    let deepened = (.idx_mut(shallow).#a37) in
    mark_test_run 703;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 703 failed %d" i;
    (* from (.a242.#a37) *)
    let shallow : (t242, _) idx_mut = (.a242.#a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 704;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 704 failed %d" i;
  );
  (* Deepening to (.b242) *)
  let idx : (t242, _) idx_mut = (.b242) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b242) *)
    let shallow : (t242, _) idx_mut = (.b242) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 705;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 705 failed %d" i;
  );

  (************************************)
  (*   t243 = { #{ float }; float }   *)
  (************************************)
  (* Deepening to (.a243) *)
  let idx : (t243, _) idx_mut = (.a243) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a243) *)
    let shallow : (t243, _) idx_mut = (.a243) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 706;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 706 failed %d" i;
  );
  (* Deepening to (.a243.#a37) *)
  let idx : (t243, _) idx_mut = (.a243.#a37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.a243) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.a243.#a37) *)
    let shallow : (t243, _) idx_mut = (.a243.#a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 707;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 707 failed %d" i;
  );
  (* Deepening to (.b243) *)
  let idx : (t243, _) idx_mut = (.b243) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b243) *)
    let shallow : (t243, _) idx_mut = (.b243) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 708;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 708 failed %d" i;
  );

  (*************************************)
  (*   t244 = { #{ float }; float# }   *)
  (*************************************)
  (* Deepening to (.a244) *)
  let idx : (t244, _) idx_mut = (.a244) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a244) *)
    let shallow : (t244, _) idx_mut = (.a244) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 709;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 709 failed %d" i;
  );
  (* Deepening to (.a244.#a37) *)
  let idx : (t244, _) idx_mut = (.a244.#a37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.a244) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.a244.#a37) *)
    let shallow : (t244, _) idx_mut = (.a244.#a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 710;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 710 failed %d" i;
  );
  (* Deepening to (.b244) *)
  let idx : (t244, _) idx_mut = (.b244) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b244) *)
    let shallow : (t244, _) idx_mut = (.b244) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 711;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 711 failed %d" i;
  );

  (**********************************)
  (*   t245 = { #{ float; int } }   *)
  (**********************************)
  (* Deepening to (.a245) *)
  let idx : (t245, _) idx_mut = (.a245) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a245) *)
    let shallow : (t245, _) idx_mut = (.a245) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 712;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 712 failed %d" i;
  );
  (* Deepening to (.a245.#a39) *)
  let idx : (t245, _) idx_mut = (.a245.#a39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a245) *)
    let shallow : (t245, _) idx_mut = (.a245) in
    let deepened = (.idx_mut(shallow).#a39) in
    mark_test_run 713;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 713 failed %d" i;
    (* from (.a245.#a39) *)
    let shallow : (t245, _) idx_mut = (.a245.#a39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 714;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 714 failed %d" i;
  );
  (* Deepening to (.a245.#b39) *)
  let idx : (t245, _) idx_mut = (.a245.#b39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a245) *)
    let shallow : (t245, _) idx_mut = (.a245) in
    let deepened = (.idx_mut(shallow).#b39) in
    mark_test_run 715;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 715 failed %d" i;
    (* from (.a245.#b39) *)
    let shallow : (t245, _) idx_mut = (.a245.#b39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 716;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 716 failed %d" i;
  );

  (***************************************)
  (*   t246 = { #{ float; int }; int }   *)
  (***************************************)
  (* Deepening to (.a246) *)
  let idx : (t246, _) idx_mut = (.a246) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a246) *)
    let shallow : (t246, _) idx_mut = (.a246) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 717;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 717 failed %d" i;
  );
  (* Deepening to (.a246.#a39) *)
  let idx : (t246, _) idx_mut = (.a246.#a39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a246) *)
    let shallow : (t246, _) idx_mut = (.a246) in
    let deepened = (.idx_mut(shallow).#a39) in
    mark_test_run 718;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 718 failed %d" i;
    (* from (.a246.#a39) *)
    let shallow : (t246, _) idx_mut = (.a246.#a39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 719;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 719 failed %d" i;
  );
  (* Deepening to (.a246.#b39) *)
  let idx : (t246, _) idx_mut = (.a246.#b39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a246) *)
    let shallow : (t246, _) idx_mut = (.a246) in
    let deepened = (.idx_mut(shallow).#b39) in
    mark_test_run 720;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 720 failed %d" i;
    (* from (.a246.#b39) *)
    let shallow : (t246, _) idx_mut = (.a246.#b39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 721;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 721 failed %d" i;
  );
  (* Deepening to (.b246) *)
  let idx : (t246, _) idx_mut = (.b246) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b246) *)
    let shallow : (t246, _) idx_mut = (.b246) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 722;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 722 failed %d" i;
  );

  (*****************************************)
  (*   t247 = { #{ float; int }; float }   *)
  (*****************************************)
  (* Deepening to (.a247) *)
  let idx : (t247, _) idx_mut = (.a247) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a247) *)
    let shallow : (t247, _) idx_mut = (.a247) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 723;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 723 failed %d" i;
  );
  (* Deepening to (.a247.#a39) *)
  let idx : (t247, _) idx_mut = (.a247.#a39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a247) *)
    let shallow : (t247, _) idx_mut = (.a247) in
    let deepened = (.idx_mut(shallow).#a39) in
    mark_test_run 724;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 724 failed %d" i;
    (* from (.a247.#a39) *)
    let shallow : (t247, _) idx_mut = (.a247.#a39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 725;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 725 failed %d" i;
  );
  (* Deepening to (.a247.#b39) *)
  let idx : (t247, _) idx_mut = (.a247.#b39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a247) *)
    let shallow : (t247, _) idx_mut = (.a247) in
    let deepened = (.idx_mut(shallow).#b39) in
    mark_test_run 726;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 726 failed %d" i;
    (* from (.a247.#b39) *)
    let shallow : (t247, _) idx_mut = (.a247.#b39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 727;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 727 failed %d" i;
  );
  (* Deepening to (.b247) *)
  let idx : (t247, _) idx_mut = (.b247) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b247) *)
    let shallow : (t247, _) idx_mut = (.b247) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 728;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 728 failed %d" i;
  );

  (************************************)
  (*   t248 = { #{ float; float } }   *)
  (************************************)
  (* Deepening to (.a248) *)
  let idx : (t248, _) idx_mut = (.a248) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a248) *)
    let shallow : (t248, _) idx_mut = (.a248) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 729;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 729 failed %d" i;
  );
  (* Deepening to (.a248.#a41) *)
  let idx : (t248, _) idx_mut = (.a248.#a41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a248) *)
    let shallow : (t248, _) idx_mut = (.a248) in
    let deepened = (.idx_mut(shallow).#a41) in
    mark_test_run 730;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 730 failed %d" i;
    (* from (.a248.#a41) *)
    let shallow : (t248, _) idx_mut = (.a248.#a41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 731;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 731 failed %d" i;
  );
  (* Deepening to (.a248.#b41) *)
  let idx : (t248, _) idx_mut = (.a248.#b41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a248) *)
    let shallow : (t248, _) idx_mut = (.a248) in
    let deepened = (.idx_mut(shallow).#b41) in
    mark_test_run 732;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 732 failed %d" i;
    (* from (.a248.#b41) *)
    let shallow : (t248, _) idx_mut = (.a248.#b41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 733;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 733 failed %d" i;
  );

  (*****************************************)
  (*   t249 = { #{ float; float }; int }   *)
  (*****************************************)
  (* Deepening to (.a249) *)
  let idx : (t249, _) idx_mut = (.a249) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a249) *)
    let shallow : (t249, _) idx_mut = (.a249) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 734;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 734 failed %d" i;
  );
  (* Deepening to (.a249.#a41) *)
  let idx : (t249, _) idx_mut = (.a249.#a41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a249) *)
    let shallow : (t249, _) idx_mut = (.a249) in
    let deepened = (.idx_mut(shallow).#a41) in
    mark_test_run 735;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 735 failed %d" i;
    (* from (.a249.#a41) *)
    let shallow : (t249, _) idx_mut = (.a249.#a41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 736;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 736 failed %d" i;
  );
  (* Deepening to (.a249.#b41) *)
  let idx : (t249, _) idx_mut = (.a249.#b41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a249) *)
    let shallow : (t249, _) idx_mut = (.a249) in
    let deepened = (.idx_mut(shallow).#b41) in
    mark_test_run 737;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 737 failed %d" i;
    (* from (.a249.#b41) *)
    let shallow : (t249, _) idx_mut = (.a249.#b41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 738;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 738 failed %d" i;
  );
  (* Deepening to (.b249) *)
  let idx : (t249, _) idx_mut = (.b249) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b249) *)
    let shallow : (t249, _) idx_mut = (.b249) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 739;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 739 failed %d" i;
  );

  (*******************************************)
  (*   t250 = { #{ float; float }; float }   *)
  (*******************************************)
  (* Deepening to (.a250) *)
  let idx : (t250, _) idx_mut = (.a250) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a250) *)
    let shallow : (t250, _) idx_mut = (.a250) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 740;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 740 failed %d" i;
  );
  (* Deepening to (.a250.#a41) *)
  let idx : (t250, _) idx_mut = (.a250.#a41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a250) *)
    let shallow : (t250, _) idx_mut = (.a250) in
    let deepened = (.idx_mut(shallow).#a41) in
    mark_test_run 741;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 741 failed %d" i;
    (* from (.a250.#a41) *)
    let shallow : (t250, _) idx_mut = (.a250.#a41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 742;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 742 failed %d" i;
  );
  (* Deepening to (.a250.#b41) *)
  let idx : (t250, _) idx_mut = (.a250.#b41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a250) *)
    let shallow : (t250, _) idx_mut = (.a250) in
    let deepened = (.idx_mut(shallow).#b41) in
    mark_test_run 743;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 743 failed %d" i;
    (* from (.a250.#b41) *)
    let shallow : (t250, _) idx_mut = (.a250.#b41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 744;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 744 failed %d" i;
  );
  (* Deepening to (.b250) *)
  let idx : (t250, _) idx_mut = (.b250) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b250) *)
    let shallow : (t250, _) idx_mut = (.b250) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 745;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 745 failed %d" i;
  );

  (********************************************)
  (*   t251 = { #{ float; float }; float# }   *)
  (********************************************)
  (* Deepening to (.a251) *)
  let idx : (t251, _) idx_mut = (.a251) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a251) *)
    let shallow : (t251, _) idx_mut = (.a251) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 746;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 746 failed %d" i;
  );
  (* Deepening to (.a251.#a41) *)
  let idx : (t251, _) idx_mut = (.a251.#a41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a251) *)
    let shallow : (t251, _) idx_mut = (.a251) in
    let deepened = (.idx_mut(shallow).#a41) in
    mark_test_run 747;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 747 failed %d" i;
    (* from (.a251.#a41) *)
    let shallow : (t251, _) idx_mut = (.a251.#a41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 748;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 748 failed %d" i;
  );
  (* Deepening to (.a251.#b41) *)
  let idx : (t251, _) idx_mut = (.a251.#b41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a251) *)
    let shallow : (t251, _) idx_mut = (.a251) in
    let deepened = (.idx_mut(shallow).#b41) in
    mark_test_run 749;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 749 failed %d" i;
    (* from (.a251.#b41) *)
    let shallow : (t251, _) idx_mut = (.a251.#b41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 750;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 750 failed %d" i;
  );
  (* Deepening to (.b251) *)
  let idx : (t251, _) idx_mut = (.b251) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b251) *)
    let shallow : (t251, _) idx_mut = (.b251) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 751;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 751 failed %d" i;
  );

  (*************************************)
  (*   t252 = { #{ float; float# } }   *)
  (*************************************)
  (* Deepening to (.a252) *)
  let idx : (t252, _) idx_mut = (.a252) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a252) *)
    let shallow : (t252, _) idx_mut = (.a252) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 752;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 752 failed %d" i;
  );
  (* Deepening to (.a252.#a137) *)
  let idx : (t252, _) idx_mut = (.a252.#a137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a252) *)
    let shallow : (t252, _) idx_mut = (.a252) in
    let deepened = (.idx_mut(shallow).#a137) in
    mark_test_run 753;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 753 failed %d" i;
    (* from (.a252.#a137) *)
    let shallow : (t252, _) idx_mut = (.a252.#a137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 754;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 754 failed %d" i;
  );
  (* Deepening to (.a252.#b137) *)
  let idx : (t252, _) idx_mut = (.a252.#b137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a252) *)
    let shallow : (t252, _) idx_mut = (.a252) in
    let deepened = (.idx_mut(shallow).#b137) in
    mark_test_run 755;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 755 failed %d" i;
    (* from (.a252.#b137) *)
    let shallow : (t252, _) idx_mut = (.a252.#b137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 756;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 756 failed %d" i;
  );

  (********************************************)
  (*   t253 = { #{ float; float# }; float }   *)
  (********************************************)
  (* Deepening to (.a253) *)
  let idx : (t253, _) idx_mut = (.a253) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a253) *)
    let shallow : (t253, _) idx_mut = (.a253) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 757;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 757 failed %d" i;
  );
  (* Deepening to (.a253.#a137) *)
  let idx : (t253, _) idx_mut = (.a253.#a137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a253) *)
    let shallow : (t253, _) idx_mut = (.a253) in
    let deepened = (.idx_mut(shallow).#a137) in
    mark_test_run 758;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 758 failed %d" i;
    (* from (.a253.#a137) *)
    let shallow : (t253, _) idx_mut = (.a253.#a137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 759;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 759 failed %d" i;
  );
  (* Deepening to (.a253.#b137) *)
  let idx : (t253, _) idx_mut = (.a253.#b137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a253) *)
    let shallow : (t253, _) idx_mut = (.a253) in
    let deepened = (.idx_mut(shallow).#b137) in
    mark_test_run 760;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 760 failed %d" i;
    (* from (.a253.#b137) *)
    let shallow : (t253, _) idx_mut = (.a253.#b137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 761;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 761 failed %d" i;
  );
  (* Deepening to (.b253) *)
  let idx : (t253, _) idx_mut = (.b253) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b253) *)
    let shallow : (t253, _) idx_mut = (.b253) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 762;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 762 failed %d" i;
  );

  (*********************************************)
  (*   t254 = { #{ float; float# }; float# }   *)
  (*********************************************)
  (* Deepening to (.a254) *)
  let idx : (t254, _) idx_mut = (.a254) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a254) *)
    let shallow : (t254, _) idx_mut = (.a254) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 763;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 763 failed %d" i;
  );
  (* Deepening to (.a254.#a137) *)
  let idx : (t254, _) idx_mut = (.a254.#a137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a254) *)
    let shallow : (t254, _) idx_mut = (.a254) in
    let deepened = (.idx_mut(shallow).#a137) in
    mark_test_run 764;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 764 failed %d" i;
    (* from (.a254.#a137) *)
    let shallow : (t254, _) idx_mut = (.a254.#a137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 765;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 765 failed %d" i;
  );
  (* Deepening to (.a254.#b137) *)
  let idx : (t254, _) idx_mut = (.a254.#b137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a254) *)
    let shallow : (t254, _) idx_mut = (.a254) in
    let deepened = (.idx_mut(shallow).#b137) in
    mark_test_run 766;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 766 failed %d" i;
    (* from (.a254.#b137) *)
    let shallow : (t254, _) idx_mut = (.a254.#b137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 767;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 767 failed %d" i;
  );
  (* Deepening to (.b254) *)
  let idx : (t254, _) idx_mut = (.b254) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b254) *)
    let shallow : (t254, _) idx_mut = (.b254) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 768;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 768 failed %d" i;
  );

  (******************************)
  (*   t255 = { #{ float# } }   *)
  (******************************)
  (* Deepening to (.a255) *)
  let idx : (t255, _) idx_mut = (.a255) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a255) *)
    let shallow : (t255, _) idx_mut = (.a255) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 769;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 769 failed %d" i;
  );
  (* Deepening to (.a255.#a139) *)
  let idx : (t255, _) idx_mut = (.a255.#a139) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a255) *)
    let shallow : (t255, _) idx_mut = (.a255) in
    let deepened = (.idx_mut(shallow).#a139) in
    mark_test_run 770;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 770 failed %d" i;
    (* from (.a255.#a139) *)
    let shallow : (t255, _) idx_mut = (.a255.#a139) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 771;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 771 failed %d" i;
  );

  (*************************************)
  (*   t256 = { #{ float# }; float }   *)
  (*************************************)
  (* Deepening to (.a256) *)
  let idx : (t256, _) idx_mut = (.a256) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a256) *)
    let shallow : (t256, _) idx_mut = (.a256) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 772;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 772 failed %d" i;
  );
  (* Deepening to (.a256.#a139) *)
  let idx : (t256, _) idx_mut = (.a256.#a139) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a256) *)
    let shallow : (t256, _) idx_mut = (.a256) in
    let deepened = (.idx_mut(shallow).#a139) in
    mark_test_run 773;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 773 failed %d" i;
    (* from (.a256.#a139) *)
    let shallow : (t256, _) idx_mut = (.a256.#a139) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 774;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 774 failed %d" i;
  );
  (* Deepening to (.b256) *)
  let idx : (t256, _) idx_mut = (.b256) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b256) *)
    let shallow : (t256, _) idx_mut = (.b256) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 775;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 775 failed %d" i;
  );

  (**************************************)
  (*   t257 = { #{ float# }; float# }   *)
  (**************************************)
  (* Deepening to (.a257) *)
  let idx : (t257, _) idx_mut = (.a257) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a257) *)
    let shallow : (t257, _) idx_mut = (.a257) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 776;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 776 failed %d" i;
  );
  (* Deepening to (.a257.#a139) *)
  let idx : (t257, _) idx_mut = (.a257.#a139) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a257) *)
    let shallow : (t257, _) idx_mut = (.a257) in
    let deepened = (.idx_mut(shallow).#a139) in
    mark_test_run 777;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 777 failed %d" i;
    (* from (.a257.#a139) *)
    let shallow : (t257, _) idx_mut = (.a257.#a139) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 778;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 778 failed %d" i;
  );
  (* Deepening to (.b257) *)
  let idx : (t257, _) idx_mut = (.b257) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b257) *)
    let shallow : (t257, _) idx_mut = (.b257) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 779;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 779 failed %d" i;
  );

  (*************************************)
  (*   t258 = { #{ float#; float } }   *)
  (*************************************)
  (* Deepening to (.a258) *)
  let idx : (t258, _) idx_mut = (.a258) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a258) *)
    let shallow : (t258, _) idx_mut = (.a258) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 780;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 780 failed %d" i;
  );
  (* Deepening to (.a258.#a141) *)
  let idx : (t258, _) idx_mut = (.a258.#a141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a258) *)
    let shallow : (t258, _) idx_mut = (.a258) in
    let deepened = (.idx_mut(shallow).#a141) in
    mark_test_run 781;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 781 failed %d" i;
    (* from (.a258.#a141) *)
    let shallow : (t258, _) idx_mut = (.a258.#a141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 782;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 782 failed %d" i;
  );
  (* Deepening to (.a258.#b141) *)
  let idx : (t258, _) idx_mut = (.a258.#b141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a258) *)
    let shallow : (t258, _) idx_mut = (.a258) in
    let deepened = (.idx_mut(shallow).#b141) in
    mark_test_run 783;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 783 failed %d" i;
    (* from (.a258.#b141) *)
    let shallow : (t258, _) idx_mut = (.a258.#b141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 784;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 784 failed %d" i;
  );

  (********************************************)
  (*   t259 = { #{ float#; float }; float }   *)
  (********************************************)
  (* Deepening to (.a259) *)
  let idx : (t259, _) idx_mut = (.a259) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a259) *)
    let shallow : (t259, _) idx_mut = (.a259) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 785;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 785 failed %d" i;
  );
  (* Deepening to (.a259.#a141) *)
  let idx : (t259, _) idx_mut = (.a259.#a141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a259) *)
    let shallow : (t259, _) idx_mut = (.a259) in
    let deepened = (.idx_mut(shallow).#a141) in
    mark_test_run 786;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 786 failed %d" i;
    (* from (.a259.#a141) *)
    let shallow : (t259, _) idx_mut = (.a259.#a141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 787;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 787 failed %d" i;
  );
  (* Deepening to (.a259.#b141) *)
  let idx : (t259, _) idx_mut = (.a259.#b141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a259) *)
    let shallow : (t259, _) idx_mut = (.a259) in
    let deepened = (.idx_mut(shallow).#b141) in
    mark_test_run 788;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 788 failed %d" i;
    (* from (.a259.#b141) *)
    let shallow : (t259, _) idx_mut = (.a259.#b141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 789;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 789 failed %d" i;
  );
  (* Deepening to (.b259) *)
  let idx : (t259, _) idx_mut = (.b259) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b259) *)
    let shallow : (t259, _) idx_mut = (.b259) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 790;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 790 failed %d" i;
  );

  (*********************************************)
  (*   t260 = { #{ float#; float }; float# }   *)
  (*********************************************)
  (* Deepening to (.a260) *)
  let idx : (t260, _) idx_mut = (.a260) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a260) *)
    let shallow : (t260, _) idx_mut = (.a260) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 791;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 791 failed %d" i;
  );
  (* Deepening to (.a260.#a141) *)
  let idx : (t260, _) idx_mut = (.a260.#a141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a260) *)
    let shallow : (t260, _) idx_mut = (.a260) in
    let deepened = (.idx_mut(shallow).#a141) in
    mark_test_run 792;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 792 failed %d" i;
    (* from (.a260.#a141) *)
    let shallow : (t260, _) idx_mut = (.a260.#a141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 793;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 793 failed %d" i;
  );
  (* Deepening to (.a260.#b141) *)
  let idx : (t260, _) idx_mut = (.a260.#b141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a260) *)
    let shallow : (t260, _) idx_mut = (.a260) in
    let deepened = (.idx_mut(shallow).#b141) in
    mark_test_run 794;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 794 failed %d" i;
    (* from (.a260.#b141) *)
    let shallow : (t260, _) idx_mut = (.a260.#b141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 795;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 795 failed %d" i;
  );
  (* Deepening to (.b260) *)
  let idx : (t260, _) idx_mut = (.b260) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b260) *)
    let shallow : (t260, _) idx_mut = (.b260) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 796;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 796 failed %d" i;
  );

  (**************************************)
  (*   t261 = { #{ float#; float# } }   *)
  (**************************************)
  (* Deepening to (.a261) *)
  let idx : (t261, _) idx_mut = (.a261) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a261) *)
    let shallow : (t261, _) idx_mut = (.a261) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 797;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 797 failed %d" i;
  );
  (* Deepening to (.a261.#a143) *)
  let idx : (t261, _) idx_mut = (.a261.#a143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a261) *)
    let shallow : (t261, _) idx_mut = (.a261) in
    let deepened = (.idx_mut(shallow).#a143) in
    mark_test_run 798;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 798 failed %d" i;
    (* from (.a261.#a143) *)
    let shallow : (t261, _) idx_mut = (.a261.#a143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 799;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 799 failed %d" i;
  );
  (* Deepening to (.a261.#b143) *)
  let idx : (t261, _) idx_mut = (.a261.#b143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a261) *)
    let shallow : (t261, _) idx_mut = (.a261) in
    let deepened = (.idx_mut(shallow).#b143) in
    mark_test_run 800;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 800 failed %d" i;
    (* from (.a261.#b143) *)
    let shallow : (t261, _) idx_mut = (.a261.#b143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 801;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 801 failed %d" i;
  );

  (*********************************************)
  (*   t262 = { #{ float#; float# }; float }   *)
  (*********************************************)
  (* Deepening to (.a262) *)
  let idx : (t262, _) idx_mut = (.a262) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a262) *)
    let shallow : (t262, _) idx_mut = (.a262) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 802;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 802 failed %d" i;
  );
  (* Deepening to (.a262.#a143) *)
  let idx : (t262, _) idx_mut = (.a262.#a143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a262) *)
    let shallow : (t262, _) idx_mut = (.a262) in
    let deepened = (.idx_mut(shallow).#a143) in
    mark_test_run 803;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 803 failed %d" i;
    (* from (.a262.#a143) *)
    let shallow : (t262, _) idx_mut = (.a262.#a143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 804;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 804 failed %d" i;
  );
  (* Deepening to (.a262.#b143) *)
  let idx : (t262, _) idx_mut = (.a262.#b143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a262) *)
    let shallow : (t262, _) idx_mut = (.a262) in
    let deepened = (.idx_mut(shallow).#b143) in
    mark_test_run 805;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 805 failed %d" i;
    (* from (.a262.#b143) *)
    let shallow : (t262, _) idx_mut = (.a262.#b143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 806;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 806 failed %d" i;
  );
  (* Deepening to (.b262) *)
  let idx : (t262, _) idx_mut = (.b262) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b262) *)
    let shallow : (t262, _) idx_mut = (.b262) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 807;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 807 failed %d" i;
  );

  (**********************************************)
  (*   t263 = { #{ float#; float# }; float# }   *)
  (**********************************************)
  (* Deepening to (.a263) *)
  let idx : (t263, _) idx_mut = (.a263) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a263) *)
    let shallow : (t263, _) idx_mut = (.a263) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 808;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 808 failed %d" i;
  );
  (* Deepening to (.a263.#a143) *)
  let idx : (t263, _) idx_mut = (.a263.#a143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a263) *)
    let shallow : (t263, _) idx_mut = (.a263) in
    let deepened = (.idx_mut(shallow).#a143) in
    mark_test_run 809;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 809 failed %d" i;
    (* from (.a263.#a143) *)
    let shallow : (t263, _) idx_mut = (.a263.#a143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 810;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 810 failed %d" i;
  );
  (* Deepening to (.a263.#b143) *)
  let idx : (t263, _) idx_mut = (.a263.#b143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a263) *)
    let shallow : (t263, _) idx_mut = (.a263) in
    let deepened = (.idx_mut(shallow).#b143) in
    mark_test_run 811;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 811 failed %d" i;
    (* from (.a263.#b143) *)
    let shallow : (t263, _) idx_mut = (.a263.#b143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 812;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 812 failed %d" i;
  );
  (* Deepening to (.b263) *)
  let idx : (t263, _) idx_mut = (.b263) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b263) *)
    let shallow : (t263, _) idx_mut = (.b263) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 813;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 813 failed %d" i;
  );

  (*************************************************************)
  (*   t266 = { #{ float32#; int64# }; #{ string; int64# } }   *)
  (*************************************************************)
  (* Deepening to (.a266) *)
  let idx : (t266, _) idx_mut = (.a266) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a266) *)
    let shallow : (t266, _) idx_mut = (.a266) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 814;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 814 failed %d" i;
  );
  (* Deepening to (.a266.#a264) *)
  let idx : (t266, _) idx_mut = (.a266.#a264) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a266) *)
    let shallow : (t266, _) idx_mut = (.a266) in
    let deepened = (.idx_mut(shallow).#a264) in
    mark_test_run 815;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 815 failed %d" i;
    (* from (.a266.#a264) *)
    let shallow : (t266, _) idx_mut = (.a266.#a264) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 816;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 816 failed %d" i;
  );
  (* Deepening to (.a266.#b264) *)
  let idx : (t266, _) idx_mut = (.a266.#b264) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a266) *)
    let shallow : (t266, _) idx_mut = (.a266) in
    let deepened = (.idx_mut(shallow).#b264) in
    mark_test_run 817;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 817 failed %d" i;
    (* from (.a266.#b264) *)
    let shallow : (t266, _) idx_mut = (.a266.#b264) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 818;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 818 failed %d" i;
  );
  (* Deepening to (.b266) *)
  let idx : (t266, _) idx_mut = (.b266) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b266) *)
    let shallow : (t266, _) idx_mut = (.b266) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 819;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 819 failed %d" i;
  );
  (* Deepening to (.b266.#a265) *)
  let idx : (t266, _) idx_mut = (.b266.#a265) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b266) *)
    let shallow : (t266, _) idx_mut = (.b266) in
    let deepened = (.idx_mut(shallow).#a265) in
    mark_test_run 820;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 820 failed %d" i;
    (* from (.b266.#a265) *)
    let shallow : (t266, _) idx_mut = (.b266.#a265) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 821;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 821 failed %d" i;
  );
  (* Deepening to (.b266.#b265) *)
  let idx : (t266, _) idx_mut = (.b266.#b265) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b266) *)
    let shallow : (t266, _) idx_mut = (.b266) in
    let deepened = (.idx_mut(shallow).#b265) in
    mark_test_run 822;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 822 failed %d" i;
    (* from (.b266.#b265) *)
    let shallow : (t266, _) idx_mut = (.b266.#b265) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 823;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 823 failed %d" i;
  );

  (******************************)
  (*   t267 = { #{ string } }   *)
  (******************************)
  (* Deepening to (.a267) *)
  let idx : (t267, _) idx_mut = (.a267) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a267) *)
    let shallow : (t267, _) idx_mut = (.a267) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 824;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 824 failed %d" i;
  );
  (* Deepening to (.a267.#a108) *)
  let idx : (t267, _) idx_mut = (.a267.#a108) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a267) *)
    let shallow : (t267, _) idx_mut = (.a267) in
    let deepened = (.idx_mut(shallow).#a108) in
    mark_test_run 825;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 825 failed %d" i;
    (* from (.a267.#a108) *)
    let shallow : (t267, _) idx_mut = (.a267.#a108) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 826;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 826 failed %d" i;
  );

  (**************************************)
  (*   t268 = { #{ string }; unit_u }   *)
  (**************************************)
  (* Deepening to (.a268) *)
  let idx : (t268, _) idx_mut = (.a268) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a268) *)
    let shallow : (t268, _) idx_mut = (.a268) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 827;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 827 failed %d" i;
  );
  (* Deepening to (.a268.#a108) *)
  let idx : (t268, _) idx_mut = (.a268.#a108) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a268) *)
    let shallow : (t268, _) idx_mut = (.a268) in
    let deepened = (.idx_mut(shallow).#a108) in
    mark_test_run 828;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 828 failed %d" i;
    (* from (.a268.#a108) *)
    let shallow : (t268, _) idx_mut = (.a268.#a108) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 829;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 829 failed %d" i;
  );
  (* Deepening to (.b268) *)
  let idx : (t268, _) idx_mut = (.b268) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b268) *)
    let shallow : (t268, _) idx_mut = (.b268) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (**************************************)
  (*   t269 = { #{ string }; string }   *)
  (**************************************)
  (* Deepening to (.a269) *)
  let idx : (t269, _) idx_mut = (.a269) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a269) *)
    let shallow : (t269, _) idx_mut = (.a269) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 830;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 830 failed %d" i;
  );
  (* Deepening to (.a269.#a108) *)
  let idx : (t269, _) idx_mut = (.a269.#a108) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a269) *)
    let shallow : (t269, _) idx_mut = (.a269) in
    let deepened = (.idx_mut(shallow).#a108) in
    mark_test_run 831;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 831 failed %d" i;
    (* from (.a269.#a108) *)
    let shallow : (t269, _) idx_mut = (.a269.#a108) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 832;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 832 failed %d" i;
  );
  (* Deepening to (.b269) *)
  let idx : (t269, _) idx_mut = (.b269) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b269) *)
    let shallow : (t269, _) idx_mut = (.b269) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 833;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 833 failed %d" i;
  );

  (**************************************)
  (*   t270 = { #{ string; unit_u } }   *)
  (**************************************)
  (* Deepening to (.a270) *)
  let idx : (t270, _) idx_mut = (.a270) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a270) *)
    let shallow : (t270, _) idx_mut = (.a270) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 834;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 834 failed %d" i;
  );
  (* Deepening to (.a270.#a110) *)
  let idx : (t270, _) idx_mut = (.a270.#a110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a270) *)
    let shallow : (t270, _) idx_mut = (.a270) in
    let deepened = (.idx_mut(shallow).#a110) in
    mark_test_run 835;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 835 failed %d" i;
    (* from (.a270.#a110) *)
    let shallow : (t270, _) idx_mut = (.a270.#a110) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 836;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 836 failed %d" i;
  );
  (* Deepening to (.a270.#b110) *)
  let idx : (t270, _) idx_mut = (.a270.#b110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a270) *)
    let shallow : (t270, _) idx_mut = (.a270) in
    let deepened = (.idx_mut(shallow).#b110) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.a270.#b110) *)
    let shallow : (t270, _) idx_mut = (.a270.#b110) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (**********************************************)
  (*   t271 = { #{ string; unit_u }; unit_u }   *)
  (**********************************************)
  (* Deepening to (.a271) *)
  let idx : (t271, _) idx_mut = (.a271) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a271) *)
    let shallow : (t271, _) idx_mut = (.a271) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 837;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 837 failed %d" i;
  );
  (* Deepening to (.a271.#a110) *)
  let idx : (t271, _) idx_mut = (.a271.#a110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a271) *)
    let shallow : (t271, _) idx_mut = (.a271) in
    let deepened = (.idx_mut(shallow).#a110) in
    mark_test_run 838;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 838 failed %d" i;
    (* from (.a271.#a110) *)
    let shallow : (t271, _) idx_mut = (.a271.#a110) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 839;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 839 failed %d" i;
  );
  (* Deepening to (.a271.#b110) *)
  let idx : (t271, _) idx_mut = (.a271.#b110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a271) *)
    let shallow : (t271, _) idx_mut = (.a271) in
    let deepened = (.idx_mut(shallow).#b110) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.a271.#b110) *)
    let shallow : (t271, _) idx_mut = (.a271.#b110) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b271) *)
  let idx : (t271, _) idx_mut = (.b271) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b271) *)
    let shallow : (t271, _) idx_mut = (.b271) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (**********************************************)
  (*   t272 = { #{ string; unit_u }; string }   *)
  (**********************************************)
  (* Deepening to (.a272) *)
  let idx : (t272, _) idx_mut = (.a272) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a272) *)
    let shallow : (t272, _) idx_mut = (.a272) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 840;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 840 failed %d" i;
  );
  (* Deepening to (.a272.#a110) *)
  let idx : (t272, _) idx_mut = (.a272.#a110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a272) *)
    let shallow : (t272, _) idx_mut = (.a272) in
    let deepened = (.idx_mut(shallow).#a110) in
    mark_test_run 841;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 841 failed %d" i;
    (* from (.a272.#a110) *)
    let shallow : (t272, _) idx_mut = (.a272.#a110) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 842;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 842 failed %d" i;
  );
  (* Deepening to (.a272.#b110) *)
  let idx : (t272, _) idx_mut = (.a272.#b110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a272) *)
    let shallow : (t272, _) idx_mut = (.a272) in
    let deepened = (.idx_mut(shallow).#b110) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
    (* from (.a272.#b110) *)
    let shallow : (t272, _) idx_mut = (.a272.#b110) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );
  (* Deepening to (.b272) *)
  let idx : (t272, _) idx_mut = (.b272) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b272) *)
    let shallow : (t272, _) idx_mut = (.b272) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 843;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 843 failed %d" i;
  );

  (**************************************)
  (*   t273 = { #{ string; string } }   *)
  (**************************************)
  (* Deepening to (.a273) *)
  let idx : (t273, _) idx_mut = (.a273) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a273) *)
    let shallow : (t273, _) idx_mut = (.a273) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 844;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 844 failed %d" i;
  );
  (* Deepening to (.a273.#a112) *)
  let idx : (t273, _) idx_mut = (.a273.#a112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a273) *)
    let shallow : (t273, _) idx_mut = (.a273) in
    let deepened = (.idx_mut(shallow).#a112) in
    mark_test_run 845;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 845 failed %d" i;
    (* from (.a273.#a112) *)
    let shallow : (t273, _) idx_mut = (.a273.#a112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 846;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 846 failed %d" i;
  );
  (* Deepening to (.a273.#b112) *)
  let idx : (t273, _) idx_mut = (.a273.#b112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a273) *)
    let shallow : (t273, _) idx_mut = (.a273) in
    let deepened = (.idx_mut(shallow).#b112) in
    mark_test_run 847;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 847 failed %d" i;
    (* from (.a273.#b112) *)
    let shallow : (t273, _) idx_mut = (.a273.#b112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 848;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 848 failed %d" i;
  );

  (**********************************************)
  (*   t274 = { #{ string; string }; unit_u }   *)
  (**********************************************)
  (* Deepening to (.a274) *)
  let idx : (t274, _) idx_mut = (.a274) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a274) *)
    let shallow : (t274, _) idx_mut = (.a274) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 849;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 849 failed %d" i;
  );
  (* Deepening to (.a274.#a112) *)
  let idx : (t274, _) idx_mut = (.a274.#a112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a274) *)
    let shallow : (t274, _) idx_mut = (.a274) in
    let deepened = (.idx_mut(shallow).#a112) in
    mark_test_run 850;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 850 failed %d" i;
    (* from (.a274.#a112) *)
    let shallow : (t274, _) idx_mut = (.a274.#a112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 851;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 851 failed %d" i;
  );
  (* Deepening to (.a274.#b112) *)
  let idx : (t274, _) idx_mut = (.a274.#b112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a274) *)
    let shallow : (t274, _) idx_mut = (.a274) in
    let deepened = (.idx_mut(shallow).#b112) in
    mark_test_run 852;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 852 failed %d" i;
    (* from (.a274.#b112) *)
    let shallow : (t274, _) idx_mut = (.a274.#b112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 853;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 853 failed %d" i;
  );
  (* Deepening to (.b274) *)
  let idx : (t274, _) idx_mut = (.b274) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b274) *)
    let shallow : (t274, _) idx_mut = (.b274) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (**********************************************)
  (*   t275 = { #{ string; string }; string }   *)
  (**********************************************)
  (* Deepening to (.a275) *)
  let idx : (t275, _) idx_mut = (.a275) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a275) *)
    let shallow : (t275, _) idx_mut = (.a275) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 854;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 854 failed %d" i;
  );
  (* Deepening to (.a275.#a112) *)
  let idx : (t275, _) idx_mut = (.a275.#a112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a275) *)
    let shallow : (t275, _) idx_mut = (.a275) in
    let deepened = (.idx_mut(shallow).#a112) in
    mark_test_run 855;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 855 failed %d" i;
    (* from (.a275.#a112) *)
    let shallow : (t275, _) idx_mut = (.a275.#a112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 856;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 856 failed %d" i;
  );
  (* Deepening to (.a275.#b112) *)
  let idx : (t275, _) idx_mut = (.a275.#b112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a275) *)
    let shallow : (t275, _) idx_mut = (.a275) in
    let deepened = (.idx_mut(shallow).#b112) in
    mark_test_run 857;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 857 failed %d" i;
    (* from (.a275.#b112) *)
    let shallow : (t275, _) idx_mut = (.a275.#b112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 858;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 858 failed %d" i;
  );
  (* Deepening to (.b275) *)
  let idx : (t275, _) idx_mut = (.b275) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b275) *)
    let shallow : (t275, _) idx_mut = (.b275) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 859;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 859 failed %d" i;
  );

  (********************************)
  (*   t276 = { #{ int64x2# } }   *)
  (********************************)
  (* Deepening to (.a276) *)
  let idx : (t276, _) idx_mut = (.a276) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a276) *)
    let shallow : (t276, _) idx_mut = (.a276) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 860;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 860 failed %d" i;
  );
  (* Deepening to (.a276.#a43) *)
  let idx : (t276, _) idx_mut = (.a276.#a43) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a276) *)
    let shallow : (t276, _) idx_mut = (.a276) in
    let deepened = (.idx_mut(shallow).#a43) in
    mark_test_run 861;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 861 failed %d" i;
    (* from (.a276.#a43) *)
    let shallow : (t276, _) idx_mut = (.a276.#a43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 862;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 862 failed %d" i;
  );

  (*************************************)
  (*   t277 = { #{ int64x2# }; int }   *)
  (*************************************)
  (* Deepening to (.a277) *)
  let idx : (t277, _) idx_mut = (.a277) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a277) *)
    let shallow : (t277, _) idx_mut = (.a277) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 863;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 863 failed %d" i;
  );
  (* Deepening to (.a277.#a43) *)
  let idx : (t277, _) idx_mut = (.a277.#a43) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a277) *)
    let shallow : (t277, _) idx_mut = (.a277) in
    let deepened = (.idx_mut(shallow).#a43) in
    mark_test_run 864;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 864 failed %d" i;
    (* from (.a277.#a43) *)
    let shallow : (t277, _) idx_mut = (.a277.#a43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 865;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 865 failed %d" i;
  );
  (* Deepening to (.b277) *)
  let idx : (t277, _) idx_mut = (.b277) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b277) *)
    let shallow : (t277, _) idx_mut = (.b277) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 866;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 866 failed %d" i;
  );

  (******************************************)
  (*   t278 = { #{ int64x2# }; int64x2# }   *)
  (******************************************)
  (* Deepening to (.a278) *)
  let idx : (t278, _) idx_mut = (.a278) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a278) *)
    let shallow : (t278, _) idx_mut = (.a278) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 867;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 867 failed %d" i;
  );
  (* Deepening to (.a278.#a43) *)
  let idx : (t278, _) idx_mut = (.a278.#a43) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a278) *)
    let shallow : (t278, _) idx_mut = (.a278) in
    let deepened = (.idx_mut(shallow).#a43) in
    mark_test_run 868;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 868 failed %d" i;
    (* from (.a278.#a43) *)
    let shallow : (t278, _) idx_mut = (.a278.#a43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 869;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 869 failed %d" i;
  );
  (* Deepening to (.b278) *)
  let idx : (t278, _) idx_mut = (.b278) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b278) *)
    let shallow : (t278, _) idx_mut = (.b278) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 870;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 870 failed %d" i;
  );

  (*************************************)
  (*   t279 = { #{ int64x2#; int } }   *)
  (*************************************)
  (* Deepening to (.a279) *)
  let idx : (t279, _) idx_mut = (.a279) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a279) *)
    let shallow : (t279, _) idx_mut = (.a279) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 871;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 871 failed %d" i;
  );
  (* Deepening to (.a279.#a45) *)
  let idx : (t279, _) idx_mut = (.a279.#a45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a279) *)
    let shallow : (t279, _) idx_mut = (.a279) in
    let deepened = (.idx_mut(shallow).#a45) in
    mark_test_run 872;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 872 failed %d" i;
    (* from (.a279.#a45) *)
    let shallow : (t279, _) idx_mut = (.a279.#a45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 873;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 873 failed %d" i;
  );
  (* Deepening to (.a279.#b45) *)
  let idx : (t279, _) idx_mut = (.a279.#b45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a279) *)
    let shallow : (t279, _) idx_mut = (.a279) in
    let deepened = (.idx_mut(shallow).#b45) in
    mark_test_run 874;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 874 failed %d" i;
    (* from (.a279.#b45) *)
    let shallow : (t279, _) idx_mut = (.a279.#b45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 875;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 875 failed %d" i;
  );

  (******************************************)
  (*   t280 = { #{ int64x2#; int }; int }   *)
  (******************************************)
  (* Deepening to (.a280) *)
  let idx : (t280, _) idx_mut = (.a280) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a280) *)
    let shallow : (t280, _) idx_mut = (.a280) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 876;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 876 failed %d" i;
  );
  (* Deepening to (.a280.#a45) *)
  let idx : (t280, _) idx_mut = (.a280.#a45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a280) *)
    let shallow : (t280, _) idx_mut = (.a280) in
    let deepened = (.idx_mut(shallow).#a45) in
    mark_test_run 877;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 877 failed %d" i;
    (* from (.a280.#a45) *)
    let shallow : (t280, _) idx_mut = (.a280.#a45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 878;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 878 failed %d" i;
  );
  (* Deepening to (.a280.#b45) *)
  let idx : (t280, _) idx_mut = (.a280.#b45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a280) *)
    let shallow : (t280, _) idx_mut = (.a280) in
    let deepened = (.idx_mut(shallow).#b45) in
    mark_test_run 879;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 879 failed %d" i;
    (* from (.a280.#b45) *)
    let shallow : (t280, _) idx_mut = (.a280.#b45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 880;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 880 failed %d" i;
  );
  (* Deepening to (.b280) *)
  let idx : (t280, _) idx_mut = (.b280) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b280) *)
    let shallow : (t280, _) idx_mut = (.b280) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 881;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 881 failed %d" i;
  );

  (***********************************************)
  (*   t281 = { #{ int64x2#; int }; int64x2# }   *)
  (***********************************************)
  (* Deepening to (.a281) *)
  let idx : (t281, _) idx_mut = (.a281) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a281) *)
    let shallow : (t281, _) idx_mut = (.a281) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 882;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 882 failed %d" i;
  );
  (* Deepening to (.a281.#a45) *)
  let idx : (t281, _) idx_mut = (.a281.#a45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a281) *)
    let shallow : (t281, _) idx_mut = (.a281) in
    let deepened = (.idx_mut(shallow).#a45) in
    mark_test_run 883;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 883 failed %d" i;
    (* from (.a281.#a45) *)
    let shallow : (t281, _) idx_mut = (.a281.#a45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 884;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 884 failed %d" i;
  );
  (* Deepening to (.a281.#b45) *)
  let idx : (t281, _) idx_mut = (.a281.#b45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a281) *)
    let shallow : (t281, _) idx_mut = (.a281) in
    let deepened = (.idx_mut(shallow).#b45) in
    mark_test_run 885;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 885 failed %d" i;
    (* from (.a281.#b45) *)
    let shallow : (t281, _) idx_mut = (.a281.#b45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 886;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 886 failed %d" i;
  );
  (* Deepening to (.b281) *)
  let idx : (t281, _) idx_mut = (.b281) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b281) *)
    let shallow : (t281, _) idx_mut = (.b281) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 887;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 887 failed %d" i;
  );

  (************************************************************)
  (*   t284 = { #{ int64x2#; string }; #{ int64; float# } }   *)
  (************************************************************)
  (* Deepening to (.a284) *)
  let idx : (t284, _) idx_mut = (.a284) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a284) *)
    let shallow : (t284, _) idx_mut = (.a284) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 888;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 888 failed %d" i;
  );
  (* Deepening to (.a284.#a282) *)
  let idx : (t284, _) idx_mut = (.a284.#a282) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a284) *)
    let shallow : (t284, _) idx_mut = (.a284) in
    let deepened = (.idx_mut(shallow).#a282) in
    mark_test_run 889;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 889 failed %d" i;
    (* from (.a284.#a282) *)
    let shallow : (t284, _) idx_mut = (.a284.#a282) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 890;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 890 failed %d" i;
  );
  (* Deepening to (.a284.#b282) *)
  let idx : (t284, _) idx_mut = (.a284.#b282) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a284) *)
    let shallow : (t284, _) idx_mut = (.a284) in
    let deepened = (.idx_mut(shallow).#b282) in
    mark_test_run 891;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 891 failed %d" i;
    (* from (.a284.#b282) *)
    let shallow : (t284, _) idx_mut = (.a284.#b282) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 892;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 892 failed %d" i;
  );
  (* Deepening to (.b284) *)
  let idx : (t284, _) idx_mut = (.b284) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b284) *)
    let shallow : (t284, _) idx_mut = (.b284) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 893;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 893 failed %d" i;
  );
  (* Deepening to (.b284.#a283) *)
  let idx : (t284, _) idx_mut = (.b284.#a283) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b284) *)
    let shallow : (t284, _) idx_mut = (.b284) in
    let deepened = (.idx_mut(shallow).#a283) in
    mark_test_run 894;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 894 failed %d" i;
    (* from (.b284.#a283) *)
    let shallow : (t284, _) idx_mut = (.b284.#a283) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 895;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 895 failed %d" i;
  );
  (* Deepening to (.b284.#b283) *)
  let idx : (t284, _) idx_mut = (.b284.#b283) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b284) *)
    let shallow : (t284, _) idx_mut = (.b284) in
    let deepened = (.idx_mut(shallow).#b283) in
    mark_test_run 896;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 896 failed %d" i;
    (* from (.b284.#b283) *)
    let shallow : (t284, _) idx_mut = (.b284.#b283) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 897;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 897 failed %d" i;
  );

  (******************************************)
  (*   t285 = { #{ int64x2#; int64x2# } }   *)
  (******************************************)
  (* Deepening to (.a285) *)
  let idx : (t285, _) idx_mut = (.a285) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a285) *)
    let shallow : (t285, _) idx_mut = (.a285) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 898;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 898 failed %d" i;
  );
  (* Deepening to (.a285.#a47) *)
  let idx : (t285, _) idx_mut = (.a285.#a47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a285) *)
    let shallow : (t285, _) idx_mut = (.a285) in
    let deepened = (.idx_mut(shallow).#a47) in
    mark_test_run 899;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 899 failed %d" i;
    (* from (.a285.#a47) *)
    let shallow : (t285, _) idx_mut = (.a285.#a47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 900;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 900 failed %d" i;
  );
  (* Deepening to (.a285.#b47) *)
  let idx : (t285, _) idx_mut = (.a285.#b47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a285) *)
    let shallow : (t285, _) idx_mut = (.a285) in
    let deepened = (.idx_mut(shallow).#b47) in
    mark_test_run 901;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 901 failed %d" i;
    (* from (.a285.#b47) *)
    let shallow : (t285, _) idx_mut = (.a285.#b47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 902;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 902 failed %d" i;
  );

  (***********************************************)
  (*   t286 = { #{ int64x2#; int64x2# }; int }   *)
  (***********************************************)
  (* Deepening to (.a286) *)
  let idx : (t286, _) idx_mut = (.a286) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a286) *)
    let shallow : (t286, _) idx_mut = (.a286) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 903;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 903 failed %d" i;
  );
  (* Deepening to (.a286.#a47) *)
  let idx : (t286, _) idx_mut = (.a286.#a47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a286) *)
    let shallow : (t286, _) idx_mut = (.a286) in
    let deepened = (.idx_mut(shallow).#a47) in
    mark_test_run 904;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 904 failed %d" i;
    (* from (.a286.#a47) *)
    let shallow : (t286, _) idx_mut = (.a286.#a47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 905;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 905 failed %d" i;
  );
  (* Deepening to (.a286.#b47) *)
  let idx : (t286, _) idx_mut = (.a286.#b47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a286) *)
    let shallow : (t286, _) idx_mut = (.a286) in
    let deepened = (.idx_mut(shallow).#b47) in
    mark_test_run 906;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 906 failed %d" i;
    (* from (.a286.#b47) *)
    let shallow : (t286, _) idx_mut = (.a286.#b47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 907;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 907 failed %d" i;
  );
  (* Deepening to (.b286) *)
  let idx : (t286, _) idx_mut = (.b286) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b286) *)
    let shallow : (t286, _) idx_mut = (.b286) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 908;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 908 failed %d" i;
  );

  (****************************************************)
  (*   t287 = { #{ int64x2#; int64x2# }; int64x2# }   *)
  (****************************************************)
  (* Deepening to (.a287) *)
  let idx : (t287, _) idx_mut = (.a287) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a287) *)
    let shallow : (t287, _) idx_mut = (.a287) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 909;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 909 failed %d" i;
  );
  (* Deepening to (.a287.#a47) *)
  let idx : (t287, _) idx_mut = (.a287.#a47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a287) *)
    let shallow : (t287, _) idx_mut = (.a287) in
    let deepened = (.idx_mut(shallow).#a47) in
    mark_test_run 910;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 910 failed %d" i;
    (* from (.a287.#a47) *)
    let shallow : (t287, _) idx_mut = (.a287.#a47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 911;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 911 failed %d" i;
  );
  (* Deepening to (.a287.#b47) *)
  let idx : (t287, _) idx_mut = (.a287.#b47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a287) *)
    let shallow : (t287, _) idx_mut = (.a287) in
    let deepened = (.idx_mut(shallow).#b47) in
    mark_test_run 912;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 912 failed %d" i;
    (* from (.a287.#b47) *)
    let shallow : (t287, _) idx_mut = (.a287.#b47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 913;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 913 failed %d" i;
  );
  (* Deepening to (.b287) *)
  let idx : (t287, _) idx_mut = (.b287) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b287) *)
    let shallow : (t287, _) idx_mut = (.b287) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 914;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 914 failed %d" i;
  );

  ()
;;
let () = to_run ();;

for i = 1 to 914 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
