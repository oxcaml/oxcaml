(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 modules = "idx_repr.ml stubs.c";
 flags = "-extension simd_beta -extension layouts_alpha";
 flambda2;
 stack-allocation;
 native;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
type unit_u : void mod everything
external unbox_unit : unit -> unit_u = "%unbox_unit"
external globalize : local_ 'a -> 'a = "%obj_dup";;
external box_int64x2 : int64x2# -> int64x2 = "%box_vec128"
external unbox_int64x2 : int64x2 -> int64x2# = "%unbox_vec128"
external interleave_low_64 : int64x2# -> int64x2# -> int64x2# = "caml_vec128_unreachable" "caml_simd_vec128_interleave_low_64" [@@unboxed] [@@builtin]
external interleave_high_64 : int64x2# -> int64x2# -> int64x2# = "caml_vec128_unreachable" "caml_simd_vec128_interleave_high_64" [@@unboxed] [@@builtin]
external int64x2_of_int64 : int64 -> int64x2# = "caml_vec128_unreachable" "caml_int64x2_low_of_int64" [@@unboxed] [@@builtin]
external int64_of_int64x2 : int64x2# -> int64 = "caml_vec128_unreachable" "caml_int64x2_low_to_int64" [@@unboxed] [@@builtin]

let int64x2_u_equal i1 i2 =
    let a1 = int64_of_int64x2 i1 in
    let b1 = int64_of_int64x2 (interleave_high_64 i1 i1) in
    let a2 = int64_of_int64x2 i2 in
    let b2 = int64_of_int64x2 (interleave_high_64 i2 i2) in
    Int64.equal a1 a2 && Int64.equal b1 b2

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any mod separable) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any mod separable) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int; mutable b0 : int; mutable c0 : float } (* { int; int; float } *)
type t1 = { mutable a1 : int; mutable b1 : int64 } (* { int; int64 } *)
type t2 = { mutable a2 : int; mutable b2 : int32# } (* { int; int32# } *)
type t3 = { mutable a3 : int; mutable b3 : float } (* { int; float } *)
type t4 = { mutable a4 : int; mutable b4 : int64x2# } (* { int; int64x2# } *)
type t5 = { mutable a5 : int; mutable b5 : int64x2#; mutable c5 : int64x2# } (* { int; int64x2#; int64x2# } *)
type t6 = #{ a6 : int } (* #{ int } *)
type t7 = { mutable a7 : int; mutable b7 : t6 } (* { int; #{ int } } *)
type t8 = #{ a8 : int; b8 : int } (* #{ int; int } *)
type t9 = { mutable a9 : int; mutable b9 : t8 } (* { int; #{ int; int } } *)
type t10 = { mutable a10 : int64 } (* { int64 } *)
type t11 = { mutable a11 : int64; mutable b11 : nativeint# } (* { int64; nativeint# } *)
type t12 = { mutable a12 : int64; mutable b12 : unit_u } (* { int64; unit_u } *)
type t13 = { mutable a13 : int32#; mutable b13 : int } (* { int32#; int } *)
type t14 = { mutable a14 : int32#; mutable b14 : int; mutable c14 : int32# } (* { int32#; int; int32# } *)
type t15 = { mutable a15 : int32#; mutable b15 : float } (* { int32#; float } *)
type t16 = #{ a16 : int; b16 : int32# } (* #{ int; int32# } *)
type t17 = { mutable a17 : int32#; mutable b17 : t16 } (* { int32#; #{ int; int32# } } *)
type t18 = #{ a18 : int32#; b18 : int32# } (* #{ int32#; int32# } *)
type t19 = { mutable a19 : int32#; mutable b19 : t18 } (* { int32#; #{ int32#; int32# } } *)
type t20 = { mutable a20 : nativeint#; mutable b20 : int64# } (* { nativeint#; int64# } *)
type t21 = { mutable a21 : unit_u; mutable b21 : int32# } (* { unit_u; int32# } *)
type t22 = { mutable a22 : unit_u; mutable b22 : string; mutable c22 : string } (* { unit_u; string; string } *)
type t23 = { mutable a23 : float; mutable b23 : int; mutable c23 : float } (* { float; int; float } *)
type t24 = { mutable a24 : float; mutable b24 : int64 } (* { float; int64 } *)
type t25 = { mutable a25 : float; mutable b25 : float# } (* { float; float# } *)
type t26 = { mutable a26 : float; mutable b26 : t6 } (* { float; #{ int } } *)
type t27 = { mutable a27 : float; mutable b27 : t8 } (* { float; #{ int; int } } *)
type t28 = #{ a28 : float; b28 : int } (* #{ float; int } *)
type t29 = { mutable a29 : float; mutable b29 : t28 } (* { float; #{ float; int } } *)
type t30 = #{ a30 : float; b30 : float } (* #{ float; float } *)
type t31 = { mutable a31 : float; mutable b31 : t30 } (* { float; #{ float; float } } *)
type t32 = #{ a32 : float#; b32 : float# } (* #{ float#; float# } *)
type t33 = { mutable a33 : float; mutable b33 : t32 } (* { float; #{ float#; float# } } *)
type t34 = { mutable a34 : float#; mutable b34 : float } (* { float#; float } *)
type t35 = { mutable a35 : float#; mutable b35 : float#; mutable c35 : float } (* { float#; float#; float } *)
type t36 = { mutable a36 : float#; mutable b36 : float#; mutable c36 : float# } (* { float#; float#; float# } *)
type t37 = #{ a37 : string; b37 : string } (* #{ string; string } *)
type t38 = { mutable a38 : string; mutable b38 : t37 } (* { string; #{ string; string } } *)
type t39 = { mutable a39 : int64x2#; mutable b39 : int; mutable c39 : int } (* { int64x2#; int; int } *)
type t40 = #{ a40 : int64x2#; b40 : int64x2# } (* #{ int64x2#; int64x2# } *)
type t41 = { mutable a41 : int64x2#; mutable b41 : t40 } (* { int64x2#; #{ int64x2#; int64x2# } } *)
type v42 = C42_0 of unit_u (* (| unit_u) *)
type t43 = { mutable a43 : v42; mutable b43 : int64# } (* { (| unit_u); int64# } *)
type t44 = { mutable a44 : v42; mutable b44 : int32# } (* { (| unit_u); int32# } *)
type t45 = { mutable a45 : v42; mutable b45 : nativeint# } (* { (| unit_u); nativeint# } *)
type t46 = { mutable a46 : t6; mutable b46 : int } (* { #{ int }; int } *)
type t47 = { mutable a47 : t8; mutable b47 : int32# } (* { #{ int; int }; int32# } *)
type t48 = { mutable a48 : t16; mutable b48 : int } (* { #{ int; int32# }; int } *)
type t49 = { mutable a49 : t16; mutable b49 : int32# } (* { #{ int; int32# }; int32# } *)
type t50 = #{ a50 : float } (* #{ float } *)
type t51 = { mutable a51 : t50 } (* { #{ float } } *)
type t52 = { mutable a52 : t50; mutable b52 : int } (* { #{ float }; int } *)
type t53 = { mutable a53 : t50; mutable b53 : float } (* { #{ float }; float } *)
type t54 = { mutable a54 : t50; mutable b54 : float# } (* { #{ float }; float# } *)
type t55 = { mutable a55 : t30; mutable b55 : float } (* { #{ float; float }; float } *)
type t56 = #{ a56 : float# } (* #{ float# } *)
type t57 = { mutable a57 : t56; mutable b57 : float } (* { #{ float# }; float } *)
type t58 = #{ a58 : float#; b58 : float } (* #{ float#; float } *)
type t59 = { mutable a59 : t58 } (* { #{ float#; float } } *)
type t60 = { mutable a60 : t32 } (* { #{ float#; float# } } *)
type t61 = { mutable a61 : t32; mutable b61 : float } (* { #{ float#; float# }; float } *)
type t62 = { mutable a62 : t32; mutable b62 : float# } (* { #{ float#; float# }; float# } *)
type t63 = #{ a63 : string; b63 : unit_u } (* #{ string; unit_u } *)
type t64 = { mutable a64 : t63 } (* { #{ string; unit_u } } *)
type t65 = { mutable a65 : t63; mutable b65 : unit_u } (* { #{ string; unit_u }; unit_u } *)
type t66 = #{ a66 : int64x2# } (* #{ int64x2# } *)
type t67 = { mutable a67 : t66; mutable b67 : int64x2# } (* { #{ int64x2# }; int64x2# } *)
type t68 = #{ a68 : int64x2#; b68 : string } (* #{ int64x2#; string } *)
type t69 = #{ a69 : int64; b69 : float# } (* #{ int64; float# } *)
type t70 = { mutable a70 : t68; mutable b70 : t69 } (* { #{ int64x2#; string }; #{ int64; float# } } *)

let to_run () =
  (********************************)
  (*   t0 = { int; int; float }   *)
  (********************************)
  let r = { a0 = 0; b0 = 1; c0 = 2. } in
  mark_test_run 1;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 1 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************)
  (*   t1 = { int; int64 }   *)
  (***************************)
  let r = { a1 = 0; b1 = 1L } in
  mark_test_run 2;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 2 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************)
  (*   t2 = { int; int32# }   *)
  (****************************)
  let r = { a2 = 0; b2 = #1l } in
  mark_test_run 3;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 3 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************)
  (*   t3 = { int; float }   *)
  (***************************)
  let r = { a3 = 0; b3 = 1. } in
  mark_test_run 4;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 4 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************)
  (*   t4 = { int; int64x2# }   *)
  (******************************)
  let r = { a4 = 0; b4 = (interleave_low_64 (int64x2_of_int64 1L) (int64x2_of_int64 2L)) } in
  mark_test_run 5;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 5 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t5 = { int; int64x2#; int64x2# }   *)
  (****************************************)
  let r = { a5 = 0; b5 = (interleave_low_64 (int64x2_of_int64 1L) (int64x2_of_int64 2L)); c5 = (interleave_low_64 (int64x2_of_int64 3L) (int64x2_of_int64 4L)) } in
  mark_test_run 6;
  let test = Int.equal (Obj.size (Obj.repr r)) 5 in
  if not test then failwithf "test 6 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************)
  (*   t7 = { int; #{ int } }   *)
  (******************************)
  let r = { a7 = 0; b7 = #{ a6 = 1 } } in
  mark_test_run 7;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 7 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t9 = { int; #{ int; int } }   *)
  (***********************************)
  let r = { a9 = 0; b9 = #{ a8 = 1; b8 = 2 } } in
  mark_test_run 8;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 8 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************)
  (*   t10 = { int64 }   *)
  (***********************)
  let r = { a10 = 0L } in
  mark_test_run 9;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 9 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t11 = { int64; nativeint# }   *)
  (***********************************)
  let r = { a11 = 0L; b11 = #1n } in
  mark_test_run 10;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 10 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t12 = { int64; unit_u }   *)
  (*******************************)
  let r = { a12 = 0L; b12 = (unbox_unit ()) } in
  mark_test_run 11;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 11 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*****************************)
  (*   t13 = { int32#; int }   *)
  (*****************************)
  let r = { a13 = #0l; b13 = 1 } in
  mark_test_run 12;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 12 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t14 = { int32#; int; int32# }   *)
  (*************************************)
  let r = { a14 = #0l; b14 = 1; c14 = #2l } in
  mark_test_run 13;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 13 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t15 = { int32#; float }   *)
  (*******************************)
  let r = { a15 = #0l; b15 = 1. } in
  mark_test_run 14;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 14 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************************)
  (*   t17 = { int32#; #{ int; int32# } }   *)
  (******************************************)
  let r = { a17 = #0l; b17 = #{ a16 = 1; b16 = #2l } } in
  mark_test_run 15;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 15 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t19 = { int32#; #{ int32#; int32# } }   *)
  (*********************************************)
  let r = { a19 = #0l; b19 = #{ a18 = #1l; b18 = #2l } } in
  mark_test_run 16;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 16 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t20 = { nativeint#; int64# }   *)
  (************************************)
  let r = { a20 = #0n; b20 = #1L } in
  mark_test_run 17;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 17 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************)
  (*   t21 = { unit_u; int32# }   *)
  (********************************)
  let r = { a21 = (unbox_unit ()); b21 = #0l } in
  mark_test_run 18;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 18 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t22 = { unit_u; string; string }   *)
  (****************************************)
  let r = { a22 = (unbox_unit ()); b22 = "0"; c22 = "1" } in
  mark_test_run 19;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 19 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t23 = { float; int; float }   *)
  (***********************************)
  let r = { a23 = 0.; b23 = 1; c23 = 2. } in
  mark_test_run 20;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 20 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************)
  (*   t24 = { float; int64 }   *)
  (******************************)
  let r = { a24 = 0.; b24 = 1L } in
  mark_test_run 21;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 21 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t25 = { float; float# }   *)
  (*******************************)
  let r = { a25 = 0.; b25 = #1. } in
  mark_test_run 22;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 22 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************)
  (*   t26 = { float; #{ int } }   *)
  (*********************************)
  let r = { a26 = 0.; b26 = #{ a6 = 1 } } in
  mark_test_run 23;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 23 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (**************************************)
  (*   t27 = { float; #{ int; int } }   *)
  (**************************************)
  let r = { a27 = 0.; b27 = #{ a8 = 1; b8 = 2 } } in
  mark_test_run 24;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 24 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t29 = { float; #{ float; int } }   *)
  (****************************************)
  let r = { a29 = 0.; b29 = #{ a28 = 1.; b28 = 2 } } in
  mark_test_run 25;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 25 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************************)
  (*   t31 = { float; #{ float; float } }   *)
  (******************************************)
  let r = { a31 = 0.; b31 = #{ a30 = 1.; b30 = 2. } } in
  mark_test_run 26;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 26 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************************)
  (*   t33 = { float; #{ float#; float# } }   *)
  (********************************************)
  let r = { a33 = 0.; b33 = #{ a32 = #1.; b32 = #2. } } in
  mark_test_run 27;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 27 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t34 = { float#; float }   *)
  (*******************************)
  let r = { a34 = #0.; b34 = 1. } in
  mark_test_run 28;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 28 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************************)
  (*   t35 = { float#; float#; float }   *)
  (***************************************)
  let r = { a35 = #0.; b35 = #1.; c35 = 2. } in
  mark_test_run 29;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 29 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t36 = { float#; float#; float# }   *)
  (****************************************)
  let r = { a36 = #0.; b36 = #1.; c36 = #2. } in
  mark_test_run 30;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 30 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t38 = { string; #{ string; string } }   *)
  (*********************************************)
  let r = { a38 = "0"; b38 = #{ a37 = "1"; b37 = "2" } } in
  mark_test_run 31;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 31 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t39 = { int64x2#; int; int }   *)
  (************************************)
  let r = { a39 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b39 = 2; c39 = 3 } in
  mark_test_run 32;
  let test = Int.equal (Obj.size (Obj.repr r)) 4 in
  if not test then failwithf "test 32 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************************************)
  (*   t41 = { int64x2#; #{ int64x2#; int64x2# } }   *)
  (***************************************************)
  let r = { a41 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b41 = #{ a40 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)); b40 = (interleave_low_64 (int64x2_of_int64 4L) (int64x2_of_int64 5L)) } } in
  mark_test_run 33;
  let test = Int.equal (Obj.size (Obj.repr r)) 6 in
  if not test then failwithf "test 33 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t43 = { (| unit_u); int64# }   *)
  (************************************)
  let r = { a43 = (C42_0 (unbox_unit ())); b43 = #0L } in
  mark_test_run 34;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 34 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t44 = { (| unit_u); int32# }   *)
  (************************************)
  let r = { a44 = (C42_0 (unbox_unit ())); b44 = #0l } in
  mark_test_run 35;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 35 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t45 = { (| unit_u); nativeint# }   *)
  (****************************************)
  let r = { a45 = (C42_0 (unbox_unit ())); b45 = #0n } in
  mark_test_run 36;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 36 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t46 = { #{ int }; int }   *)
  (*******************************)
  let r = { a46 = #{ a6 = 0 }; b46 = 1 } in
  mark_test_run 37;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 37 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************************)
  (*   t47 = { #{ int; int }; int32# }   *)
  (***************************************)
  let r = { a47 = #{ a8 = 0; b8 = 1 }; b47 = #2l } in
  mark_test_run 38;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 38 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************************)
  (*   t48 = { #{ int; int32# }; int }   *)
  (***************************************)
  let r = { a48 = #{ a16 = 0; b16 = #1l }; b48 = 2 } in
  mark_test_run 39;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 39 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************************)
  (*   t49 = { #{ int; int32# }; int32# }   *)
  (******************************************)
  let r = { a49 = #{ a16 = 0; b16 = #1l }; b49 = #2l } in
  mark_test_run 40;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 40 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************)
  (*   t51 = { #{ float } }   *)
  (****************************)
  let r = { a51 = #{ a50 = 0. } } in
  mark_test_run 41;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 41 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************)
  (*   t52 = { #{ float }; int }   *)
  (*********************************)
  let r = { a52 = #{ a50 = 0. }; b52 = 1 } in
  mark_test_run 42;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 42 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t53 = { #{ float }; float }   *)
  (***********************************)
  let r = { a53 = #{ a50 = 0. }; b53 = 1. } in
  mark_test_run 43;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 43 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t54 = { #{ float }; float# }   *)
  (************************************)
  let r = { a54 = #{ a50 = 0. }; b54 = #1. } in
  mark_test_run 44;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 44 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************************)
  (*   t55 = { #{ float; float }; float }   *)
  (******************************************)
  let r = { a55 = #{ a30 = 0.; b30 = 1. }; b55 = 2. } in
  mark_test_run 45;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 45 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t57 = { #{ float# }; float }   *)
  (************************************)
  let r = { a57 = #{ a56 = #0. }; b57 = 1. } in
  mark_test_run 46;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 46 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t59 = { #{ float#; float } }   *)
  (************************************)
  let r = { a59 = #{ a58 = #0.; b58 = 1. } } in
  mark_test_run 47;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 47 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t60 = { #{ float#; float# } }   *)
  (*************************************)
  let r = { a60 = #{ a32 = #0.; b32 = #1. } } in
  mark_test_run 48;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 48 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************************)
  (*   t61 = { #{ float#; float# }; float }   *)
  (********************************************)
  let r = { a61 = #{ a32 = #0.; b32 = #1. }; b61 = 2. } in
  mark_test_run 49;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 49 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t62 = { #{ float#; float# }; float# }   *)
  (*********************************************)
  let r = { a62 = #{ a32 = #0.; b32 = #1. }; b62 = #2. } in
  mark_test_run 50;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 50 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t64 = { #{ string; unit_u } }   *)
  (*************************************)
  let r = { a64 = #{ a63 = "0"; b63 = (unbox_unit ()) } } in
  mark_test_run 51;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 51 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t65 = { #{ string; unit_u }; unit_u }   *)
  (*********************************************)
  let r = { a65 = #{ a63 = "0"; b63 = (unbox_unit ()) }; b65 = (unbox_unit ()) } in
  mark_test_run 52;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 52 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*****************************************)
  (*   t67 = { #{ int64x2# }; int64x2# }   *)
  (*****************************************)
  let r = { a67 = #{ a66 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)) }; b67 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)) } in
  mark_test_run 53;
  let test = Int.equal (Obj.size (Obj.repr r)) 4 in
  if not test then failwithf "test 53 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************************************)
  (*   t70 = { #{ int64x2#; string }; #{ int64; float# } }   *)
  (***********************************************************)
  let r = { a70 = #{ a68 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b68 = "2" }; b70 = #{ a69 = 3L; b69 = #4. } } in
  mark_test_run 54;
  let test = Int.equal (Obj.size (Obj.repr r)) 5 in
  if not test then failwithf "test 54 failed";

  ()
;;
let () = to_run ();;

for i = 1 to 54 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
