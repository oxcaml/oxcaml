(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 modules = "idx_repr.ml stubs.c";
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
type unit_u : void mod everything
external unbox_unit : unit -> unit_u = "%unbox_unit"
external globalize : local_ 'a -> 'a = "%obj_dup";;
let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any mod separable) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any mod separable) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = #{ a0 : int; b0 : int; c0 : int32# } (* #{ int; int; int32# } *)
type t1 = #{ a1 : int; b1 : int64 } (* #{ int; int64 } *)
type t2 = #{ a2 : int; b2 : int32# } (* #{ int; int32# } *)
type t3 = #{ a3 : int } (* #{ int } *)
type t4 = #{ a4 : int; b4 : t3 } (* #{ int; #{ int } } *)
type t5 = #{ a5 : int32# } (* #{ int32# } *)
type t6 = #{ a6 : int; b6 : t5 } (* #{ int; #{ int32# } } *)
type t7 = #{ a7 : int32#; b7 : int32# } (* #{ int32#; int32# } *)
type t8 = #{ a8 : int; b8 : t7 } (* #{ int; #{ int32#; int32# } } *)
type t9 = #{ a9 : int64; b9 : int64 } (* #{ int64; int64 } *)
type v10 = C10_0 of unit_u (* (| unit_u) *)
type t11 = #{ a11 : int64; b11 : v10 } (* #{ int64; (| unit_u) } *)
type t12 = #{ a12 : int64#; b12 : nativeint# } (* #{ int64#; nativeint# } *)
type t13 = #{ a13 : int32#; b13 : int32#; c13 : int32# } (* #{ int32#; int32#; int32# } *)
type t14 = #{ a14 : nativeint# } (* #{ nativeint# } *)
type t15 = #{ a15 : v10 } (* #{ (| unit_u) } *)
type t16 = #{ a16 : t3; b16 : int } (* #{ #{ int }; int } *)
type t17 = #{ a17 : string } (* #{ string } *)
type t18 = #{ a18 : t17; b18 : string } (* #{ #{ string }; string } *)

let to_run () =
  (**************)
  (*   int64#   *)
  (**************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (int64# array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (int64# array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1 failed";
  );

  (**************)
  (*   int32#   *)
  (**************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (int32# array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (int32# array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 2;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 2 failed";
  );

  (**********************************)
  (*   t0 = #{ int; int; int32# }   *)
  (**********************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t0 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t0 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 3;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 3 failed";
  );
  (* Deepening to (.(i).#a0) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t0 array, _) idx_mut = (.(i).#a0) in
    (* from (.(i)) *)
    let shallow : (t0 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a0) in
    mark_test_run 4;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 4 failed";
    (* from (.(i).#a0) *)
    let shallow : (t0 array, _) idx_mut = (.(i).#a0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 5;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 5 failed";
  );
  (* Deepening to (.(i).#b0) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t0 array, _) idx_mut = (.(i).#b0) in
    (* from (.(i)) *)
    let shallow : (t0 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b0) in
    mark_test_run 6;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 6 failed";
    (* from (.(i).#b0) *)
    let shallow : (t0 array, _) idx_mut = (.(i).#b0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 7;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 7 failed";
  );
  (* Deepening to (.(i).#c0) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t0 array, _) idx_mut = (.(i).#c0) in
    (* from (.(i)) *)
    let shallow : (t0 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c0) in
    mark_test_run 8;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 8 failed";
    (* from (.(i).#c0) *)
    let shallow : (t0 array, _) idx_mut = (.(i).#c0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 9;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 9 failed";
  );

  (****************************)
  (*   t1 = #{ int; int64 }   *)
  (****************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t1 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t1 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 10;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 10 failed";
  );
  (* Deepening to (.(i).#a1) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t1 array, _) idx_mut = (.(i).#a1) in
    (* from (.(i)) *)
    let shallow : (t1 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a1) in
    mark_test_run 11;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 11 failed";
    (* from (.(i).#a1) *)
    let shallow : (t1 array, _) idx_mut = (.(i).#a1) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 12;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 12 failed";
  );
  (* Deepening to (.(i).#b1) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t1 array, _) idx_mut = (.(i).#b1) in
    (* from (.(i)) *)
    let shallow : (t1 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b1) in
    mark_test_run 13;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 13 failed";
    (* from (.(i).#b1) *)
    let shallow : (t1 array, _) idx_mut = (.(i).#b1) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 14;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 14 failed";
  );

  (*****************************)
  (*   t2 = #{ int; int32# }   *)
  (*****************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t2 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t2 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 15;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 15 failed";
  );
  (* Deepening to (.(i).#a2) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t2 array, _) idx_mut = (.(i).#a2) in
    (* from (.(i)) *)
    let shallow : (t2 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a2) in
    mark_test_run 16;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 16 failed";
    (* from (.(i).#a2) *)
    let shallow : (t2 array, _) idx_mut = (.(i).#a2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 17;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 17 failed";
  );
  (* Deepening to (.(i).#b2) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t2 array, _) idx_mut = (.(i).#b2) in
    (* from (.(i)) *)
    let shallow : (t2 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b2) in
    mark_test_run 18;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 18 failed";
    (* from (.(i).#b2) *)
    let shallow : (t2 array, _) idx_mut = (.(i).#b2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 19;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 19 failed";
  );

  (*******************************)
  (*   t4 = #{ int; #{ int } }   *)
  (*******************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t4 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t4 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 20;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 20 failed";
  );
  (* Deepening to (.(i).#a4) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t4 array, _) idx_mut = (.(i).#a4) in
    (* from (.(i)) *)
    let shallow : (t4 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a4) in
    mark_test_run 21;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 21 failed";
    (* from (.(i).#a4) *)
    let shallow : (t4 array, _) idx_mut = (.(i).#a4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 22;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 22 failed";
  );
  (* Deepening to (.(i).#b4) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t4 array, _) idx_mut = (.(i).#b4) in
    (* from (.(i)) *)
    let shallow : (t4 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b4) in
    mark_test_run 23;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 23 failed";
    (* from (.(i).#b4) *)
    let shallow : (t4 array, _) idx_mut = (.(i).#b4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 24;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 24 failed";
  );
  (* Deepening to (.(i).#b4.#a3) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t4 array, _) idx_mut = (.(i).#b4.#a3) in
    (* from (.(i)) *)
    let shallow : (t4 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b4.#a3) in
    mark_test_run 25;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 25 failed";
    (* from (.(i).#b4) *)
    let shallow : (t4 array, _) idx_mut = (.(i).#b4) in
    let deepened = (.idx_mut(shallow).#a3) in
    mark_test_run 26;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 26 failed";
    (* from (.(i).#b4.#a3) *)
    let shallow : (t4 array, _) idx_mut = (.(i).#b4.#a3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 27;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 27 failed";
  );

  (**********************************)
  (*   t6 = #{ int; #{ int32# } }   *)
  (**********************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t6 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t6 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 28;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 28 failed";
  );
  (* Deepening to (.(i).#a6) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t6 array, _) idx_mut = (.(i).#a6) in
    (* from (.(i)) *)
    let shallow : (t6 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 29;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 29 failed";
    (* from (.(i).#a6) *)
    let shallow : (t6 array, _) idx_mut = (.(i).#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 30;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 30 failed";
  );
  (* Deepening to (.(i).#b6) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t6 array, _) idx_mut = (.(i).#b6) in
    (* from (.(i)) *)
    let shallow : (t6 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b6) in
    mark_test_run 31;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 31 failed";
    (* from (.(i).#b6) *)
    let shallow : (t6 array, _) idx_mut = (.(i).#b6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 32;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 32 failed";
  );
  (* Deepening to (.(i).#b6.#a5) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t6 array, _) idx_mut = (.(i).#b6.#a5) in
    (* from (.(i)) *)
    let shallow : (t6 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b6.#a5) in
    mark_test_run 33;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 33 failed";
    (* from (.(i).#b6) *)
    let shallow : (t6 array, _) idx_mut = (.(i).#b6) in
    let deepened = (.idx_mut(shallow).#a5) in
    mark_test_run 34;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 34 failed";
    (* from (.(i).#b6.#a5) *)
    let shallow : (t6 array, _) idx_mut = (.(i).#b6.#a5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 35;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 35 failed";
  );

  (******************************************)
  (*   t8 = #{ int; #{ int32#; int32# } }   *)
  (******************************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t8 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t8 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 36;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 36 failed";
  );
  (* Deepening to (.(i).#a8) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t8 array, _) idx_mut = (.(i).#a8) in
    (* from (.(i)) *)
    let shallow : (t8 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a8) in
    mark_test_run 37;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 37 failed";
    (* from (.(i).#a8) *)
    let shallow : (t8 array, _) idx_mut = (.(i).#a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 38;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 38 failed";
  );
  (* Deepening to (.(i).#b8) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t8 array, _) idx_mut = (.(i).#b8) in
    (* from (.(i)) *)
    let shallow : (t8 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b8) in
    mark_test_run 39;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 39 failed";
    (* from (.(i).#b8) *)
    let shallow : (t8 array, _) idx_mut = (.(i).#b8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 40;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 40 failed";
  );
  (* Deepening to (.(i).#b8.#a7) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t8 array, _) idx_mut = (.(i).#b8.#a7) in
    (* from (.(i)) *)
    let shallow : (t8 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b8.#a7) in
    mark_test_run 41;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 41 failed";
    (* from (.(i).#b8) *)
    let shallow : (t8 array, _) idx_mut = (.(i).#b8) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 42;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 42 failed";
    (* from (.(i).#b8.#a7) *)
    let shallow : (t8 array, _) idx_mut = (.(i).#b8.#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 43;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 43 failed";
  );
  (* Deepening to (.(i).#b8.#b7) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t8 array, _) idx_mut = (.(i).#b8.#b7) in
    (* from (.(i)) *)
    let shallow : (t8 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b8.#b7) in
    mark_test_run 44;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 44 failed";
    (* from (.(i).#b8) *)
    let shallow : (t8 array, _) idx_mut = (.(i).#b8) in
    let deepened = (.idx_mut(shallow).#b7) in
    mark_test_run 45;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 45 failed";
    (* from (.(i).#b8.#b7) *)
    let shallow : (t8 array, _) idx_mut = (.(i).#b8.#b7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 46;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 46 failed";
  );

  (******************************)
  (*   t9 = #{ int64; int64 }   *)
  (******************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t9 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t9 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 47;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 47 failed";
  );
  (* Deepening to (.(i).#a9) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t9 array, _) idx_mut = (.(i).#a9) in
    (* from (.(i)) *)
    let shallow : (t9 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a9) in
    mark_test_run 48;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 48 failed";
    (* from (.(i).#a9) *)
    let shallow : (t9 array, _) idx_mut = (.(i).#a9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 49;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 49 failed";
  );
  (* Deepening to (.(i).#b9) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t9 array, _) idx_mut = (.(i).#b9) in
    (* from (.(i)) *)
    let shallow : (t9 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b9) in
    mark_test_run 50;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 50 failed";
    (* from (.(i).#b9) *)
    let shallow : (t9 array, _) idx_mut = (.(i).#b9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 51;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 51 failed";
  );

  (************************************)
  (*   t11 = #{ int64; (| unit_u) }   *)
  (************************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t11 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t11 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 52;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 52 failed";
  );
  (* Deepening to (.(i).#a11) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t11 array, _) idx_mut = (.(i).#a11) in
    (* from (.(i)) *)
    let shallow : (t11 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a11) in
    mark_test_run 53;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 53 failed";
    (* from (.(i).#a11) *)
    let shallow : (t11 array, _) idx_mut = (.(i).#a11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 54;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 54 failed";
  );
  (* Deepening to (.(i).#b11) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t11 array, _) idx_mut = (.(i).#b11) in
    (* from (.(i)) *)
    let shallow : (t11 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b11) in
    mark_test_run 55;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 55 failed";
    (* from (.(i).#b11) *)
    let shallow : (t11 array, _) idx_mut = (.(i).#b11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 56;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 56 failed";
  );

  (*************************************)
  (*   t12 = #{ int64#; nativeint# }   *)
  (*************************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t12 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t12 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 57;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 57 failed";
  );
  (* Deepening to (.(i).#a12) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t12 array, _) idx_mut = (.(i).#a12) in
    (* from (.(i)) *)
    let shallow : (t12 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a12) in
    mark_test_run 58;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 58 failed";
    (* from (.(i).#a12) *)
    let shallow : (t12 array, _) idx_mut = (.(i).#a12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 59;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 59 failed";
  );
  (* Deepening to (.(i).#b12) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t12 array, _) idx_mut = (.(i).#b12) in
    (* from (.(i)) *)
    let shallow : (t12 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b12) in
    mark_test_run 60;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 60 failed";
    (* from (.(i).#b12) *)
    let shallow : (t12 array, _) idx_mut = (.(i).#b12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 61;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 61 failed";
  );

  (********************************)
  (*   t7 = #{ int32#; int32# }   *)
  (********************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t7 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t7 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 62;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 62 failed";
  );
  (* Deepening to (.(i).#a7) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t7 array, _) idx_mut = (.(i).#a7) in
    (* from (.(i)) *)
    let shallow : (t7 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 63;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 63 failed";
    (* from (.(i).#a7) *)
    let shallow : (t7 array, _) idx_mut = (.(i).#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 64;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 64 failed";
  );
  (* Deepening to (.(i).#b7) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t7 array, _) idx_mut = (.(i).#b7) in
    (* from (.(i)) *)
    let shallow : (t7 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b7) in
    mark_test_run 65;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 65 failed";
    (* from (.(i).#b7) *)
    let shallow : (t7 array, _) idx_mut = (.(i).#b7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 66;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 66 failed";
  );

  (*****************************************)
  (*   t13 = #{ int32#; int32#; int32# }   *)
  (*****************************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t13 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t13 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 67;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 67 failed";
  );
  (* Deepening to (.(i).#a13) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t13 array, _) idx_mut = (.(i).#a13) in
    (* from (.(i)) *)
    let shallow : (t13 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a13) in
    mark_test_run 68;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 68 failed";
    (* from (.(i).#a13) *)
    let shallow : (t13 array, _) idx_mut = (.(i).#a13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 69;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 69 failed";
  );
  (* Deepening to (.(i).#b13) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t13 array, _) idx_mut = (.(i).#b13) in
    (* from (.(i)) *)
    let shallow : (t13 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b13) in
    mark_test_run 70;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 70 failed";
    (* from (.(i).#b13) *)
    let shallow : (t13 array, _) idx_mut = (.(i).#b13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 71;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 71 failed";
  );
  (* Deepening to (.(i).#c13) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t13 array, _) idx_mut = (.(i).#c13) in
    (* from (.(i)) *)
    let shallow : (t13 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c13) in
    mark_test_run 72;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 72 failed";
    (* from (.(i).#c13) *)
    let shallow : (t13 array, _) idx_mut = (.(i).#c13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 73;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 73 failed";
  );

  (*****************************)
  (*   t14 = #{ nativeint# }   *)
  (*****************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t14 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t14 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 74;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 74 failed";
  );
  (* Deepening to (.(i).#a14) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t14 array, _) idx_mut = (.(i).#a14) in
    (* from (.(i)) *)
    let shallow : (t14 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 75;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 75 failed";
    (* from (.(i).#a14) *)
    let shallow : (t14 array, _) idx_mut = (.(i).#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 76;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 76 failed";
  );

  (*****************************)
  (*   t15 = #{ (| unit_u) }   *)
  (*****************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t15 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t15 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 77;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 77 failed";
  );
  (* Deepening to (.(i).#a15) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t15 array, _) idx_mut = (.(i).#a15) in
    (* from (.(i)) *)
    let shallow : (t15 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a15) in
    mark_test_run 78;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 78 failed";
    (* from (.(i).#a15) *)
    let shallow : (t15 array, _) idx_mut = (.(i).#a15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 79;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 79 failed";
  );

  (********************************)
  (*   t16 = #{ #{ int }; int }   *)
  (********************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t16 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t16 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 80;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 80 failed";
  );
  (* Deepening to (.(i).#a16) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t16 array, _) idx_mut = (.(i).#a16) in
    (* from (.(i)) *)
    let shallow : (t16 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 81;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 81 failed";
    (* from (.(i).#a16) *)
    let shallow : (t16 array, _) idx_mut = (.(i).#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 82;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 82 failed";
  );
  (* Deepening to (.(i).#b16) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t16 array, _) idx_mut = (.(i).#b16) in
    (* from (.(i)) *)
    let shallow : (t16 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 83;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 83 failed";
    (* from (.(i).#b16) *)
    let shallow : (t16 array, _) idx_mut = (.(i).#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 84;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 84 failed";
  );
  (* Deepening to (.(i).#a16.#a3) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t16 array, _) idx_mut = (.(i).#a16.#a3) in
    (* from (.(i)) *)
    let shallow : (t16 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a16.#a3) in
    mark_test_run 85;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 85 failed";
    (* from (.(i).#a16) *)
    let shallow : (t16 array, _) idx_mut = (.(i).#a16) in
    let deepened = (.idx_mut(shallow).#a3) in
    mark_test_run 86;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 86 failed";
    (* from (.(i).#a16.#a3) *)
    let shallow : (t16 array, _) idx_mut = (.(i).#a16.#a3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 87;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 87 failed";
  );

  (**************************************)
  (*   t18 = #{ #{ string }; string }   *)
  (**************************************)
  (* Deepening to (.(i)) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t18 array, _) idx_mut = (.(i)) in
    (* from (.(i)) *)
    let shallow : (t18 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 88;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 88 failed";
  );
  (* Deepening to (.(i).#a18) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t18 array, _) idx_mut = (.(i).#a18) in
    (* from (.(i)) *)
    let shallow : (t18 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a18) in
    mark_test_run 89;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 89 failed";
    (* from (.(i).#a18) *)
    let shallow : (t18 array, _) idx_mut = (.(i).#a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 90;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 90 failed";
  );
  (* Deepening to (.(i).#b18) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t18 array, _) idx_mut = (.(i).#b18) in
    (* from (.(i)) *)
    let shallow : (t18 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b18) in
    mark_test_run 91;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 91 failed";
    (* from (.(i).#b18) *)
    let shallow : (t18 array, _) idx_mut = (.(i).#b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 92;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 92 failed";
  );
  (* Deepening to (.(i).#a18.#a17) *)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t18 array, _) idx_mut = (.(i).#a18.#a17) in
    (* from (.(i)) *)
    let shallow : (t18 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a18.#a17) in
    mark_test_run 93;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 93 failed";
    (* from (.(i).#a18) *)
    let shallow : (t18 array, _) idx_mut = (.(i).#a18) in
    let deepened = (.idx_mut(shallow).#a17) in
    mark_test_run 94;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 94 failed";
    (* from (.(i).#a18.#a17) *)
    let shallow : (t18 array, _) idx_mut = (.(i).#a18.#a17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 95;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 95 failed";
  );

  ()
;;
let () = to_run ();;

for i = 1 to 95 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
