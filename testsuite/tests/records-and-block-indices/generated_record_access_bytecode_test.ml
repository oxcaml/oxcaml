(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 modules = "idx_repr.ml stubs.c";
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
type unit_u : void mod everything
external unbox_unit : unit -> unit_u = "%unbox_unit"
external globalize : local_ 'a -> 'a = "%obj_dup";;
let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any mod separable) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any mod separable) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int; mutable b0 : int } (* { int; int } *)
type t1 = { mutable a1 : int; mutable b1 : int64 } (* { int; int64 } *)
type t2 = { mutable a2 : int; mutable b2 : float } (* { int; float } *)
type t3 = #{ a3 : int; b3 : int } (* #{ int; int } *)
type t4 = { mutable a4 : int; mutable b4 : t3 } (* { int; #{ int; int } } *)
type t5 = #{ a5 : int32#; b5 : int32# } (* #{ int32#; int32# } *)
type t6 = { mutable a6 : int; mutable b6 : t5 } (* { int; #{ int32#; int32# } } *)
type t7 = #{ a7 : float } (* #{ float } *)
type t8 = { mutable a8 : int; mutable b8 : t7 } (* { int; #{ float } } *)
type t9 = { mutable a9 : int64; mutable b9 : int64 } (* { int64; int64 } *)
type t10 = { mutable a10 : int64#; mutable b10 : int } (* { int64#; int } *)
type t11 = { mutable a11 : int64#; mutable b11 : nativeint# } (* { int64#; nativeint# } *)
type t12 = { mutable a12 : int32# } (* { int32# } *)
type t13 = { mutable a13 : int32#; mutable b13 : int } (* { int32#; int } *)
type t14 = { mutable a14 : int32#; mutable b14 : int64 } (* { int32#; int64 } *)
type t15 = { mutable a15 : int32#; mutable b15 : int32#; mutable c15 : int32# } (* { int32#; int32#; int32# } *)
type t16 = { mutable a16 : int32#; mutable b16 : float } (* { int32#; float } *)
type t17 = #{ a17 : int32# } (* #{ int32# } *)
type t18 = { mutable a18 : int32#; mutable b18 : t17 } (* { int32#; #{ int32# } } *)
type t19 = { mutable a19 : nativeint# } (* { nativeint# } *)
type t20 = { mutable a20 : nativeint#; mutable b20 : int } (* { nativeint#; int } *)
type t21 = { mutable a21 : nativeint#; mutable b21 : int64# } (* { nativeint#; int64# } *)
type t22 = { mutable a22 : nativeint#; mutable b22 : nativeint# } (* { nativeint#; nativeint# } *)
type t23 = { mutable a23 : float; mutable b23 : int } (* { float; int } *)
type t24 = { mutable a24 : float; mutable b24 : float; mutable c24 : int } (* { float; float; int } *)
type t25 = #{ a25 : float; b25 : float# } (* #{ float; float# } *)
type t26 = { mutable a26 : float; mutable b26 : t25 } (* { float; #{ float; float# } } *)
type t27 = #{ a27 : float#; b27 : float# } (* #{ float#; float# } *)
type t28 = { mutable a28 : float; mutable b28 : t27 } (* { float; #{ float#; float# } } *)
type t29 = { mutable a29 : float#; mutable b29 : float } (* { float#; float } *)
type t30 = #{ a30 : float; b30 : float } (* #{ float; float } *)
type t31 = { mutable a31 : float#; mutable b31 : t30 } (* { float#; #{ float; float } } *)
type t32 = { mutable a32 : string; mutable b32 : string } (* { string; string } *)
type t33 = { mutable a33 : t3 } (* { #{ int; int } } *)
type t34 = { mutable a34 : t3; mutable b34 : int } (* { #{ int; int }; int } *)
type t35 = { mutable a35 : t3; mutable b35 : int32# } (* { #{ int; int }; int32# } *)
type t36 = { mutable a36 : t3; mutable b36 : float } (* { #{ int; int }; float } *)
type t37 = #{ a37 : int; b37 : int32# } (* #{ int; int32# } *)
type t38 = { mutable a38 : t37; mutable b38 : int } (* { #{ int; int32# }; int } *)
type t39 = #{ a39 : int64; b39 : int64# } (* #{ int64; int64# } *)
type t40 = #{ a40 : int64#; b40 : float# } (* #{ int64#; float# } *)
type t41 = { mutable a41 : t39; mutable b41 : t40 } (* { #{ int64; int64# }; #{ int64#; float# } } *)
type t42 = #{ a42 : int64; b42 : string } (* #{ int64; string } *)
type t43 = #{ a43 : int64#; b43 : string } (* #{ int64#; string } *)
type t44 = { mutable a44 : t42; mutable b44 : t43 } (* { #{ int64; string }; #{ int64#; string } } *)
type t45 = { mutable a45 : t17 } (* { #{ int32# } } *)
type t46 = #{ a46 : int32#; b46 : int } (* #{ int32#; int } *)
type t47 = { mutable a47 : t46; mutable b47 : int32# } (* { #{ int32#; int }; int32# } *)
type t48 = { mutable a48 : t7; mutable b48 : int } (* { #{ float }; int } *)
type t49 = { mutable a49 : t7; mutable b49 : float } (* { #{ float }; float } *)
type t50 = { mutable a50 : t30 } (* { #{ float; float } } *)
type t51 = { mutable a51 : t30; mutable b51 : int } (* { #{ float; float }; int } *)
type t52 = #{ a52 : float# } (* #{ float# } *)
type t53 = { mutable a53 : t52; mutable b53 : float } (* { #{ float# }; float } *)
type t54 = #{ a54 : float#; b54 : float } (* #{ float#; float } *)
type t55 = { mutable a55 : t54 } (* { #{ float#; float } } *)
type t56 = #{ a56 : float32#; b56 : int64# } (* #{ float32#; int64# } *)
type t57 = #{ a57 : string; b57 : int64# } (* #{ string; int64# } *)
type t58 = { mutable a58 : t56; mutable b58 : t57 } (* { #{ float32#; int64# }; #{ string; int64# } } *)
type t59 = #{ a59 : string } (* #{ string } *)
type t60 = { mutable a60 : t59 } (* { #{ string } } *)
type t61 = #{ a61 : string; b61 : string } (* #{ string; string } *)
type t62 = { mutable a62 : t61 } (* { #{ string; string } } *)
type t63 = { mutable a63 : t61; mutable b63 : string } (* { #{ string; string }; string } *)

let to_run () =
  (*************************)
  (*   t0 = { int; int }   *)
  (*************************)
  let r = { a0 = 0; b0 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a0 *)
  let actual = r.a0 in
  let expected = 0 in
  mark_test_run 1;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1 failed";
  (* Paths of depth 1 *)
  (* .b0 *)
  let actual = r.b0 in
  let expected = 1 in
  mark_test_run 2;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a0 = a01; b0 = b01 } { a0 = a02; b0 = b02 } -> (fun a b -> Int.equal a b) a01 a02 && (fun a b -> Int.equal a b) b01 b02) in
  let next_r = { a0 = 100; b0 = 101 } in
  let r_expected = { a0 = 0; b0 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a0 *)
  r.a0 <- next_r.a0;
  let r_expected = { r_expected with a0 = next_r.a0 } in
  mark_test_run 3;
  let test = eq r r_expected in
  if not test then failwithf "test 3 failed";
  Gc.compact ();
  (* .b0 *)
  r.b0 <- next_r.b0;
  let r_expected = { r_expected with b0 = next_r.b0 } in
  mark_test_run 4;
  let test = eq r r_expected in
  if not test then failwithf "test 4 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a0; b0 } = r in
  let expected_a0 = 100 in
  mark_test_run 5;
  let test = (fun a b -> Int.equal a b) expected_a0 a0 in
  if not test then failwithf "test 5 failed";
  let expected_b0 = 101 in
  mark_test_run 6;
  let test = (fun a b -> Int.equal a b) expected_b0 b0 in
  if not test then failwithf "test 6 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a0; b0 } = r in
  let expected_a0 = 100 in
  mark_test_run 7;
  let test = (fun a b -> Int.equal a b) expected_a0 a0 in
  if not test then failwithf "test 7 failed";
  let expected_b0 = 101 in
  mark_test_run 8;
  let test = (fun a b -> Int.equal a b) expected_b0 b0 in
  if not test then failwithf "test 8 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************)
  (*   t1 = { int; int64 }   *)
  (***************************)
  let r = { a1 = 0; b1 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a1 *)
  let actual = r.a1 in
  let expected = 0 in
  mark_test_run 9;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 9 failed";
  (* Paths of depth 1 *)
  (* .b1 *)
  let actual = r.b1 in
  let expected = 1L in
  mark_test_run 10;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 10 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a1 = a11; b1 = b11 } { a1 = a12; b1 = b12 } -> (fun a b -> Int.equal a b) a11 a12 && (fun a b -> Int64.equal (globalize a) (globalize b)) b11 b12) in
  let next_r = { a1 = 100; b1 = 101L } in
  let r_expected = { a1 = 0; b1 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a1 *)
  r.a1 <- next_r.a1;
  let r_expected = { r_expected with a1 = next_r.a1 } in
  mark_test_run 11;
  let test = eq r r_expected in
  if not test then failwithf "test 11 failed";
  Gc.compact ();
  (* .b1 *)
  r.b1 <- next_r.b1;
  let r_expected = { r_expected with b1 = next_r.b1 } in
  mark_test_run 12;
  let test = eq r r_expected in
  if not test then failwithf "test 12 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a1; b1 } = r in
  let expected_a1 = 100 in
  mark_test_run 13;
  let test = (fun a b -> Int.equal a b) expected_a1 a1 in
  if not test then failwithf "test 13 failed";
  let expected_b1 = 101L in
  mark_test_run 14;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b1 b1 in
  if not test then failwithf "test 14 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a1; b1 } = r in
  let expected_a1 = 100 in
  mark_test_run 15;
  let test = (fun a b -> Int.equal a b) expected_a1 a1 in
  if not test then failwithf "test 15 failed";
  let expected_b1 = 101L in
  mark_test_run 16;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b1 b1 in
  if not test then failwithf "test 16 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************)
  (*   t2 = { int; float }   *)
  (***************************)
  let r = { a2 = 0; b2 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a2 *)
  let actual = r.a2 in
  let expected = 0 in
  mark_test_run 17;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 17 failed";
  (* Paths of depth 1 *)
  (* .b2 *)
  let actual = r.b2 in
  let expected = 1. in
  mark_test_run 18;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 18 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a2 = a21; b2 = b21 } { a2 = a22; b2 = b22 } -> (fun a b -> Int.equal a b) a21 a22 && (fun a b -> Float.equal (globalize a) (globalize b)) b21 b22) in
  let next_r = { a2 = 100; b2 = 101. } in
  let r_expected = { a2 = 0; b2 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a2 *)
  r.a2 <- next_r.a2;
  let r_expected = { r_expected with a2 = next_r.a2 } in
  mark_test_run 19;
  let test = eq r r_expected in
  if not test then failwithf "test 19 failed";
  Gc.compact ();
  (* .b2 *)
  r.b2 <- next_r.b2;
  let r_expected = { r_expected with b2 = next_r.b2 } in
  mark_test_run 20;
  let test = eq r r_expected in
  if not test then failwithf "test 20 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a2; b2 } = r in
  let expected_a2 = 100 in
  mark_test_run 21;
  let test = (fun a b -> Int.equal a b) expected_a2 a2 in
  if not test then failwithf "test 21 failed";
  let expected_b2 = 101. in
  mark_test_run 22;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b2 b2 in
  if not test then failwithf "test 22 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a2; b2 } = r in
  let expected_a2 = 100 in
  mark_test_run 23;
  let test = (fun a b -> Int.equal a b) expected_a2 a2 in
  if not test then failwithf "test 23 failed";
  let expected_b2 = 101. in
  mark_test_run 24;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b2 b2 in
  if not test then failwithf "test 24 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t4 = { int; #{ int; int } }   *)
  (***********************************)
  let r = { a4 = 0; b4 = #{ a3 = 1; b3 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a4 *)
  let actual = r.a4 in
  let expected = 0 in
  mark_test_run 25;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 25 failed";
  (* Paths of depth 1 *)
  (* .b4 *)
  let actual = r.b4 in
  let expected = #{ a3 = 1; b3 = 2 } in
  mark_test_run 26;
  let test = (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) actual expected in
  if not test then failwithf "test 26 failed";
  (* Paths of depth 2 *)
  (* .b4.#a3 *)
  let actual = r.b4.#a3 in
  let expected = 1 in
  mark_test_run 27;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 27 failed";
  (* .b4.#b3 *)
  let actual = r.b4.#b3 in
  let expected = 2 in
  mark_test_run 28;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 28 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a4 = a41; b4 = b41 } { a4 = a42; b4 = b42 } -> (fun a b -> Int.equal a b) a41 a42 && (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) b41 b42) in
  let next_r = { a4 = 100; b4 = #{ a3 = 101; b3 = 102 } } in
  let r_expected = { a4 = 0; b4 = #{ a3 = 1; b3 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a4 *)
  r.a4 <- next_r.a4;
  let r_expected = { r_expected with a4 = next_r.a4 } in
  mark_test_run 29;
  let test = eq r r_expected in
  if not test then failwithf "test 29 failed";
  Gc.compact ();
  (* .b4 *)
  r.b4 <- next_r.b4;
  let r_expected = { r_expected with b4 = next_r.b4 } in
  mark_test_run 30;
  let test = eq r r_expected in
  if not test then failwithf "test 30 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a4; b4 = #{ a3; b3 } } = r in
  let expected_a4 = 100 in
  mark_test_run 31;
  let test = (fun a b -> Int.equal a b) expected_a4 a4 in
  if not test then failwithf "test 31 failed";
  let expected_a3 = 101 in
  mark_test_run 32;
  let test = (fun a b -> Int.equal a b) expected_a3 a3 in
  if not test then failwithf "test 32 failed";
  let expected_b3 = 102 in
  mark_test_run 33;
  let test = (fun a b -> Int.equal a b) expected_b3 b3 in
  if not test then failwithf "test 33 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a4; b4 } = r in
  let expected_a4 = 100 in
  mark_test_run 34;
  let test = (fun a b -> Int.equal a b) expected_a4 a4 in
  if not test then failwithf "test 34 failed";
  let expected_b4 = #{ a3 = 101; b3 = 102 } in
  mark_test_run 35;
  let test = (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) expected_b4 b4 in
  if not test then failwithf "test 35 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*****************************************)
  (*   t6 = { int; #{ int32#; int32# } }   *)
  (*****************************************)
  let r = { a6 = 0; b6 = #{ a5 = #1l; b5 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a6 *)
  let actual = r.a6 in
  let expected = 0 in
  mark_test_run 36;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 36 failed";
  (* Paths of depth 1 *)
  (* .b6 *)
  let actual = r.b6 in
  let expected = #{ a5 = #1l; b5 = #2l } in
  mark_test_run 37;
  let test = (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a51 a52 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b51 b52) actual expected in
  if not test then failwithf "test 37 failed";
  (* Paths of depth 2 *)
  (* .b6.#a5 *)
  let actual = r.b6.#a5 in
  let expected = #1l in
  mark_test_run 38;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 38 failed";
  (* .b6.#b5 *)
  let actual = r.b6.#b5 in
  let expected = #2l in
  mark_test_run 39;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 39 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a6 = a61; b6 = b61 } { a6 = a62; b6 = b62 } -> (fun a b -> Int.equal a b) a61 a62 && (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a51 a52 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b51 b52) b61 b62) in
  let next_r = { a6 = 100; b6 = #{ a5 = #101l; b5 = #102l } } in
  let r_expected = { a6 = 0; b6 = #{ a5 = #1l; b5 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a6 *)
  r.a6 <- next_r.a6;
  let r_expected = { r_expected with a6 = next_r.a6 } in
  mark_test_run 40;
  let test = eq r r_expected in
  if not test then failwithf "test 40 failed";
  Gc.compact ();
  (* .b6 *)
  r.b6 <- next_r.b6;
  let r_expected = { r_expected with b6 = next_r.b6 } in
  mark_test_run 41;
  let test = eq r r_expected in
  if not test then failwithf "test 41 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a6; b6 = #{ a5; b5 } } = r in
  let expected_a6 = 100 in
  mark_test_run 42;
  let test = (fun a b -> Int.equal a b) expected_a6 a6 in
  if not test then failwithf "test 42 failed";
  let expected_a5 = #101l in
  mark_test_run 43;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a5 a5 in
  if not test then failwithf "test 43 failed";
  let expected_b5 = #102l in
  mark_test_run 44;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b5 b5 in
  if not test then failwithf "test 44 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a6; b6 } = r in
  let expected_a6 = 100 in
  mark_test_run 45;
  let test = (fun a b -> Int.equal a b) expected_a6 a6 in
  if not test then failwithf "test 45 failed";
  let expected_b6 = #{ a5 = #101l; b5 = #102l } in
  mark_test_run 46;
  let test = (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a51 a52 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b51 b52) expected_b6 b6 in
  if not test then failwithf "test 46 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************)
  (*   t8 = { int; #{ float } }   *)
  (********************************)
  let r = { a8 = 0; b8 = #{ a7 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a8 *)
  let actual = r.a8 in
  let expected = 0 in
  mark_test_run 47;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 47 failed";
  (* Paths of depth 1 *)
  (* .b8 *)
  let actual = r.b8 in
  let expected = #{ a7 = 1. } in
  mark_test_run 48;
  let test = (fun #{ a7 = a71 } #{ a7 = a72 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a71 a72) actual expected in
  if not test then failwithf "test 48 failed";
  (* Paths of depth 2 *)
  (* .b8.#a7 *)
  let actual = r.b8.#a7 in
  let expected = 1. in
  mark_test_run 49;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 49 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a8 = a81; b8 = b81 } { a8 = a82; b8 = b82 } -> (fun a b -> Int.equal a b) a81 a82 && (fun #{ a7 = a71 } #{ a7 = a72 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a71 a72) b81 b82) in
  let next_r = { a8 = 100; b8 = #{ a7 = 101. } } in
  let r_expected = { a8 = 0; b8 = #{ a7 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a8 *)
  r.a8 <- next_r.a8;
  let r_expected = { r_expected with a8 = next_r.a8 } in
  mark_test_run 50;
  let test = eq r r_expected in
  if not test then failwithf "test 50 failed";
  Gc.compact ();
  (* .b8 *)
  r.b8 <- next_r.b8;
  let r_expected = { r_expected with b8 = next_r.b8 } in
  mark_test_run 51;
  let test = eq r r_expected in
  if not test then failwithf "test 51 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a8; b8 = #{ a7 } } = r in
  let expected_a8 = 100 in
  mark_test_run 52;
  let test = (fun a b -> Int.equal a b) expected_a8 a8 in
  if not test then failwithf "test 52 failed";
  let expected_a7 = 101. in
  mark_test_run 53;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a7 a7 in
  if not test then failwithf "test 53 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a8; b8 } = r in
  let expected_a8 = 100 in
  mark_test_run 54;
  let test = (fun a b -> Int.equal a b) expected_a8 a8 in
  if not test then failwithf "test 54 failed";
  let expected_b8 = #{ a7 = 101. } in
  mark_test_run 55;
  let test = (fun #{ a7 = a71 } #{ a7 = a72 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a71 a72) expected_b8 b8 in
  if not test then failwithf "test 55 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*****************************)
  (*   t9 = { int64; int64 }   *)
  (*****************************)
  let r = { a9 = 0L; b9 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a9 *)
  let actual = r.a9 in
  let expected = 0L in
  mark_test_run 56;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 56 failed";
  (* Paths of depth 1 *)
  (* .b9 *)
  let actual = r.b9 in
  let expected = 1L in
  mark_test_run 57;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 57 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a9 = a91; b9 = b91 } { a9 = a92; b9 = b92 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a91 a92 && (fun a b -> Int64.equal (globalize a) (globalize b)) b91 b92) in
  let next_r = { a9 = 100L; b9 = 101L } in
  let r_expected = { a9 = 0L; b9 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a9 *)
  r.a9 <- next_r.a9;
  let r_expected = { r_expected with a9 = next_r.a9 } in
  mark_test_run 58;
  let test = eq r r_expected in
  if not test then failwithf "test 58 failed";
  Gc.compact ();
  (* .b9 *)
  r.b9 <- next_r.b9;
  let r_expected = { r_expected with b9 = next_r.b9 } in
  mark_test_run 59;
  let test = eq r r_expected in
  if not test then failwithf "test 59 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a9; b9 } = r in
  let expected_a9 = 100L in
  mark_test_run 60;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a9 a9 in
  if not test then failwithf "test 60 failed";
  let expected_b9 = 101L in
  mark_test_run 61;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b9 b9 in
  if not test then failwithf "test 61 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a9; b9 } = r in
  let expected_a9 = 100L in
  mark_test_run 62;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a9 a9 in
  if not test then failwithf "test 62 failed";
  let expected_b9 = 101L in
  mark_test_run 63;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b9 b9 in
  if not test then failwithf "test 63 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*****************************)
  (*   t10 = { int64#; int }   *)
  (*****************************)
  let r = { a10 = #0L; b10 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a10 *)
  let actual = r.a10 in
  let expected = #0L in
  mark_test_run 64;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 64 failed";
  (* Paths of depth 1 *)
  (* .b10 *)
  let actual = r.b10 in
  let expected = 1 in
  mark_test_run 65;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 65 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a10 = a101; b10 = b101 } { a10 = a102; b10 = b102 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a101 a102 && (fun a b -> Int.equal a b) b101 b102) in
  let next_r = { a10 = #100L; b10 = 101 } in
  let r_expected = { a10 = #0L; b10 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a10 *)
  r.a10 <- next_r.a10;
  let r_expected = { r_expected with a10 = next_r.a10 } in
  mark_test_run 66;
  let test = eq r r_expected in
  if not test then failwithf "test 66 failed";
  Gc.compact ();
  (* .b10 *)
  r.b10 <- next_r.b10;
  let r_expected = { r_expected with b10 = next_r.b10 } in
  mark_test_run 67;
  let test = eq r r_expected in
  if not test then failwithf "test 67 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a10; b10 } = r in
  let expected_a10 = #100L in
  mark_test_run 68;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a10 a10 in
  if not test then failwithf "test 68 failed";
  let expected_b10 = 101 in
  mark_test_run 69;
  let test = (fun a b -> Int.equal a b) expected_b10 b10 in
  if not test then failwithf "test 69 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a10; b10 } = r in
  let expected_a10 = #100L in
  mark_test_run 70;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a10 a10 in
  if not test then failwithf "test 70 failed";
  let expected_b10 = 101 in
  mark_test_run 71;
  let test = (fun a b -> Int.equal a b) expected_b10 b10 in
  if not test then failwithf "test 71 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t11 = { int64#; nativeint# }   *)
  (************************************)
  let r = { a11 = #0L; b11 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a11 *)
  let actual = r.a11 in
  let expected = #0L in
  mark_test_run 72;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 72 failed";
  (* Paths of depth 1 *)
  (* .b11 *)
  let actual = r.b11 in
  let expected = #1n in
  mark_test_run 73;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 73 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a11 = a111; b11 = b111 } { a11 = a112; b11 = b112 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a111 a112 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b111 b112) in
  let next_r = { a11 = #100L; b11 = #101n } in
  let r_expected = { a11 = #0L; b11 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a11 *)
  r.a11 <- next_r.a11;
  let r_expected = { r_expected with a11 = next_r.a11 } in
  mark_test_run 74;
  let test = eq r r_expected in
  if not test then failwithf "test 74 failed";
  Gc.compact ();
  (* .b11 *)
  r.b11 <- next_r.b11;
  let r_expected = { r_expected with b11 = next_r.b11 } in
  mark_test_run 75;
  let test = eq r r_expected in
  if not test then failwithf "test 75 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a11; b11 } = r in
  let expected_a11 = #100L in
  mark_test_run 76;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a11 a11 in
  if not test then failwithf "test 76 failed";
  let expected_b11 = #101n in
  mark_test_run 77;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b11 b11 in
  if not test then failwithf "test 77 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a11; b11 } = r in
  let expected_a11 = #100L in
  mark_test_run 78;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a11 a11 in
  if not test then failwithf "test 78 failed";
  let expected_b11 = #101n in
  mark_test_run 79;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b11 b11 in
  if not test then failwithf "test 79 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************)
  (*   t12 = { int32# }   *)
  (************************)
  let r = { a12 = #0l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a12 *)
  let actual = r.a12 in
  let expected = #0l in
  mark_test_run 80;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 80 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a12 = a121 } { a12 = a122 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a121 a122) in
  let next_r = { a12 = #100l } in
  let r_expected = { a12 = #0l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a12 *)
  r.a12 <- next_r.a12;
  let r_expected = { r_expected with a12 = next_r.a12 } in
  mark_test_run 81;
  let test = eq r r_expected in
  if not test then failwithf "test 81 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a12 } = r in
  let expected_a12 = #100l in
  mark_test_run 82;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a12 a12 in
  if not test then failwithf "test 82 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a12 } = r in
  let expected_a12 = #100l in
  mark_test_run 83;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a12 a12 in
  if not test then failwithf "test 83 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*****************************)
  (*   t13 = { int32#; int }   *)
  (*****************************)
  let r = { a13 = #0l; b13 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a13 *)
  let actual = r.a13 in
  let expected = #0l in
  mark_test_run 84;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 84 failed";
  (* Paths of depth 1 *)
  (* .b13 *)
  let actual = r.b13 in
  let expected = 1 in
  mark_test_run 85;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 85 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a13 = a131; b13 = b131 } { a13 = a132; b13 = b132 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a131 a132 && (fun a b -> Int.equal a b) b131 b132) in
  let next_r = { a13 = #100l; b13 = 101 } in
  let r_expected = { a13 = #0l; b13 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a13 *)
  r.a13 <- next_r.a13;
  let r_expected = { r_expected with a13 = next_r.a13 } in
  mark_test_run 86;
  let test = eq r r_expected in
  if not test then failwithf "test 86 failed";
  Gc.compact ();
  (* .b13 *)
  r.b13 <- next_r.b13;
  let r_expected = { r_expected with b13 = next_r.b13 } in
  mark_test_run 87;
  let test = eq r r_expected in
  if not test then failwithf "test 87 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a13; b13 } = r in
  let expected_a13 = #100l in
  mark_test_run 88;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a13 a13 in
  if not test then failwithf "test 88 failed";
  let expected_b13 = 101 in
  mark_test_run 89;
  let test = (fun a b -> Int.equal a b) expected_b13 b13 in
  if not test then failwithf "test 89 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a13; b13 } = r in
  let expected_a13 = #100l in
  mark_test_run 90;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a13 a13 in
  if not test then failwithf "test 90 failed";
  let expected_b13 = 101 in
  mark_test_run 91;
  let test = (fun a b -> Int.equal a b) expected_b13 b13 in
  if not test then failwithf "test 91 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t14 = { int32#; int64 }   *)
  (*******************************)
  let r = { a14 = #0l; b14 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a14 *)
  let actual = r.a14 in
  let expected = #0l in
  mark_test_run 92;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 92 failed";
  (* Paths of depth 1 *)
  (* .b14 *)
  let actual = r.b14 in
  let expected = 1L in
  mark_test_run 93;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 93 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a14 = a141; b14 = b141 } { a14 = a142; b14 = b142 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a141 a142 && (fun a b -> Int64.equal (globalize a) (globalize b)) b141 b142) in
  let next_r = { a14 = #100l; b14 = 101L } in
  let r_expected = { a14 = #0l; b14 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a14 *)
  r.a14 <- next_r.a14;
  let r_expected = { r_expected with a14 = next_r.a14 } in
  mark_test_run 94;
  let test = eq r r_expected in
  if not test then failwithf "test 94 failed";
  Gc.compact ();
  (* .b14 *)
  r.b14 <- next_r.b14;
  let r_expected = { r_expected with b14 = next_r.b14 } in
  mark_test_run 95;
  let test = eq r r_expected in
  if not test then failwithf "test 95 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a14; b14 } = r in
  let expected_a14 = #100l in
  mark_test_run 96;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a14 a14 in
  if not test then failwithf "test 96 failed";
  let expected_b14 = 101L in
  mark_test_run 97;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b14 b14 in
  if not test then failwithf "test 97 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a14; b14 } = r in
  let expected_a14 = #100l in
  mark_test_run 98;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a14 a14 in
  if not test then failwithf "test 98 failed";
  let expected_b14 = 101L in
  mark_test_run 99;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b14 b14 in
  if not test then failwithf "test 99 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t15 = { int32#; int32#; int32# }   *)
  (****************************************)
  let r = { a15 = #0l; b15 = #1l; c15 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a15 *)
  let actual = r.a15 in
  let expected = #0l in
  mark_test_run 100;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 100 failed";
  (* Paths of depth 1 *)
  (* .b15 *)
  let actual = r.b15 in
  let expected = #1l in
  mark_test_run 101;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 101 failed";
  (* Paths of depth 1 *)
  (* .c15 *)
  let actual = r.c15 in
  let expected = #2l in
  mark_test_run 102;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 102 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a15 = a151; b15 = b151; c15 = c151 } { a15 = a152; b15 = b152; c15 = c152 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a151 a152 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b151 b152 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c151 c152) in
  let next_r = { a15 = #100l; b15 = #101l; c15 = #102l } in
  let r_expected = { a15 = #0l; b15 = #1l; c15 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a15 *)
  r.a15 <- next_r.a15;
  let r_expected = { r_expected with a15 = next_r.a15 } in
  mark_test_run 103;
  let test = eq r r_expected in
  if not test then failwithf "test 103 failed";
  Gc.compact ();
  (* .b15 *)
  r.b15 <- next_r.b15;
  let r_expected = { r_expected with b15 = next_r.b15 } in
  mark_test_run 104;
  let test = eq r r_expected in
  if not test then failwithf "test 104 failed";
  Gc.compact ();
  (* .c15 *)
  r.c15 <- next_r.c15;
  let r_expected = { r_expected with c15 = next_r.c15 } in
  mark_test_run 105;
  let test = eq r r_expected in
  if not test then failwithf "test 105 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a15; b15; c15 } = r in
  let expected_a15 = #100l in
  mark_test_run 106;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a15 a15 in
  if not test then failwithf "test 106 failed";
  let expected_b15 = #101l in
  mark_test_run 107;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b15 b15 in
  if not test then failwithf "test 107 failed";
  let expected_c15 = #102l in
  mark_test_run 108;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c15 c15 in
  if not test then failwithf "test 108 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a15; b15; c15 } = r in
  let expected_a15 = #100l in
  mark_test_run 109;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a15 a15 in
  if not test then failwithf "test 109 failed";
  let expected_b15 = #101l in
  mark_test_run 110;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b15 b15 in
  if not test then failwithf "test 110 failed";
  let expected_c15 = #102l in
  mark_test_run 111;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c15 c15 in
  if not test then failwithf "test 111 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t16 = { int32#; float }   *)
  (*******************************)
  let r = { a16 = #0l; b16 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a16 *)
  let actual = r.a16 in
  let expected = #0l in
  mark_test_run 112;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 112 failed";
  (* Paths of depth 1 *)
  (* .b16 *)
  let actual = r.b16 in
  let expected = 1. in
  mark_test_run 113;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 113 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a16 = a161; b16 = b161 } { a16 = a162; b16 = b162 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a161 a162 && (fun a b -> Float.equal (globalize a) (globalize b)) b161 b162) in
  let next_r = { a16 = #100l; b16 = 101. } in
  let r_expected = { a16 = #0l; b16 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a16 *)
  r.a16 <- next_r.a16;
  let r_expected = { r_expected with a16 = next_r.a16 } in
  mark_test_run 114;
  let test = eq r r_expected in
  if not test then failwithf "test 114 failed";
  Gc.compact ();
  (* .b16 *)
  r.b16 <- next_r.b16;
  let r_expected = { r_expected with b16 = next_r.b16 } in
  mark_test_run 115;
  let test = eq r r_expected in
  if not test then failwithf "test 115 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a16; b16 } = r in
  let expected_a16 = #100l in
  mark_test_run 116;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a16 a16 in
  if not test then failwithf "test 116 failed";
  let expected_b16 = 101. in
  mark_test_run 117;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b16 b16 in
  if not test then failwithf "test 117 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a16; b16 } = r in
  let expected_a16 = #100l in
  mark_test_run 118;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a16 a16 in
  if not test then failwithf "test 118 failed";
  let expected_b16 = 101. in
  mark_test_run 119;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b16 b16 in
  if not test then failwithf "test 119 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t18 = { int32#; #{ int32# } }   *)
  (*************************************)
  let r = { a18 = #0l; b18 = #{ a17 = #1l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a18 *)
  let actual = r.a18 in
  let expected = #0l in
  mark_test_run 120;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 120 failed";
  (* Paths of depth 1 *)
  (* .b18 *)
  let actual = r.b18 in
  let expected = #{ a17 = #1l } in
  mark_test_run 121;
  let test = (fun #{ a17 = a171 } #{ a17 = a172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a171 a172) actual expected in
  if not test then failwithf "test 121 failed";
  (* Paths of depth 2 *)
  (* .b18.#a17 *)
  let actual = r.b18.#a17 in
  let expected = #1l in
  mark_test_run 122;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 122 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a18 = a181; b18 = b181 } { a18 = a182; b18 = b182 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a181 a182 && (fun #{ a17 = a171 } #{ a17 = a172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a171 a172) b181 b182) in
  let next_r = { a18 = #100l; b18 = #{ a17 = #101l } } in
  let r_expected = { a18 = #0l; b18 = #{ a17 = #1l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a18 *)
  r.a18 <- next_r.a18;
  let r_expected = { r_expected with a18 = next_r.a18 } in
  mark_test_run 123;
  let test = eq r r_expected in
  if not test then failwithf "test 123 failed";
  Gc.compact ();
  (* .b18 *)
  r.b18 <- next_r.b18;
  let r_expected = { r_expected with b18 = next_r.b18 } in
  mark_test_run 124;
  let test = eq r r_expected in
  if not test then failwithf "test 124 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a18; b18 = #{ a17 } } = r in
  let expected_a18 = #100l in
  mark_test_run 125;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a18 a18 in
  if not test then failwithf "test 125 failed";
  let expected_a17 = #101l in
  mark_test_run 126;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a17 a17 in
  if not test then failwithf "test 126 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a18; b18 } = r in
  let expected_a18 = #100l in
  mark_test_run 127;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a18 a18 in
  if not test then failwithf "test 127 failed";
  let expected_b18 = #{ a17 = #101l } in
  mark_test_run 128;
  let test = (fun #{ a17 = a171 } #{ a17 = a172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a171 a172) expected_b18 b18 in
  if not test then failwithf "test 128 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************)
  (*   t19 = { nativeint# }   *)
  (****************************)
  let r = { a19 = #0n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a19 *)
  let actual = r.a19 in
  let expected = #0n in
  mark_test_run 129;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 129 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a19 = a191 } { a19 = a192 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a191 a192) in
  let next_r = { a19 = #100n } in
  let r_expected = { a19 = #0n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a19 *)
  r.a19 <- next_r.a19;
  let r_expected = { r_expected with a19 = next_r.a19 } in
  mark_test_run 130;
  let test = eq r r_expected in
  if not test then failwithf "test 130 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a19 } = r in
  let expected_a19 = #100n in
  mark_test_run 131;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a19 a19 in
  if not test then failwithf "test 131 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a19 } = r in
  let expected_a19 = #100n in
  mark_test_run 132;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a19 a19 in
  if not test then failwithf "test 132 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************)
  (*   t20 = { nativeint#; int }   *)
  (*********************************)
  let r = { a20 = #0n; b20 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a20 *)
  let actual = r.a20 in
  let expected = #0n in
  mark_test_run 133;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 133 failed";
  (* Paths of depth 1 *)
  (* .b20 *)
  let actual = r.b20 in
  let expected = 1 in
  mark_test_run 134;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 134 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a20 = a201; b20 = b201 } { a20 = a202; b20 = b202 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a201 a202 && (fun a b -> Int.equal a b) b201 b202) in
  let next_r = { a20 = #100n; b20 = 101 } in
  let r_expected = { a20 = #0n; b20 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a20 *)
  r.a20 <- next_r.a20;
  let r_expected = { r_expected with a20 = next_r.a20 } in
  mark_test_run 135;
  let test = eq r r_expected in
  if not test then failwithf "test 135 failed";
  Gc.compact ();
  (* .b20 *)
  r.b20 <- next_r.b20;
  let r_expected = { r_expected with b20 = next_r.b20 } in
  mark_test_run 136;
  let test = eq r r_expected in
  if not test then failwithf "test 136 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a20; b20 } = r in
  let expected_a20 = #100n in
  mark_test_run 137;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a20 a20 in
  if not test then failwithf "test 137 failed";
  let expected_b20 = 101 in
  mark_test_run 138;
  let test = (fun a b -> Int.equal a b) expected_b20 b20 in
  if not test then failwithf "test 138 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a20; b20 } = r in
  let expected_a20 = #100n in
  mark_test_run 139;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a20 a20 in
  if not test then failwithf "test 139 failed";
  let expected_b20 = 101 in
  mark_test_run 140;
  let test = (fun a b -> Int.equal a b) expected_b20 b20 in
  if not test then failwithf "test 140 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t21 = { nativeint#; int64# }   *)
  (************************************)
  let r = { a21 = #0n; b21 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a21 *)
  let actual = r.a21 in
  let expected = #0n in
  mark_test_run 141;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 141 failed";
  (* Paths of depth 1 *)
  (* .b21 *)
  let actual = r.b21 in
  let expected = #1L in
  mark_test_run 142;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 142 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a21 = a211; b21 = b211 } { a21 = a212; b21 = b212 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a211 a212 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b211 b212) in
  let next_r = { a21 = #100n; b21 = #101L } in
  let r_expected = { a21 = #0n; b21 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a21 *)
  r.a21 <- next_r.a21;
  let r_expected = { r_expected with a21 = next_r.a21 } in
  mark_test_run 143;
  let test = eq r r_expected in
  if not test then failwithf "test 143 failed";
  Gc.compact ();
  (* .b21 *)
  r.b21 <- next_r.b21;
  let r_expected = { r_expected with b21 = next_r.b21 } in
  mark_test_run 144;
  let test = eq r r_expected in
  if not test then failwithf "test 144 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a21; b21 } = r in
  let expected_a21 = #100n in
  mark_test_run 145;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a21 a21 in
  if not test then failwithf "test 145 failed";
  let expected_b21 = #101L in
  mark_test_run 146;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b21 b21 in
  if not test then failwithf "test 146 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a21; b21 } = r in
  let expected_a21 = #100n in
  mark_test_run 147;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a21 a21 in
  if not test then failwithf "test 147 failed";
  let expected_b21 = #101L in
  mark_test_run 148;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b21 b21 in
  if not test then failwithf "test 148 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t22 = { nativeint#; nativeint# }   *)
  (****************************************)
  let r = { a22 = #0n; b22 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a22 *)
  let actual = r.a22 in
  let expected = #0n in
  mark_test_run 149;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 149 failed";
  (* Paths of depth 1 *)
  (* .b22 *)
  let actual = r.b22 in
  let expected = #1n in
  mark_test_run 150;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 150 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a22 = a221; b22 = b221 } { a22 = a222; b22 = b222 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a221 a222 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b221 b222) in
  let next_r = { a22 = #100n; b22 = #101n } in
  let r_expected = { a22 = #0n; b22 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a22 *)
  r.a22 <- next_r.a22;
  let r_expected = { r_expected with a22 = next_r.a22 } in
  mark_test_run 151;
  let test = eq r r_expected in
  if not test then failwithf "test 151 failed";
  Gc.compact ();
  (* .b22 *)
  r.b22 <- next_r.b22;
  let r_expected = { r_expected with b22 = next_r.b22 } in
  mark_test_run 152;
  let test = eq r r_expected in
  if not test then failwithf "test 152 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a22; b22 } = r in
  let expected_a22 = #100n in
  mark_test_run 153;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a22 a22 in
  if not test then failwithf "test 153 failed";
  let expected_b22 = #101n in
  mark_test_run 154;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b22 b22 in
  if not test then failwithf "test 154 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a22; b22 } = r in
  let expected_a22 = #100n in
  mark_test_run 155;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a22 a22 in
  if not test then failwithf "test 155 failed";
  let expected_b22 = #101n in
  mark_test_run 156;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b22 b22 in
  if not test then failwithf "test 156 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************)
  (*   t23 = { float; int }   *)
  (****************************)
  let r = { a23 = 0.; b23 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a23 *)
  let actual = r.a23 in
  let expected = 0. in
  mark_test_run 157;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 157 failed";
  (* Paths of depth 1 *)
  (* .b23 *)
  let actual = r.b23 in
  let expected = 1 in
  mark_test_run 158;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 158 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a23 = a231; b23 = b231 } { a23 = a232; b23 = b232 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a231 a232 && (fun a b -> Int.equal a b) b231 b232) in
  let next_r = { a23 = 100.; b23 = 101 } in
  let r_expected = { a23 = 0.; b23 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a23 *)
  r.a23 <- next_r.a23;
  let r_expected = { r_expected with a23 = next_r.a23 } in
  mark_test_run 159;
  let test = eq r r_expected in
  if not test then failwithf "test 159 failed";
  Gc.compact ();
  (* .b23 *)
  r.b23 <- next_r.b23;
  let r_expected = { r_expected with b23 = next_r.b23 } in
  mark_test_run 160;
  let test = eq r r_expected in
  if not test then failwithf "test 160 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a23; b23 } = r in
  let expected_a23 = 100. in
  mark_test_run 161;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a23 a23 in
  if not test then failwithf "test 161 failed";
  let expected_b23 = 101 in
  mark_test_run 162;
  let test = (fun a b -> Int.equal a b) expected_b23 b23 in
  if not test then failwithf "test 162 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a23; b23 } = r in
  let expected_a23 = 100. in
  mark_test_run 163;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a23 a23 in
  if not test then failwithf "test 163 failed";
  let expected_b23 = 101 in
  mark_test_run 164;
  let test = (fun a b -> Int.equal a b) expected_b23 b23 in
  if not test then failwithf "test 164 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t24 = { float; float; int }   *)
  (***********************************)
  let r = { a24 = 0.; b24 = 1.; c24 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a24 *)
  let actual = r.a24 in
  let expected = 0. in
  mark_test_run 165;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 165 failed";
  (* Paths of depth 1 *)
  (* .b24 *)
  let actual = r.b24 in
  let expected = 1. in
  mark_test_run 166;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 166 failed";
  (* Paths of depth 1 *)
  (* .c24 *)
  let actual = r.c24 in
  let expected = 2 in
  mark_test_run 167;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 167 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a24 = a241; b24 = b241; c24 = c241 } { a24 = a242; b24 = b242; c24 = c242 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a241 a242 && (fun a b -> Float.equal (globalize a) (globalize b)) b241 b242 && (fun a b -> Int.equal a b) c241 c242) in
  let next_r = { a24 = 100.; b24 = 101.; c24 = 102 } in
  let r_expected = { a24 = 0.; b24 = 1.; c24 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a24 *)
  r.a24 <- next_r.a24;
  let r_expected = { r_expected with a24 = next_r.a24 } in
  mark_test_run 168;
  let test = eq r r_expected in
  if not test then failwithf "test 168 failed";
  Gc.compact ();
  (* .b24 *)
  r.b24 <- next_r.b24;
  let r_expected = { r_expected with b24 = next_r.b24 } in
  mark_test_run 169;
  let test = eq r r_expected in
  if not test then failwithf "test 169 failed";
  Gc.compact ();
  (* .c24 *)
  r.c24 <- next_r.c24;
  let r_expected = { r_expected with c24 = next_r.c24 } in
  mark_test_run 170;
  let test = eq r r_expected in
  if not test then failwithf "test 170 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a24; b24; c24 } = r in
  let expected_a24 = 100. in
  mark_test_run 171;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a24 a24 in
  if not test then failwithf "test 171 failed";
  let expected_b24 = 101. in
  mark_test_run 172;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b24 b24 in
  if not test then failwithf "test 172 failed";
  let expected_c24 = 102 in
  mark_test_run 173;
  let test = (fun a b -> Int.equal a b) expected_c24 c24 in
  if not test then failwithf "test 173 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a24; b24; c24 } = r in
  let expected_a24 = 100. in
  mark_test_run 174;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a24 a24 in
  if not test then failwithf "test 174 failed";
  let expected_b24 = 101. in
  mark_test_run 175;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b24 b24 in
  if not test then failwithf "test 175 failed";
  let expected_c24 = 102 in
  mark_test_run 176;
  let test = (fun a b -> Int.equal a b) expected_c24 c24 in
  if not test then failwithf "test 176 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************************)
  (*   t26 = { float; #{ float; float# } }   *)
  (*******************************************)
  let r = { a26 = 0.; b26 = #{ a25 = 1.; b25 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a26 *)
  let actual = r.a26 in
  let expected = 0. in
  mark_test_run 177;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 177 failed";
  (* Paths of depth 1 *)
  (* .b26 *)
  let actual = r.b26 in
  let expected = #{ a25 = 1.; b25 = #2. } in
  mark_test_run 178;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a251 a252 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b251 b252) actual expected in
  if not test then failwithf "test 178 failed";
  (* Paths of depth 2 *)
  (* .b26.#a25 *)
  let actual = r.b26.#a25 in
  let expected = 1. in
  mark_test_run 179;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 179 failed";
  (* .b26.#b25 *)
  let actual = r.b26.#b25 in
  let expected = #2. in
  mark_test_run 180;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 180 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a26 = a261; b26 = b261 } { a26 = a262; b26 = b262 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a261 a262 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a251 a252 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b251 b252) b261 b262) in
  let next_r = { a26 = 100.; b26 = #{ a25 = 101.; b25 = #102. } } in
  let r_expected = { a26 = 0.; b26 = #{ a25 = 1.; b25 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a26 *)
  r.a26 <- next_r.a26;
  let r_expected = { r_expected with a26 = next_r.a26 } in
  mark_test_run 181;
  let test = eq r r_expected in
  if not test then failwithf "test 181 failed";
  Gc.compact ();
  (* .b26 *)
  r.b26 <- next_r.b26;
  let r_expected = { r_expected with b26 = next_r.b26 } in
  mark_test_run 182;
  let test = eq r r_expected in
  if not test then failwithf "test 182 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a26; b26 = #{ a25; b25 } } = r in
  let expected_a26 = 100. in
  mark_test_run 183;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a26 a26 in
  if not test then failwithf "test 183 failed";
  let expected_a25 = 101. in
  mark_test_run 184;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a25 a25 in
  if not test then failwithf "test 184 failed";
  let expected_b25 = #102. in
  mark_test_run 185;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b25 b25 in
  if not test then failwithf "test 185 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a26; b26 } = r in
  let expected_a26 = 100. in
  mark_test_run 186;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a26 a26 in
  if not test then failwithf "test 186 failed";
  let expected_b26 = #{ a25 = 101.; b25 = #102. } in
  mark_test_run 187;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a251 a252 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b251 b252) expected_b26 b26 in
  if not test then failwithf "test 187 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************************)
  (*   t28 = { float; #{ float#; float# } }   *)
  (********************************************)
  let r = { a28 = 0.; b28 = #{ a27 = #1.; b27 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a28 *)
  let actual = r.a28 in
  let expected = 0. in
  mark_test_run 188;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 188 failed";
  (* Paths of depth 1 *)
  (* .b28 *)
  let actual = r.b28 in
  let expected = #{ a27 = #1.; b27 = #2. } in
  mark_test_run 189;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a271 a272 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b271 b272) actual expected in
  if not test then failwithf "test 189 failed";
  (* Paths of depth 2 *)
  (* .b28.#a27 *)
  let actual = r.b28.#a27 in
  let expected = #1. in
  mark_test_run 190;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 190 failed";
  (* .b28.#b27 *)
  let actual = r.b28.#b27 in
  let expected = #2. in
  mark_test_run 191;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 191 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a28 = a281; b28 = b281 } { a28 = a282; b28 = b282 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a281 a282 && (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a271 a272 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b271 b272) b281 b282) in
  let next_r = { a28 = 100.; b28 = #{ a27 = #101.; b27 = #102. } } in
  let r_expected = { a28 = 0.; b28 = #{ a27 = #1.; b27 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a28 *)
  r.a28 <- next_r.a28;
  let r_expected = { r_expected with a28 = next_r.a28 } in
  mark_test_run 192;
  let test = eq r r_expected in
  if not test then failwithf "test 192 failed";
  Gc.compact ();
  (* .b28 *)
  r.b28 <- next_r.b28;
  let r_expected = { r_expected with b28 = next_r.b28 } in
  mark_test_run 193;
  let test = eq r r_expected in
  if not test then failwithf "test 193 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a28; b28 = #{ a27; b27 } } = r in
  let expected_a28 = 100. in
  mark_test_run 194;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a28 a28 in
  if not test then failwithf "test 194 failed";
  let expected_a27 = #101. in
  mark_test_run 195;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a27 a27 in
  if not test then failwithf "test 195 failed";
  let expected_b27 = #102. in
  mark_test_run 196;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b27 b27 in
  if not test then failwithf "test 196 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a28; b28 } = r in
  let expected_a28 = 100. in
  mark_test_run 197;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a28 a28 in
  if not test then failwithf "test 197 failed";
  let expected_b28 = #{ a27 = #101.; b27 = #102. } in
  mark_test_run 198;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a271 a272 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b271 b272) expected_b28 b28 in
  if not test then failwithf "test 198 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t29 = { float#; float }   *)
  (*******************************)
  let r = { a29 = #0.; b29 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a29 *)
  let actual = r.a29 in
  let expected = #0. in
  mark_test_run 199;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 199 failed";
  (* Paths of depth 1 *)
  (* .b29 *)
  let actual = r.b29 in
  let expected = 1. in
  mark_test_run 200;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 200 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a29 = a291; b29 = b291 } { a29 = a292; b29 = b292 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) in
  let next_r = { a29 = #100.; b29 = 101. } in
  let r_expected = { a29 = #0.; b29 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a29 *)
  r.a29 <- next_r.a29;
  let r_expected = { r_expected with a29 = next_r.a29 } in
  mark_test_run 201;
  let test = eq r r_expected in
  if not test then failwithf "test 201 failed";
  Gc.compact ();
  (* .b29 *)
  r.b29 <- next_r.b29;
  let r_expected = { r_expected with b29 = next_r.b29 } in
  mark_test_run 202;
  let test = eq r r_expected in
  if not test then failwithf "test 202 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a29; b29 } = r in
  let expected_a29 = #100. in
  mark_test_run 203;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a29 a29 in
  if not test then failwithf "test 203 failed";
  let expected_b29 = 101. in
  mark_test_run 204;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 204 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a29; b29 } = r in
  let expected_a29 = #100. in
  mark_test_run 205;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a29 a29 in
  if not test then failwithf "test 205 failed";
  let expected_b29 = 101. in
  mark_test_run 206;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 206 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************************)
  (*   t31 = { float#; #{ float; float } }   *)
  (*******************************************)
  let r = { a31 = #0.; b31 = #{ a30 = 1.; b30 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a31 *)
  let actual = r.a31 in
  let expected = #0. in
  mark_test_run 207;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 207 failed";
  (* Paths of depth 1 *)
  (* .b31 *)
  let actual = r.b31 in
  let expected = #{ a30 = 1.; b30 = 2. } in
  mark_test_run 208;
  let test = (fun #{ a30 = a301; b30 = b301 } #{ a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun a b -> Float.equal (globalize a) (globalize b)) b301 b302) actual expected in
  if not test then failwithf "test 208 failed";
  (* Paths of depth 2 *)
  (* .b31.#a30 *)
  let actual = r.b31.#a30 in
  let expected = 1. in
  mark_test_run 209;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 209 failed";
  (* .b31.#b30 *)
  let actual = r.b31.#b30 in
  let expected = 2. in
  mark_test_run 210;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 210 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a31 = a311; b31 = b311 } { a31 = a312; b31 = b312 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a311 a312 && (fun #{ a30 = a301; b30 = b301 } #{ a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun a b -> Float.equal (globalize a) (globalize b)) b301 b302) b311 b312) in
  let next_r = { a31 = #100.; b31 = #{ a30 = 101.; b30 = 102. } } in
  let r_expected = { a31 = #0.; b31 = #{ a30 = 1.; b30 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a31 *)
  r.a31 <- next_r.a31;
  let r_expected = { r_expected with a31 = next_r.a31 } in
  mark_test_run 211;
  let test = eq r r_expected in
  if not test then failwithf "test 211 failed";
  Gc.compact ();
  (* .b31 *)
  r.b31 <- next_r.b31;
  let r_expected = { r_expected with b31 = next_r.b31 } in
  mark_test_run 212;
  let test = eq r r_expected in
  if not test then failwithf "test 212 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a31; b31 = #{ a30; b30 } } = r in
  let expected_a31 = #100. in
  mark_test_run 213;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a31 a31 in
  if not test then failwithf "test 213 failed";
  let expected_a30 = 101. in
  mark_test_run 214;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a30 a30 in
  if not test then failwithf "test 214 failed";
  let expected_b30 = 102. in
  mark_test_run 215;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b30 b30 in
  if not test then failwithf "test 215 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a31; b31 } = r in
  let expected_a31 = #100. in
  mark_test_run 216;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a31 a31 in
  if not test then failwithf "test 216 failed";
  let expected_b31 = #{ a30 = 101.; b30 = 102. } in
  mark_test_run 217;
  let test = (fun #{ a30 = a301; b30 = b301 } #{ a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun a b -> Float.equal (globalize a) (globalize b)) b301 b302) expected_b31 b31 in
  if not test then failwithf "test 217 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************)
  (*   t32 = { string; string }   *)
  (********************************)
  let r = { a32 = "0"; b32 = "1" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a32 *)
  let actual = r.a32 in
  let expected = "0" in
  mark_test_run 218;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 218 failed";
  (* Paths of depth 1 *)
  (* .b32 *)
  let actual = r.b32 in
  let expected = "1" in
  mark_test_run 219;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 219 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a32 = a321; b32 = b321 } { a32 = a322; b32 = b322 } -> (fun a b -> String.equal (globalize a) (globalize b)) a321 a322 && (fun a b -> String.equal (globalize a) (globalize b)) b321 b322) in
  let next_r = { a32 = "100"; b32 = "101" } in
  let r_expected = { a32 = "0"; b32 = "1" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a32 *)
  r.a32 <- next_r.a32;
  let r_expected = { r_expected with a32 = next_r.a32 } in
  mark_test_run 220;
  let test = eq r r_expected in
  if not test then failwithf "test 220 failed";
  Gc.compact ();
  (* .b32 *)
  r.b32 <- next_r.b32;
  let r_expected = { r_expected with b32 = next_r.b32 } in
  mark_test_run 221;
  let test = eq r r_expected in
  if not test then failwithf "test 221 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a32; b32 } = r in
  let expected_a32 = "100" in
  mark_test_run 222;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a32 a32 in
  if not test then failwithf "test 222 failed";
  let expected_b32 = "101" in
  mark_test_run 223;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b32 b32 in
  if not test then failwithf "test 223 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a32; b32 } = r in
  let expected_a32 = "100" in
  mark_test_run 224;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a32 a32 in
  if not test then failwithf "test 224 failed";
  let expected_b32 = "101" in
  mark_test_run 225;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b32 b32 in
  if not test then failwithf "test 225 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t33 = { #{ int; int } }   *)
  (*******************************)
  let r = { a33 = #{ a3 = 0; b3 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a33 *)
  let actual = r.a33 in
  let expected = #{ a3 = 0; b3 = 1 } in
  mark_test_run 226;
  let test = (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) actual expected in
  if not test then failwithf "test 226 failed";
  (* Paths of depth 2 *)
  (* .a33.#a3 *)
  let actual = r.a33.#a3 in
  let expected = 0 in
  mark_test_run 227;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 227 failed";
  (* .a33.#b3 *)
  let actual = r.a33.#b3 in
  let expected = 1 in
  mark_test_run 228;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 228 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a33 = a331 } { a33 = a332 } -> (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) a331 a332) in
  let next_r = { a33 = #{ a3 = 100; b3 = 101 } } in
  let r_expected = { a33 = #{ a3 = 0; b3 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a33 *)
  r.a33 <- next_r.a33;
  let r_expected = { r_expected with a33 = next_r.a33 } in
  mark_test_run 229;
  let test = eq r r_expected in
  if not test then failwithf "test 229 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a33 = #{ a3; b3 } } = r in
  let expected_a3 = 100 in
  mark_test_run 230;
  let test = (fun a b -> Int.equal a b) expected_a3 a3 in
  if not test then failwithf "test 230 failed";
  let expected_b3 = 101 in
  mark_test_run 231;
  let test = (fun a b -> Int.equal a b) expected_b3 b3 in
  if not test then failwithf "test 231 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a33 } = r in
  let expected_a33 = #{ a3 = 100; b3 = 101 } in
  mark_test_run 232;
  let test = (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) expected_a33 a33 in
  if not test then failwithf "test 232 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t34 = { #{ int; int }; int }   *)
  (************************************)
  let r = { a34 = #{ a3 = 0; b3 = 1 }; b34 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a34 *)
  let actual = r.a34 in
  let expected = #{ a3 = 0; b3 = 1 } in
  mark_test_run 233;
  let test = (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) actual expected in
  if not test then failwithf "test 233 failed";
  (* Paths of depth 2 *)
  (* .a34.#a3 *)
  let actual = r.a34.#a3 in
  let expected = 0 in
  mark_test_run 234;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 234 failed";
  (* .a34.#b3 *)
  let actual = r.a34.#b3 in
  let expected = 1 in
  mark_test_run 235;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 235 failed";
  (* Paths of depth 1 *)
  (* .b34 *)
  let actual = r.b34 in
  let expected = 2 in
  mark_test_run 236;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 236 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a34 = a341; b34 = b341 } { a34 = a342; b34 = b342 } -> (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) a341 a342 && (fun a b -> Int.equal a b) b341 b342) in
  let next_r = { a34 = #{ a3 = 100; b3 = 101 }; b34 = 102 } in
  let r_expected = { a34 = #{ a3 = 0; b3 = 1 }; b34 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a34 *)
  r.a34 <- next_r.a34;
  let r_expected = { r_expected with a34 = next_r.a34 } in
  mark_test_run 237;
  let test = eq r r_expected in
  if not test then failwithf "test 237 failed";
  Gc.compact ();
  (* .b34 *)
  r.b34 <- next_r.b34;
  let r_expected = { r_expected with b34 = next_r.b34 } in
  mark_test_run 238;
  let test = eq r r_expected in
  if not test then failwithf "test 238 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a34 = #{ a3; b3 }; b34 } = r in
  let expected_a3 = 100 in
  mark_test_run 239;
  let test = (fun a b -> Int.equal a b) expected_a3 a3 in
  if not test then failwithf "test 239 failed";
  let expected_b3 = 101 in
  mark_test_run 240;
  let test = (fun a b -> Int.equal a b) expected_b3 b3 in
  if not test then failwithf "test 240 failed";
  let expected_b34 = 102 in
  mark_test_run 241;
  let test = (fun a b -> Int.equal a b) expected_b34 b34 in
  if not test then failwithf "test 241 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a34; b34 } = r in
  let expected_a34 = #{ a3 = 100; b3 = 101 } in
  mark_test_run 242;
  let test = (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) expected_a34 a34 in
  if not test then failwithf "test 242 failed";
  let expected_b34 = 102 in
  mark_test_run 243;
  let test = (fun a b -> Int.equal a b) expected_b34 b34 in
  if not test then failwithf "test 243 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************************)
  (*   t35 = { #{ int; int }; int32# }   *)
  (***************************************)
  let r = { a35 = #{ a3 = 0; b3 = 1 }; b35 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a35 *)
  let actual = r.a35 in
  let expected = #{ a3 = 0; b3 = 1 } in
  mark_test_run 244;
  let test = (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) actual expected in
  if not test then failwithf "test 244 failed";
  (* Paths of depth 2 *)
  (* .a35.#a3 *)
  let actual = r.a35.#a3 in
  let expected = 0 in
  mark_test_run 245;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 245 failed";
  (* .a35.#b3 *)
  let actual = r.a35.#b3 in
  let expected = 1 in
  mark_test_run 246;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 246 failed";
  (* Paths of depth 1 *)
  (* .b35 *)
  let actual = r.b35 in
  let expected = #2l in
  mark_test_run 247;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 247 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a35 = a351; b35 = b351 } { a35 = a352; b35 = b352 } -> (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) a351 a352 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b351 b352) in
  let next_r = { a35 = #{ a3 = 100; b3 = 101 }; b35 = #102l } in
  let r_expected = { a35 = #{ a3 = 0; b3 = 1 }; b35 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a35 *)
  r.a35 <- next_r.a35;
  let r_expected = { r_expected with a35 = next_r.a35 } in
  mark_test_run 248;
  let test = eq r r_expected in
  if not test then failwithf "test 248 failed";
  Gc.compact ();
  (* .b35 *)
  r.b35 <- next_r.b35;
  let r_expected = { r_expected with b35 = next_r.b35 } in
  mark_test_run 249;
  let test = eq r r_expected in
  if not test then failwithf "test 249 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a35 = #{ a3; b3 }; b35 } = r in
  let expected_a3 = 100 in
  mark_test_run 250;
  let test = (fun a b -> Int.equal a b) expected_a3 a3 in
  if not test then failwithf "test 250 failed";
  let expected_b3 = 101 in
  mark_test_run 251;
  let test = (fun a b -> Int.equal a b) expected_b3 b3 in
  if not test then failwithf "test 251 failed";
  let expected_b35 = #102l in
  mark_test_run 252;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b35 b35 in
  if not test then failwithf "test 252 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a35; b35 } = r in
  let expected_a35 = #{ a3 = 100; b3 = 101 } in
  mark_test_run 253;
  let test = (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) expected_a35 a35 in
  if not test then failwithf "test 253 failed";
  let expected_b35 = #102l in
  mark_test_run 254;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b35 b35 in
  if not test then failwithf "test 254 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (**************************************)
  (*   t36 = { #{ int; int }; float }   *)
  (**************************************)
  let r = { a36 = #{ a3 = 0; b3 = 1 }; b36 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a36 *)
  let actual = r.a36 in
  let expected = #{ a3 = 0; b3 = 1 } in
  mark_test_run 255;
  let test = (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) actual expected in
  if not test then failwithf "test 255 failed";
  (* Paths of depth 2 *)
  (* .a36.#a3 *)
  let actual = r.a36.#a3 in
  let expected = 0 in
  mark_test_run 256;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 256 failed";
  (* .a36.#b3 *)
  let actual = r.a36.#b3 in
  let expected = 1 in
  mark_test_run 257;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 257 failed";
  (* Paths of depth 1 *)
  (* .b36 *)
  let actual = r.b36 in
  let expected = 2. in
  mark_test_run 258;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 258 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a36 = a361; b36 = b361 } { a36 = a362; b36 = b362 } -> (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) a361 a362 && (fun a b -> Float.equal (globalize a) (globalize b)) b361 b362) in
  let next_r = { a36 = #{ a3 = 100; b3 = 101 }; b36 = 102. } in
  let r_expected = { a36 = #{ a3 = 0; b3 = 1 }; b36 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a36 *)
  r.a36 <- next_r.a36;
  let r_expected = { r_expected with a36 = next_r.a36 } in
  mark_test_run 259;
  let test = eq r r_expected in
  if not test then failwithf "test 259 failed";
  Gc.compact ();
  (* .b36 *)
  r.b36 <- next_r.b36;
  let r_expected = { r_expected with b36 = next_r.b36 } in
  mark_test_run 260;
  let test = eq r r_expected in
  if not test then failwithf "test 260 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a36 = #{ a3; b3 }; b36 } = r in
  let expected_a3 = 100 in
  mark_test_run 261;
  let test = (fun a b -> Int.equal a b) expected_a3 a3 in
  if not test then failwithf "test 261 failed";
  let expected_b3 = 101 in
  mark_test_run 262;
  let test = (fun a b -> Int.equal a b) expected_b3 b3 in
  if not test then failwithf "test 262 failed";
  let expected_b36 = 102. in
  mark_test_run 263;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b36 b36 in
  if not test then failwithf "test 263 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a36; b36 } = r in
  let expected_a36 = #{ a3 = 100; b3 = 101 } in
  mark_test_run 264;
  let test = (fun #{ a3 = a31; b3 = b31 } #{ a3 = a32; b3 = b32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32) expected_a36 a36 in
  if not test then failwithf "test 264 failed";
  let expected_b36 = 102. in
  mark_test_run 265;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b36 b36 in
  if not test then failwithf "test 265 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************************)
  (*   t38 = { #{ int; int32# }; int }   *)
  (***************************************)
  let r = { a38 = #{ a37 = 0; b37 = #1l }; b38 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a38 *)
  let actual = r.a38 in
  let expected = #{ a37 = 0; b37 = #1l } in
  mark_test_run 266;
  let test = (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int.equal a b) a371 a372 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b371 b372) actual expected in
  if not test then failwithf "test 266 failed";
  (* Paths of depth 2 *)
  (* .a38.#a37 *)
  let actual = r.a38.#a37 in
  let expected = 0 in
  mark_test_run 267;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 267 failed";
  (* .a38.#b37 *)
  let actual = r.a38.#b37 in
  let expected = #1l in
  mark_test_run 268;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 268 failed";
  (* Paths of depth 1 *)
  (* .b38 *)
  let actual = r.b38 in
  let expected = 2 in
  mark_test_run 269;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 269 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a38 = a381; b38 = b381 } { a38 = a382; b38 = b382 } -> (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int.equal a b) a371 a372 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b371 b372) a381 a382 && (fun a b -> Int.equal a b) b381 b382) in
  let next_r = { a38 = #{ a37 = 100; b37 = #101l }; b38 = 102 } in
  let r_expected = { a38 = #{ a37 = 0; b37 = #1l }; b38 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a38 *)
  r.a38 <- next_r.a38;
  let r_expected = { r_expected with a38 = next_r.a38 } in
  mark_test_run 270;
  let test = eq r r_expected in
  if not test then failwithf "test 270 failed";
  Gc.compact ();
  (* .b38 *)
  r.b38 <- next_r.b38;
  let r_expected = { r_expected with b38 = next_r.b38 } in
  mark_test_run 271;
  let test = eq r r_expected in
  if not test then failwithf "test 271 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a38 = #{ a37; b37 }; b38 } = r in
  let expected_a37 = 100 in
  mark_test_run 272;
  let test = (fun a b -> Int.equal a b) expected_a37 a37 in
  if not test then failwithf "test 272 failed";
  let expected_b37 = #101l in
  mark_test_run 273;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b37 b37 in
  if not test then failwithf "test 273 failed";
  let expected_b38 = 102 in
  mark_test_run 274;
  let test = (fun a b -> Int.equal a b) expected_b38 b38 in
  if not test then failwithf "test 274 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a38; b38 } = r in
  let expected_a38 = #{ a37 = 100; b37 = #101l } in
  mark_test_run 275;
  let test = (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int.equal a b) a371 a372 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b371 b372) expected_a38 a38 in
  if not test then failwithf "test 275 failed";
  let expected_b38 = 102 in
  mark_test_run 276;
  let test = (fun a b -> Int.equal a b) expected_b38 b38 in
  if not test then failwithf "test 276 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************************)
  (*   t41 = { #{ int64; int64# }; #{ int64#; float# } }   *)
  (*********************************************************)
  let r = { a41 = #{ a39 = 0L; b39 = #1L }; b41 = #{ a40 = #2L; b40 = #3. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a41 *)
  let actual = r.a41 in
  let expected = #{ a39 = 0L; b39 = #1L } in
  mark_test_run 277;
  let test = (fun #{ a39 = a391; b39 = b391 } #{ a39 = a392; b39 = b392 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a391 a392 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b391 b392) actual expected in
  if not test then failwithf "test 277 failed";
  (* Paths of depth 2 *)
  (* .a41.#a39 *)
  let actual = r.a41.#a39 in
  let expected = 0L in
  mark_test_run 278;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 278 failed";
  (* .a41.#b39 *)
  let actual = r.a41.#b39 in
  let expected = #1L in
  mark_test_run 279;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 279 failed";
  (* Paths of depth 1 *)
  (* .b41 *)
  let actual = r.b41 in
  let expected = #{ a40 = #2L; b40 = #3. } in
  mark_test_run 280;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a401 a402 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b401 b402) actual expected in
  if not test then failwithf "test 280 failed";
  (* Paths of depth 2 *)
  (* .b41.#a40 *)
  let actual = r.b41.#a40 in
  let expected = #2L in
  mark_test_run 281;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 281 failed";
  (* .b41.#b40 *)
  let actual = r.b41.#b40 in
  let expected = #3. in
  mark_test_run 282;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 282 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a41 = a411; b41 = b411 } { a41 = a412; b41 = b412 } -> (fun #{ a39 = a391; b39 = b391 } #{ a39 = a392; b39 = b392 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a391 a392 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b391 b392) a411 a412 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a401 a402 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b401 b402) b411 b412) in
  let next_r = { a41 = #{ a39 = 100L; b39 = #101L }; b41 = #{ a40 = #102L; b40 = #103. } } in
  let r_expected = { a41 = #{ a39 = 0L; b39 = #1L }; b41 = #{ a40 = #2L; b40 = #3. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a41 *)
  r.a41 <- next_r.a41;
  let r_expected = { r_expected with a41 = next_r.a41 } in
  mark_test_run 283;
  let test = eq r r_expected in
  if not test then failwithf "test 283 failed";
  Gc.compact ();
  (* .b41 *)
  r.b41 <- next_r.b41;
  let r_expected = { r_expected with b41 = next_r.b41 } in
  mark_test_run 284;
  let test = eq r r_expected in
  if not test then failwithf "test 284 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a41 = #{ a39; b39 }; b41 = #{ a40; b40 } } = r in
  let expected_a39 = 100L in
  mark_test_run 285;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a39 a39 in
  if not test then failwithf "test 285 failed";
  let expected_b39 = #101L in
  mark_test_run 286;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b39 b39 in
  if not test then failwithf "test 286 failed";
  let expected_a40 = #102L in
  mark_test_run 287;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a40 a40 in
  if not test then failwithf "test 287 failed";
  let expected_b40 = #103. in
  mark_test_run 288;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b40 b40 in
  if not test then failwithf "test 288 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a41; b41 } = r in
  let expected_a41 = #{ a39 = 100L; b39 = #101L } in
  mark_test_run 289;
  let test = (fun #{ a39 = a391; b39 = b391 } #{ a39 = a392; b39 = b392 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a391 a392 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b391 b392) expected_a41 a41 in
  if not test then failwithf "test 289 failed";
  let expected_b41 = #{ a40 = #102L; b40 = #103. } in
  mark_test_run 290;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a401 a402 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b401 b402) expected_b41 b41 in
  if not test then failwithf "test 290 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************************)
  (*   t44 = { #{ int64; string }; #{ int64#; string } }   *)
  (*********************************************************)
  let r = { a44 = #{ a42 = 0L; b42 = "1" }; b44 = #{ a43 = #2L; b43 = "3" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a44 *)
  let actual = r.a44 in
  let expected = #{ a42 = 0L; b42 = "1" } in
  mark_test_run 291;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> String.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 291 failed";
  (* Paths of depth 2 *)
  (* .a44.#a42 *)
  let actual = r.a44.#a42 in
  let expected = 0L in
  mark_test_run 292;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 292 failed";
  (* .a44.#b42 *)
  let actual = r.a44.#b42 in
  let expected = "1" in
  mark_test_run 293;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 293 failed";
  (* Paths of depth 1 *)
  (* .b44 *)
  let actual = r.b44 in
  let expected = #{ a43 = #2L; b43 = "3" } in
  mark_test_run 294;
  let test = (fun #{ a43 = a431; b43 = b431 } #{ a43 = a432; b43 = b432 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a431 a432 && (fun a b -> String.equal (globalize a) (globalize b)) b431 b432) actual expected in
  if not test then failwithf "test 294 failed";
  (* Paths of depth 2 *)
  (* .b44.#a43 *)
  let actual = r.b44.#a43 in
  let expected = #2L in
  mark_test_run 295;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 295 failed";
  (* .b44.#b43 *)
  let actual = r.b44.#b43 in
  let expected = "3" in
  mark_test_run 296;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 296 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a44 = a441; b44 = b441 } { a44 = a442; b44 = b442 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> String.equal (globalize a) (globalize b)) b421 b422) a441 a442 && (fun #{ a43 = a431; b43 = b431 } #{ a43 = a432; b43 = b432 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a431 a432 && (fun a b -> String.equal (globalize a) (globalize b)) b431 b432) b441 b442) in
  let next_r = { a44 = #{ a42 = 100L; b42 = "101" }; b44 = #{ a43 = #102L; b43 = "103" } } in
  let r_expected = { a44 = #{ a42 = 0L; b42 = "1" }; b44 = #{ a43 = #2L; b43 = "3" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a44 *)
  r.a44 <- next_r.a44;
  let r_expected = { r_expected with a44 = next_r.a44 } in
  mark_test_run 297;
  let test = eq r r_expected in
  if not test then failwithf "test 297 failed";
  Gc.compact ();
  (* .b44 *)
  r.b44 <- next_r.b44;
  let r_expected = { r_expected with b44 = next_r.b44 } in
  mark_test_run 298;
  let test = eq r r_expected in
  if not test then failwithf "test 298 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a44 = #{ a42; b42 }; b44 = #{ a43; b43 } } = r in
  let expected_a42 = 100L in
  mark_test_run 299;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 299 failed";
  let expected_b42 = "101" in
  mark_test_run 300;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 300 failed";
  let expected_a43 = #102L in
  mark_test_run 301;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a43 a43 in
  if not test then failwithf "test 301 failed";
  let expected_b43 = "103" in
  mark_test_run 302;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b43 b43 in
  if not test then failwithf "test 302 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a44; b44 } = r in
  let expected_a44 = #{ a42 = 100L; b42 = "101" } in
  mark_test_run 303;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> String.equal (globalize a) (globalize b)) b421 b422) expected_a44 a44 in
  if not test then failwithf "test 303 failed";
  let expected_b44 = #{ a43 = #102L; b43 = "103" } in
  mark_test_run 304;
  let test = (fun #{ a43 = a431; b43 = b431 } #{ a43 = a432; b43 = b432 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a431 a432 && (fun a b -> String.equal (globalize a) (globalize b)) b431 b432) expected_b44 b44 in
  if not test then failwithf "test 304 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*****************************)
  (*   t45 = { #{ int32# } }   *)
  (*****************************)
  let r = { a45 = #{ a17 = #0l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a45 *)
  let actual = r.a45 in
  let expected = #{ a17 = #0l } in
  mark_test_run 305;
  let test = (fun #{ a17 = a171 } #{ a17 = a172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a171 a172) actual expected in
  if not test then failwithf "test 305 failed";
  (* Paths of depth 2 *)
  (* .a45.#a17 *)
  let actual = r.a45.#a17 in
  let expected = #0l in
  mark_test_run 306;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 306 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a45 = a451 } { a45 = a452 } -> (fun #{ a17 = a171 } #{ a17 = a172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a171 a172) a451 a452) in
  let next_r = { a45 = #{ a17 = #100l } } in
  let r_expected = { a45 = #{ a17 = #0l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a45 *)
  r.a45 <- next_r.a45;
  let r_expected = { r_expected with a45 = next_r.a45 } in
  mark_test_run 307;
  let test = eq r r_expected in
  if not test then failwithf "test 307 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a45 = #{ a17 } } = r in
  let expected_a17 = #100l in
  mark_test_run 308;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a17 a17 in
  if not test then failwithf "test 308 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a45 } = r in
  let expected_a45 = #{ a17 = #100l } in
  mark_test_run 309;
  let test = (fun #{ a17 = a171 } #{ a17 = a172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a171 a172) expected_a45 a45 in
  if not test then failwithf "test 309 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************************)
  (*   t47 = { #{ int32#; int }; int32# }   *)
  (******************************************)
  let r = { a47 = #{ a46 = #0l; b46 = 1 }; b47 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a47 *)
  let actual = r.a47 in
  let expected = #{ a46 = #0l; b46 = 1 } in
  mark_test_run 310;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a461 a462 && (fun a b -> Int.equal a b) b461 b462) actual expected in
  if not test then failwithf "test 310 failed";
  (* Paths of depth 2 *)
  (* .a47.#a46 *)
  let actual = r.a47.#a46 in
  let expected = #0l in
  mark_test_run 311;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 311 failed";
  (* .a47.#b46 *)
  let actual = r.a47.#b46 in
  let expected = 1 in
  mark_test_run 312;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 312 failed";
  (* Paths of depth 1 *)
  (* .b47 *)
  let actual = r.b47 in
  let expected = #2l in
  mark_test_run 313;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 313 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a47 = a471; b47 = b471 } { a47 = a472; b47 = b472 } -> (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a461 a462 && (fun a b -> Int.equal a b) b461 b462) a471 a472 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b471 b472) in
  let next_r = { a47 = #{ a46 = #100l; b46 = 101 }; b47 = #102l } in
  let r_expected = { a47 = #{ a46 = #0l; b46 = 1 }; b47 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a47 *)
  r.a47 <- next_r.a47;
  let r_expected = { r_expected with a47 = next_r.a47 } in
  mark_test_run 314;
  let test = eq r r_expected in
  if not test then failwithf "test 314 failed";
  Gc.compact ();
  (* .b47 *)
  r.b47 <- next_r.b47;
  let r_expected = { r_expected with b47 = next_r.b47 } in
  mark_test_run 315;
  let test = eq r r_expected in
  if not test then failwithf "test 315 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a47 = #{ a46; b46 }; b47 } = r in
  let expected_a46 = #100l in
  mark_test_run 316;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a46 a46 in
  if not test then failwithf "test 316 failed";
  let expected_b46 = 101 in
  mark_test_run 317;
  let test = (fun a b -> Int.equal a b) expected_b46 b46 in
  if not test then failwithf "test 317 failed";
  let expected_b47 = #102l in
  mark_test_run 318;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b47 b47 in
  if not test then failwithf "test 318 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a47; b47 } = r in
  let expected_a47 = #{ a46 = #100l; b46 = 101 } in
  mark_test_run 319;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a461 a462 && (fun a b -> Int.equal a b) b461 b462) expected_a47 a47 in
  if not test then failwithf "test 319 failed";
  let expected_b47 = #102l in
  mark_test_run 320;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b47 b47 in
  if not test then failwithf "test 320 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************)
  (*   t48 = { #{ float }; int }   *)
  (*********************************)
  let r = { a48 = #{ a7 = 0. }; b48 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a48 *)
  let actual = r.a48 in
  let expected = #{ a7 = 0. } in
  mark_test_run 321;
  let test = (fun #{ a7 = a71 } #{ a7 = a72 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a71 a72) actual expected in
  if not test then failwithf "test 321 failed";
  (* Paths of depth 2 *)
  (* .a48.#a7 *)
  let actual = r.a48.#a7 in
  let expected = 0. in
  mark_test_run 322;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 322 failed";
  (* Paths of depth 1 *)
  (* .b48 *)
  let actual = r.b48 in
  let expected = 1 in
  mark_test_run 323;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 323 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a48 = a481; b48 = b481 } { a48 = a482; b48 = b482 } -> (fun #{ a7 = a71 } #{ a7 = a72 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a71 a72) a481 a482 && (fun a b -> Int.equal a b) b481 b482) in
  let next_r = { a48 = #{ a7 = 100. }; b48 = 101 } in
  let r_expected = { a48 = #{ a7 = 0. }; b48 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a48 *)
  r.a48 <- next_r.a48;
  let r_expected = { r_expected with a48 = next_r.a48 } in
  mark_test_run 324;
  let test = eq r r_expected in
  if not test then failwithf "test 324 failed";
  Gc.compact ();
  (* .b48 *)
  r.b48 <- next_r.b48;
  let r_expected = { r_expected with b48 = next_r.b48 } in
  mark_test_run 325;
  let test = eq r r_expected in
  if not test then failwithf "test 325 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a48 = #{ a7 }; b48 } = r in
  let expected_a7 = 100. in
  mark_test_run 326;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a7 a7 in
  if not test then failwithf "test 326 failed";
  let expected_b48 = 101 in
  mark_test_run 327;
  let test = (fun a b -> Int.equal a b) expected_b48 b48 in
  if not test then failwithf "test 327 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a48; b48 } = r in
  let expected_a48 = #{ a7 = 100. } in
  mark_test_run 328;
  let test = (fun #{ a7 = a71 } #{ a7 = a72 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a71 a72) expected_a48 a48 in
  if not test then failwithf "test 328 failed";
  let expected_b48 = 101 in
  mark_test_run 329;
  let test = (fun a b -> Int.equal a b) expected_b48 b48 in
  if not test then failwithf "test 329 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t49 = { #{ float }; float }   *)
  (***********************************)
  let r = { a49 = #{ a7 = 0. }; b49 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a49 *)
  let actual = r.a49 in
  let expected = #{ a7 = 0. } in
  mark_test_run 330;
  let test = (fun #{ a7 = a71 } #{ a7 = a72 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a71 a72) actual expected in
  if not test then failwithf "test 330 failed";
  (* Paths of depth 2 *)
  (* .a49.#a7 *)
  let actual = r.a49.#a7 in
  let expected = 0. in
  mark_test_run 331;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 331 failed";
  (* Paths of depth 1 *)
  (* .b49 *)
  let actual = r.b49 in
  let expected = 1. in
  mark_test_run 332;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 332 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a49 = a491; b49 = b491 } { a49 = a492; b49 = b492 } -> (fun #{ a7 = a71 } #{ a7 = a72 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a71 a72) a491 a492 && (fun a b -> Float.equal (globalize a) (globalize b)) b491 b492) in
  let next_r = { a49 = #{ a7 = 100. }; b49 = 101. } in
  let r_expected = { a49 = #{ a7 = 0. }; b49 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a49 *)
  r.a49 <- next_r.a49;
  let r_expected = { r_expected with a49 = next_r.a49 } in
  mark_test_run 333;
  let test = eq r r_expected in
  if not test then failwithf "test 333 failed";
  Gc.compact ();
  (* .b49 *)
  r.b49 <- next_r.b49;
  let r_expected = { r_expected with b49 = next_r.b49 } in
  mark_test_run 334;
  let test = eq r r_expected in
  if not test then failwithf "test 334 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a49 = #{ a7 }; b49 } = r in
  let expected_a7 = 100. in
  mark_test_run 335;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a7 a7 in
  if not test then failwithf "test 335 failed";
  let expected_b49 = 101. in
  mark_test_run 336;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b49 b49 in
  if not test then failwithf "test 336 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a49; b49 } = r in
  let expected_a49 = #{ a7 = 100. } in
  mark_test_run 337;
  let test = (fun #{ a7 = a71 } #{ a7 = a72 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a71 a72) expected_a49 a49 in
  if not test then failwithf "test 337 failed";
  let expected_b49 = 101. in
  mark_test_run 338;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b49 b49 in
  if not test then failwithf "test 338 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t50 = { #{ float; float } }   *)
  (***********************************)
  let r = { a50 = #{ a30 = 0.; b30 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a50 *)
  let actual = r.a50 in
  let expected = #{ a30 = 0.; b30 = 1. } in
  mark_test_run 339;
  let test = (fun #{ a30 = a301; b30 = b301 } #{ a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun a b -> Float.equal (globalize a) (globalize b)) b301 b302) actual expected in
  if not test then failwithf "test 339 failed";
  (* Paths of depth 2 *)
  (* .a50.#a30 *)
  let actual = r.a50.#a30 in
  let expected = 0. in
  mark_test_run 340;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 340 failed";
  (* .a50.#b30 *)
  let actual = r.a50.#b30 in
  let expected = 1. in
  mark_test_run 341;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 341 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a50 = a501 } { a50 = a502 } -> (fun #{ a30 = a301; b30 = b301 } #{ a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun a b -> Float.equal (globalize a) (globalize b)) b301 b302) a501 a502) in
  let next_r = { a50 = #{ a30 = 100.; b30 = 101. } } in
  let r_expected = { a50 = #{ a30 = 0.; b30 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a50 *)
  r.a50 <- next_r.a50;
  let r_expected = { r_expected with a50 = next_r.a50 } in
  mark_test_run 342;
  let test = eq r r_expected in
  if not test then failwithf "test 342 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a50 = #{ a30; b30 } } = r in
  let expected_a30 = 100. in
  mark_test_run 343;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a30 a30 in
  if not test then failwithf "test 343 failed";
  let expected_b30 = 101. in
  mark_test_run 344;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b30 b30 in
  if not test then failwithf "test 344 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a50 } = r in
  let expected_a50 = #{ a30 = 100.; b30 = 101. } in
  mark_test_run 345;
  let test = (fun #{ a30 = a301; b30 = b301 } #{ a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun a b -> Float.equal (globalize a) (globalize b)) b301 b302) expected_a50 a50 in
  if not test then failwithf "test 345 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t51 = { #{ float; float }; int }   *)
  (****************************************)
  let r = { a51 = #{ a30 = 0.; b30 = 1. }; b51 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a51 *)
  let actual = r.a51 in
  let expected = #{ a30 = 0.; b30 = 1. } in
  mark_test_run 346;
  let test = (fun #{ a30 = a301; b30 = b301 } #{ a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun a b -> Float.equal (globalize a) (globalize b)) b301 b302) actual expected in
  if not test then failwithf "test 346 failed";
  (* Paths of depth 2 *)
  (* .a51.#a30 *)
  let actual = r.a51.#a30 in
  let expected = 0. in
  mark_test_run 347;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 347 failed";
  (* .a51.#b30 *)
  let actual = r.a51.#b30 in
  let expected = 1. in
  mark_test_run 348;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 348 failed";
  (* Paths of depth 1 *)
  (* .b51 *)
  let actual = r.b51 in
  let expected = 2 in
  mark_test_run 349;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 349 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a51 = a511; b51 = b511 } { a51 = a512; b51 = b512 } -> (fun #{ a30 = a301; b30 = b301 } #{ a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun a b -> Float.equal (globalize a) (globalize b)) b301 b302) a511 a512 && (fun a b -> Int.equal a b) b511 b512) in
  let next_r = { a51 = #{ a30 = 100.; b30 = 101. }; b51 = 102 } in
  let r_expected = { a51 = #{ a30 = 0.; b30 = 1. }; b51 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a51 *)
  r.a51 <- next_r.a51;
  let r_expected = { r_expected with a51 = next_r.a51 } in
  mark_test_run 350;
  let test = eq r r_expected in
  if not test then failwithf "test 350 failed";
  Gc.compact ();
  (* .b51 *)
  r.b51 <- next_r.b51;
  let r_expected = { r_expected with b51 = next_r.b51 } in
  mark_test_run 351;
  let test = eq r r_expected in
  if not test then failwithf "test 351 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a51 = #{ a30; b30 }; b51 } = r in
  let expected_a30 = 100. in
  mark_test_run 352;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a30 a30 in
  if not test then failwithf "test 352 failed";
  let expected_b30 = 101. in
  mark_test_run 353;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b30 b30 in
  if not test then failwithf "test 353 failed";
  let expected_b51 = 102 in
  mark_test_run 354;
  let test = (fun a b -> Int.equal a b) expected_b51 b51 in
  if not test then failwithf "test 354 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a51; b51 } = r in
  let expected_a51 = #{ a30 = 100.; b30 = 101. } in
  mark_test_run 355;
  let test = (fun #{ a30 = a301; b30 = b301 } #{ a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun a b -> Float.equal (globalize a) (globalize b)) b301 b302) expected_a51 a51 in
  if not test then failwithf "test 355 failed";
  let expected_b51 = 102 in
  mark_test_run 356;
  let test = (fun a b -> Int.equal a b) expected_b51 b51 in
  if not test then failwithf "test 356 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t53 = { #{ float# }; float }   *)
  (************************************)
  let r = { a53 = #{ a52 = #0. }; b53 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a53 *)
  let actual = r.a53 in
  let expected = #{ a52 = #0. } in
  mark_test_run 357;
  let test = (fun #{ a52 = a521 } #{ a52 = a522 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a521 a522) actual expected in
  if not test then failwithf "test 357 failed";
  (* Paths of depth 2 *)
  (* .a53.#a52 *)
  let actual = r.a53.#a52 in
  let expected = #0. in
  mark_test_run 358;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 358 failed";
  (* Paths of depth 1 *)
  (* .b53 *)
  let actual = r.b53 in
  let expected = 1. in
  mark_test_run 359;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 359 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a53 = a531; b53 = b531 } { a53 = a532; b53 = b532 } -> (fun #{ a52 = a521 } #{ a52 = a522 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a521 a522) a531 a532 && (fun a b -> Float.equal (globalize a) (globalize b)) b531 b532) in
  let next_r = { a53 = #{ a52 = #100. }; b53 = 101. } in
  let r_expected = { a53 = #{ a52 = #0. }; b53 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a53 *)
  r.a53 <- next_r.a53;
  let r_expected = { r_expected with a53 = next_r.a53 } in
  mark_test_run 360;
  let test = eq r r_expected in
  if not test then failwithf "test 360 failed";
  Gc.compact ();
  (* .b53 *)
  r.b53 <- next_r.b53;
  let r_expected = { r_expected with b53 = next_r.b53 } in
  mark_test_run 361;
  let test = eq r r_expected in
  if not test then failwithf "test 361 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a53 = #{ a52 }; b53 } = r in
  let expected_a52 = #100. in
  mark_test_run 362;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a52 a52 in
  if not test then failwithf "test 362 failed";
  let expected_b53 = 101. in
  mark_test_run 363;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b53 b53 in
  if not test then failwithf "test 363 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a53; b53 } = r in
  let expected_a53 = #{ a52 = #100. } in
  mark_test_run 364;
  let test = (fun #{ a52 = a521 } #{ a52 = a522 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a521 a522) expected_a53 a53 in
  if not test then failwithf "test 364 failed";
  let expected_b53 = 101. in
  mark_test_run 365;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b53 b53 in
  if not test then failwithf "test 365 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t55 = { #{ float#; float } }   *)
  (************************************)
  let r = { a55 = #{ a54 = #0.; b54 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a55 *)
  let actual = r.a55 in
  let expected = #{ a54 = #0.; b54 = 1. } in
  mark_test_run 366;
  let test = (fun #{ a54 = a541; b54 = b541 } #{ a54 = a542; b54 = b542 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a541 a542 && (fun a b -> Float.equal (globalize a) (globalize b)) b541 b542) actual expected in
  if not test then failwithf "test 366 failed";
  (* Paths of depth 2 *)
  (* .a55.#a54 *)
  let actual = r.a55.#a54 in
  let expected = #0. in
  mark_test_run 367;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 367 failed";
  (* .a55.#b54 *)
  let actual = r.a55.#b54 in
  let expected = 1. in
  mark_test_run 368;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 368 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a55 = a551 } { a55 = a552 } -> (fun #{ a54 = a541; b54 = b541 } #{ a54 = a542; b54 = b542 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a541 a542 && (fun a b -> Float.equal (globalize a) (globalize b)) b541 b542) a551 a552) in
  let next_r = { a55 = #{ a54 = #100.; b54 = 101. } } in
  let r_expected = { a55 = #{ a54 = #0.; b54 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a55 *)
  r.a55 <- next_r.a55;
  let r_expected = { r_expected with a55 = next_r.a55 } in
  mark_test_run 369;
  let test = eq r r_expected in
  if not test then failwithf "test 369 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a55 = #{ a54; b54 } } = r in
  let expected_a54 = #100. in
  mark_test_run 370;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a54 a54 in
  if not test then failwithf "test 370 failed";
  let expected_b54 = 101. in
  mark_test_run 371;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b54 b54 in
  if not test then failwithf "test 371 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a55 } = r in
  let expected_a55 = #{ a54 = #100.; b54 = 101. } in
  mark_test_run 372;
  let test = (fun #{ a54 = a541; b54 = b541 } #{ a54 = a542; b54 = b542 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a541 a542 && (fun a b -> Float.equal (globalize a) (globalize b)) b541 b542) expected_a55 a55 in
  if not test then failwithf "test 372 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************************************)
  (*   t58 = { #{ float32#; int64# }; #{ string; int64# } }   *)
  (************************************************************)
  let r = { a58 = #{ a56 = #0.s; b56 = #1L }; b58 = #{ a57 = "2"; b57 = #3L } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a58 *)
  let actual = r.a58 in
  let expected = #{ a56 = #0.s; b56 = #1L } in
  mark_test_run 373;
  let test = (fun #{ a56 = a561; b56 = b561 } #{ a56 = a562; b56 = b562 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a561 a562 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b561 b562) actual expected in
  if not test then failwithf "test 373 failed";
  (* Paths of depth 2 *)
  (* .a58.#a56 *)
  let actual = r.a58.#a56 in
  let expected = #0.s in
  mark_test_run 374;
  let test = (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) actual expected in
  if not test then failwithf "test 374 failed";
  (* .a58.#b56 *)
  let actual = r.a58.#b56 in
  let expected = #1L in
  mark_test_run 375;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 375 failed";
  (* Paths of depth 1 *)
  (* .b58 *)
  let actual = r.b58 in
  let expected = #{ a57 = "2"; b57 = #3L } in
  mark_test_run 376;
  let test = (fun #{ a57 = a571; b57 = b571 } #{ a57 = a572; b57 = b572 } -> (fun a b -> String.equal (globalize a) (globalize b)) a571 a572 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b571 b572) actual expected in
  if not test then failwithf "test 376 failed";
  (* Paths of depth 2 *)
  (* .b58.#a57 *)
  let actual = r.b58.#a57 in
  let expected = "2" in
  mark_test_run 377;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 377 failed";
  (* .b58.#b57 *)
  let actual = r.b58.#b57 in
  let expected = #3L in
  mark_test_run 378;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 378 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a58 = a581; b58 = b581 } { a58 = a582; b58 = b582 } -> (fun #{ a56 = a561; b56 = b561 } #{ a56 = a562; b56 = b562 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a561 a562 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b561 b562) a581 a582 && (fun #{ a57 = a571; b57 = b571 } #{ a57 = a572; b57 = b572 } -> (fun a b -> String.equal (globalize a) (globalize b)) a571 a572 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b571 b572) b581 b582) in
  let next_r = { a58 = #{ a56 = #100.s; b56 = #101L }; b58 = #{ a57 = "102"; b57 = #103L } } in
  let r_expected = { a58 = #{ a56 = #0.s; b56 = #1L }; b58 = #{ a57 = "2"; b57 = #3L } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a58 *)
  r.a58 <- next_r.a58;
  let r_expected = { r_expected with a58 = next_r.a58 } in
  mark_test_run 379;
  let test = eq r r_expected in
  if not test then failwithf "test 379 failed";
  Gc.compact ();
  (* .b58 *)
  r.b58 <- next_r.b58;
  let r_expected = { r_expected with b58 = next_r.b58 } in
  mark_test_run 380;
  let test = eq r r_expected in
  if not test then failwithf "test 380 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a58 = #{ a56; b56 }; b58 = #{ a57; b57 } } = r in
  let expected_a56 = #100.s in
  mark_test_run 381;
  let test = (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) expected_a56 a56 in
  if not test then failwithf "test 381 failed";
  let expected_b56 = #101L in
  mark_test_run 382;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b56 b56 in
  if not test then failwithf "test 382 failed";
  let expected_a57 = "102" in
  mark_test_run 383;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a57 a57 in
  if not test then failwithf "test 383 failed";
  let expected_b57 = #103L in
  mark_test_run 384;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b57 b57 in
  if not test then failwithf "test 384 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a58; b58 } = r in
  let expected_a58 = #{ a56 = #100.s; b56 = #101L } in
  mark_test_run 385;
  let test = (fun #{ a56 = a561; b56 = b561 } #{ a56 = a562; b56 = b562 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a561 a562 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b561 b562) expected_a58 a58 in
  if not test then failwithf "test 385 failed";
  let expected_b58 = #{ a57 = "102"; b57 = #103L } in
  mark_test_run 386;
  let test = (fun #{ a57 = a571; b57 = b571 } #{ a57 = a572; b57 = b572 } -> (fun a b -> String.equal (globalize a) (globalize b)) a571 a572 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b571 b572) expected_b58 b58 in
  if not test then failwithf "test 386 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*****************************)
  (*   t60 = { #{ string } }   *)
  (*****************************)
  let r = { a60 = #{ a59 = "0" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a60 *)
  let actual = r.a60 in
  let expected = #{ a59 = "0" } in
  mark_test_run 387;
  let test = (fun #{ a59 = a591 } #{ a59 = a592 } -> (fun a b -> String.equal (globalize a) (globalize b)) a591 a592) actual expected in
  if not test then failwithf "test 387 failed";
  (* Paths of depth 2 *)
  (* .a60.#a59 *)
  let actual = r.a60.#a59 in
  let expected = "0" in
  mark_test_run 388;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 388 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a60 = a601 } { a60 = a602 } -> (fun #{ a59 = a591 } #{ a59 = a592 } -> (fun a b -> String.equal (globalize a) (globalize b)) a591 a592) a601 a602) in
  let next_r = { a60 = #{ a59 = "100" } } in
  let r_expected = { a60 = #{ a59 = "0" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a60 *)
  r.a60 <- next_r.a60;
  let r_expected = { r_expected with a60 = next_r.a60 } in
  mark_test_run 389;
  let test = eq r r_expected in
  if not test then failwithf "test 389 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a60 = #{ a59 } } = r in
  let expected_a59 = "100" in
  mark_test_run 390;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a59 a59 in
  if not test then failwithf "test 390 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a60 } = r in
  let expected_a60 = #{ a59 = "100" } in
  mark_test_run 391;
  let test = (fun #{ a59 = a591 } #{ a59 = a592 } -> (fun a b -> String.equal (globalize a) (globalize b)) a591 a592) expected_a60 a60 in
  if not test then failwithf "test 391 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t62 = { #{ string; string } }   *)
  (*************************************)
  let r = { a62 = #{ a61 = "0"; b61 = "1" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a62 *)
  let actual = r.a62 in
  let expected = #{ a61 = "0"; b61 = "1" } in
  mark_test_run 392;
  let test = (fun #{ a61 = a611; b61 = b611 } #{ a61 = a612; b61 = b612 } -> (fun a b -> String.equal (globalize a) (globalize b)) a611 a612 && (fun a b -> String.equal (globalize a) (globalize b)) b611 b612) actual expected in
  if not test then failwithf "test 392 failed";
  (* Paths of depth 2 *)
  (* .a62.#a61 *)
  let actual = r.a62.#a61 in
  let expected = "0" in
  mark_test_run 393;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 393 failed";
  (* .a62.#b61 *)
  let actual = r.a62.#b61 in
  let expected = "1" in
  mark_test_run 394;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 394 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a62 = a621 } { a62 = a622 } -> (fun #{ a61 = a611; b61 = b611 } #{ a61 = a612; b61 = b612 } -> (fun a b -> String.equal (globalize a) (globalize b)) a611 a612 && (fun a b -> String.equal (globalize a) (globalize b)) b611 b612) a621 a622) in
  let next_r = { a62 = #{ a61 = "100"; b61 = "101" } } in
  let r_expected = { a62 = #{ a61 = "0"; b61 = "1" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a62 *)
  r.a62 <- next_r.a62;
  let r_expected = { r_expected with a62 = next_r.a62 } in
  mark_test_run 395;
  let test = eq r r_expected in
  if not test then failwithf "test 395 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a62 = #{ a61; b61 } } = r in
  let expected_a61 = "100" in
  mark_test_run 396;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a61 a61 in
  if not test then failwithf "test 396 failed";
  let expected_b61 = "101" in
  mark_test_run 397;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b61 b61 in
  if not test then failwithf "test 397 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a62 } = r in
  let expected_a62 = #{ a61 = "100"; b61 = "101" } in
  mark_test_run 398;
  let test = (fun #{ a61 = a611; b61 = b611 } #{ a61 = a612; b61 = b612 } -> (fun a b -> String.equal (globalize a) (globalize b)) a611 a612 && (fun a b -> String.equal (globalize a) (globalize b)) b611 b612) expected_a62 a62 in
  if not test then failwithf "test 398 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t63 = { #{ string; string }; string }   *)
  (*********************************************)
  let r = { a63 = #{ a61 = "0"; b61 = "1" }; b63 = "2" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a63 *)
  let actual = r.a63 in
  let expected = #{ a61 = "0"; b61 = "1" } in
  mark_test_run 399;
  let test = (fun #{ a61 = a611; b61 = b611 } #{ a61 = a612; b61 = b612 } -> (fun a b -> String.equal (globalize a) (globalize b)) a611 a612 && (fun a b -> String.equal (globalize a) (globalize b)) b611 b612) actual expected in
  if not test then failwithf "test 399 failed";
  (* Paths of depth 2 *)
  (* .a63.#a61 *)
  let actual = r.a63.#a61 in
  let expected = "0" in
  mark_test_run 400;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 400 failed";
  (* .a63.#b61 *)
  let actual = r.a63.#b61 in
  let expected = "1" in
  mark_test_run 401;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 401 failed";
  (* Paths of depth 1 *)
  (* .b63 *)
  let actual = r.b63 in
  let expected = "2" in
  mark_test_run 402;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 402 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a63 = a631; b63 = b631 } { a63 = a632; b63 = b632 } -> (fun #{ a61 = a611; b61 = b611 } #{ a61 = a612; b61 = b612 } -> (fun a b -> String.equal (globalize a) (globalize b)) a611 a612 && (fun a b -> String.equal (globalize a) (globalize b)) b611 b612) a631 a632 && (fun a b -> String.equal (globalize a) (globalize b)) b631 b632) in
  let next_r = { a63 = #{ a61 = "100"; b61 = "101" }; b63 = "102" } in
  let r_expected = { a63 = #{ a61 = "0"; b61 = "1" }; b63 = "2" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a63 *)
  r.a63 <- next_r.a63;
  let r_expected = { r_expected with a63 = next_r.a63 } in
  mark_test_run 403;
  let test = eq r r_expected in
  if not test then failwithf "test 403 failed";
  Gc.compact ();
  (* .b63 *)
  r.b63 <- next_r.b63;
  let r_expected = { r_expected with b63 = next_r.b63 } in
  mark_test_run 404;
  let test = eq r r_expected in
  if not test then failwithf "test 404 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a63 = #{ a61; b61 }; b63 } = r in
  let expected_a61 = "100" in
  mark_test_run 405;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a61 a61 in
  if not test then failwithf "test 405 failed";
  let expected_b61 = "101" in
  mark_test_run 406;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b61 b61 in
  if not test then failwithf "test 406 failed";
  let expected_b63 = "102" in
  mark_test_run 407;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b63 b63 in
  if not test then failwithf "test 407 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a63; b63 } = r in
  let expected_a63 = #{ a61 = "100"; b61 = "101" } in
  mark_test_run 408;
  let test = (fun #{ a61 = a611; b61 = b611 } #{ a61 = a612; b61 = b612 } -> (fun a b -> String.equal (globalize a) (globalize b)) a611 a612 && (fun a b -> String.equal (globalize a) (globalize b)) b611 b612) expected_a63 a63 in
  if not test then failwithf "test 408 failed";
  let expected_b63 = "102" in
  mark_test_run 409;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b63 b63 in
  if not test then failwithf "test 409 failed";

  ()
;;
let () = to_run ();;

for i = 1 to 409 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
