(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
type unit_u : void
external unbox_unit : unit -> unit_u = "%unbox_unit"
external globalize : local_ 'a -> 'a = "%obj_dup";;
let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any_non_null) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any_non_null) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int } (* { int } *)
type t1 = { mutable a1 : int; mutable b1 : int } (* { int; int } *)
type t2 = { mutable a2 : int; mutable b2 : int; mutable c2 : int } (* { int; int; int } *)
type t3 = { mutable a3 : int; mutable b3 : int; mutable c3 : int32# } (* { int; int; int32# } *)
type t4 = { mutable a4 : int; mutable b4 : int; mutable c4 : float } (* { int; int; float } *)
type t5 = { mutable a5 : int; mutable b5 : int64 } (* { int; int64 } *)
type t6 = { mutable a6 : int; mutable b6 : int64# } (* { int; int64# } *)
type t7 = { mutable a7 : int; mutable b7 : int32# } (* { int; int32# } *)
type t8 = { mutable a8 : int; mutable b8 : int32#; mutable c8 : int } (* { int; int32#; int } *)
type t9 = { mutable a9 : int; mutable b9 : int32#; mutable c9 : int32# } (* { int; int32#; int32# } *)
type t10 = { mutable a10 : int; mutable b10 : nativeint# } (* { int; nativeint# } *)
type t11 = { mutable a11 : int; mutable b11 : unit_u } (* { int; unit_u } *)
type t12 = { mutable a12 : int; mutable b12 : float } (* { int; float } *)
type t13 = { mutable a13 : int; mutable b13 : float; mutable c13 : int } (* { int; float; int } *)
type t14 = { mutable a14 : int; mutable b14 : float; mutable c14 : float } (* { int; float; float } *)
type v15 = C15_0 of unit_u (* (| unit_u) *)
type t16 = { mutable a16 : int; mutable b16 : v15 } (* { int; (| unit_u) } *)
type v17 = C17_0 of unit_u | C17_1 of unit_u * unit_u | C17_2 of #(unit_u * unit_u) (* (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) *)
type t18 = { mutable a18 : int; mutable b18 : v17 } (* { int; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t19 = { mutable a19 : int; mutable b19 : #(unit_u * int) } (* { int; #(unit_u, int) } *)
type t20 = { mutable a20 : int; mutable b20 : #(unit_u * int64#) } (* { int; #(unit_u, int64#) } *)
type t21 = { mutable a21 : int; mutable b21 : #(unit_u * unit_u) } (* { int; #(unit_u, unit_u) } *)
type t22 = { mutable a22 : int; mutable b22 : #(unit_u * string) } (* { int; #(unit_u, string) } *)
type t23 = #{ a23 : int } (* #{ int } *)
type t24 = { mutable a24 : int; mutable b24 : t23 } (* { int; #{ int } } *)
type t25 = #{ a25 : int; b25 : int } (* #{ int; int } *)
type t26 = { mutable a26 : int; mutable b26 : t25 } (* { int; #{ int; int } } *)
type t27 = #{ a27 : int; b27 : int32# } (* #{ int; int32# } *)
type t28 = { mutable a28 : int; mutable b28 : t27 } (* { int; #{ int; int32# } } *)
type t29 = #{ a29 : int; b29 : float } (* #{ int; float } *)
type t30 = { mutable a30 : int; mutable b30 : t29 } (* { int; #{ int; float } } *)
type t31 = #{ a31 : int; b31 : t23 } (* #{ int; #{ int } } *)
type t32 = { mutable a32 : int; mutable b32 : t31 } (* { int; #{ int; #{ int } } } *)
type t33 = #{ a33 : int32# } (* #{ int32# } *)
type t34 = #{ a34 : int; b34 : t33 } (* #{ int; #{ int32# } } *)
type t35 = { mutable a35 : int; mutable b35 : t34 } (* { int; #{ int; #{ int32# } } } *)
type t36 = #{ a36 : float } (* #{ float } *)
type t37 = #{ a37 : int; b37 : t36 } (* #{ int; #{ float } } *)
type t38 = { mutable a38 : int; mutable b38 : t37 } (* { int; #{ int; #{ float } } } *)
type t39 = { mutable a39 : int; mutable b39 : t33 } (* { int; #{ int32# } } *)
type t40 = #{ a40 : int32#; b40 : int } (* #{ int32#; int } *)
type t41 = { mutable a41 : int; mutable b41 : t40 } (* { int; #{ int32#; int } } *)
type t42 = #{ a42 : int32#; b42 : int32# } (* #{ int32#; int32# } *)
type t43 = { mutable a43 : int; mutable b43 : t42 } (* { int; #{ int32#; int32# } } *)
type t44 = #{ a44 : int32#; b44 : t23 } (* #{ int32#; #{ int } } *)
type t45 = { mutable a45 : int; mutable b45 : t44 } (* { int; #{ int32#; #{ int } } } *)
type t46 = #{ a46 : int32#; b46 : t33 } (* #{ int32#; #{ int32# } } *)
type t47 = { mutable a47 : int; mutable b47 : t46 } (* { int; #{ int32#; #{ int32# } } } *)
type t48 = { mutable a48 : int; mutable b48 : t36 } (* { int; #{ float } } *)
type t49 = #{ a49 : float; b49 : int } (* #{ float; int } *)
type t50 = { mutable a50 : int; mutable b50 : t49 } (* { int; #{ float; int } } *)
type t51 = #{ a51 : float; b51 : float } (* #{ float; float } *)
type t52 = { mutable a52 : int; mutable b52 : t51 } (* { int; #{ float; float } } *)
type t53 = #{ a53 : float; b53 : t23 } (* #{ float; #{ int } } *)
type t54 = { mutable a54 : int; mutable b54 : t53 } (* { int; #{ float; #{ int } } } *)
type t55 = #{ a55 : float; b55 : t36 } (* #{ float; #{ float } } *)
type t56 = { mutable a56 : int; mutable b56 : t55 } (* { int; #{ float; #{ float } } } *)
type t57 = #{ a57 : t25 } (* #{ #{ int; int } } *)
type t58 = { mutable a58 : int; mutable b58 : t57 } (* { int; #{ #{ int; int } } } *)
type t59 = #{ a59 : t27 } (* #{ #{ int; int32# } } *)
type t60 = { mutable a60 : int; mutable b60 : t59 } (* { int; #{ #{ int; int32# } } } *)
type t61 = #{ a61 : t29 } (* #{ #{ int; float } } *)
type t62 = { mutable a62 : int; mutable b62 : t61 } (* { int; #{ #{ int; float } } } *)
type t63 = #{ a63 : t40 } (* #{ #{ int32#; int } } *)
type t64 = { mutable a64 : int; mutable b64 : t63 } (* { int; #{ #{ int32#; int } } } *)
type t65 = #{ a65 : t42 } (* #{ #{ int32#; int32# } } *)
type t66 = { mutable a66 : int; mutable b66 : t65 } (* { int; #{ #{ int32#; int32# } } } *)
type t67 = #{ a67 : t49 } (* #{ #{ float; int } } *)
type t68 = { mutable a68 : int; mutable b68 : t67 } (* { int; #{ #{ float; int } } } *)
type t69 = #{ a69 : t51 } (* #{ #{ float; float } } *)
type t70 = { mutable a70 : int; mutable b70 : t69 } (* { int; #{ #{ float; float } } } *)
type t71 = { mutable a71 : int64 } (* { int64 } *)
type t72 = { mutable a72 : int64; mutable b72 : int } (* { int64; int } *)
type t73 = { mutable a73 : int64; mutable b73 : int64 } (* { int64; int64 } *)
type t74 = { mutable a74 : int64; mutable b74 : int64# } (* { int64; int64# } *)
type t75 = { mutable a75 : int64; mutable b75 : int32# } (* { int64; int32# } *)
type t76 = { mutable a76 : int64; mutable b76 : nativeint# } (* { int64; nativeint# } *)
type t77 = { mutable a77 : int64; mutable b77 : unit_u } (* { int64; unit_u } *)
type t78 = { mutable a78 : int64; mutable b78 : float } (* { int64; float } *)
type t79 = { mutable a79 : int64; mutable b79 : v15 } (* { int64; (| unit_u) } *)
type t80 = { mutable a80 : int64; mutable b80 : v17 } (* { int64; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t81 = { mutable a81 : int64; mutable b81 : #(unit_u * int) } (* { int64; #(unit_u, int) } *)
type t82 = { mutable a82 : int64; mutable b82 : #(unit_u * int64#) } (* { int64; #(unit_u, int64#) } *)
type t83 = { mutable a83 : int64; mutable b83 : #(unit_u * unit_u) } (* { int64; #(unit_u, unit_u) } *)
type t84 = { mutable a84 : int64; mutable b84 : #(unit_u * string) } (* { int64; #(unit_u, string) } *)
type t85 = { mutable a85 : int64# } (* { int64# } *)
type t86 = { mutable a86 : int64#; mutable b86 : int } (* { int64#; int } *)
type t87 = { mutable a87 : int64#; mutable b87 : int64 } (* { int64#; int64 } *)
type t88 = { mutable a88 : int64#; mutable b88 : int64# } (* { int64#; int64# } *)
type t89 = { mutable a89 : int64#; mutable b89 : int32# } (* { int64#; int32# } *)
type t90 = { mutable a90 : int64#; mutable b90 : nativeint# } (* { int64#; nativeint# } *)
type t91 = { mutable a91 : int64#; mutable b91 : unit_u } (* { int64#; unit_u } *)
type t92 = { mutable a92 : int64#; mutable b92 : float } (* { int64#; float } *)
type t93 = { mutable a93 : int64#; mutable b93 : v15 } (* { int64#; (| unit_u) } *)
type t94 = { mutable a94 : int64#; mutable b94 : v17 } (* { int64#; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t95 = { mutable a95 : int64#; mutable b95 : #(unit_u * int) } (* { int64#; #(unit_u, int) } *)
type t96 = { mutable a96 : int64#; mutable b96 : #(unit_u * int64#) } (* { int64#; #(unit_u, int64#) } *)
type t97 = { mutable a97 : int64#; mutable b97 : #(unit_u * unit_u) } (* { int64#; #(unit_u, unit_u) } *)
type t98 = { mutable a98 : int64#; mutable b98 : #(unit_u * string) } (* { int64#; #(unit_u, string) } *)
type t99 = { mutable a99 : int32# } (* { int32# } *)
type t100 = { mutable a100 : int32#; mutable b100 : int } (* { int32#; int } *)
type t101 = { mutable a101 : int32#; mutable b101 : int; mutable c101 : int } (* { int32#; int; int } *)
type t102 = { mutable a102 : int32#; mutable b102 : int; mutable c102 : int32# } (* { int32#; int; int32# } *)
type t103 = { mutable a103 : int32#; mutable b103 : int64 } (* { int32#; int64 } *)
type t104 = { mutable a104 : int32#; mutable b104 : int64# } (* { int32#; int64# } *)
type t105 = { mutable a105 : int32#; mutable b105 : int32# } (* { int32#; int32# } *)
type t106 = { mutable a106 : int32#; mutable b106 : int32#; mutable c106 : int } (* { int32#; int32#; int } *)
type t107 = { mutable a107 : int32#; mutable b107 : int32#; mutable c107 : int32# } (* { int32#; int32#; int32# } *)
type t108 = { mutable a108 : int32#; mutable b108 : nativeint# } (* { int32#; nativeint# } *)
type t109 = { mutable a109 : int32#; mutable b109 : unit_u } (* { int32#; unit_u } *)
type t110 = { mutable a110 : int32#; mutable b110 : float } (* { int32#; float } *)
type t111 = { mutable a111 : int32#; mutable b111 : v15 } (* { int32#; (| unit_u) } *)
type t112 = { mutable a112 : int32#; mutable b112 : v17 } (* { int32#; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t113 = { mutable a113 : int32#; mutable b113 : #(unit_u * int) } (* { int32#; #(unit_u, int) } *)
type t114 = { mutable a114 : int32#; mutable b114 : #(unit_u * int64#) } (* { int32#; #(unit_u, int64#) } *)
type t115 = { mutable a115 : int32#; mutable b115 : #(unit_u * unit_u) } (* { int32#; #(unit_u, unit_u) } *)
type t116 = { mutable a116 : int32#; mutable b116 : #(unit_u * string) } (* { int32#; #(unit_u, string) } *)
type t117 = { mutable a117 : int32#; mutable b117 : t23 } (* { int32#; #{ int } } *)
type t118 = { mutable a118 : int32#; mutable b118 : t25 } (* { int32#; #{ int; int } } *)
type t119 = { mutable a119 : int32#; mutable b119 : t27 } (* { int32#; #{ int; int32# } } *)
type t120 = { mutable a120 : int32#; mutable b120 : t31 } (* { int32#; #{ int; #{ int } } } *)
type t121 = { mutable a121 : int32#; mutable b121 : t34 } (* { int32#; #{ int; #{ int32# } } } *)
type t122 = { mutable a122 : int32#; mutable b122 : t33 } (* { int32#; #{ int32# } } *)
type t123 = { mutable a123 : int32#; mutable b123 : t40 } (* { int32#; #{ int32#; int } } *)
type t124 = { mutable a124 : int32#; mutable b124 : t42 } (* { int32#; #{ int32#; int32# } } *)
type t125 = { mutable a125 : int32#; mutable b125 : t44 } (* { int32#; #{ int32#; #{ int } } } *)
type t126 = { mutable a126 : int32#; mutable b126 : t46 } (* { int32#; #{ int32#; #{ int32# } } } *)
type t127 = { mutable a127 : int32#; mutable b127 : t57 } (* { int32#; #{ #{ int; int } } } *)
type t128 = { mutable a128 : int32#; mutable b128 : t59 } (* { int32#; #{ #{ int; int32# } } } *)
type t129 = { mutable a129 : int32#; mutable b129 : t63 } (* { int32#; #{ #{ int32#; int } } } *)
type t130 = { mutable a130 : int32#; mutable b130 : t65 } (* { int32#; #{ #{ int32#; int32# } } } *)
type t131 = { mutable a131 : nativeint# } (* { nativeint# } *)
type t132 = { mutable a132 : nativeint#; mutable b132 : int } (* { nativeint#; int } *)
type t133 = { mutable a133 : nativeint#; mutable b133 : int64 } (* { nativeint#; int64 } *)
type t134 = { mutable a134 : nativeint#; mutable b134 : int64# } (* { nativeint#; int64# } *)
type t135 = { mutable a135 : nativeint#; mutable b135 : int32# } (* { nativeint#; int32# } *)
type t136 = { mutable a136 : nativeint#; mutable b136 : nativeint# } (* { nativeint#; nativeint# } *)
type t137 = { mutable a137 : nativeint#; mutable b137 : unit_u } (* { nativeint#; unit_u } *)
type t138 = { mutable a138 : nativeint#; mutable b138 : float } (* { nativeint#; float } *)
type t139 = { mutable a139 : nativeint#; mutable b139 : v15 } (* { nativeint#; (| unit_u) } *)
type t140 = { mutable a140 : nativeint#; mutable b140 : v17 } (* { nativeint#; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t141 = { mutable a141 : nativeint#; mutable b141 : #(unit_u * int) } (* { nativeint#; #(unit_u, int) } *)
type t142 = { mutable a142 : nativeint#; mutable b142 : #(unit_u * int64#) } (* { nativeint#; #(unit_u, int64#) } *)
type t143 = { mutable a143 : nativeint#; mutable b143 : #(unit_u * unit_u) } (* { nativeint#; #(unit_u, unit_u) } *)
type t144 = { mutable a144 : nativeint#; mutable b144 : #(unit_u * string) } (* { nativeint#; #(unit_u, string) } *)
type t145 = { mutable a145 : unit_u; mutable b145 : int } (* { unit_u; int } *)
type t146 = { mutable a146 : unit_u; mutable b146 : int64 } (* { unit_u; int64 } *)
type t147 = { mutable a147 : unit_u; mutable b147 : int64# } (* { unit_u; int64# } *)
type t148 = { mutable a148 : unit_u; mutable b148 : int32# } (* { unit_u; int32# } *)
type t149 = { mutable a149 : unit_u; mutable b149 : nativeint# } (* { unit_u; nativeint# } *)
type t150 = { mutable a150 : unit_u; mutable b150 : unit_u; mutable c150 : string } (* { unit_u; unit_u; string } *)
type t151 = { mutable a151 : unit_u; mutable b151 : float } (* { unit_u; float } *)
type t152 = { mutable a152 : unit_u; mutable b152 : string } (* { unit_u; string } *)
type t153 = { mutable a153 : unit_u; mutable b153 : string; mutable c153 : unit_u } (* { unit_u; string; unit_u } *)
type t154 = { mutable a154 : unit_u; mutable b154 : string; mutable c154 : string } (* { unit_u; string; string } *)
type t155 = { mutable a155 : unit_u; mutable b155 : v15 } (* { unit_u; (| unit_u) } *)
type t156 = { mutable a156 : unit_u; mutable b156 : v17 } (* { unit_u; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t157 = { mutable a157 : unit_u; mutable b157 : #(unit_u * int) } (* { unit_u; #(unit_u, int) } *)
type t158 = { mutable a158 : unit_u; mutable b158 : #(unit_u * int64#) } (* { unit_u; #(unit_u, int64#) } *)
type t159 = { mutable a159 : unit_u; mutable b159 : #(unit_u * string) } (* { unit_u; #(unit_u, string) } *)
type t160 = #{ a160 : unit_u; b160 : string } (* #{ unit_u; string } *)
type t161 = { mutable a161 : unit_u; mutable b161 : t160 } (* { unit_u; #{ unit_u; string } } *)
type t162 = #{ a162 : string } (* #{ string } *)
type t163 = #{ a163 : unit_u; b163 : t162 } (* #{ unit_u; #{ string } } *)
type t164 = { mutable a164 : unit_u; mutable b164 : t163 } (* { unit_u; #{ unit_u; #{ string } } } *)
type t165 = { mutable a165 : unit_u; mutable b165 : t162 } (* { unit_u; #{ string } } *)
type t166 = #{ a166 : string; b166 : unit_u } (* #{ string; unit_u } *)
type t167 = { mutable a167 : unit_u; mutable b167 : t166 } (* { unit_u; #{ string; unit_u } } *)
type t168 = #{ a168 : string; b168 : string } (* #{ string; string } *)
type t169 = { mutable a169 : unit_u; mutable b169 : t168 } (* { unit_u; #{ string; string } } *)
type t170 = #{ a170 : unit_u } (* #{ unit_u } *)
type t171 = #{ a171 : string; b171 : t170 } (* #{ string; #{ unit_u } } *)
type t172 = { mutable a172 : unit_u; mutable b172 : t171 } (* { unit_u; #{ string; #{ unit_u } } } *)
type t173 = #{ a173 : string; b173 : t162 } (* #{ string; #{ string } } *)
type t174 = { mutable a174 : unit_u; mutable b174 : t173 } (* { unit_u; #{ string; #{ string } } } *)
type t175 = #{ a175 : t160 } (* #{ #{ unit_u; string } } *)
type t176 = { mutable a176 : unit_u; mutable b176 : t175 } (* { unit_u; #{ #{ unit_u; string } } } *)
type t177 = #{ a177 : t166 } (* #{ #{ string; unit_u } } *)
type t178 = { mutable a178 : unit_u; mutable b178 : t177 } (* { unit_u; #{ #{ string; unit_u } } } *)
type t179 = #{ a179 : t168 } (* #{ #{ string; string } } *)
type t180 = { mutable a180 : unit_u; mutable b180 : t179 } (* { unit_u; #{ #{ string; string } } } *)
type t181 = { mutable a181 : float } (* { float } *)
type t182 = { mutable a182 : float; mutable b182 : int } (* { float; int } *)
type t183 = { mutable a183 : float; mutable b183 : int; mutable c183 : int } (* { float; int; int } *)
type t184 = { mutable a184 : float; mutable b184 : int; mutable c184 : float } (* { float; int; float } *)
type t185 = { mutable a185 : float; mutable b185 : int64 } (* { float; int64 } *)
type t186 = { mutable a186 : float; mutable b186 : int64# } (* { float; int64# } *)
type t187 = { mutable a187 : float; mutable b187 : int32# } (* { float; int32# } *)
type t188 = { mutable a188 : float; mutable b188 : nativeint# } (* { float; nativeint# } *)
type t189 = { mutable a189 : float; mutable b189 : unit_u } (* { float; unit_u } *)
type t190 = { mutable a190 : float; mutable b190 : float } (* { float; float } *)
type t191 = { mutable a191 : float; mutable b191 : float; mutable c191 : int } (* { float; float; int } *)
type t192 = { mutable a192 : float; mutable b192 : float; mutable c192 : float } (* { float; float; float } *)
type t193 = { mutable a193 : float; mutable b193 : float; mutable c193 : float# } (* { float; float; float# } *)
type t194 = { mutable a194 : float; mutable b194 : float# } (* { float; float# } *)
type t195 = { mutable a195 : float; mutable b195 : float#; mutable c195 : float } (* { float; float#; float } *)
type t196 = { mutable a196 : float; mutable b196 : float#; mutable c196 : float# } (* { float; float#; float# } *)
type t197 = { mutable a197 : float; mutable b197 : v15 } (* { float; (| unit_u) } *)
type t198 = { mutable a198 : float; mutable b198 : v17 } (* { float; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t199 = { mutable a199 : float; mutable b199 : #(unit_u * int) } (* { float; #(unit_u, int) } *)
type t200 = { mutable a200 : float; mutable b200 : #(unit_u * int64#) } (* { float; #(unit_u, int64#) } *)
type t201 = { mutable a201 : float; mutable b201 : #(unit_u * unit_u) } (* { float; #(unit_u, unit_u) } *)
type t202 = { mutable a202 : float; mutable b202 : #(unit_u * string) } (* { float; #(unit_u, string) } *)
type t203 = { mutable a203 : float; mutable b203 : t23 } (* { float; #{ int } } *)
type t204 = { mutable a204 : float; mutable b204 : t25 } (* { float; #{ int; int } } *)
type t205 = { mutable a205 : float; mutable b205 : t29 } (* { float; #{ int; float } } *)
type t206 = { mutable a206 : float; mutable b206 : t31 } (* { float; #{ int; #{ int } } } *)
type t207 = { mutable a207 : float; mutable b207 : t37 } (* { float; #{ int; #{ float } } } *)
type t208 = { mutable a208 : float; mutable b208 : t36 } (* { float; #{ float } } *)
type t209 = { mutable a209 : float; mutable b209 : t49 } (* { float; #{ float; int } } *)
type t210 = { mutable a210 : float; mutable b210 : t51 } (* { float; #{ float; float } } *)
type t211 = #{ a211 : float; b211 : float# } (* #{ float; float# } *)
type t212 = { mutable a212 : float; mutable b212 : t211 } (* { float; #{ float; float# } } *)
type t213 = { mutable a213 : float; mutable b213 : t53 } (* { float; #{ float; #{ int } } } *)
type t214 = { mutable a214 : float; mutable b214 : t55 } (* { float; #{ float; #{ float } } } *)
type t215 = #{ a215 : float# } (* #{ float# } *)
type t216 = #{ a216 : float; b216 : t215 } (* #{ float; #{ float# } } *)
type t217 = { mutable a217 : float; mutable b217 : t216 } (* { float; #{ float; #{ float# } } } *)
type t218 = { mutable a218 : float; mutable b218 : t215 } (* { float; #{ float# } } *)
type t219 = #{ a219 : float#; b219 : float } (* #{ float#; float } *)
type t220 = { mutable a220 : float; mutable b220 : t219 } (* { float; #{ float#; float } } *)
type t221 = #{ a221 : float#; b221 : float# } (* #{ float#; float# } *)
type t222 = { mutable a222 : float; mutable b222 : t221 } (* { float; #{ float#; float# } } *)
type t223 = #{ a223 : float#; b223 : t36 } (* #{ float#; #{ float } } *)
type t224 = { mutable a224 : float; mutable b224 : t223 } (* { float; #{ float#; #{ float } } } *)
type t225 = #{ a225 : float#; b225 : t215 } (* #{ float#; #{ float# } } *)
type t226 = { mutable a226 : float; mutable b226 : t225 } (* { float; #{ float#; #{ float# } } } *)
type t227 = { mutable a227 : float; mutable b227 : t57 } (* { float; #{ #{ int; int } } } *)
type t228 = { mutable a228 : float; mutable b228 : t61 } (* { float; #{ #{ int; float } } } *)
type t229 = { mutable a229 : float; mutable b229 : t67 } (* { float; #{ #{ float; int } } } *)
type t230 = { mutable a230 : float; mutable b230 : t69 } (* { float; #{ #{ float; float } } } *)
type t231 = #{ a231 : t211 } (* #{ #{ float; float# } } *)
type t232 = { mutable a232 : float; mutable b232 : t231 } (* { float; #{ #{ float; float# } } } *)
type t233 = #{ a233 : t219 } (* #{ #{ float#; float } } *)
type t234 = { mutable a234 : float; mutable b234 : t233 } (* { float; #{ #{ float#; float } } } *)
type t235 = #{ a235 : t221 } (* #{ #{ float#; float# } } *)
type t236 = { mutable a236 : float; mutable b236 : t235 } (* { float; #{ #{ float#; float# } } } *)
type t237 = { mutable a237 : float# } (* { float# } *)
type t238 = { mutable a238 : float#; mutable b238 : float } (* { float#; float } *)
type t239 = { mutable a239 : float#; mutable b239 : float; mutable c239 : float } (* { float#; float; float } *)
type t240 = { mutable a240 : float#; mutable b240 : float; mutable c240 : float# } (* { float#; float; float# } *)
type t241 = { mutable a241 : float#; mutable b241 : float# } (* { float#; float# } *)
type t242 = { mutable a242 : float#; mutable b242 : float#; mutable c242 : float } (* { float#; float#; float } *)
type t243 = { mutable a243 : float#; mutable b243 : float#; mutable c243 : float# } (* { float#; float#; float# } *)
type t244 = { mutable a244 : float#; mutable b244 : t36 } (* { float#; #{ float } } *)
type t245 = { mutable a245 : float#; mutable b245 : t51 } (* { float#; #{ float; float } } *)
type t246 = { mutable a246 : float#; mutable b246 : t211 } (* { float#; #{ float; float# } } *)
type t247 = { mutable a247 : float#; mutable b247 : t55 } (* { float#; #{ float; #{ float } } } *)
type t248 = { mutable a248 : float#; mutable b248 : t216 } (* { float#; #{ float; #{ float# } } } *)
type t249 = { mutable a249 : float#; mutable b249 : t215 } (* { float#; #{ float# } } *)
type t250 = { mutable a250 : float#; mutable b250 : t219 } (* { float#; #{ float#; float } } *)
type t251 = { mutable a251 : float#; mutable b251 : t221 } (* { float#; #{ float#; float# } } *)
type t252 = { mutable a252 : float#; mutable b252 : t223 } (* { float#; #{ float#; #{ float } } } *)
type t253 = { mutable a253 : float#; mutable b253 : t225 } (* { float#; #{ float#; #{ float# } } } *)
type t254 = { mutable a254 : float#; mutable b254 : t69 } (* { float#; #{ #{ float; float } } } *)
type t255 = { mutable a255 : float#; mutable b255 : t231 } (* { float#; #{ #{ float; float# } } } *)
type t256 = { mutable a256 : float#; mutable b256 : t233 } (* { float#; #{ #{ float#; float } } } *)
type t257 = { mutable a257 : float#; mutable b257 : t235 } (* { float#; #{ #{ float#; float# } } } *)
type t258 = { mutable a258 : string } (* { string } *)
type t259 = { mutable a259 : string; mutable b259 : unit_u } (* { string; unit_u } *)
type t260 = { mutable a260 : string; mutable b260 : unit_u; mutable c260 : unit_u } (* { string; unit_u; unit_u } *)
type t261 = { mutable a261 : string; mutable b261 : unit_u; mutable c261 : string } (* { string; unit_u; string } *)
type t262 = { mutable a262 : string; mutable b262 : string } (* { string; string } *)
type t263 = { mutable a263 : string; mutable b263 : string; mutable c263 : unit_u } (* { string; string; unit_u } *)
type t264 = { mutable a264 : string; mutable b264 : string; mutable c264 : string } (* { string; string; string } *)
type t265 = { mutable a265 : string; mutable b265 : t170 } (* { string; #{ unit_u } } *)
type t266 = #{ a266 : unit_u; b266 : unit_u } (* #{ unit_u; unit_u } *)
type t267 = { mutable a267 : string; mutable b267 : t266 } (* { string; #{ unit_u; unit_u } } *)
type t268 = { mutable a268 : string; mutable b268 : t160 } (* { string; #{ unit_u; string } } *)
type t269 = #{ a269 : unit_u; b269 : t170 } (* #{ unit_u; #{ unit_u } } *)
type t270 = { mutable a270 : string; mutable b270 : t269 } (* { string; #{ unit_u; #{ unit_u } } } *)
type t271 = { mutable a271 : string; mutable b271 : t163 } (* { string; #{ unit_u; #{ string } } } *)
type t272 = { mutable a272 : string; mutable b272 : t162 } (* { string; #{ string } } *)
type t273 = { mutable a273 : string; mutable b273 : t166 } (* { string; #{ string; unit_u } } *)
type t274 = { mutable a274 : string; mutable b274 : t168 } (* { string; #{ string; string } } *)
type t275 = { mutable a275 : string; mutable b275 : t171 } (* { string; #{ string; #{ unit_u } } } *)
type t276 = { mutable a276 : string; mutable b276 : t173 } (* { string; #{ string; #{ string } } } *)
type t277 = #{ a277 : t266 } (* #{ #{ unit_u; unit_u } } *)
type t278 = { mutable a278 : string; mutable b278 : t277 } (* { string; #{ #{ unit_u; unit_u } } } *)
type t279 = { mutable a279 : string; mutable b279 : t175 } (* { string; #{ #{ unit_u; string } } } *)
type t280 = { mutable a280 : string; mutable b280 : t177 } (* { string; #{ #{ string; unit_u } } } *)
type t281 = { mutable a281 : string; mutable b281 : t179 } (* { string; #{ #{ string; string } } } *)
type t282 = { mutable a282 : v15 } (* { (| unit_u) } *)
type t283 = { mutable a283 : v15; mutable b283 : int } (* { (| unit_u); int } *)
type t284 = { mutable a284 : v15; mutable b284 : int64 } (* { (| unit_u); int64 } *)
type t285 = { mutable a285 : v15; mutable b285 : int64# } (* { (| unit_u); int64# } *)
type t286 = { mutable a286 : v15; mutable b286 : int32# } (* { (| unit_u); int32# } *)
type t287 = { mutable a287 : v15; mutable b287 : nativeint# } (* { (| unit_u); nativeint# } *)
type t288 = { mutable a288 : v15; mutable b288 : unit_u } (* { (| unit_u); unit_u } *)
type t289 = { mutable a289 : v15; mutable b289 : float } (* { (| unit_u); float } *)
type t290 = { mutable a290 : v15; mutable b290 : v15 } (* { (| unit_u); (| unit_u) } *)
type t291 = { mutable a291 : v15; mutable b291 : v17 } (* { (| unit_u); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t292 = { mutable a292 : v15; mutable b292 : #(unit_u * int) } (* { (| unit_u); #(unit_u, int) } *)
type t293 = { mutable a293 : v15; mutable b293 : #(unit_u * int64#) } (* { (| unit_u); #(unit_u, int64#) } *)
type t294 = { mutable a294 : v15; mutable b294 : #(unit_u * unit_u) } (* { (| unit_u); #(unit_u, unit_u) } *)
type t295 = { mutable a295 : v15; mutable b295 : #(unit_u * string) } (* { (| unit_u); #(unit_u, string) } *)
type t296 = { mutable a296 : v17 } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t297 = { mutable a297 : v17; mutable b297 : int } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); int } *)
type t298 = { mutable a298 : v17; mutable b298 : int64 } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); int64 } *)
type t299 = { mutable a299 : v17; mutable b299 : int64# } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); int64# } *)
type t300 = { mutable a300 : v17; mutable b300 : int32# } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); int32# } *)
type t301 = { mutable a301 : v17; mutable b301 : nativeint# } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); nativeint# } *)
type t302 = { mutable a302 : v17; mutable b302 : unit_u } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); unit_u } *)
type t303 = { mutable a303 : v17; mutable b303 : float } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); float } *)
type t304 = { mutable a304 : v17; mutable b304 : v15 } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); (| unit_u) } *)
type t305 = { mutable a305 : v17; mutable b305 : v17 } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t306 = { mutable a306 : v17; mutable b306 : #(unit_u * int) } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); #(unit_u, int) } *)
type t307 = { mutable a307 : v17; mutable b307 : #(unit_u * int64#) } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); #(unit_u, int64#) } *)
type t308 = { mutable a308 : v17; mutable b308 : #(unit_u * unit_u) } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); #(unit_u, unit_u) } *)
type t309 = { mutable a309 : v17; mutable b309 : #(unit_u * string) } (* { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); #(unit_u, string) } *)
type t310 = { mutable a310 : #(unit_u * int) } (* { #(unit_u, int) } *)
type t311 = { mutable a311 : #(unit_u * int); mutable b311 : int } (* { #(unit_u, int); int } *)
type t312 = { mutable a312 : #(unit_u * int); mutable b312 : int64 } (* { #(unit_u, int); int64 } *)
type t313 = { mutable a313 : #(unit_u * int); mutable b313 : int64# } (* { #(unit_u, int); int64# } *)
type t314 = { mutable a314 : #(unit_u * int); mutable b314 : int32# } (* { #(unit_u, int); int32# } *)
type t315 = { mutable a315 : #(unit_u * int); mutable b315 : nativeint# } (* { #(unit_u, int); nativeint# } *)
type t316 = { mutable a316 : #(unit_u * int); mutable b316 : unit_u } (* { #(unit_u, int); unit_u } *)
type t317 = { mutable a317 : #(unit_u * int); mutable b317 : float } (* { #(unit_u, int); float } *)
type t318 = { mutable a318 : #(unit_u * int); mutable b318 : v15 } (* { #(unit_u, int); (| unit_u) } *)
type t319 = { mutable a319 : #(unit_u * int); mutable b319 : v17 } (* { #(unit_u, int); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t320 = { mutable a320 : #(unit_u * int); mutable b320 : #(unit_u * int) } (* { #(unit_u, int); #(unit_u, int) } *)
type t321 = { mutable a321 : #(unit_u * int); mutable b321 : #(unit_u * int64#) } (* { #(unit_u, int); #(unit_u, int64#) } *)
type t322 = { mutable a322 : #(unit_u * int); mutable b322 : #(unit_u * unit_u) } (* { #(unit_u, int); #(unit_u, unit_u) } *)
type t323 = { mutable a323 : #(unit_u * int); mutable b323 : #(unit_u * string) } (* { #(unit_u, int); #(unit_u, string) } *)
type t324 = { mutable a324 : #(unit_u * int64#) } (* { #(unit_u, int64#) } *)
type t325 = { mutable a325 : #(unit_u * int64#); mutable b325 : int } (* { #(unit_u, int64#); int } *)
type t326 = { mutable a326 : #(unit_u * int64#); mutable b326 : int64 } (* { #(unit_u, int64#); int64 } *)
type t327 = { mutable a327 : #(unit_u * int64#); mutable b327 : int64# } (* { #(unit_u, int64#); int64# } *)
type t328 = { mutable a328 : #(unit_u * int64#); mutable b328 : int32# } (* { #(unit_u, int64#); int32# } *)
type t329 = { mutable a329 : #(unit_u * int64#); mutable b329 : nativeint# } (* { #(unit_u, int64#); nativeint# } *)
type t330 = { mutable a330 : #(unit_u * int64#); mutable b330 : unit_u } (* { #(unit_u, int64#); unit_u } *)
type t331 = { mutable a331 : #(unit_u * int64#); mutable b331 : float } (* { #(unit_u, int64#); float } *)
type t332 = { mutable a332 : #(unit_u * int64#); mutable b332 : v15 } (* { #(unit_u, int64#); (| unit_u) } *)
type t333 = { mutable a333 : #(unit_u * int64#); mutable b333 : v17 } (* { #(unit_u, int64#); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t334 = { mutable a334 : #(unit_u * int64#); mutable b334 : #(unit_u * int) } (* { #(unit_u, int64#); #(unit_u, int) } *)
type t335 = { mutable a335 : #(unit_u * int64#); mutable b335 : #(unit_u * int64#) } (* { #(unit_u, int64#); #(unit_u, int64#) } *)
type t336 = { mutable a336 : #(unit_u * int64#); mutable b336 : #(unit_u * unit_u) } (* { #(unit_u, int64#); #(unit_u, unit_u) } *)
type t337 = { mutable a337 : #(unit_u * int64#); mutable b337 : #(unit_u * string) } (* { #(unit_u, int64#); #(unit_u, string) } *)
type t338 = { mutable a338 : #(unit_u * unit_u); mutable b338 : int } (* { #(unit_u, unit_u); int } *)
type t339 = { mutable a339 : #(unit_u * unit_u); mutable b339 : int64 } (* { #(unit_u, unit_u); int64 } *)
type t340 = { mutable a340 : #(unit_u * unit_u); mutable b340 : int64# } (* { #(unit_u, unit_u); int64# } *)
type t341 = { mutable a341 : #(unit_u * unit_u); mutable b341 : int32# } (* { #(unit_u, unit_u); int32# } *)
type t342 = { mutable a342 : #(unit_u * unit_u); mutable b342 : nativeint# } (* { #(unit_u, unit_u); nativeint# } *)
type t343 = { mutable a343 : #(unit_u * unit_u); mutable b343 : float } (* { #(unit_u, unit_u); float } *)
type t344 = { mutable a344 : #(unit_u * unit_u); mutable b344 : v15 } (* { #(unit_u, unit_u); (| unit_u) } *)
type t345 = { mutable a345 : #(unit_u * unit_u); mutable b345 : v17 } (* { #(unit_u, unit_u); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t346 = { mutable a346 : #(unit_u * unit_u); mutable b346 : #(unit_u * int) } (* { #(unit_u, unit_u); #(unit_u, int) } *)
type t347 = { mutable a347 : #(unit_u * unit_u); mutable b347 : #(unit_u * int64#) } (* { #(unit_u, unit_u); #(unit_u, int64#) } *)
type t348 = { mutable a348 : #(unit_u * unit_u); mutable b348 : #(unit_u * string) } (* { #(unit_u, unit_u); #(unit_u, string) } *)
type t349 = { mutable a349 : #(unit_u * string) } (* { #(unit_u, string) } *)
type t350 = { mutable a350 : #(unit_u * string); mutable b350 : int } (* { #(unit_u, string); int } *)
type t351 = { mutable a351 : #(unit_u * string); mutable b351 : int64 } (* { #(unit_u, string); int64 } *)
type t352 = { mutable a352 : #(unit_u * string); mutable b352 : int64# } (* { #(unit_u, string); int64# } *)
type t353 = { mutable a353 : #(unit_u * string); mutable b353 : int32# } (* { #(unit_u, string); int32# } *)
type t354 = { mutable a354 : #(unit_u * string); mutable b354 : nativeint# } (* { #(unit_u, string); nativeint# } *)
type t355 = { mutable a355 : #(unit_u * string); mutable b355 : unit_u } (* { #(unit_u, string); unit_u } *)
type t356 = { mutable a356 : #(unit_u * string); mutable b356 : float } (* { #(unit_u, string); float } *)
type t357 = { mutable a357 : #(unit_u * string); mutable b357 : v15 } (* { #(unit_u, string); (| unit_u) } *)
type t358 = { mutable a358 : #(unit_u * string); mutable b358 : v17 } (* { #(unit_u, string); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) } *)
type t359 = { mutable a359 : #(unit_u * string); mutable b359 : #(unit_u * int) } (* { #(unit_u, string); #(unit_u, int) } *)
type t360 = { mutable a360 : #(unit_u * string); mutable b360 : #(unit_u * int64#) } (* { #(unit_u, string); #(unit_u, int64#) } *)
type t361 = { mutable a361 : #(unit_u * string); mutable b361 : #(unit_u * unit_u) } (* { #(unit_u, string); #(unit_u, unit_u) } *)
type t362 = { mutable a362 : #(unit_u * string); mutable b362 : #(unit_u * string) } (* { #(unit_u, string); #(unit_u, string) } *)
type t363 = { mutable a363 : t23 } (* { #{ int } } *)
type t364 = { mutable a364 : t23; mutable b364 : int } (* { #{ int }; int } *)
type t365 = { mutable a365 : t23; mutable b365 : int32# } (* { #{ int }; int32# } *)
type t366 = { mutable a366 : t23; mutable b366 : float } (* { #{ int }; float } *)
type t367 = { mutable a367 : t25 } (* { #{ int; int } } *)
type t368 = { mutable a368 : t25; mutable b368 : int } (* { #{ int; int }; int } *)
type t369 = { mutable a369 : t25; mutable b369 : int32# } (* { #{ int; int }; int32# } *)
type t370 = { mutable a370 : t25; mutable b370 : float } (* { #{ int; int }; float } *)
type t371 = { mutable a371 : t27 } (* { #{ int; int32# } } *)
type t372 = { mutable a372 : t27; mutable b372 : int } (* { #{ int; int32# }; int } *)
type t373 = { mutable a373 : t27; mutable b373 : int32# } (* { #{ int; int32# }; int32# } *)
type t374 = { mutable a374 : t29 } (* { #{ int; float } } *)
type t375 = { mutable a375 : t29; mutable b375 : int } (* { #{ int; float }; int } *)
type t376 = { mutable a376 : t29; mutable b376 : float } (* { #{ int; float }; float } *)
type t377 = #{ a377 : int; b377 : t25 } (* #{ int; #{ int; int } } *)
type t378 = { mutable a378 : t377 } (* { #{ int; #{ int; int } } } *)
type t379 = #{ a379 : int; b379 : t27 } (* #{ int; #{ int; int32# } } *)
type t380 = { mutable a380 : t379 } (* { #{ int; #{ int; int32# } } } *)
type t381 = #{ a381 : int; b381 : t29 } (* #{ int; #{ int; float } } *)
type t382 = { mutable a382 : t381 } (* { #{ int; #{ int; float } } } *)
type t383 = #{ a383 : int; b383 : t40 } (* #{ int; #{ int32#; int } } *)
type t384 = { mutable a384 : t383 } (* { #{ int; #{ int32#; int } } } *)
type t385 = #{ a385 : int; b385 : t42 } (* #{ int; #{ int32#; int32# } } *)
type t386 = { mutable a386 : t385 } (* { #{ int; #{ int32#; int32# } } } *)
type t387 = #{ a387 : int; b387 : t49 } (* #{ int; #{ float; int } } *)
type t388 = { mutable a388 : t387 } (* { #{ int; #{ float; int } } } *)
type t389 = #{ a389 : int; b389 : t51 } (* #{ int; #{ float; float } } *)
type t390 = { mutable a390 : t389 } (* { #{ int; #{ float; float } } } *)
type t391 = #{ a391 : int64; b391 : int64# } (* #{ int64; int64# } *)
type t392 = #{ a392 : int64#; b392 : float# } (* #{ int64#; float# } *)
type t393 = { mutable a393 : t391; mutable b393 : t392 } (* { #{ int64; int64# }; #{ int64#; float# } } *)
type t394 = #{ a394 : int64; b394 : string } (* #{ int64; string } *)
type t395 = #{ a395 : int64#; b395 : string } (* #{ int64#; string } *)
type t396 = { mutable a396 : t394; mutable b396 : t395 } (* { #{ int64; string }; #{ int64#; string } } *)
type t397 = #{ a397 : int64#; b397 : int64 } (* #{ int64#; int64 } *)
type t398 = #{ a398 : int64; b398 : int64 } (* #{ int64; int64 } *)
type t399 = { mutable a399 : t397; mutable b399 : t398 } (* { #{ int64#; int64 }; #{ int64; int64 } } *)
type t400 = #{ a400 : float32#; b400 : float } (* #{ float32#; float } *)
type t401 = { mutable a401 : t397; mutable b401 : t400 } (* { #{ int64#; int64 }; #{ float32#; float } } *)
type t402 = { mutable a402 : t33 } (* { #{ int32# } } *)
type t403 = { mutable a403 : t33; mutable b403 : int } (* { #{ int32# }; int } *)
type t404 = { mutable a404 : t33; mutable b404 : int32# } (* { #{ int32# }; int32# } *)
type t405 = { mutable a405 : t40 } (* { #{ int32#; int } } *)
type t406 = { mutable a406 : t40; mutable b406 : int } (* { #{ int32#; int }; int } *)
type t407 = { mutable a407 : t40; mutable b407 : int32# } (* { #{ int32#; int }; int32# } *)
type t408 = { mutable a408 : t42 } (* { #{ int32#; int32# } } *)
type t409 = { mutable a409 : t42; mutable b409 : int } (* { #{ int32#; int32# }; int } *)
type t410 = { mutable a410 : t42; mutable b410 : int32# } (* { #{ int32#; int32# }; int32# } *)
type t411 = #{ a411 : int32#; b411 : t25 } (* #{ int32#; #{ int; int } } *)
type t412 = { mutable a412 : t411 } (* { #{ int32#; #{ int; int } } } *)
type t413 = #{ a413 : int32#; b413 : t27 } (* #{ int32#; #{ int; int32# } } *)
type t414 = { mutable a414 : t413 } (* { #{ int32#; #{ int; int32# } } } *)
type t415 = #{ a415 : int32#; b415 : t40 } (* #{ int32#; #{ int32#; int } } *)
type t416 = { mutable a416 : t415 } (* { #{ int32#; #{ int32#; int } } } *)
type t417 = #{ a417 : int32#; b417 : t42 } (* #{ int32#; #{ int32#; int32# } } *)
type t418 = { mutable a418 : t417 } (* { #{ int32#; #{ int32#; int32# } } } *)
type t419 = { mutable a419 : t170; mutable b419 : string } (* { #{ unit_u }; string } *)
type t420 = { mutable a420 : t266; mutable b420 : string } (* { #{ unit_u; unit_u }; string } *)
type t421 = { mutable a421 : t160 } (* { #{ unit_u; string } } *)
type t422 = { mutable a422 : t160; mutable b422 : unit_u } (* { #{ unit_u; string }; unit_u } *)
type t423 = { mutable a423 : t160; mutable b423 : string } (* { #{ unit_u; string }; string } *)
type t424 = #{ a424 : unit_u; b424 : t160 } (* #{ unit_u; #{ unit_u; string } } *)
type t425 = { mutable a425 : t424 } (* { #{ unit_u; #{ unit_u; string } } } *)
type t426 = #{ a426 : unit_u; b426 : t166 } (* #{ unit_u; #{ string; unit_u } } *)
type t427 = { mutable a427 : t426 } (* { #{ unit_u; #{ string; unit_u } } } *)
type t428 = #{ a428 : unit_u; b428 : t168 } (* #{ unit_u; #{ string; string } } *)
type t429 = { mutable a429 : t428 } (* { #{ unit_u; #{ string; string } } } *)
type t430 = { mutable a430 : t36 } (* { #{ float } } *)
type t431 = { mutable a431 : t36; mutable b431 : int } (* { #{ float }; int } *)
type t432 = { mutable a432 : t36; mutable b432 : float } (* { #{ float }; float } *)
type t433 = { mutable a433 : t36; mutable b433 : float# } (* { #{ float }; float# } *)
type t434 = { mutable a434 : t49 } (* { #{ float; int } } *)
type t435 = { mutable a435 : t49; mutable b435 : int } (* { #{ float; int }; int } *)
type t436 = { mutable a436 : t49; mutable b436 : float } (* { #{ float; int }; float } *)
type t437 = { mutable a437 : t51 } (* { #{ float; float } } *)
type t438 = { mutable a438 : t51; mutable b438 : int } (* { #{ float; float }; int } *)
type t439 = { mutable a439 : t51; mutable b439 : float } (* { #{ float; float }; float } *)
type t440 = { mutable a440 : t51; mutable b440 : float# } (* { #{ float; float }; float# } *)
type t441 = { mutable a441 : t211 } (* { #{ float; float# } } *)
type t442 = { mutable a442 : t211; mutable b442 : float } (* { #{ float; float# }; float } *)
type t443 = { mutable a443 : t211; mutable b443 : float# } (* { #{ float; float# }; float# } *)
type t444 = #{ a444 : float; b444 : t25 } (* #{ float; #{ int; int } } *)
type t445 = { mutable a445 : t444 } (* { #{ float; #{ int; int } } } *)
type t446 = #{ a446 : float; b446 : t29 } (* #{ float; #{ int; float } } *)
type t447 = { mutable a447 : t446 } (* { #{ float; #{ int; float } } } *)
type t448 = #{ a448 : float; b448 : t49 } (* #{ float; #{ float; int } } *)
type t449 = { mutable a449 : t448 } (* { #{ float; #{ float; int } } } *)
type t450 = #{ a450 : float; b450 : t51 } (* #{ float; #{ float; float } } *)
type t451 = { mutable a451 : t450 } (* { #{ float; #{ float; float } } } *)
type t452 = #{ a452 : float; b452 : t211 } (* #{ float; #{ float; float# } } *)
type t453 = { mutable a453 : t452 } (* { #{ float; #{ float; float# } } } *)
type t454 = #{ a454 : float; b454 : t219 } (* #{ float; #{ float#; float } } *)
type t455 = { mutable a455 : t454 } (* { #{ float; #{ float#; float } } } *)
type t456 = #{ a456 : float; b456 : t221 } (* #{ float; #{ float#; float# } } *)
type t457 = { mutable a457 : t456 } (* { #{ float; #{ float#; float# } } } *)
type t458 = { mutable a458 : t215 } (* { #{ float# } } *)
type t459 = { mutable a459 : t215; mutable b459 : float } (* { #{ float# }; float } *)
type t460 = { mutable a460 : t215; mutable b460 : float# } (* { #{ float# }; float# } *)
type t461 = { mutable a461 : t219 } (* { #{ float#; float } } *)
type t462 = { mutable a462 : t219; mutable b462 : float } (* { #{ float#; float }; float } *)
type t463 = { mutable a463 : t219; mutable b463 : float# } (* { #{ float#; float }; float# } *)
type t464 = { mutable a464 : t221 } (* { #{ float#; float# } } *)
type t465 = { mutable a465 : t221; mutable b465 : float } (* { #{ float#; float# }; float } *)
type t466 = { mutable a466 : t221; mutable b466 : float# } (* { #{ float#; float# }; float# } *)
type t467 = #{ a467 : float#; b467 : t51 } (* #{ float#; #{ float; float } } *)
type t468 = { mutable a468 : t467 } (* { #{ float#; #{ float; float } } } *)
type t469 = #{ a469 : float#; b469 : t211 } (* #{ float#; #{ float; float# } } *)
type t470 = { mutable a470 : t469 } (* { #{ float#; #{ float; float# } } } *)
type t471 = #{ a471 : float#; b471 : t219 } (* #{ float#; #{ float#; float } } *)
type t472 = { mutable a472 : t471 } (* { #{ float#; #{ float#; float } } } *)
type t473 = #{ a473 : float#; b473 : t221 } (* #{ float#; #{ float#; float# } } *)
type t474 = { mutable a474 : t473 } (* { #{ float#; #{ float#; float# } } } *)
type t475 = #{ a475 : float32#; b475 : int64# } (* #{ float32#; int64# } *)
type t476 = #{ a476 : string; b476 : int64# } (* #{ string; int64# } *)
type t477 = { mutable a477 : t475; mutable b477 : t476 } (* { #{ float32#; int64# }; #{ string; int64# } } *)
type t478 = { mutable a478 : t162 } (* { #{ string } } *)
type t479 = { mutable a479 : t162; mutable b479 : unit_u } (* { #{ string }; unit_u } *)
type t480 = { mutable a480 : t162; mutable b480 : string } (* { #{ string }; string } *)
type t481 = { mutable a481 : t166 } (* { #{ string; unit_u } } *)
type t482 = { mutable a482 : t166; mutable b482 : unit_u } (* { #{ string; unit_u }; unit_u } *)
type t483 = { mutable a483 : t166; mutable b483 : string } (* { #{ string; unit_u }; string } *)
type t484 = { mutable a484 : t168 } (* { #{ string; string } } *)
type t485 = { mutable a485 : t168; mutable b485 : unit_u } (* { #{ string; string }; unit_u } *)
type t486 = { mutable a486 : t168; mutable b486 : string } (* { #{ string; string }; string } *)
type t487 = #{ a487 : string; b487 : t266 } (* #{ string; #{ unit_u; unit_u } } *)
type t488 = { mutable a488 : t487 } (* { #{ string; #{ unit_u; unit_u } } } *)
type t489 = #{ a489 : string; b489 : t160 } (* #{ string; #{ unit_u; string } } *)
type t490 = { mutable a490 : t489 } (* { #{ string; #{ unit_u; string } } } *)
type t491 = #{ a491 : string; b491 : t166 } (* #{ string; #{ string; unit_u } } *)
type t492 = { mutable a492 : t491 } (* { #{ string; #{ string; unit_u } } } *)
type t493 = #{ a493 : string; b493 : t168 } (* #{ string; #{ string; string } } *)
type t494 = { mutable a494 : t493 } (* { #{ string; #{ string; string } } } *)
type t495 = #{ a495 : t25; b495 : int } (* #{ #{ int; int }; int } *)
type t496 = { mutable a496 : t495 } (* { #{ #{ int; int }; int } } *)
type t497 = #{ a497 : t25; b497 : int32# } (* #{ #{ int; int }; int32# } *)
type t498 = { mutable a498 : t497 } (* { #{ #{ int; int }; int32# } } *)
type t499 = #{ a499 : t25; b499 : float } (* #{ #{ int; int }; float } *)
type t500 = { mutable a500 : t499 } (* { #{ #{ int; int }; float } } *)
type t501 = #{ a501 : t27; b501 : int } (* #{ #{ int; int32# }; int } *)
type t502 = { mutable a502 : t501 } (* { #{ #{ int; int32# }; int } } *)
type t503 = #{ a503 : t27; b503 : int32# } (* #{ #{ int; int32# }; int32# } *)
type t504 = { mutable a504 : t503 } (* { #{ #{ int; int32# }; int32# } } *)
type t505 = #{ a505 : t29; b505 : int } (* #{ #{ int; float }; int } *)
type t506 = { mutable a506 : t505 } (* { #{ #{ int; float }; int } } *)
type t507 = #{ a507 : t29; b507 : float } (* #{ #{ int; float }; float } *)
type t508 = { mutable a508 : t507 } (* { #{ #{ int; float }; float } } *)
type t509 = #{ a509 : t40; b509 : int } (* #{ #{ int32#; int }; int } *)
type t510 = { mutable a510 : t509 } (* { #{ #{ int32#; int }; int } } *)
type t511 = #{ a511 : t40; b511 : int32# } (* #{ #{ int32#; int }; int32# } *)
type t512 = { mutable a512 : t511 } (* { #{ #{ int32#; int }; int32# } } *)
type t513 = #{ a513 : t42; b513 : int } (* #{ #{ int32#; int32# }; int } *)
type t514 = { mutable a514 : t513 } (* { #{ #{ int32#; int32# }; int } } *)
type t515 = #{ a515 : t42; b515 : int32# } (* #{ #{ int32#; int32# }; int32# } *)
type t516 = { mutable a516 : t515 } (* { #{ #{ int32#; int32# }; int32# } } *)
type t517 = #{ a517 : t266; b517 : string } (* #{ #{ unit_u; unit_u }; string } *)
type t518 = { mutable a518 : t517 } (* { #{ #{ unit_u; unit_u }; string } } *)
type t519 = #{ a519 : t160; b519 : unit_u } (* #{ #{ unit_u; string }; unit_u } *)
type t520 = { mutable a520 : t519 } (* { #{ #{ unit_u; string }; unit_u } } *)
type t521 = #{ a521 : t160; b521 : string } (* #{ #{ unit_u; string }; string } *)
type t522 = { mutable a522 : t521 } (* { #{ #{ unit_u; string }; string } } *)
type t523 = #{ a523 : t49; b523 : int } (* #{ #{ float; int }; int } *)
type t524 = { mutable a524 : t523 } (* { #{ #{ float; int }; int } } *)
type t525 = #{ a525 : t49; b525 : float } (* #{ #{ float; int }; float } *)
type t526 = { mutable a526 : t525 } (* { #{ #{ float; int }; float } } *)
type t527 = #{ a527 : t51; b527 : int } (* #{ #{ float; float }; int } *)
type t528 = { mutable a528 : t527 } (* { #{ #{ float; float }; int } } *)
type t529 = #{ a529 : t51; b529 : float } (* #{ #{ float; float }; float } *)
type t530 = { mutable a530 : t529 } (* { #{ #{ float; float }; float } } *)
type t531 = #{ a531 : t51; b531 : float# } (* #{ #{ float; float }; float# } *)
type t532 = { mutable a532 : t531 } (* { #{ #{ float; float }; float# } } *)
type t533 = #{ a533 : t211; b533 : float } (* #{ #{ float; float# }; float } *)
type t534 = { mutable a534 : t533 } (* { #{ #{ float; float# }; float } } *)
type t535 = #{ a535 : t211; b535 : float# } (* #{ #{ float; float# }; float# } *)
type t536 = { mutable a536 : t535 } (* { #{ #{ float; float# }; float# } } *)
type t537 = #{ a537 : t219; b537 : float } (* #{ #{ float#; float }; float } *)
type t538 = { mutable a538 : t537 } (* { #{ #{ float#; float }; float } } *)
type t539 = #{ a539 : t219; b539 : float# } (* #{ #{ float#; float }; float# } *)
type t540 = { mutable a540 : t539 } (* { #{ #{ float#; float }; float# } } *)
type t541 = #{ a541 : t221; b541 : float } (* #{ #{ float#; float# }; float } *)
type t542 = { mutable a542 : t541 } (* { #{ #{ float#; float# }; float } } *)
type t543 = #{ a543 : t221; b543 : float# } (* #{ #{ float#; float# }; float# } *)
type t544 = { mutable a544 : t543 } (* { #{ #{ float#; float# }; float# } } *)
type t545 = #{ a545 : t166; b545 : unit_u } (* #{ #{ string; unit_u }; unit_u } *)
type t546 = { mutable a546 : t545 } (* { #{ #{ string; unit_u }; unit_u } } *)
type t547 = #{ a547 : t166; b547 : string } (* #{ #{ string; unit_u }; string } *)
type t548 = { mutable a548 : t547 } (* { #{ #{ string; unit_u }; string } } *)
type t549 = #{ a549 : t168; b549 : unit_u } (* #{ #{ string; string }; unit_u } *)
type t550 = { mutable a550 : t549 } (* { #{ #{ string; string }; unit_u } } *)
type t551 = #{ a551 : t168; b551 : string } (* #{ #{ string; string }; string } *)
type t552 = { mutable a552 : t551 } (* { #{ #{ string; string }; string } } *)

let () =
  (********************)
  (*   t0 = { int }   *)
  (********************)
  let r = { a0 = 0 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a0 *)
  let actual = r.a0 in
  let expected = 0 in
  mark_test_run 1;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a0 = a01 } { a0 = a02 } -> (fun a b -> Int.equal a b) a01 a02) in
  let next_r = { a0 = 100 } in
  let r_expected = { a0 = 0 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a0 *)
  r.a0 <- next_r.a0;
  let r_expected = { r_expected with a0 = next_r.a0 } in
  mark_test_run 2;
  let test = eq r r_expected in
  if not test then failwithf "test 2 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a0 } = r in
  let expected_a0 = 100 in
  mark_test_run 3;
  let test = (fun a b -> Int.equal a b) expected_a0 a0 in
  if not test then failwithf "test 3 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a0 } = r in
  let expected_a0 = 100 in
  mark_test_run 4;
  let test = (fun a b -> Int.equal a b) expected_a0 a0 in
  if not test then failwithf "test 4 failed";

  ()
;;

let () =
  (*************************)
  (*   t1 = { int; int }   *)
  (*************************)
  let r = { a1 = 0; b1 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a1 *)
  let actual = r.a1 in
  let expected = 0 in
  mark_test_run 5;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 5 failed";
  (* Paths of depth 1 *)
  (* .b1 *)
  let actual = r.b1 in
  let expected = 1 in
  mark_test_run 6;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 6 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a1 = a11; b1 = b11 } { a1 = a12; b1 = b12 } -> (fun a b -> Int.equal a b) a11 a12 && (fun a b -> Int.equal a b) b11 b12) in
  let next_r = { a1 = 100; b1 = 101 } in
  let r_expected = { a1 = 0; b1 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a1 *)
  r.a1 <- next_r.a1;
  let r_expected = { r_expected with a1 = next_r.a1 } in
  mark_test_run 7;
  let test = eq r r_expected in
  if not test then failwithf "test 7 failed";
  Gc.compact ();
  (* .b1 *)
  r.b1 <- next_r.b1;
  let r_expected = { r_expected with b1 = next_r.b1 } in
  mark_test_run 8;
  let test = eq r r_expected in
  if not test then failwithf "test 8 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a1; b1 } = r in
  let expected_a1 = 100 in
  mark_test_run 9;
  let test = (fun a b -> Int.equal a b) expected_a1 a1 in
  if not test then failwithf "test 9 failed";
  let expected_b1 = 101 in
  mark_test_run 10;
  let test = (fun a b -> Int.equal a b) expected_b1 b1 in
  if not test then failwithf "test 10 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a1; b1 } = r in
  let expected_a1 = 100 in
  mark_test_run 11;
  let test = (fun a b -> Int.equal a b) expected_a1 a1 in
  if not test then failwithf "test 11 failed";
  let expected_b1 = 101 in
  mark_test_run 12;
  let test = (fun a b -> Int.equal a b) expected_b1 b1 in
  if not test then failwithf "test 12 failed";

  ()
;;

let () =
  (******************************)
  (*   t2 = { int; int; int }   *)
  (******************************)
  let r = { a2 = 0; b2 = 1; c2 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a2 *)
  let actual = r.a2 in
  let expected = 0 in
  mark_test_run 13;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 13 failed";
  (* Paths of depth 1 *)
  (* .b2 *)
  let actual = r.b2 in
  let expected = 1 in
  mark_test_run 14;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 14 failed";
  (* Paths of depth 1 *)
  (* .c2 *)
  let actual = r.c2 in
  let expected = 2 in
  mark_test_run 15;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 15 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a2 = a21; b2 = b21; c2 = c21 } { a2 = a22; b2 = b22; c2 = c22 } -> (fun a b -> Int.equal a b) a21 a22 && (fun a b -> Int.equal a b) b21 b22 && (fun a b -> Int.equal a b) c21 c22) in
  let next_r = { a2 = 100; b2 = 101; c2 = 102 } in
  let r_expected = { a2 = 0; b2 = 1; c2 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a2 *)
  r.a2 <- next_r.a2;
  let r_expected = { r_expected with a2 = next_r.a2 } in
  mark_test_run 16;
  let test = eq r r_expected in
  if not test then failwithf "test 16 failed";
  Gc.compact ();
  (* .b2 *)
  r.b2 <- next_r.b2;
  let r_expected = { r_expected with b2 = next_r.b2 } in
  mark_test_run 17;
  let test = eq r r_expected in
  if not test then failwithf "test 17 failed";
  Gc.compact ();
  (* .c2 *)
  r.c2 <- next_r.c2;
  let r_expected = { r_expected with c2 = next_r.c2 } in
  mark_test_run 18;
  let test = eq r r_expected in
  if not test then failwithf "test 18 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a2; b2; c2 } = r in
  let expected_a2 = 100 in
  mark_test_run 19;
  let test = (fun a b -> Int.equal a b) expected_a2 a2 in
  if not test then failwithf "test 19 failed";
  let expected_b2 = 101 in
  mark_test_run 20;
  let test = (fun a b -> Int.equal a b) expected_b2 b2 in
  if not test then failwithf "test 20 failed";
  let expected_c2 = 102 in
  mark_test_run 21;
  let test = (fun a b -> Int.equal a b) expected_c2 c2 in
  if not test then failwithf "test 21 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a2; b2; c2 } = r in
  let expected_a2 = 100 in
  mark_test_run 22;
  let test = (fun a b -> Int.equal a b) expected_a2 a2 in
  if not test then failwithf "test 22 failed";
  let expected_b2 = 101 in
  mark_test_run 23;
  let test = (fun a b -> Int.equal a b) expected_b2 b2 in
  if not test then failwithf "test 23 failed";
  let expected_c2 = 102 in
  mark_test_run 24;
  let test = (fun a b -> Int.equal a b) expected_c2 c2 in
  if not test then failwithf "test 24 failed";

  ()
;;

let () =
  (*********************************)
  (*   t3 = { int; int; int32# }   *)
  (*********************************)
  let r = { a3 = 0; b3 = 1; c3 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a3 *)
  let actual = r.a3 in
  let expected = 0 in
  mark_test_run 25;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 25 failed";
  (* Paths of depth 1 *)
  (* .b3 *)
  let actual = r.b3 in
  let expected = 1 in
  mark_test_run 26;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 26 failed";
  (* Paths of depth 1 *)
  (* .c3 *)
  let actual = r.c3 in
  let expected = #2l in
  mark_test_run 27;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 27 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a3 = a31; b3 = b31; c3 = c31 } { a3 = a32; b3 = b32; c3 = c32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c31 c32) in
  let next_r = { a3 = 100; b3 = 101; c3 = #102l } in
  let r_expected = { a3 = 0; b3 = 1; c3 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a3 *)
  r.a3 <- next_r.a3;
  let r_expected = { r_expected with a3 = next_r.a3 } in
  mark_test_run 28;
  let test = eq r r_expected in
  if not test then failwithf "test 28 failed";
  Gc.compact ();
  (* .b3 *)
  r.b3 <- next_r.b3;
  let r_expected = { r_expected with b3 = next_r.b3 } in
  mark_test_run 29;
  let test = eq r r_expected in
  if not test then failwithf "test 29 failed";
  Gc.compact ();
  (* .c3 *)
  r.c3 <- next_r.c3;
  let r_expected = { r_expected with c3 = next_r.c3 } in
  mark_test_run 30;
  let test = eq r r_expected in
  if not test then failwithf "test 30 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a3; b3; c3 } = r in
  let expected_a3 = 100 in
  mark_test_run 31;
  let test = (fun a b -> Int.equal a b) expected_a3 a3 in
  if not test then failwithf "test 31 failed";
  let expected_b3 = 101 in
  mark_test_run 32;
  let test = (fun a b -> Int.equal a b) expected_b3 b3 in
  if not test then failwithf "test 32 failed";
  let expected_c3 = #102l in
  mark_test_run 33;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c3 c3 in
  if not test then failwithf "test 33 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a3; b3; c3 } = r in
  let expected_a3 = 100 in
  mark_test_run 34;
  let test = (fun a b -> Int.equal a b) expected_a3 a3 in
  if not test then failwithf "test 34 failed";
  let expected_b3 = 101 in
  mark_test_run 35;
  let test = (fun a b -> Int.equal a b) expected_b3 b3 in
  if not test then failwithf "test 35 failed";
  let expected_c3 = #102l in
  mark_test_run 36;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c3 c3 in
  if not test then failwithf "test 36 failed";

  ()
;;

let () =
  (********************************)
  (*   t4 = { int; int; float }   *)
  (********************************)
  let r = { a4 = 0; b4 = 1; c4 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a4 *)
  let actual = r.a4 in
  let expected = 0 in
  mark_test_run 37;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 37 failed";
  (* Paths of depth 1 *)
  (* .b4 *)
  let actual = r.b4 in
  let expected = 1 in
  mark_test_run 38;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 38 failed";
  (* Paths of depth 1 *)
  (* .c4 *)
  let actual = r.c4 in
  let expected = 2. in
  mark_test_run 39;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 39 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a4 = a41; b4 = b41; c4 = c41 } { a4 = a42; b4 = b42; c4 = c42 } -> (fun a b -> Int.equal a b) a41 a42 && (fun a b -> Int.equal a b) b41 b42 && (fun a b -> Float.equal (globalize a) (globalize b)) c41 c42) in
  let next_r = { a4 = 100; b4 = 101; c4 = 102. } in
  let r_expected = { a4 = 0; b4 = 1; c4 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a4 *)
  r.a4 <- next_r.a4;
  let r_expected = { r_expected with a4 = next_r.a4 } in
  mark_test_run 40;
  let test = eq r r_expected in
  if not test then failwithf "test 40 failed";
  Gc.compact ();
  (* .b4 *)
  r.b4 <- next_r.b4;
  let r_expected = { r_expected with b4 = next_r.b4 } in
  mark_test_run 41;
  let test = eq r r_expected in
  if not test then failwithf "test 41 failed";
  Gc.compact ();
  (* .c4 *)
  r.c4 <- next_r.c4;
  let r_expected = { r_expected with c4 = next_r.c4 } in
  mark_test_run 42;
  let test = eq r r_expected in
  if not test then failwithf "test 42 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a4; b4; c4 } = r in
  let expected_a4 = 100 in
  mark_test_run 43;
  let test = (fun a b -> Int.equal a b) expected_a4 a4 in
  if not test then failwithf "test 43 failed";
  let expected_b4 = 101 in
  mark_test_run 44;
  let test = (fun a b -> Int.equal a b) expected_b4 b4 in
  if not test then failwithf "test 44 failed";
  let expected_c4 = 102. in
  mark_test_run 45;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c4 c4 in
  if not test then failwithf "test 45 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a4; b4; c4 } = r in
  let expected_a4 = 100 in
  mark_test_run 46;
  let test = (fun a b -> Int.equal a b) expected_a4 a4 in
  if not test then failwithf "test 46 failed";
  let expected_b4 = 101 in
  mark_test_run 47;
  let test = (fun a b -> Int.equal a b) expected_b4 b4 in
  if not test then failwithf "test 47 failed";
  let expected_c4 = 102. in
  mark_test_run 48;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c4 c4 in
  if not test then failwithf "test 48 failed";

  ()
;;

let () =
  (***************************)
  (*   t5 = { int; int64 }   *)
  (***************************)
  let r = { a5 = 0; b5 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a5 *)
  let actual = r.a5 in
  let expected = 0 in
  mark_test_run 49;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 49 failed";
  (* Paths of depth 1 *)
  (* .b5 *)
  let actual = r.b5 in
  let expected = 1L in
  mark_test_run 50;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 50 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a5 = a51; b5 = b51 } { a5 = a52; b5 = b52 } -> (fun a b -> Int.equal a b) a51 a52 && (fun a b -> Int64.equal (globalize a) (globalize b)) b51 b52) in
  let next_r = { a5 = 100; b5 = 101L } in
  let r_expected = { a5 = 0; b5 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a5 *)
  r.a5 <- next_r.a5;
  let r_expected = { r_expected with a5 = next_r.a5 } in
  mark_test_run 51;
  let test = eq r r_expected in
  if not test then failwithf "test 51 failed";
  Gc.compact ();
  (* .b5 *)
  r.b5 <- next_r.b5;
  let r_expected = { r_expected with b5 = next_r.b5 } in
  mark_test_run 52;
  let test = eq r r_expected in
  if not test then failwithf "test 52 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a5; b5 } = r in
  let expected_a5 = 100 in
  mark_test_run 53;
  let test = (fun a b -> Int.equal a b) expected_a5 a5 in
  if not test then failwithf "test 53 failed";
  let expected_b5 = 101L in
  mark_test_run 54;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b5 b5 in
  if not test then failwithf "test 54 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a5; b5 } = r in
  let expected_a5 = 100 in
  mark_test_run 55;
  let test = (fun a b -> Int.equal a b) expected_a5 a5 in
  if not test then failwithf "test 55 failed";
  let expected_b5 = 101L in
  mark_test_run 56;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b5 b5 in
  if not test then failwithf "test 56 failed";

  ()
;;

let () =
  (****************************)
  (*   t6 = { int; int64# }   *)
  (****************************)
  let r = { a6 = 0; b6 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a6 *)
  let actual = r.a6 in
  let expected = 0 in
  mark_test_run 57;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 57 failed";
  (* Paths of depth 1 *)
  (* .b6 *)
  let actual = r.b6 in
  let expected = #1L in
  mark_test_run 58;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 58 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a6 = a61; b6 = b61 } { a6 = a62; b6 = b62 } -> (fun a b -> Int.equal a b) a61 a62 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b61 b62) in
  let next_r = { a6 = 100; b6 = #101L } in
  let r_expected = { a6 = 0; b6 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a6 *)
  r.a6 <- next_r.a6;
  let r_expected = { r_expected with a6 = next_r.a6 } in
  mark_test_run 59;
  let test = eq r r_expected in
  if not test then failwithf "test 59 failed";
  Gc.compact ();
  (* .b6 *)
  r.b6 <- next_r.b6;
  let r_expected = { r_expected with b6 = next_r.b6 } in
  mark_test_run 60;
  let test = eq r r_expected in
  if not test then failwithf "test 60 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a6; b6 } = r in
  let expected_a6 = 100 in
  mark_test_run 61;
  let test = (fun a b -> Int.equal a b) expected_a6 a6 in
  if not test then failwithf "test 61 failed";
  let expected_b6 = #101L in
  mark_test_run 62;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b6 b6 in
  if not test then failwithf "test 62 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a6; b6 } = r in
  let expected_a6 = 100 in
  mark_test_run 63;
  let test = (fun a b -> Int.equal a b) expected_a6 a6 in
  if not test then failwithf "test 63 failed";
  let expected_b6 = #101L in
  mark_test_run 64;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b6 b6 in
  if not test then failwithf "test 64 failed";

  ()
;;

let () =
  (****************************)
  (*   t7 = { int; int32# }   *)
  (****************************)
  let r = { a7 = 0; b7 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a7 *)
  let actual = r.a7 in
  let expected = 0 in
  mark_test_run 65;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 65 failed";
  (* Paths of depth 1 *)
  (* .b7 *)
  let actual = r.b7 in
  let expected = #1l in
  mark_test_run 66;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 66 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a7 = a71; b7 = b71 } { a7 = a72; b7 = b72 } -> (fun a b -> Int.equal a b) a71 a72 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b71 b72) in
  let next_r = { a7 = 100; b7 = #101l } in
  let r_expected = { a7 = 0; b7 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a7 *)
  r.a7 <- next_r.a7;
  let r_expected = { r_expected with a7 = next_r.a7 } in
  mark_test_run 67;
  let test = eq r r_expected in
  if not test then failwithf "test 67 failed";
  Gc.compact ();
  (* .b7 *)
  r.b7 <- next_r.b7;
  let r_expected = { r_expected with b7 = next_r.b7 } in
  mark_test_run 68;
  let test = eq r r_expected in
  if not test then failwithf "test 68 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a7; b7 } = r in
  let expected_a7 = 100 in
  mark_test_run 69;
  let test = (fun a b -> Int.equal a b) expected_a7 a7 in
  if not test then failwithf "test 69 failed";
  let expected_b7 = #101l in
  mark_test_run 70;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b7 b7 in
  if not test then failwithf "test 70 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a7; b7 } = r in
  let expected_a7 = 100 in
  mark_test_run 71;
  let test = (fun a b -> Int.equal a b) expected_a7 a7 in
  if not test then failwithf "test 71 failed";
  let expected_b7 = #101l in
  mark_test_run 72;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b7 b7 in
  if not test then failwithf "test 72 failed";

  ()
;;

let () =
  (*********************************)
  (*   t8 = { int; int32#; int }   *)
  (*********************************)
  let r = { a8 = 0; b8 = #1l; c8 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a8 *)
  let actual = r.a8 in
  let expected = 0 in
  mark_test_run 73;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 73 failed";
  (* Paths of depth 1 *)
  (* .b8 *)
  let actual = r.b8 in
  let expected = #1l in
  mark_test_run 74;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 74 failed";
  (* Paths of depth 1 *)
  (* .c8 *)
  let actual = r.c8 in
  let expected = 2 in
  mark_test_run 75;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 75 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a8 = a81; b8 = b81; c8 = c81 } { a8 = a82; b8 = b82; c8 = c82 } -> (fun a b -> Int.equal a b) a81 a82 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b81 b82 && (fun a b -> Int.equal a b) c81 c82) in
  let next_r = { a8 = 100; b8 = #101l; c8 = 102 } in
  let r_expected = { a8 = 0; b8 = #1l; c8 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a8 *)
  r.a8 <- next_r.a8;
  let r_expected = { r_expected with a8 = next_r.a8 } in
  mark_test_run 76;
  let test = eq r r_expected in
  if not test then failwithf "test 76 failed";
  Gc.compact ();
  (* .b8 *)
  r.b8 <- next_r.b8;
  let r_expected = { r_expected with b8 = next_r.b8 } in
  mark_test_run 77;
  let test = eq r r_expected in
  if not test then failwithf "test 77 failed";
  Gc.compact ();
  (* .c8 *)
  r.c8 <- next_r.c8;
  let r_expected = { r_expected with c8 = next_r.c8 } in
  mark_test_run 78;
  let test = eq r r_expected in
  if not test then failwithf "test 78 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a8; b8; c8 } = r in
  let expected_a8 = 100 in
  mark_test_run 79;
  let test = (fun a b -> Int.equal a b) expected_a8 a8 in
  if not test then failwithf "test 79 failed";
  let expected_b8 = #101l in
  mark_test_run 80;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b8 b8 in
  if not test then failwithf "test 80 failed";
  let expected_c8 = 102 in
  mark_test_run 81;
  let test = (fun a b -> Int.equal a b) expected_c8 c8 in
  if not test then failwithf "test 81 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a8; b8; c8 } = r in
  let expected_a8 = 100 in
  mark_test_run 82;
  let test = (fun a b -> Int.equal a b) expected_a8 a8 in
  if not test then failwithf "test 82 failed";
  let expected_b8 = #101l in
  mark_test_run 83;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b8 b8 in
  if not test then failwithf "test 83 failed";
  let expected_c8 = 102 in
  mark_test_run 84;
  let test = (fun a b -> Int.equal a b) expected_c8 c8 in
  if not test then failwithf "test 84 failed";

  ()
;;

let () =
  (************************************)
  (*   t9 = { int; int32#; int32# }   *)
  (************************************)
  let r = { a9 = 0; b9 = #1l; c9 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a9 *)
  let actual = r.a9 in
  let expected = 0 in
  mark_test_run 85;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 85 failed";
  (* Paths of depth 1 *)
  (* .b9 *)
  let actual = r.b9 in
  let expected = #1l in
  mark_test_run 86;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 86 failed";
  (* Paths of depth 1 *)
  (* .c9 *)
  let actual = r.c9 in
  let expected = #2l in
  mark_test_run 87;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 87 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a9 = a91; b9 = b91; c9 = c91 } { a9 = a92; b9 = b92; c9 = c92 } -> (fun a b -> Int.equal a b) a91 a92 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b91 b92 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c91 c92) in
  let next_r = { a9 = 100; b9 = #101l; c9 = #102l } in
  let r_expected = { a9 = 0; b9 = #1l; c9 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a9 *)
  r.a9 <- next_r.a9;
  let r_expected = { r_expected with a9 = next_r.a9 } in
  mark_test_run 88;
  let test = eq r r_expected in
  if not test then failwithf "test 88 failed";
  Gc.compact ();
  (* .b9 *)
  r.b9 <- next_r.b9;
  let r_expected = { r_expected with b9 = next_r.b9 } in
  mark_test_run 89;
  let test = eq r r_expected in
  if not test then failwithf "test 89 failed";
  Gc.compact ();
  (* .c9 *)
  r.c9 <- next_r.c9;
  let r_expected = { r_expected with c9 = next_r.c9 } in
  mark_test_run 90;
  let test = eq r r_expected in
  if not test then failwithf "test 90 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a9; b9; c9 } = r in
  let expected_a9 = 100 in
  mark_test_run 91;
  let test = (fun a b -> Int.equal a b) expected_a9 a9 in
  if not test then failwithf "test 91 failed";
  let expected_b9 = #101l in
  mark_test_run 92;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b9 b9 in
  if not test then failwithf "test 92 failed";
  let expected_c9 = #102l in
  mark_test_run 93;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c9 c9 in
  if not test then failwithf "test 93 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a9; b9; c9 } = r in
  let expected_a9 = 100 in
  mark_test_run 94;
  let test = (fun a b -> Int.equal a b) expected_a9 a9 in
  if not test then failwithf "test 94 failed";
  let expected_b9 = #101l in
  mark_test_run 95;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b9 b9 in
  if not test then failwithf "test 95 failed";
  let expected_c9 = #102l in
  mark_test_run 96;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c9 c9 in
  if not test then failwithf "test 96 failed";

  ()
;;

let () =
  (*********************************)
  (*   t10 = { int; nativeint# }   *)
  (*********************************)
  let r = { a10 = 0; b10 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a10 *)
  let actual = r.a10 in
  let expected = 0 in
  mark_test_run 97;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 97 failed";
  (* Paths of depth 1 *)
  (* .b10 *)
  let actual = r.b10 in
  let expected = #1n in
  mark_test_run 98;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 98 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a10 = a101; b10 = b101 } { a10 = a102; b10 = b102 } -> (fun a b -> Int.equal a b) a101 a102 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b101 b102) in
  let next_r = { a10 = 100; b10 = #101n } in
  let r_expected = { a10 = 0; b10 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a10 *)
  r.a10 <- next_r.a10;
  let r_expected = { r_expected with a10 = next_r.a10 } in
  mark_test_run 99;
  let test = eq r r_expected in
  if not test then failwithf "test 99 failed";
  Gc.compact ();
  (* .b10 *)
  r.b10 <- next_r.b10;
  let r_expected = { r_expected with b10 = next_r.b10 } in
  mark_test_run 100;
  let test = eq r r_expected in
  if not test then failwithf "test 100 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a10; b10 } = r in
  let expected_a10 = 100 in
  mark_test_run 101;
  let test = (fun a b -> Int.equal a b) expected_a10 a10 in
  if not test then failwithf "test 101 failed";
  let expected_b10 = #101n in
  mark_test_run 102;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b10 b10 in
  if not test then failwithf "test 102 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a10; b10 } = r in
  let expected_a10 = 100 in
  mark_test_run 103;
  let test = (fun a b -> Int.equal a b) expected_a10 a10 in
  if not test then failwithf "test 103 failed";
  let expected_b10 = #101n in
  mark_test_run 104;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b10 b10 in
  if not test then failwithf "test 104 failed";

  ()
;;

let () =
  (*****************************)
  (*   t11 = { int; unit_u }   *)
  (*****************************)
  let r = { a11 = 0; b11 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a11 *)
  let actual = r.a11 in
  let expected = 0 in
  mark_test_run 105;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 105 failed";
  (* Paths of depth 1 *)
  (* .b11 *)
  let actual = r.b11 in
  let expected = (unbox_unit ()) in
  mark_test_run 106;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 106 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a11 = a111; b11 = b111 } { a11 = a112; b11 = b112 } -> (fun a b -> Int.equal a b) a111 a112 && (fun _ _ -> true) b111 b112) in
  let next_r = { a11 = 100; b11 = (unbox_unit ()) } in
  let r_expected = { a11 = 0; b11 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a11 *)
  r.a11 <- next_r.a11;
  let r_expected = { r_expected with a11 = next_r.a11 } in
  mark_test_run 107;
  let test = eq r r_expected in
  if not test then failwithf "test 107 failed";
  Gc.compact ();
  (* .b11 *)
  r.b11 <- next_r.b11;
  let r_expected = { r_expected with b11 = next_r.b11 } in
  mark_test_run 108;
  let test = eq r r_expected in
  if not test then failwithf "test 108 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a11; b11 } = r in
  let expected_a11 = 100 in
  mark_test_run 109;
  let test = (fun a b -> Int.equal a b) expected_a11 a11 in
  if not test then failwithf "test 109 failed";
  let expected_b11 = (unbox_unit ()) in
  mark_test_run 110;
  let test = (fun _ _ -> true) expected_b11 b11 in
  if not test then failwithf "test 110 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a11; b11 } = r in
  let expected_a11 = 100 in
  mark_test_run 111;
  let test = (fun a b -> Int.equal a b) expected_a11 a11 in
  if not test then failwithf "test 111 failed";
  let expected_b11 = (unbox_unit ()) in
  mark_test_run 112;
  let test = (fun _ _ -> true) expected_b11 b11 in
  if not test then failwithf "test 112 failed";

  ()
;;

let () =
  (****************************)
  (*   t12 = { int; float }   *)
  (****************************)
  let r = { a12 = 0; b12 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a12 *)
  let actual = r.a12 in
  let expected = 0 in
  mark_test_run 113;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 113 failed";
  (* Paths of depth 1 *)
  (* .b12 *)
  let actual = r.b12 in
  let expected = 1. in
  mark_test_run 114;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 114 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a12 = a121; b12 = b121 } { a12 = a122; b12 = b122 } -> (fun a b -> Int.equal a b) a121 a122 && (fun a b -> Float.equal (globalize a) (globalize b)) b121 b122) in
  let next_r = { a12 = 100; b12 = 101. } in
  let r_expected = { a12 = 0; b12 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a12 *)
  r.a12 <- next_r.a12;
  let r_expected = { r_expected with a12 = next_r.a12 } in
  mark_test_run 115;
  let test = eq r r_expected in
  if not test then failwithf "test 115 failed";
  Gc.compact ();
  (* .b12 *)
  r.b12 <- next_r.b12;
  let r_expected = { r_expected with b12 = next_r.b12 } in
  mark_test_run 116;
  let test = eq r r_expected in
  if not test then failwithf "test 116 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a12; b12 } = r in
  let expected_a12 = 100 in
  mark_test_run 117;
  let test = (fun a b -> Int.equal a b) expected_a12 a12 in
  if not test then failwithf "test 117 failed";
  let expected_b12 = 101. in
  mark_test_run 118;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b12 b12 in
  if not test then failwithf "test 118 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a12; b12 } = r in
  let expected_a12 = 100 in
  mark_test_run 119;
  let test = (fun a b -> Int.equal a b) expected_a12 a12 in
  if not test then failwithf "test 119 failed";
  let expected_b12 = 101. in
  mark_test_run 120;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b12 b12 in
  if not test then failwithf "test 120 failed";

  ()
;;

let () =
  (*********************************)
  (*   t13 = { int; float; int }   *)
  (*********************************)
  let r = { a13 = 0; b13 = 1.; c13 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a13 *)
  let actual = r.a13 in
  let expected = 0 in
  mark_test_run 121;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 121 failed";
  (* Paths of depth 1 *)
  (* .b13 *)
  let actual = r.b13 in
  let expected = 1. in
  mark_test_run 122;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 122 failed";
  (* Paths of depth 1 *)
  (* .c13 *)
  let actual = r.c13 in
  let expected = 2 in
  mark_test_run 123;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 123 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a13 = a131; b13 = b131; c13 = c131 } { a13 = a132; b13 = b132; c13 = c132 } -> (fun a b -> Int.equal a b) a131 a132 && (fun a b -> Float.equal (globalize a) (globalize b)) b131 b132 && (fun a b -> Int.equal a b) c131 c132) in
  let next_r = { a13 = 100; b13 = 101.; c13 = 102 } in
  let r_expected = { a13 = 0; b13 = 1.; c13 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a13 *)
  r.a13 <- next_r.a13;
  let r_expected = { r_expected with a13 = next_r.a13 } in
  mark_test_run 124;
  let test = eq r r_expected in
  if not test then failwithf "test 124 failed";
  Gc.compact ();
  (* .b13 *)
  r.b13 <- next_r.b13;
  let r_expected = { r_expected with b13 = next_r.b13 } in
  mark_test_run 125;
  let test = eq r r_expected in
  if not test then failwithf "test 125 failed";
  Gc.compact ();
  (* .c13 *)
  r.c13 <- next_r.c13;
  let r_expected = { r_expected with c13 = next_r.c13 } in
  mark_test_run 126;
  let test = eq r r_expected in
  if not test then failwithf "test 126 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a13; b13; c13 } = r in
  let expected_a13 = 100 in
  mark_test_run 127;
  let test = (fun a b -> Int.equal a b) expected_a13 a13 in
  if not test then failwithf "test 127 failed";
  let expected_b13 = 101. in
  mark_test_run 128;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b13 b13 in
  if not test then failwithf "test 128 failed";
  let expected_c13 = 102 in
  mark_test_run 129;
  let test = (fun a b -> Int.equal a b) expected_c13 c13 in
  if not test then failwithf "test 129 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a13; b13; c13 } = r in
  let expected_a13 = 100 in
  mark_test_run 130;
  let test = (fun a b -> Int.equal a b) expected_a13 a13 in
  if not test then failwithf "test 130 failed";
  let expected_b13 = 101. in
  mark_test_run 131;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b13 b13 in
  if not test then failwithf "test 131 failed";
  let expected_c13 = 102 in
  mark_test_run 132;
  let test = (fun a b -> Int.equal a b) expected_c13 c13 in
  if not test then failwithf "test 132 failed";

  ()
;;

let () =
  (***********************************)
  (*   t14 = { int; float; float }   *)
  (***********************************)
  let r = { a14 = 0; b14 = 1.; c14 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a14 *)
  let actual = r.a14 in
  let expected = 0 in
  mark_test_run 133;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 133 failed";
  (* Paths of depth 1 *)
  (* .b14 *)
  let actual = r.b14 in
  let expected = 1. in
  mark_test_run 134;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 134 failed";
  (* Paths of depth 1 *)
  (* .c14 *)
  let actual = r.c14 in
  let expected = 2. in
  mark_test_run 135;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 135 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a14 = a141; b14 = b141; c14 = c141 } { a14 = a142; b14 = b142; c14 = c142 } -> (fun a b -> Int.equal a b) a141 a142 && (fun a b -> Float.equal (globalize a) (globalize b)) b141 b142 && (fun a b -> Float.equal (globalize a) (globalize b)) c141 c142) in
  let next_r = { a14 = 100; b14 = 101.; c14 = 102. } in
  let r_expected = { a14 = 0; b14 = 1.; c14 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a14 *)
  r.a14 <- next_r.a14;
  let r_expected = { r_expected with a14 = next_r.a14 } in
  mark_test_run 136;
  let test = eq r r_expected in
  if not test then failwithf "test 136 failed";
  Gc.compact ();
  (* .b14 *)
  r.b14 <- next_r.b14;
  let r_expected = { r_expected with b14 = next_r.b14 } in
  mark_test_run 137;
  let test = eq r r_expected in
  if not test then failwithf "test 137 failed";
  Gc.compact ();
  (* .c14 *)
  r.c14 <- next_r.c14;
  let r_expected = { r_expected with c14 = next_r.c14 } in
  mark_test_run 138;
  let test = eq r r_expected in
  if not test then failwithf "test 138 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a14; b14; c14 } = r in
  let expected_a14 = 100 in
  mark_test_run 139;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 139 failed";
  let expected_b14 = 101. in
  mark_test_run 140;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b14 b14 in
  if not test then failwithf "test 140 failed";
  let expected_c14 = 102. in
  mark_test_run 141;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c14 c14 in
  if not test then failwithf "test 141 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a14; b14; c14 } = r in
  let expected_a14 = 100 in
  mark_test_run 142;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 142 failed";
  let expected_b14 = 101. in
  mark_test_run 143;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b14 b14 in
  if not test then failwithf "test 143 failed";
  let expected_c14 = 102. in
  mark_test_run 144;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c14 c14 in
  if not test then failwithf "test 144 failed";

  ()
;;

let () =
  (*********************************)
  (*   t16 = { int; (| unit_u) }   *)
  (*********************************)
  let r = { a16 = 0; b16 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a16 *)
  let actual = r.a16 in
  let expected = 0 in
  mark_test_run 145;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 145 failed";
  (* Paths of depth 1 *)
  (* .b16 *)
  let actual = r.b16 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 146;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 146 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a16 = a161; b16 = b161 } { a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b161 b162) in
  let next_r = { a16 = 100; b16 = C15_0((unbox_unit ())) } in
  let r_expected = { a16 = 0; b16 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a16 *)
  r.a16 <- next_r.a16;
  let r_expected = { r_expected with a16 = next_r.a16 } in
  mark_test_run 147;
  let test = eq r r_expected in
  if not test then failwithf "test 147 failed";
  Gc.compact ();
  (* .b16 *)
  r.b16 <- next_r.b16;
  let r_expected = { r_expected with b16 = next_r.b16 } in
  mark_test_run 148;
  let test = eq r r_expected in
  if not test then failwithf "test 148 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a16; b16 } = r in
  let expected_a16 = 100 in
  mark_test_run 149;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 149 failed";
  let expected_b16 = C15_0((unbox_unit ())) in
  mark_test_run 150;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b16 b16 in
  if not test then failwithf "test 150 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a16; b16 } = r in
  let expected_a16 = 100 in
  mark_test_run 151;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 151 failed";
  let expected_b16 = C15_0((unbox_unit ())) in
  mark_test_run 152;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b16 b16 in
  if not test then failwithf "test 152 failed";

  ()
;;

let () =
  (***********************************************************************)
  (*   t18 = { int; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (***********************************************************************)
  let r = { a18 = 0; b18 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a18 *)
  let actual = r.a18 in
  let expected = 0 in
  mark_test_run 153;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 153 failed";
  (* Paths of depth 1 *)
  (* .b18 *)
  let actual = r.b18 in
  let expected = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 154;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 154 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a18 = a181; b18 = b181 } { a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b181 b182) in
  let next_r = { a18 = 100; b18 = C17_2(#((unbox_unit ()), (unbox_unit ()))) } in
  let r_expected = { a18 = 0; b18 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a18 *)
  r.a18 <- next_r.a18;
  let r_expected = { r_expected with a18 = next_r.a18 } in
  mark_test_run 155;
  let test = eq r r_expected in
  if not test then failwithf "test 155 failed";
  Gc.compact ();
  (* .b18 *)
  r.b18 <- next_r.b18;
  let r_expected = { r_expected with b18 = next_r.b18 } in
  mark_test_run 156;
  let test = eq r r_expected in
  if not test then failwithf "test 156 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a18; b18 } = r in
  let expected_a18 = 100 in
  mark_test_run 157;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 157 failed";
  let expected_b18 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 158;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b18 b18 in
  if not test then failwithf "test 158 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a18; b18 } = r in
  let expected_a18 = 100 in
  mark_test_run 159;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 159 failed";
  let expected_b18 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 160;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b18 b18 in
  if not test then failwithf "test 160 failed";

  ()
;;

let () =
  (*************************************)
  (*   t19 = { int; #(unit_u, int) }   *)
  (*************************************)
  let r = { a19 = 0; b19 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a19 *)
  let actual = r.a19 in
  let expected = 0 in
  mark_test_run 161;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 161 failed";
  (* Paths of depth 1 *)
  (* .b19 *)
  let actual = r.b19 in
  let expected = #((unbox_unit ()), 1) in
  mark_test_run 162;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 162 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a19 = a191; b19 = b191 } { a19 = a192; b19 = b192 } -> (fun a b -> Int.equal a b) a191 a192 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b191 b192) in
  let next_r = { a19 = 100; b19 = #((unbox_unit ()), 101) } in
  let r_expected = { a19 = 0; b19 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a19 *)
  r.a19 <- next_r.a19;
  let r_expected = { r_expected with a19 = next_r.a19 } in
  mark_test_run 163;
  let test = eq r r_expected in
  if not test then failwithf "test 163 failed";
  Gc.compact ();
  (* .b19 *)
  r.b19 <- next_r.b19;
  let r_expected = { r_expected with b19 = next_r.b19 } in
  mark_test_run 164;
  let test = eq r r_expected in
  if not test then failwithf "test 164 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a19; b19 } = r in
  let expected_a19 = 100 in
  mark_test_run 165;
  let test = (fun a b -> Int.equal a b) expected_a19 a19 in
  if not test then failwithf "test 165 failed";
  let expected_b19 = #((unbox_unit ()), 101) in
  mark_test_run 166;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b19 b19 in
  if not test then failwithf "test 166 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a19; b19 } = r in
  let expected_a19 = 100 in
  mark_test_run 167;
  let test = (fun a b -> Int.equal a b) expected_a19 a19 in
  if not test then failwithf "test 167 failed";
  let expected_b19 = #((unbox_unit ()), 101) in
  mark_test_run 168;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b19 b19 in
  if not test then failwithf "test 168 failed";

  ()
;;

let () =
  (****************************************)
  (*   t20 = { int; #(unit_u, int64#) }   *)
  (****************************************)
  let r = { a20 = 0; b20 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a20 *)
  let actual = r.a20 in
  let expected = 0 in
  mark_test_run 169;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 169 failed";
  (* Paths of depth 1 *)
  (* .b20 *)
  let actual = r.b20 in
  let expected = #((unbox_unit ()), #1L) in
  mark_test_run 170;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 170 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a20 = a201; b20 = b201 } { a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b201 b202) in
  let next_r = { a20 = 100; b20 = #((unbox_unit ()), #101L) } in
  let r_expected = { a20 = 0; b20 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a20 *)
  r.a20 <- next_r.a20;
  let r_expected = { r_expected with a20 = next_r.a20 } in
  mark_test_run 171;
  let test = eq r r_expected in
  if not test then failwithf "test 171 failed";
  Gc.compact ();
  (* .b20 *)
  r.b20 <- next_r.b20;
  let r_expected = { r_expected with b20 = next_r.b20 } in
  mark_test_run 172;
  let test = eq r r_expected in
  if not test then failwithf "test 172 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a20; b20 } = r in
  let expected_a20 = 100 in
  mark_test_run 173;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 173 failed";
  let expected_b20 = #((unbox_unit ()), #101L) in
  mark_test_run 174;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b20 b20 in
  if not test then failwithf "test 174 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a20; b20 } = r in
  let expected_a20 = 100 in
  mark_test_run 175;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 175 failed";
  let expected_b20 = #((unbox_unit ()), #101L) in
  mark_test_run 176;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b20 b20 in
  if not test then failwithf "test 176 failed";

  ()
;;

let () =
  (****************************************)
  (*   t21 = { int; #(unit_u, unit_u) }   *)
  (****************************************)
  let r = { a21 = 0; b21 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a21 *)
  let actual = r.a21 in
  let expected = 0 in
  mark_test_run 177;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 177 failed";
  (* Paths of depth 1 *)
  (* .b21 *)
  let actual = r.b21 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 178;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 178 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a21 = a211; b21 = b211 } { a21 = a212; b21 = b212 } -> (fun a b -> Int.equal a b) a211 a212 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b211 b212) in
  let next_r = { a21 = 100; b21 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a21 = 0; b21 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a21 *)
  r.a21 <- next_r.a21;
  let r_expected = { r_expected with a21 = next_r.a21 } in
  mark_test_run 179;
  let test = eq r r_expected in
  if not test then failwithf "test 179 failed";
  Gc.compact ();
  (* .b21 *)
  r.b21 <- next_r.b21;
  let r_expected = { r_expected with b21 = next_r.b21 } in
  mark_test_run 180;
  let test = eq r r_expected in
  if not test then failwithf "test 180 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a21; b21 } = r in
  let expected_a21 = 100 in
  mark_test_run 181;
  let test = (fun a b -> Int.equal a b) expected_a21 a21 in
  if not test then failwithf "test 181 failed";
  let expected_b21 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 182;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b21 b21 in
  if not test then failwithf "test 182 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a21; b21 } = r in
  let expected_a21 = 100 in
  mark_test_run 183;
  let test = (fun a b -> Int.equal a b) expected_a21 a21 in
  if not test then failwithf "test 183 failed";
  let expected_b21 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 184;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b21 b21 in
  if not test then failwithf "test 184 failed";

  ()
;;

let () =
  (****************************************)
  (*   t22 = { int; #(unit_u, string) }   *)
  (****************************************)
  let r = { a22 = 0; b22 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a22 *)
  let actual = r.a22 in
  let expected = 0 in
  mark_test_run 185;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 185 failed";
  (* Paths of depth 1 *)
  (* .b22 *)
  let actual = r.b22 in
  let expected = #((unbox_unit ()), "1") in
  mark_test_run 186;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 186 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a22 = a221; b22 = b221 } { a22 = a222; b22 = b222 } -> (fun a b -> Int.equal a b) a221 a222 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b221 b222) in
  let next_r = { a22 = 100; b22 = #((unbox_unit ()), "101") } in
  let r_expected = { a22 = 0; b22 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a22 *)
  r.a22 <- next_r.a22;
  let r_expected = { r_expected with a22 = next_r.a22 } in
  mark_test_run 187;
  let test = eq r r_expected in
  if not test then failwithf "test 187 failed";
  Gc.compact ();
  (* .b22 *)
  r.b22 <- next_r.b22;
  let r_expected = { r_expected with b22 = next_r.b22 } in
  mark_test_run 188;
  let test = eq r r_expected in
  if not test then failwithf "test 188 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a22; b22 } = r in
  let expected_a22 = 100 in
  mark_test_run 189;
  let test = (fun a b -> Int.equal a b) expected_a22 a22 in
  if not test then failwithf "test 189 failed";
  let expected_b22 = #((unbox_unit ()), "101") in
  mark_test_run 190;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b22 b22 in
  if not test then failwithf "test 190 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a22; b22 } = r in
  let expected_a22 = 100 in
  mark_test_run 191;
  let test = (fun a b -> Int.equal a b) expected_a22 a22 in
  if not test then failwithf "test 191 failed";
  let expected_b22 = #((unbox_unit ()), "101") in
  mark_test_run 192;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b22 b22 in
  if not test then failwithf "test 192 failed";

  ()
;;

let () =
  (*******************************)
  (*   t24 = { int; #{ int } }   *)
  (*******************************)
  let r = { a24 = 0; b24 = #{ a23 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a24 *)
  let actual = r.a24 in
  let expected = 0 in
  mark_test_run 193;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 193 failed";
  (* Paths of depth 1 *)
  (* .b24 *)
  let actual = r.b24 in
  let expected = #{ a23 = 1 } in
  mark_test_run 194;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 194 failed";
  (* Paths of depth 2 *)
  (* .b24.#a23 *)
  let actual = r.b24.#a23 in
  let expected = 1 in
  mark_test_run 195;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 195 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a24 = a241; b24 = b241 } { a24 = a242; b24 = b242 } -> (fun a b -> Int.equal a b) a241 a242 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b241 b242) in
  let next_r = { a24 = 100; b24 = #{ a23 = 101 } } in
  let r_expected = { a24 = 0; b24 = #{ a23 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a24 *)
  r.a24 <- next_r.a24;
  let r_expected = { r_expected with a24 = next_r.a24 } in
  mark_test_run 196;
  let test = eq r r_expected in
  if not test then failwithf "test 196 failed";
  Gc.compact ();
  (* .b24 *)
  r.b24 <- next_r.b24;
  let r_expected = { r_expected with b24 = next_r.b24 } in
  mark_test_run 197;
  let test = eq r r_expected in
  if not test then failwithf "test 197 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a24; b24 = #{ a23 } } = r in
  let expected_a24 = 100 in
  mark_test_run 198;
  let test = (fun a b -> Int.equal a b) expected_a24 a24 in
  if not test then failwithf "test 198 failed";
  let expected_a23 = 101 in
  mark_test_run 199;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 199 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a24; b24 } = r in
  let expected_a24 = 100 in
  mark_test_run 200;
  let test = (fun a b -> Int.equal a b) expected_a24 a24 in
  if not test then failwithf "test 200 failed";
  let expected_b24 = #{ a23 = 101 } in
  mark_test_run 201;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) expected_b24 b24 in
  if not test then failwithf "test 201 failed";

  ()
;;

let () =
  (************************************)
  (*   t26 = { int; #{ int; int } }   *)
  (************************************)
  let r = { a26 = 0; b26 = #{ a25 = 1; b25 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a26 *)
  let actual = r.a26 in
  let expected = 0 in
  mark_test_run 202;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 202 failed";
  (* Paths of depth 1 *)
  (* .b26 *)
  let actual = r.b26 in
  let expected = #{ a25 = 1; b25 = 2 } in
  mark_test_run 203;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 203 failed";
  (* Paths of depth 2 *)
  (* .b26.#a25 *)
  let actual = r.b26.#a25 in
  let expected = 1 in
  mark_test_run 204;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 204 failed";
  (* .b26.#b25 *)
  let actual = r.b26.#b25 in
  let expected = 2 in
  mark_test_run 205;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 205 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a26 = a261; b26 = b261 } { a26 = a262; b26 = b262 } -> (fun a b -> Int.equal a b) a261 a262 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b261 b262) in
  let next_r = { a26 = 100; b26 = #{ a25 = 101; b25 = 102 } } in
  let r_expected = { a26 = 0; b26 = #{ a25 = 1; b25 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a26 *)
  r.a26 <- next_r.a26;
  let r_expected = { r_expected with a26 = next_r.a26 } in
  mark_test_run 206;
  let test = eq r r_expected in
  if not test then failwithf "test 206 failed";
  Gc.compact ();
  (* .b26 *)
  r.b26 <- next_r.b26;
  let r_expected = { r_expected with b26 = next_r.b26 } in
  mark_test_run 207;
  let test = eq r r_expected in
  if not test then failwithf "test 207 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a26; b26 = #{ a25; b25 } } = r in
  let expected_a26 = 100 in
  mark_test_run 208;
  let test = (fun a b -> Int.equal a b) expected_a26 a26 in
  if not test then failwithf "test 208 failed";
  let expected_a25 = 101 in
  mark_test_run 209;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 209 failed";
  let expected_b25 = 102 in
  mark_test_run 210;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 210 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a26; b26 } = r in
  let expected_a26 = 100 in
  mark_test_run 211;
  let test = (fun a b -> Int.equal a b) expected_a26 a26 in
  if not test then failwithf "test 211 failed";
  let expected_b26 = #{ a25 = 101; b25 = 102 } in
  mark_test_run 212;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) expected_b26 b26 in
  if not test then failwithf "test 212 failed";

  ()
;;

let () =
  (***************************************)
  (*   t28 = { int; #{ int; int32# } }   *)
  (***************************************)
  let r = { a28 = 0; b28 = #{ a27 = 1; b27 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a28 *)
  let actual = r.a28 in
  let expected = 0 in
  mark_test_run 213;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 213 failed";
  (* Paths of depth 1 *)
  (* .b28 *)
  let actual = r.b28 in
  let expected = #{ a27 = 1; b27 = #2l } in
  mark_test_run 214;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 214 failed";
  (* Paths of depth 2 *)
  (* .b28.#a27 *)
  let actual = r.b28.#a27 in
  let expected = 1 in
  mark_test_run 215;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 215 failed";
  (* .b28.#b27 *)
  let actual = r.b28.#b27 in
  let expected = #2l in
  mark_test_run 216;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 216 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a28 = a281; b28 = b281 } { a28 = a282; b28 = b282 } -> (fun a b -> Int.equal a b) a281 a282 && (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) b281 b282) in
  let next_r = { a28 = 100; b28 = #{ a27 = 101; b27 = #102l } } in
  let r_expected = { a28 = 0; b28 = #{ a27 = 1; b27 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a28 *)
  r.a28 <- next_r.a28;
  let r_expected = { r_expected with a28 = next_r.a28 } in
  mark_test_run 217;
  let test = eq r r_expected in
  if not test then failwithf "test 217 failed";
  Gc.compact ();
  (* .b28 *)
  r.b28 <- next_r.b28;
  let r_expected = { r_expected with b28 = next_r.b28 } in
  mark_test_run 218;
  let test = eq r r_expected in
  if not test then failwithf "test 218 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a28; b28 = #{ a27; b27 } } = r in
  let expected_a28 = 100 in
  mark_test_run 219;
  let test = (fun a b -> Int.equal a b) expected_a28 a28 in
  if not test then failwithf "test 219 failed";
  let expected_a27 = 101 in
  mark_test_run 220;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 220 failed";
  let expected_b27 = #102l in
  mark_test_run 221;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 221 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a28; b28 } = r in
  let expected_a28 = 100 in
  mark_test_run 222;
  let test = (fun a b -> Int.equal a b) expected_a28 a28 in
  if not test then failwithf "test 222 failed";
  let expected_b28 = #{ a27 = 101; b27 = #102l } in
  mark_test_run 223;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) expected_b28 b28 in
  if not test then failwithf "test 223 failed";

  ()
;;

let () =
  (**************************************)
  (*   t30 = { int; #{ int; float } }   *)
  (**************************************)
  let r = { a30 = 0; b30 = #{ a29 = 1; b29 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a30 *)
  let actual = r.a30 in
  let expected = 0 in
  mark_test_run 224;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 224 failed";
  (* Paths of depth 1 *)
  (* .b30 *)
  let actual = r.b30 in
  let expected = #{ a29 = 1; b29 = 2. } in
  mark_test_run 225;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 225 failed";
  (* Paths of depth 2 *)
  (* .b30.#a29 *)
  let actual = r.b30.#a29 in
  let expected = 1 in
  mark_test_run 226;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 226 failed";
  (* .b30.#b29 *)
  let actual = r.b30.#b29 in
  let expected = 2. in
  mark_test_run 227;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 227 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a30 = a301; b30 = b301 } { a30 = a302; b30 = b302 } -> (fun a b -> Int.equal a b) a301 a302 && (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) b301 b302) in
  let next_r = { a30 = 100; b30 = #{ a29 = 101; b29 = 102. } } in
  let r_expected = { a30 = 0; b30 = #{ a29 = 1; b29 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a30 *)
  r.a30 <- next_r.a30;
  let r_expected = { r_expected with a30 = next_r.a30 } in
  mark_test_run 228;
  let test = eq r r_expected in
  if not test then failwithf "test 228 failed";
  Gc.compact ();
  (* .b30 *)
  r.b30 <- next_r.b30;
  let r_expected = { r_expected with b30 = next_r.b30 } in
  mark_test_run 229;
  let test = eq r r_expected in
  if not test then failwithf "test 229 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a30; b30 = #{ a29; b29 } } = r in
  let expected_a30 = 100 in
  mark_test_run 230;
  let test = (fun a b -> Int.equal a b) expected_a30 a30 in
  if not test then failwithf "test 230 failed";
  let expected_a29 = 101 in
  mark_test_run 231;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 231 failed";
  let expected_b29 = 102. in
  mark_test_run 232;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 232 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a30; b30 } = r in
  let expected_a30 = 100 in
  mark_test_run 233;
  let test = (fun a b -> Int.equal a b) expected_a30 a30 in
  if not test then failwithf "test 233 failed";
  let expected_b30 = #{ a29 = 101; b29 = 102. } in
  mark_test_run 234;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) expected_b30 b30 in
  if not test then failwithf "test 234 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t32 = { int; #{ int; #{ int } } }   *)
  (*****************************************)
  let r = { a32 = 0; b32 = #{ a31 = 1; b31 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a32 *)
  let actual = r.a32 in
  let expected = 0 in
  mark_test_run 235;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 235 failed";
  (* Paths of depth 1 *)
  (* .b32 *)
  let actual = r.b32 in
  let expected = #{ a31 = 1; b31 = #{ a23 = 2 } } in
  mark_test_run 236;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int.equal a b) a311 a312 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b311 b312) actual expected in
  if not test then failwithf "test 236 failed";
  (* Paths of depth 2 *)
  (* .b32.#a31 *)
  let actual = r.b32.#a31 in
  let expected = 1 in
  mark_test_run 237;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 237 failed";
  (* .b32.#b31 *)
  let actual = r.b32.#b31 in
  let expected = #{ a23 = 2 } in
  mark_test_run 238;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 238 failed";
  (* Paths of depth 3 *)
  (* .b32.#b31.#a23 *)
  let actual = r.b32.#b31.#a23 in
  let expected = 2 in
  mark_test_run 239;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 239 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a32 = a321; b32 = b321 } { a32 = a322; b32 = b322 } -> (fun a b -> Int.equal a b) a321 a322 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int.equal a b) a311 a312 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b311 b312) b321 b322) in
  let next_r = { a32 = 100; b32 = #{ a31 = 101; b31 = #{ a23 = 102 } } } in
  let r_expected = { a32 = 0; b32 = #{ a31 = 1; b31 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a32 *)
  r.a32 <- next_r.a32;
  let r_expected = { r_expected with a32 = next_r.a32 } in
  mark_test_run 240;
  let test = eq r r_expected in
  if not test then failwithf "test 240 failed";
  Gc.compact ();
  (* .b32 *)
  r.b32 <- next_r.b32;
  let r_expected = { r_expected with b32 = next_r.b32 } in
  mark_test_run 241;
  let test = eq r r_expected in
  if not test then failwithf "test 241 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a32; b32 = #{ a31; b31 = #{ a23 } } } = r in
  let expected_a32 = 100 in
  mark_test_run 242;
  let test = (fun a b -> Int.equal a b) expected_a32 a32 in
  if not test then failwithf "test 242 failed";
  let expected_a31 = 101 in
  mark_test_run 243;
  let test = (fun a b -> Int.equal a b) expected_a31 a31 in
  if not test then failwithf "test 243 failed";
  let expected_a23 = 102 in
  mark_test_run 244;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 244 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a32; b32 } = r in
  let expected_a32 = 100 in
  mark_test_run 245;
  let test = (fun a b -> Int.equal a b) expected_a32 a32 in
  if not test then failwithf "test 245 failed";
  let expected_b32 = #{ a31 = 101; b31 = #{ a23 = 102 } } in
  mark_test_run 246;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int.equal a b) a311 a312 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b311 b312) expected_b32 b32 in
  if not test then failwithf "test 246 failed";

  ()
;;

let () =
  (********************************************)
  (*   t35 = { int; #{ int; #{ int32# } } }   *)
  (********************************************)
  let r = { a35 = 0; b35 = #{ a34 = 1; b34 = #{ a33 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a35 *)
  let actual = r.a35 in
  let expected = 0 in
  mark_test_run 247;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 247 failed";
  (* Paths of depth 1 *)
  (* .b35 *)
  let actual = r.b35 in
  let expected = #{ a34 = 1; b34 = #{ a33 = #2l } } in
  mark_test_run 248;
  let test = (fun #{ a34 = a341; b34 = b341 } #{ a34 = a342; b34 = b342 } -> (fun a b -> Int.equal a b) a341 a342 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b341 b342) actual expected in
  if not test then failwithf "test 248 failed";
  (* Paths of depth 2 *)
  (* .b35.#a34 *)
  let actual = r.b35.#a34 in
  let expected = 1 in
  mark_test_run 249;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 249 failed";
  (* .b35.#b34 *)
  let actual = r.b35.#b34 in
  let expected = #{ a33 = #2l } in
  mark_test_run 250;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) actual expected in
  if not test then failwithf "test 250 failed";
  (* Paths of depth 3 *)
  (* .b35.#b34.#a33 *)
  let actual = r.b35.#b34.#a33 in
  let expected = #2l in
  mark_test_run 251;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 251 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a35 = a351; b35 = b351 } { a35 = a352; b35 = b352 } -> (fun a b -> Int.equal a b) a351 a352 && (fun #{ a34 = a341; b34 = b341 } #{ a34 = a342; b34 = b342 } -> (fun a b -> Int.equal a b) a341 a342 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b341 b342) b351 b352) in
  let next_r = { a35 = 100; b35 = #{ a34 = 101; b34 = #{ a33 = #102l } } } in
  let r_expected = { a35 = 0; b35 = #{ a34 = 1; b34 = #{ a33 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a35 *)
  r.a35 <- next_r.a35;
  let r_expected = { r_expected with a35 = next_r.a35 } in
  mark_test_run 252;
  let test = eq r r_expected in
  if not test then failwithf "test 252 failed";
  Gc.compact ();
  (* .b35 *)
  r.b35 <- next_r.b35;
  let r_expected = { r_expected with b35 = next_r.b35 } in
  mark_test_run 253;
  let test = eq r r_expected in
  if not test then failwithf "test 253 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a35; b35 = #{ a34; b34 = #{ a33 } } } = r in
  let expected_a35 = 100 in
  mark_test_run 254;
  let test = (fun a b -> Int.equal a b) expected_a35 a35 in
  if not test then failwithf "test 254 failed";
  let expected_a34 = 101 in
  mark_test_run 255;
  let test = (fun a b -> Int.equal a b) expected_a34 a34 in
  if not test then failwithf "test 255 failed";
  let expected_a33 = #102l in
  mark_test_run 256;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 256 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a35; b35 } = r in
  let expected_a35 = 100 in
  mark_test_run 257;
  let test = (fun a b -> Int.equal a b) expected_a35 a35 in
  if not test then failwithf "test 257 failed";
  let expected_b35 = #{ a34 = 101; b34 = #{ a33 = #102l } } in
  mark_test_run 258;
  let test = (fun #{ a34 = a341; b34 = b341 } #{ a34 = a342; b34 = b342 } -> (fun a b -> Int.equal a b) a341 a342 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b341 b342) expected_b35 b35 in
  if not test then failwithf "test 258 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t38 = { int; #{ int; #{ float } } }   *)
  (*******************************************)
  let r = { a38 = 0; b38 = #{ a37 = 1; b37 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a38 *)
  let actual = r.a38 in
  let expected = 0 in
  mark_test_run 259;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 259 failed";
  (* Paths of depth 1 *)
  (* .b38 *)
  let actual = r.b38 in
  let expected = #{ a37 = 1; b37 = #{ a36 = 2. } } in
  mark_test_run 260;
  let test = (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int.equal a b) a371 a372 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b371 b372) actual expected in
  if not test then failwithf "test 260 failed";
  (* Paths of depth 2 *)
  (* .b38.#a37 *)
  let actual = r.b38.#a37 in
  let expected = 1 in
  mark_test_run 261;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 261 failed";
  (* .b38.#b37 *)
  let actual = r.b38.#b37 in
  let expected = #{ a36 = 2. } in
  mark_test_run 262;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 262 failed";
  (* Paths of depth 3 *)
  (* .b38.#b37.#a36 *)
  let actual = r.b38.#b37.#a36 in
  let expected = 2. in
  mark_test_run 263;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 263 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a38 = a381; b38 = b381 } { a38 = a382; b38 = b382 } -> (fun a b -> Int.equal a b) a381 a382 && (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int.equal a b) a371 a372 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b371 b372) b381 b382) in
  let next_r = { a38 = 100; b38 = #{ a37 = 101; b37 = #{ a36 = 102. } } } in
  let r_expected = { a38 = 0; b38 = #{ a37 = 1; b37 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a38 *)
  r.a38 <- next_r.a38;
  let r_expected = { r_expected with a38 = next_r.a38 } in
  mark_test_run 264;
  let test = eq r r_expected in
  if not test then failwithf "test 264 failed";
  Gc.compact ();
  (* .b38 *)
  r.b38 <- next_r.b38;
  let r_expected = { r_expected with b38 = next_r.b38 } in
  mark_test_run 265;
  let test = eq r r_expected in
  if not test then failwithf "test 265 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a38; b38 = #{ a37; b37 = #{ a36 } } } = r in
  let expected_a38 = 100 in
  mark_test_run 266;
  let test = (fun a b -> Int.equal a b) expected_a38 a38 in
  if not test then failwithf "test 266 failed";
  let expected_a37 = 101 in
  mark_test_run 267;
  let test = (fun a b -> Int.equal a b) expected_a37 a37 in
  if not test then failwithf "test 267 failed";
  let expected_a36 = 102. in
  mark_test_run 268;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 268 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a38; b38 } = r in
  let expected_a38 = 100 in
  mark_test_run 269;
  let test = (fun a b -> Int.equal a b) expected_a38 a38 in
  if not test then failwithf "test 269 failed";
  let expected_b38 = #{ a37 = 101; b37 = #{ a36 = 102. } } in
  mark_test_run 270;
  let test = (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int.equal a b) a371 a372 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b371 b372) expected_b38 b38 in
  if not test then failwithf "test 270 failed";

  ()
;;

let () =
  (**********************************)
  (*   t39 = { int; #{ int32# } }   *)
  (**********************************)
  let r = { a39 = 0; b39 = #{ a33 = #1l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a39 *)
  let actual = r.a39 in
  let expected = 0 in
  mark_test_run 271;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 271 failed";
  (* Paths of depth 1 *)
  (* .b39 *)
  let actual = r.b39 in
  let expected = #{ a33 = #1l } in
  mark_test_run 272;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) actual expected in
  if not test then failwithf "test 272 failed";
  (* Paths of depth 2 *)
  (* .b39.#a33 *)
  let actual = r.b39.#a33 in
  let expected = #1l in
  mark_test_run 273;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 273 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a39 = a391; b39 = b391 } { a39 = a392; b39 = b392 } -> (fun a b -> Int.equal a b) a391 a392 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b391 b392) in
  let next_r = { a39 = 100; b39 = #{ a33 = #101l } } in
  let r_expected = { a39 = 0; b39 = #{ a33 = #1l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a39 *)
  r.a39 <- next_r.a39;
  let r_expected = { r_expected with a39 = next_r.a39 } in
  mark_test_run 274;
  let test = eq r r_expected in
  if not test then failwithf "test 274 failed";
  Gc.compact ();
  (* .b39 *)
  r.b39 <- next_r.b39;
  let r_expected = { r_expected with b39 = next_r.b39 } in
  mark_test_run 275;
  let test = eq r r_expected in
  if not test then failwithf "test 275 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a39; b39 = #{ a33 } } = r in
  let expected_a39 = 100 in
  mark_test_run 276;
  let test = (fun a b -> Int.equal a b) expected_a39 a39 in
  if not test then failwithf "test 276 failed";
  let expected_a33 = #101l in
  mark_test_run 277;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 277 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a39; b39 } = r in
  let expected_a39 = 100 in
  mark_test_run 278;
  let test = (fun a b -> Int.equal a b) expected_a39 a39 in
  if not test then failwithf "test 278 failed";
  let expected_b39 = #{ a33 = #101l } in
  mark_test_run 279;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) expected_b39 b39 in
  if not test then failwithf "test 279 failed";

  ()
;;

let () =
  (***************************************)
  (*   t41 = { int; #{ int32#; int } }   *)
  (***************************************)
  let r = { a41 = 0; b41 = #{ a40 = #1l; b40 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a41 *)
  let actual = r.a41 in
  let expected = 0 in
  mark_test_run 280;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 280 failed";
  (* Paths of depth 1 *)
  (* .b41 *)
  let actual = r.b41 in
  let expected = #{ a40 = #1l; b40 = 2 } in
  mark_test_run 281;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 281 failed";
  (* Paths of depth 2 *)
  (* .b41.#a40 *)
  let actual = r.b41.#a40 in
  let expected = #1l in
  mark_test_run 282;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 282 failed";
  (* .b41.#b40 *)
  let actual = r.b41.#b40 in
  let expected = 2 in
  mark_test_run 283;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 283 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a41 = a411; b41 = b411 } { a41 = a412; b41 = b412 } -> (fun a b -> Int.equal a b) a411 a412 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b411 b412) in
  let next_r = { a41 = 100; b41 = #{ a40 = #101l; b40 = 102 } } in
  let r_expected = { a41 = 0; b41 = #{ a40 = #1l; b40 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a41 *)
  r.a41 <- next_r.a41;
  let r_expected = { r_expected with a41 = next_r.a41 } in
  mark_test_run 284;
  let test = eq r r_expected in
  if not test then failwithf "test 284 failed";
  Gc.compact ();
  (* .b41 *)
  r.b41 <- next_r.b41;
  let r_expected = { r_expected with b41 = next_r.b41 } in
  mark_test_run 285;
  let test = eq r r_expected in
  if not test then failwithf "test 285 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a41; b41 = #{ a40; b40 } } = r in
  let expected_a41 = 100 in
  mark_test_run 286;
  let test = (fun a b -> Int.equal a b) expected_a41 a41 in
  if not test then failwithf "test 286 failed";
  let expected_a40 = #101l in
  mark_test_run 287;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 287 failed";
  let expected_b40 = 102 in
  mark_test_run 288;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 288 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a41; b41 } = r in
  let expected_a41 = 100 in
  mark_test_run 289;
  let test = (fun a b -> Int.equal a b) expected_a41 a41 in
  if not test then failwithf "test 289 failed";
  let expected_b41 = #{ a40 = #101l; b40 = 102 } in
  mark_test_run 290;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) expected_b41 b41 in
  if not test then failwithf "test 290 failed";

  ()
;;

let () =
  (******************************************)
  (*   t43 = { int; #{ int32#; int32# } }   *)
  (******************************************)
  let r = { a43 = 0; b43 = #{ a42 = #1l; b42 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a43 *)
  let actual = r.a43 in
  let expected = 0 in
  mark_test_run 291;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 291 failed";
  (* Paths of depth 1 *)
  (* .b43 *)
  let actual = r.b43 in
  let expected = #{ a42 = #1l; b42 = #2l } in
  mark_test_run 292;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 292 failed";
  (* Paths of depth 2 *)
  (* .b43.#a42 *)
  let actual = r.b43.#a42 in
  let expected = #1l in
  mark_test_run 293;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 293 failed";
  (* .b43.#b42 *)
  let actual = r.b43.#b42 in
  let expected = #2l in
  mark_test_run 294;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 294 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a43 = a431; b43 = b431 } { a43 = a432; b43 = b432 } -> (fun a b -> Int.equal a b) a431 a432 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) b431 b432) in
  let next_r = { a43 = 100; b43 = #{ a42 = #101l; b42 = #102l } } in
  let r_expected = { a43 = 0; b43 = #{ a42 = #1l; b42 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a43 *)
  r.a43 <- next_r.a43;
  let r_expected = { r_expected with a43 = next_r.a43 } in
  mark_test_run 295;
  let test = eq r r_expected in
  if not test then failwithf "test 295 failed";
  Gc.compact ();
  (* .b43 *)
  r.b43 <- next_r.b43;
  let r_expected = { r_expected with b43 = next_r.b43 } in
  mark_test_run 296;
  let test = eq r r_expected in
  if not test then failwithf "test 296 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a43; b43 = #{ a42; b42 } } = r in
  let expected_a43 = 100 in
  mark_test_run 297;
  let test = (fun a b -> Int.equal a b) expected_a43 a43 in
  if not test then failwithf "test 297 failed";
  let expected_a42 = #101l in
  mark_test_run 298;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 298 failed";
  let expected_b42 = #102l in
  mark_test_run 299;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 299 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a43; b43 } = r in
  let expected_a43 = 100 in
  mark_test_run 300;
  let test = (fun a b -> Int.equal a b) expected_a43 a43 in
  if not test then failwithf "test 300 failed";
  let expected_b43 = #{ a42 = #101l; b42 = #102l } in
  mark_test_run 301;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) expected_b43 b43 in
  if not test then failwithf "test 301 failed";

  ()
;;

let () =
  (********************************************)
  (*   t45 = { int; #{ int32#; #{ int } } }   *)
  (********************************************)
  let r = { a45 = 0; b45 = #{ a44 = #1l; b44 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a45 *)
  let actual = r.a45 in
  let expected = 0 in
  mark_test_run 302;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 302 failed";
  (* Paths of depth 1 *)
  (* .b45 *)
  let actual = r.b45 in
  let expected = #{ a44 = #1l; b44 = #{ a23 = 2 } } in
  mark_test_run 303;
  let test = (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a441 a442 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b441 b442) actual expected in
  if not test then failwithf "test 303 failed";
  (* Paths of depth 2 *)
  (* .b45.#a44 *)
  let actual = r.b45.#a44 in
  let expected = #1l in
  mark_test_run 304;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 304 failed";
  (* .b45.#b44 *)
  let actual = r.b45.#b44 in
  let expected = #{ a23 = 2 } in
  mark_test_run 305;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 305 failed";
  (* Paths of depth 3 *)
  (* .b45.#b44.#a23 *)
  let actual = r.b45.#b44.#a23 in
  let expected = 2 in
  mark_test_run 306;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 306 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a45 = a451; b45 = b451 } { a45 = a452; b45 = b452 } -> (fun a b -> Int.equal a b) a451 a452 && (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a441 a442 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b441 b442) b451 b452) in
  let next_r = { a45 = 100; b45 = #{ a44 = #101l; b44 = #{ a23 = 102 } } } in
  let r_expected = { a45 = 0; b45 = #{ a44 = #1l; b44 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a45 *)
  r.a45 <- next_r.a45;
  let r_expected = { r_expected with a45 = next_r.a45 } in
  mark_test_run 307;
  let test = eq r r_expected in
  if not test then failwithf "test 307 failed";
  Gc.compact ();
  (* .b45 *)
  r.b45 <- next_r.b45;
  let r_expected = { r_expected with b45 = next_r.b45 } in
  mark_test_run 308;
  let test = eq r r_expected in
  if not test then failwithf "test 308 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a45; b45 = #{ a44; b44 = #{ a23 } } } = r in
  let expected_a45 = 100 in
  mark_test_run 309;
  let test = (fun a b -> Int.equal a b) expected_a45 a45 in
  if not test then failwithf "test 309 failed";
  let expected_a44 = #101l in
  mark_test_run 310;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a44 a44 in
  if not test then failwithf "test 310 failed";
  let expected_a23 = 102 in
  mark_test_run 311;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 311 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a45; b45 } = r in
  let expected_a45 = 100 in
  mark_test_run 312;
  let test = (fun a b -> Int.equal a b) expected_a45 a45 in
  if not test then failwithf "test 312 failed";
  let expected_b45 = #{ a44 = #101l; b44 = #{ a23 = 102 } } in
  mark_test_run 313;
  let test = (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a441 a442 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b441 b442) expected_b45 b45 in
  if not test then failwithf "test 313 failed";

  ()
;;

let () =
  (***********************************************)
  (*   t47 = { int; #{ int32#; #{ int32# } } }   *)
  (***********************************************)
  let r = { a47 = 0; b47 = #{ a46 = #1l; b46 = #{ a33 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a47 *)
  let actual = r.a47 in
  let expected = 0 in
  mark_test_run 314;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 314 failed";
  (* Paths of depth 1 *)
  (* .b47 *)
  let actual = r.b47 in
  let expected = #{ a46 = #1l; b46 = #{ a33 = #2l } } in
  mark_test_run 315;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a461 a462 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b461 b462) actual expected in
  if not test then failwithf "test 315 failed";
  (* Paths of depth 2 *)
  (* .b47.#a46 *)
  let actual = r.b47.#a46 in
  let expected = #1l in
  mark_test_run 316;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 316 failed";
  (* .b47.#b46 *)
  let actual = r.b47.#b46 in
  let expected = #{ a33 = #2l } in
  mark_test_run 317;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) actual expected in
  if not test then failwithf "test 317 failed";
  (* Paths of depth 3 *)
  (* .b47.#b46.#a33 *)
  let actual = r.b47.#b46.#a33 in
  let expected = #2l in
  mark_test_run 318;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 318 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a47 = a471; b47 = b471 } { a47 = a472; b47 = b472 } -> (fun a b -> Int.equal a b) a471 a472 && (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a461 a462 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b461 b462) b471 b472) in
  let next_r = { a47 = 100; b47 = #{ a46 = #101l; b46 = #{ a33 = #102l } } } in
  let r_expected = { a47 = 0; b47 = #{ a46 = #1l; b46 = #{ a33 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a47 *)
  r.a47 <- next_r.a47;
  let r_expected = { r_expected with a47 = next_r.a47 } in
  mark_test_run 319;
  let test = eq r r_expected in
  if not test then failwithf "test 319 failed";
  Gc.compact ();
  (* .b47 *)
  r.b47 <- next_r.b47;
  let r_expected = { r_expected with b47 = next_r.b47 } in
  mark_test_run 320;
  let test = eq r r_expected in
  if not test then failwithf "test 320 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a47; b47 = #{ a46; b46 = #{ a33 } } } = r in
  let expected_a47 = 100 in
  mark_test_run 321;
  let test = (fun a b -> Int.equal a b) expected_a47 a47 in
  if not test then failwithf "test 321 failed";
  let expected_a46 = #101l in
  mark_test_run 322;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a46 a46 in
  if not test then failwithf "test 322 failed";
  let expected_a33 = #102l in
  mark_test_run 323;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 323 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a47; b47 } = r in
  let expected_a47 = 100 in
  mark_test_run 324;
  let test = (fun a b -> Int.equal a b) expected_a47 a47 in
  if not test then failwithf "test 324 failed";
  let expected_b47 = #{ a46 = #101l; b46 = #{ a33 = #102l } } in
  mark_test_run 325;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a461 a462 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b461 b462) expected_b47 b47 in
  if not test then failwithf "test 325 failed";

  ()
;;

let () =
  (*********************************)
  (*   t48 = { int; #{ float } }   *)
  (*********************************)
  let r = { a48 = 0; b48 = #{ a36 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a48 *)
  let actual = r.a48 in
  let expected = 0 in
  mark_test_run 326;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 326 failed";
  (* Paths of depth 1 *)
  (* .b48 *)
  let actual = r.b48 in
  let expected = #{ a36 = 1. } in
  mark_test_run 327;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 327 failed";
  (* Paths of depth 2 *)
  (* .b48.#a36 *)
  let actual = r.b48.#a36 in
  let expected = 1. in
  mark_test_run 328;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 328 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a48 = a481; b48 = b481 } { a48 = a482; b48 = b482 } -> (fun a b -> Int.equal a b) a481 a482 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b481 b482) in
  let next_r = { a48 = 100; b48 = #{ a36 = 101. } } in
  let r_expected = { a48 = 0; b48 = #{ a36 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a48 *)
  r.a48 <- next_r.a48;
  let r_expected = { r_expected with a48 = next_r.a48 } in
  mark_test_run 329;
  let test = eq r r_expected in
  if not test then failwithf "test 329 failed";
  Gc.compact ();
  (* .b48 *)
  r.b48 <- next_r.b48;
  let r_expected = { r_expected with b48 = next_r.b48 } in
  mark_test_run 330;
  let test = eq r r_expected in
  if not test then failwithf "test 330 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a48; b48 = #{ a36 } } = r in
  let expected_a48 = 100 in
  mark_test_run 331;
  let test = (fun a b -> Int.equal a b) expected_a48 a48 in
  if not test then failwithf "test 331 failed";
  let expected_a36 = 101. in
  mark_test_run 332;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 332 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a48; b48 } = r in
  let expected_a48 = 100 in
  mark_test_run 333;
  let test = (fun a b -> Int.equal a b) expected_a48 a48 in
  if not test then failwithf "test 333 failed";
  let expected_b48 = #{ a36 = 101. } in
  mark_test_run 334;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) expected_b48 b48 in
  if not test then failwithf "test 334 failed";

  ()
;;

let () =
  (**************************************)
  (*   t50 = { int; #{ float; int } }   *)
  (**************************************)
  let r = { a50 = 0; b50 = #{ a49 = 1.; b49 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a50 *)
  let actual = r.a50 in
  let expected = 0 in
  mark_test_run 335;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 335 failed";
  (* Paths of depth 1 *)
  (* .b50 *)
  let actual = r.b50 in
  let expected = #{ a49 = 1.; b49 = 2 } in
  mark_test_run 336;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 336 failed";
  (* Paths of depth 2 *)
  (* .b50.#a49 *)
  let actual = r.b50.#a49 in
  let expected = 1. in
  mark_test_run 337;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 337 failed";
  (* .b50.#b49 *)
  let actual = r.b50.#b49 in
  let expected = 2 in
  mark_test_run 338;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 338 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a50 = a501; b50 = b501 } { a50 = a502; b50 = b502 } -> (fun a b -> Int.equal a b) a501 a502 && (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) b501 b502) in
  let next_r = { a50 = 100; b50 = #{ a49 = 101.; b49 = 102 } } in
  let r_expected = { a50 = 0; b50 = #{ a49 = 1.; b49 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a50 *)
  r.a50 <- next_r.a50;
  let r_expected = { r_expected with a50 = next_r.a50 } in
  mark_test_run 339;
  let test = eq r r_expected in
  if not test then failwithf "test 339 failed";
  Gc.compact ();
  (* .b50 *)
  r.b50 <- next_r.b50;
  let r_expected = { r_expected with b50 = next_r.b50 } in
  mark_test_run 340;
  let test = eq r r_expected in
  if not test then failwithf "test 340 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a50; b50 = #{ a49; b49 } } = r in
  let expected_a50 = 100 in
  mark_test_run 341;
  let test = (fun a b -> Int.equal a b) expected_a50 a50 in
  if not test then failwithf "test 341 failed";
  let expected_a49 = 101. in
  mark_test_run 342;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 342 failed";
  let expected_b49 = 102 in
  mark_test_run 343;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 343 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a50; b50 } = r in
  let expected_a50 = 100 in
  mark_test_run 344;
  let test = (fun a b -> Int.equal a b) expected_a50 a50 in
  if not test then failwithf "test 344 failed";
  let expected_b50 = #{ a49 = 101.; b49 = 102 } in
  mark_test_run 345;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) expected_b50 b50 in
  if not test then failwithf "test 345 failed";

  ()
;;

let () =
  (****************************************)
  (*   t52 = { int; #{ float; float } }   *)
  (****************************************)
  let r = { a52 = 0; b52 = #{ a51 = 1.; b51 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a52 *)
  let actual = r.a52 in
  let expected = 0 in
  mark_test_run 346;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 346 failed";
  (* Paths of depth 1 *)
  (* .b52 *)
  let actual = r.b52 in
  let expected = #{ a51 = 1.; b51 = 2. } in
  mark_test_run 347;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 347 failed";
  (* Paths of depth 2 *)
  (* .b52.#a51 *)
  let actual = r.b52.#a51 in
  let expected = 1. in
  mark_test_run 348;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 348 failed";
  (* .b52.#b51 *)
  let actual = r.b52.#b51 in
  let expected = 2. in
  mark_test_run 349;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 349 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a52 = a521; b52 = b521 } { a52 = a522; b52 = b522 } -> (fun a b -> Int.equal a b) a521 a522 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b521 b522) in
  let next_r = { a52 = 100; b52 = #{ a51 = 101.; b51 = 102. } } in
  let r_expected = { a52 = 0; b52 = #{ a51 = 1.; b51 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a52 *)
  r.a52 <- next_r.a52;
  let r_expected = { r_expected with a52 = next_r.a52 } in
  mark_test_run 350;
  let test = eq r r_expected in
  if not test then failwithf "test 350 failed";
  Gc.compact ();
  (* .b52 *)
  r.b52 <- next_r.b52;
  let r_expected = { r_expected with b52 = next_r.b52 } in
  mark_test_run 351;
  let test = eq r r_expected in
  if not test then failwithf "test 351 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a52; b52 = #{ a51; b51 } } = r in
  let expected_a52 = 100 in
  mark_test_run 352;
  let test = (fun a b -> Int.equal a b) expected_a52 a52 in
  if not test then failwithf "test 352 failed";
  let expected_a51 = 101. in
  mark_test_run 353;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 353 failed";
  let expected_b51 = 102. in
  mark_test_run 354;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 354 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a52; b52 } = r in
  let expected_a52 = 100 in
  mark_test_run 355;
  let test = (fun a b -> Int.equal a b) expected_a52 a52 in
  if not test then failwithf "test 355 failed";
  let expected_b52 = #{ a51 = 101.; b51 = 102. } in
  mark_test_run 356;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) expected_b52 b52 in
  if not test then failwithf "test 356 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t54 = { int; #{ float; #{ int } } }   *)
  (*******************************************)
  let r = { a54 = 0; b54 = #{ a53 = 1.; b53 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a54 *)
  let actual = r.a54 in
  let expected = 0 in
  mark_test_run 357;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 357 failed";
  (* Paths of depth 1 *)
  (* .b54 *)
  let actual = r.b54 in
  let expected = #{ a53 = 1.; b53 = #{ a23 = 2 } } in
  mark_test_run 358;
  let test = (fun #{ a53 = a531; b53 = b531 } #{ a53 = a532; b53 = b532 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a531 a532 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b531 b532) actual expected in
  if not test then failwithf "test 358 failed";
  (* Paths of depth 2 *)
  (* .b54.#a53 *)
  let actual = r.b54.#a53 in
  let expected = 1. in
  mark_test_run 359;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 359 failed";
  (* .b54.#b53 *)
  let actual = r.b54.#b53 in
  let expected = #{ a23 = 2 } in
  mark_test_run 360;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 360 failed";
  (* Paths of depth 3 *)
  (* .b54.#b53.#a23 *)
  let actual = r.b54.#b53.#a23 in
  let expected = 2 in
  mark_test_run 361;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 361 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a54 = a541; b54 = b541 } { a54 = a542; b54 = b542 } -> (fun a b -> Int.equal a b) a541 a542 && (fun #{ a53 = a531; b53 = b531 } #{ a53 = a532; b53 = b532 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a531 a532 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b531 b532) b541 b542) in
  let next_r = { a54 = 100; b54 = #{ a53 = 101.; b53 = #{ a23 = 102 } } } in
  let r_expected = { a54 = 0; b54 = #{ a53 = 1.; b53 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a54 *)
  r.a54 <- next_r.a54;
  let r_expected = { r_expected with a54 = next_r.a54 } in
  mark_test_run 362;
  let test = eq r r_expected in
  if not test then failwithf "test 362 failed";
  Gc.compact ();
  (* .b54 *)
  r.b54 <- next_r.b54;
  let r_expected = { r_expected with b54 = next_r.b54 } in
  mark_test_run 363;
  let test = eq r r_expected in
  if not test then failwithf "test 363 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a54; b54 = #{ a53; b53 = #{ a23 } } } = r in
  let expected_a54 = 100 in
  mark_test_run 364;
  let test = (fun a b -> Int.equal a b) expected_a54 a54 in
  if not test then failwithf "test 364 failed";
  let expected_a53 = 101. in
  mark_test_run 365;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a53 a53 in
  if not test then failwithf "test 365 failed";
  let expected_a23 = 102 in
  mark_test_run 366;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 366 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a54; b54 } = r in
  let expected_a54 = 100 in
  mark_test_run 367;
  let test = (fun a b -> Int.equal a b) expected_a54 a54 in
  if not test then failwithf "test 367 failed";
  let expected_b54 = #{ a53 = 101.; b53 = #{ a23 = 102 } } in
  mark_test_run 368;
  let test = (fun #{ a53 = a531; b53 = b531 } #{ a53 = a532; b53 = b532 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a531 a532 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b531 b532) expected_b54 b54 in
  if not test then failwithf "test 368 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t56 = { int; #{ float; #{ float } } }   *)
  (*********************************************)
  let r = { a56 = 0; b56 = #{ a55 = 1.; b55 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a56 *)
  let actual = r.a56 in
  let expected = 0 in
  mark_test_run 369;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 369 failed";
  (* Paths of depth 1 *)
  (* .b56 *)
  let actual = r.b56 in
  let expected = #{ a55 = 1.; b55 = #{ a36 = 2. } } in
  mark_test_run 370;
  let test = (fun #{ a55 = a551; b55 = b551 } #{ a55 = a552; b55 = b552 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a551 a552 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b551 b552) actual expected in
  if not test then failwithf "test 370 failed";
  (* Paths of depth 2 *)
  (* .b56.#a55 *)
  let actual = r.b56.#a55 in
  let expected = 1. in
  mark_test_run 371;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 371 failed";
  (* .b56.#b55 *)
  let actual = r.b56.#b55 in
  let expected = #{ a36 = 2. } in
  mark_test_run 372;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 372 failed";
  (* Paths of depth 3 *)
  (* .b56.#b55.#a36 *)
  let actual = r.b56.#b55.#a36 in
  let expected = 2. in
  mark_test_run 373;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 373 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a56 = a561; b56 = b561 } { a56 = a562; b56 = b562 } -> (fun a b -> Int.equal a b) a561 a562 && (fun #{ a55 = a551; b55 = b551 } #{ a55 = a552; b55 = b552 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a551 a552 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b551 b552) b561 b562) in
  let next_r = { a56 = 100; b56 = #{ a55 = 101.; b55 = #{ a36 = 102. } } } in
  let r_expected = { a56 = 0; b56 = #{ a55 = 1.; b55 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a56 *)
  r.a56 <- next_r.a56;
  let r_expected = { r_expected with a56 = next_r.a56 } in
  mark_test_run 374;
  let test = eq r r_expected in
  if not test then failwithf "test 374 failed";
  Gc.compact ();
  (* .b56 *)
  r.b56 <- next_r.b56;
  let r_expected = { r_expected with b56 = next_r.b56 } in
  mark_test_run 375;
  let test = eq r r_expected in
  if not test then failwithf "test 375 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a56; b56 = #{ a55; b55 = #{ a36 } } } = r in
  let expected_a56 = 100 in
  mark_test_run 376;
  let test = (fun a b -> Int.equal a b) expected_a56 a56 in
  if not test then failwithf "test 376 failed";
  let expected_a55 = 101. in
  mark_test_run 377;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a55 a55 in
  if not test then failwithf "test 377 failed";
  let expected_a36 = 102. in
  mark_test_run 378;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 378 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a56; b56 } = r in
  let expected_a56 = 100 in
  mark_test_run 379;
  let test = (fun a b -> Int.equal a b) expected_a56 a56 in
  if not test then failwithf "test 379 failed";
  let expected_b56 = #{ a55 = 101.; b55 = #{ a36 = 102. } } in
  mark_test_run 380;
  let test = (fun #{ a55 = a551; b55 = b551 } #{ a55 = a552; b55 = b552 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a551 a552 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b551 b552) expected_b56 b56 in
  if not test then failwithf "test 380 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t58 = { int; #{ #{ int; int } } }   *)
  (*****************************************)
  let r = { a58 = 0; b58 = #{ a57 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a58 *)
  let actual = r.a58 in
  let expected = 0 in
  mark_test_run 381;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 381 failed";
  (* Paths of depth 1 *)
  (* .b58 *)
  let actual = r.b58 in
  let expected = #{ a57 = #{ a25 = 1; b25 = 2 } } in
  mark_test_run 382;
  let test = (fun #{ a57 = a571 } #{ a57 = a572 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a571 a572) actual expected in
  if not test then failwithf "test 382 failed";
  (* Paths of depth 2 *)
  (* .b58.#a57 *)
  let actual = r.b58.#a57 in
  let expected = #{ a25 = 1; b25 = 2 } in
  mark_test_run 383;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 383 failed";
  (* Paths of depth 3 *)
  (* .b58.#a57.#a25 *)
  let actual = r.b58.#a57.#a25 in
  let expected = 1 in
  mark_test_run 384;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 384 failed";
  (* .b58.#a57.#b25 *)
  let actual = r.b58.#a57.#b25 in
  let expected = 2 in
  mark_test_run 385;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 385 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a58 = a581; b58 = b581 } { a58 = a582; b58 = b582 } -> (fun a b -> Int.equal a b) a581 a582 && (fun #{ a57 = a571 } #{ a57 = a572 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a571 a572) b581 b582) in
  let next_r = { a58 = 100; b58 = #{ a57 = #{ a25 = 101; b25 = 102 } } } in
  let r_expected = { a58 = 0; b58 = #{ a57 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a58 *)
  r.a58 <- next_r.a58;
  let r_expected = { r_expected with a58 = next_r.a58 } in
  mark_test_run 386;
  let test = eq r r_expected in
  if not test then failwithf "test 386 failed";
  Gc.compact ();
  (* .b58 *)
  r.b58 <- next_r.b58;
  let r_expected = { r_expected with b58 = next_r.b58 } in
  mark_test_run 387;
  let test = eq r r_expected in
  if not test then failwithf "test 387 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a58; b58 = #{ a57 = #{ a25; b25 } } } = r in
  let expected_a58 = 100 in
  mark_test_run 388;
  let test = (fun a b -> Int.equal a b) expected_a58 a58 in
  if not test then failwithf "test 388 failed";
  let expected_a25 = 101 in
  mark_test_run 389;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 389 failed";
  let expected_b25 = 102 in
  mark_test_run 390;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 390 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a58; b58 } = r in
  let expected_a58 = 100 in
  mark_test_run 391;
  let test = (fun a b -> Int.equal a b) expected_a58 a58 in
  if not test then failwithf "test 391 failed";
  let expected_b58 = #{ a57 = #{ a25 = 101; b25 = 102 } } in
  mark_test_run 392;
  let test = (fun #{ a57 = a571 } #{ a57 = a572 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a571 a572) expected_b58 b58 in
  if not test then failwithf "test 392 failed";

  ()
;;

let () =
  (********************************************)
  (*   t60 = { int; #{ #{ int; int32# } } }   *)
  (********************************************)
  let r = { a60 = 0; b60 = #{ a59 = #{ a27 = 1; b27 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a60 *)
  let actual = r.a60 in
  let expected = 0 in
  mark_test_run 393;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 393 failed";
  (* Paths of depth 1 *)
  (* .b60 *)
  let actual = r.b60 in
  let expected = #{ a59 = #{ a27 = 1; b27 = #2l } } in
  mark_test_run 394;
  let test = (fun #{ a59 = a591 } #{ a59 = a592 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a591 a592) actual expected in
  if not test then failwithf "test 394 failed";
  (* Paths of depth 2 *)
  (* .b60.#a59 *)
  let actual = r.b60.#a59 in
  let expected = #{ a27 = 1; b27 = #2l } in
  mark_test_run 395;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 395 failed";
  (* Paths of depth 3 *)
  (* .b60.#a59.#a27 *)
  let actual = r.b60.#a59.#a27 in
  let expected = 1 in
  mark_test_run 396;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 396 failed";
  (* .b60.#a59.#b27 *)
  let actual = r.b60.#a59.#b27 in
  let expected = #2l in
  mark_test_run 397;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 397 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a60 = a601; b60 = b601 } { a60 = a602; b60 = b602 } -> (fun a b -> Int.equal a b) a601 a602 && (fun #{ a59 = a591 } #{ a59 = a592 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a591 a592) b601 b602) in
  let next_r = { a60 = 100; b60 = #{ a59 = #{ a27 = 101; b27 = #102l } } } in
  let r_expected = { a60 = 0; b60 = #{ a59 = #{ a27 = 1; b27 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a60 *)
  r.a60 <- next_r.a60;
  let r_expected = { r_expected with a60 = next_r.a60 } in
  mark_test_run 398;
  let test = eq r r_expected in
  if not test then failwithf "test 398 failed";
  Gc.compact ();
  (* .b60 *)
  r.b60 <- next_r.b60;
  let r_expected = { r_expected with b60 = next_r.b60 } in
  mark_test_run 399;
  let test = eq r r_expected in
  if not test then failwithf "test 399 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a60; b60 = #{ a59 = #{ a27; b27 } } } = r in
  let expected_a60 = 100 in
  mark_test_run 400;
  let test = (fun a b -> Int.equal a b) expected_a60 a60 in
  if not test then failwithf "test 400 failed";
  let expected_a27 = 101 in
  mark_test_run 401;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 401 failed";
  let expected_b27 = #102l in
  mark_test_run 402;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 402 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a60; b60 } = r in
  let expected_a60 = 100 in
  mark_test_run 403;
  let test = (fun a b -> Int.equal a b) expected_a60 a60 in
  if not test then failwithf "test 403 failed";
  let expected_b60 = #{ a59 = #{ a27 = 101; b27 = #102l } } in
  mark_test_run 404;
  let test = (fun #{ a59 = a591 } #{ a59 = a592 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a591 a592) expected_b60 b60 in
  if not test then failwithf "test 404 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t62 = { int; #{ #{ int; float } } }   *)
  (*******************************************)
  let r = { a62 = 0; b62 = #{ a61 = #{ a29 = 1; b29 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a62 *)
  let actual = r.a62 in
  let expected = 0 in
  mark_test_run 405;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 405 failed";
  (* Paths of depth 1 *)
  (* .b62 *)
  let actual = r.b62 in
  let expected = #{ a61 = #{ a29 = 1; b29 = 2. } } in
  mark_test_run 406;
  let test = (fun #{ a61 = a611 } #{ a61 = a612 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a611 a612) actual expected in
  if not test then failwithf "test 406 failed";
  (* Paths of depth 2 *)
  (* .b62.#a61 *)
  let actual = r.b62.#a61 in
  let expected = #{ a29 = 1; b29 = 2. } in
  mark_test_run 407;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 407 failed";
  (* Paths of depth 3 *)
  (* .b62.#a61.#a29 *)
  let actual = r.b62.#a61.#a29 in
  let expected = 1 in
  mark_test_run 408;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 408 failed";
  (* .b62.#a61.#b29 *)
  let actual = r.b62.#a61.#b29 in
  let expected = 2. in
  mark_test_run 409;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 409 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a62 = a621; b62 = b621 } { a62 = a622; b62 = b622 } -> (fun a b -> Int.equal a b) a621 a622 && (fun #{ a61 = a611 } #{ a61 = a612 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a611 a612) b621 b622) in
  let next_r = { a62 = 100; b62 = #{ a61 = #{ a29 = 101; b29 = 102. } } } in
  let r_expected = { a62 = 0; b62 = #{ a61 = #{ a29 = 1; b29 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a62 *)
  r.a62 <- next_r.a62;
  let r_expected = { r_expected with a62 = next_r.a62 } in
  mark_test_run 410;
  let test = eq r r_expected in
  if not test then failwithf "test 410 failed";
  Gc.compact ();
  (* .b62 *)
  r.b62 <- next_r.b62;
  let r_expected = { r_expected with b62 = next_r.b62 } in
  mark_test_run 411;
  let test = eq r r_expected in
  if not test then failwithf "test 411 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a62; b62 = #{ a61 = #{ a29; b29 } } } = r in
  let expected_a62 = 100 in
  mark_test_run 412;
  let test = (fun a b -> Int.equal a b) expected_a62 a62 in
  if not test then failwithf "test 412 failed";
  let expected_a29 = 101 in
  mark_test_run 413;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 413 failed";
  let expected_b29 = 102. in
  mark_test_run 414;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 414 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a62; b62 } = r in
  let expected_a62 = 100 in
  mark_test_run 415;
  let test = (fun a b -> Int.equal a b) expected_a62 a62 in
  if not test then failwithf "test 415 failed";
  let expected_b62 = #{ a61 = #{ a29 = 101; b29 = 102. } } in
  mark_test_run 416;
  let test = (fun #{ a61 = a611 } #{ a61 = a612 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a611 a612) expected_b62 b62 in
  if not test then failwithf "test 416 failed";

  ()
;;

let () =
  (********************************************)
  (*   t64 = { int; #{ #{ int32#; int } } }   *)
  (********************************************)
  let r = { a64 = 0; b64 = #{ a63 = #{ a40 = #1l; b40 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a64 *)
  let actual = r.a64 in
  let expected = 0 in
  mark_test_run 417;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 417 failed";
  (* Paths of depth 1 *)
  (* .b64 *)
  let actual = r.b64 in
  let expected = #{ a63 = #{ a40 = #1l; b40 = 2 } } in
  mark_test_run 418;
  let test = (fun #{ a63 = a631 } #{ a63 = a632 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a631 a632) actual expected in
  if not test then failwithf "test 418 failed";
  (* Paths of depth 2 *)
  (* .b64.#a63 *)
  let actual = r.b64.#a63 in
  let expected = #{ a40 = #1l; b40 = 2 } in
  mark_test_run 419;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 419 failed";
  (* Paths of depth 3 *)
  (* .b64.#a63.#a40 *)
  let actual = r.b64.#a63.#a40 in
  let expected = #1l in
  mark_test_run 420;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 420 failed";
  (* .b64.#a63.#b40 *)
  let actual = r.b64.#a63.#b40 in
  let expected = 2 in
  mark_test_run 421;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 421 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a64 = a641; b64 = b641 } { a64 = a642; b64 = b642 } -> (fun a b -> Int.equal a b) a641 a642 && (fun #{ a63 = a631 } #{ a63 = a632 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a631 a632) b641 b642) in
  let next_r = { a64 = 100; b64 = #{ a63 = #{ a40 = #101l; b40 = 102 } } } in
  let r_expected = { a64 = 0; b64 = #{ a63 = #{ a40 = #1l; b40 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a64 *)
  r.a64 <- next_r.a64;
  let r_expected = { r_expected with a64 = next_r.a64 } in
  mark_test_run 422;
  let test = eq r r_expected in
  if not test then failwithf "test 422 failed";
  Gc.compact ();
  (* .b64 *)
  r.b64 <- next_r.b64;
  let r_expected = { r_expected with b64 = next_r.b64 } in
  mark_test_run 423;
  let test = eq r r_expected in
  if not test then failwithf "test 423 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a64; b64 = #{ a63 = #{ a40; b40 } } } = r in
  let expected_a64 = 100 in
  mark_test_run 424;
  let test = (fun a b -> Int.equal a b) expected_a64 a64 in
  if not test then failwithf "test 424 failed";
  let expected_a40 = #101l in
  mark_test_run 425;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 425 failed";
  let expected_b40 = 102 in
  mark_test_run 426;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 426 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a64; b64 } = r in
  let expected_a64 = 100 in
  mark_test_run 427;
  let test = (fun a b -> Int.equal a b) expected_a64 a64 in
  if not test then failwithf "test 427 failed";
  let expected_b64 = #{ a63 = #{ a40 = #101l; b40 = 102 } } in
  mark_test_run 428;
  let test = (fun #{ a63 = a631 } #{ a63 = a632 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a631 a632) expected_b64 b64 in
  if not test then failwithf "test 428 failed";

  ()
;;

let () =
  (***********************************************)
  (*   t66 = { int; #{ #{ int32#; int32# } } }   *)
  (***********************************************)
  let r = { a66 = 0; b66 = #{ a65 = #{ a42 = #1l; b42 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a66 *)
  let actual = r.a66 in
  let expected = 0 in
  mark_test_run 429;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 429 failed";
  (* Paths of depth 1 *)
  (* .b66 *)
  let actual = r.b66 in
  let expected = #{ a65 = #{ a42 = #1l; b42 = #2l } } in
  mark_test_run 430;
  let test = (fun #{ a65 = a651 } #{ a65 = a652 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a651 a652) actual expected in
  if not test then failwithf "test 430 failed";
  (* Paths of depth 2 *)
  (* .b66.#a65 *)
  let actual = r.b66.#a65 in
  let expected = #{ a42 = #1l; b42 = #2l } in
  mark_test_run 431;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 431 failed";
  (* Paths of depth 3 *)
  (* .b66.#a65.#a42 *)
  let actual = r.b66.#a65.#a42 in
  let expected = #1l in
  mark_test_run 432;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 432 failed";
  (* .b66.#a65.#b42 *)
  let actual = r.b66.#a65.#b42 in
  let expected = #2l in
  mark_test_run 433;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 433 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a66 = a661; b66 = b661 } { a66 = a662; b66 = b662 } -> (fun a b -> Int.equal a b) a661 a662 && (fun #{ a65 = a651 } #{ a65 = a652 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a651 a652) b661 b662) in
  let next_r = { a66 = 100; b66 = #{ a65 = #{ a42 = #101l; b42 = #102l } } } in
  let r_expected = { a66 = 0; b66 = #{ a65 = #{ a42 = #1l; b42 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a66 *)
  r.a66 <- next_r.a66;
  let r_expected = { r_expected with a66 = next_r.a66 } in
  mark_test_run 434;
  let test = eq r r_expected in
  if not test then failwithf "test 434 failed";
  Gc.compact ();
  (* .b66 *)
  r.b66 <- next_r.b66;
  let r_expected = { r_expected with b66 = next_r.b66 } in
  mark_test_run 435;
  let test = eq r r_expected in
  if not test then failwithf "test 435 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a66; b66 = #{ a65 = #{ a42; b42 } } } = r in
  let expected_a66 = 100 in
  mark_test_run 436;
  let test = (fun a b -> Int.equal a b) expected_a66 a66 in
  if not test then failwithf "test 436 failed";
  let expected_a42 = #101l in
  mark_test_run 437;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 437 failed";
  let expected_b42 = #102l in
  mark_test_run 438;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 438 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a66; b66 } = r in
  let expected_a66 = 100 in
  mark_test_run 439;
  let test = (fun a b -> Int.equal a b) expected_a66 a66 in
  if not test then failwithf "test 439 failed";
  let expected_b66 = #{ a65 = #{ a42 = #101l; b42 = #102l } } in
  mark_test_run 440;
  let test = (fun #{ a65 = a651 } #{ a65 = a652 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a651 a652) expected_b66 b66 in
  if not test then failwithf "test 440 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t68 = { int; #{ #{ float; int } } }   *)
  (*******************************************)
  let r = { a68 = 0; b68 = #{ a67 = #{ a49 = 1.; b49 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a68 *)
  let actual = r.a68 in
  let expected = 0 in
  mark_test_run 441;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 441 failed";
  (* Paths of depth 1 *)
  (* .b68 *)
  let actual = r.b68 in
  let expected = #{ a67 = #{ a49 = 1.; b49 = 2 } } in
  mark_test_run 442;
  let test = (fun #{ a67 = a671 } #{ a67 = a672 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a671 a672) actual expected in
  if not test then failwithf "test 442 failed";
  (* Paths of depth 2 *)
  (* .b68.#a67 *)
  let actual = r.b68.#a67 in
  let expected = #{ a49 = 1.; b49 = 2 } in
  mark_test_run 443;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 443 failed";
  (* Paths of depth 3 *)
  (* .b68.#a67.#a49 *)
  let actual = r.b68.#a67.#a49 in
  let expected = 1. in
  mark_test_run 444;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 444 failed";
  (* .b68.#a67.#b49 *)
  let actual = r.b68.#a67.#b49 in
  let expected = 2 in
  mark_test_run 445;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 445 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a68 = a681; b68 = b681 } { a68 = a682; b68 = b682 } -> (fun a b -> Int.equal a b) a681 a682 && (fun #{ a67 = a671 } #{ a67 = a672 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a671 a672) b681 b682) in
  let next_r = { a68 = 100; b68 = #{ a67 = #{ a49 = 101.; b49 = 102 } } } in
  let r_expected = { a68 = 0; b68 = #{ a67 = #{ a49 = 1.; b49 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a68 *)
  r.a68 <- next_r.a68;
  let r_expected = { r_expected with a68 = next_r.a68 } in
  mark_test_run 446;
  let test = eq r r_expected in
  if not test then failwithf "test 446 failed";
  Gc.compact ();
  (* .b68 *)
  r.b68 <- next_r.b68;
  let r_expected = { r_expected with b68 = next_r.b68 } in
  mark_test_run 447;
  let test = eq r r_expected in
  if not test then failwithf "test 447 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a68; b68 = #{ a67 = #{ a49; b49 } } } = r in
  let expected_a68 = 100 in
  mark_test_run 448;
  let test = (fun a b -> Int.equal a b) expected_a68 a68 in
  if not test then failwithf "test 448 failed";
  let expected_a49 = 101. in
  mark_test_run 449;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 449 failed";
  let expected_b49 = 102 in
  mark_test_run 450;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 450 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a68; b68 } = r in
  let expected_a68 = 100 in
  mark_test_run 451;
  let test = (fun a b -> Int.equal a b) expected_a68 a68 in
  if not test then failwithf "test 451 failed";
  let expected_b68 = #{ a67 = #{ a49 = 101.; b49 = 102 } } in
  mark_test_run 452;
  let test = (fun #{ a67 = a671 } #{ a67 = a672 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a671 a672) expected_b68 b68 in
  if not test then failwithf "test 452 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t70 = { int; #{ #{ float; float } } }   *)
  (*********************************************)
  let r = { a70 = 0; b70 = #{ a69 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a70 *)
  let actual = r.a70 in
  let expected = 0 in
  mark_test_run 453;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 453 failed";
  (* Paths of depth 1 *)
  (* .b70 *)
  let actual = r.b70 in
  let expected = #{ a69 = #{ a51 = 1.; b51 = 2. } } in
  mark_test_run 454;
  let test = (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a691 a692) actual expected in
  if not test then failwithf "test 454 failed";
  (* Paths of depth 2 *)
  (* .b70.#a69 *)
  let actual = r.b70.#a69 in
  let expected = #{ a51 = 1.; b51 = 2. } in
  mark_test_run 455;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 455 failed";
  (* Paths of depth 3 *)
  (* .b70.#a69.#a51 *)
  let actual = r.b70.#a69.#a51 in
  let expected = 1. in
  mark_test_run 456;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 456 failed";
  (* .b70.#a69.#b51 *)
  let actual = r.b70.#a69.#b51 in
  let expected = 2. in
  mark_test_run 457;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 457 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a70 = a701; b70 = b701 } { a70 = a702; b70 = b702 } -> (fun a b -> Int.equal a b) a701 a702 && (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a691 a692) b701 b702) in
  let next_r = { a70 = 100; b70 = #{ a69 = #{ a51 = 101.; b51 = 102. } } } in
  let r_expected = { a70 = 0; b70 = #{ a69 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a70 *)
  r.a70 <- next_r.a70;
  let r_expected = { r_expected with a70 = next_r.a70 } in
  mark_test_run 458;
  let test = eq r r_expected in
  if not test then failwithf "test 458 failed";
  Gc.compact ();
  (* .b70 *)
  r.b70 <- next_r.b70;
  let r_expected = { r_expected with b70 = next_r.b70 } in
  mark_test_run 459;
  let test = eq r r_expected in
  if not test then failwithf "test 459 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a70; b70 = #{ a69 = #{ a51; b51 } } } = r in
  let expected_a70 = 100 in
  mark_test_run 460;
  let test = (fun a b -> Int.equal a b) expected_a70 a70 in
  if not test then failwithf "test 460 failed";
  let expected_a51 = 101. in
  mark_test_run 461;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 461 failed";
  let expected_b51 = 102. in
  mark_test_run 462;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 462 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a70; b70 } = r in
  let expected_a70 = 100 in
  mark_test_run 463;
  let test = (fun a b -> Int.equal a b) expected_a70 a70 in
  if not test then failwithf "test 463 failed";
  let expected_b70 = #{ a69 = #{ a51 = 101.; b51 = 102. } } in
  mark_test_run 464;
  let test = (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a691 a692) expected_b70 b70 in
  if not test then failwithf "test 464 failed";

  ()
;;

let () =
  (***********************)
  (*   t71 = { int64 }   *)
  (***********************)
  let r = { a71 = 0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a71 *)
  let actual = r.a71 in
  let expected = 0L in
  mark_test_run 465;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 465 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a71 = a711 } { a71 = a712 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a711 a712) in
  let next_r = { a71 = 100L } in
  let r_expected = { a71 = 0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a71 *)
  r.a71 <- next_r.a71;
  let r_expected = { r_expected with a71 = next_r.a71 } in
  mark_test_run 466;
  let test = eq r r_expected in
  if not test then failwithf "test 466 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a71 } = r in
  let expected_a71 = 100L in
  mark_test_run 467;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a71 a71 in
  if not test then failwithf "test 467 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a71 } = r in
  let expected_a71 = 100L in
  mark_test_run 468;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a71 a71 in
  if not test then failwithf "test 468 failed";

  ()
;;

let () =
  (****************************)
  (*   t72 = { int64; int }   *)
  (****************************)
  let r = { a72 = 0L; b72 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a72 *)
  let actual = r.a72 in
  let expected = 0L in
  mark_test_run 469;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 469 failed";
  (* Paths of depth 1 *)
  (* .b72 *)
  let actual = r.b72 in
  let expected = 1 in
  mark_test_run 470;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 470 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a72 = a721; b72 = b721 } { a72 = a722; b72 = b722 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a721 a722 && (fun a b -> Int.equal a b) b721 b722) in
  let next_r = { a72 = 100L; b72 = 101 } in
  let r_expected = { a72 = 0L; b72 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a72 *)
  r.a72 <- next_r.a72;
  let r_expected = { r_expected with a72 = next_r.a72 } in
  mark_test_run 471;
  let test = eq r r_expected in
  if not test then failwithf "test 471 failed";
  Gc.compact ();
  (* .b72 *)
  r.b72 <- next_r.b72;
  let r_expected = { r_expected with b72 = next_r.b72 } in
  mark_test_run 472;
  let test = eq r r_expected in
  if not test then failwithf "test 472 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a72; b72 } = r in
  let expected_a72 = 100L in
  mark_test_run 473;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a72 a72 in
  if not test then failwithf "test 473 failed";
  let expected_b72 = 101 in
  mark_test_run 474;
  let test = (fun a b -> Int.equal a b) expected_b72 b72 in
  if not test then failwithf "test 474 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a72; b72 } = r in
  let expected_a72 = 100L in
  mark_test_run 475;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a72 a72 in
  if not test then failwithf "test 475 failed";
  let expected_b72 = 101 in
  mark_test_run 476;
  let test = (fun a b -> Int.equal a b) expected_b72 b72 in
  if not test then failwithf "test 476 failed";

  ()
;;

let () =
  (******************************)
  (*   t73 = { int64; int64 }   *)
  (******************************)
  let r = { a73 = 0L; b73 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a73 *)
  let actual = r.a73 in
  let expected = 0L in
  mark_test_run 477;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 477 failed";
  (* Paths of depth 1 *)
  (* .b73 *)
  let actual = r.b73 in
  let expected = 1L in
  mark_test_run 478;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 478 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a73 = a731; b73 = b731 } { a73 = a732; b73 = b732 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a731 a732 && (fun a b -> Int64.equal (globalize a) (globalize b)) b731 b732) in
  let next_r = { a73 = 100L; b73 = 101L } in
  let r_expected = { a73 = 0L; b73 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a73 *)
  r.a73 <- next_r.a73;
  let r_expected = { r_expected with a73 = next_r.a73 } in
  mark_test_run 479;
  let test = eq r r_expected in
  if not test then failwithf "test 479 failed";
  Gc.compact ();
  (* .b73 *)
  r.b73 <- next_r.b73;
  let r_expected = { r_expected with b73 = next_r.b73 } in
  mark_test_run 480;
  let test = eq r r_expected in
  if not test then failwithf "test 480 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a73; b73 } = r in
  let expected_a73 = 100L in
  mark_test_run 481;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a73 a73 in
  if not test then failwithf "test 481 failed";
  let expected_b73 = 101L in
  mark_test_run 482;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b73 b73 in
  if not test then failwithf "test 482 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a73; b73 } = r in
  let expected_a73 = 100L in
  mark_test_run 483;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a73 a73 in
  if not test then failwithf "test 483 failed";
  let expected_b73 = 101L in
  mark_test_run 484;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b73 b73 in
  if not test then failwithf "test 484 failed";

  ()
;;

let () =
  (*******************************)
  (*   t74 = { int64; int64# }   *)
  (*******************************)
  let r = { a74 = 0L; b74 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a74 *)
  let actual = r.a74 in
  let expected = 0L in
  mark_test_run 485;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 485 failed";
  (* Paths of depth 1 *)
  (* .b74 *)
  let actual = r.b74 in
  let expected = #1L in
  mark_test_run 486;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 486 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a74 = a741; b74 = b741 } { a74 = a742; b74 = b742 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a741 a742 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b741 b742) in
  let next_r = { a74 = 100L; b74 = #101L } in
  let r_expected = { a74 = 0L; b74 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a74 *)
  r.a74 <- next_r.a74;
  let r_expected = { r_expected with a74 = next_r.a74 } in
  mark_test_run 487;
  let test = eq r r_expected in
  if not test then failwithf "test 487 failed";
  Gc.compact ();
  (* .b74 *)
  r.b74 <- next_r.b74;
  let r_expected = { r_expected with b74 = next_r.b74 } in
  mark_test_run 488;
  let test = eq r r_expected in
  if not test then failwithf "test 488 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a74; b74 } = r in
  let expected_a74 = 100L in
  mark_test_run 489;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a74 a74 in
  if not test then failwithf "test 489 failed";
  let expected_b74 = #101L in
  mark_test_run 490;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b74 b74 in
  if not test then failwithf "test 490 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a74; b74 } = r in
  let expected_a74 = 100L in
  mark_test_run 491;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a74 a74 in
  if not test then failwithf "test 491 failed";
  let expected_b74 = #101L in
  mark_test_run 492;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b74 b74 in
  if not test then failwithf "test 492 failed";

  ()
;;

let () =
  (*******************************)
  (*   t75 = { int64; int32# }   *)
  (*******************************)
  let r = { a75 = 0L; b75 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a75 *)
  let actual = r.a75 in
  let expected = 0L in
  mark_test_run 493;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 493 failed";
  (* Paths of depth 1 *)
  (* .b75 *)
  let actual = r.b75 in
  let expected = #1l in
  mark_test_run 494;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 494 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a75 = a751; b75 = b751 } { a75 = a752; b75 = b752 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a751 a752 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b751 b752) in
  let next_r = { a75 = 100L; b75 = #101l } in
  let r_expected = { a75 = 0L; b75 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a75 *)
  r.a75 <- next_r.a75;
  let r_expected = { r_expected with a75 = next_r.a75 } in
  mark_test_run 495;
  let test = eq r r_expected in
  if not test then failwithf "test 495 failed";
  Gc.compact ();
  (* .b75 *)
  r.b75 <- next_r.b75;
  let r_expected = { r_expected with b75 = next_r.b75 } in
  mark_test_run 496;
  let test = eq r r_expected in
  if not test then failwithf "test 496 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a75; b75 } = r in
  let expected_a75 = 100L in
  mark_test_run 497;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a75 a75 in
  if not test then failwithf "test 497 failed";
  let expected_b75 = #101l in
  mark_test_run 498;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b75 b75 in
  if not test then failwithf "test 498 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a75; b75 } = r in
  let expected_a75 = 100L in
  mark_test_run 499;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a75 a75 in
  if not test then failwithf "test 499 failed";
  let expected_b75 = #101l in
  mark_test_run 500;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b75 b75 in
  if not test then failwithf "test 500 failed";

  ()
;;

let () =
  (***********************************)
  (*   t76 = { int64; nativeint# }   *)
  (***********************************)
  let r = { a76 = 0L; b76 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a76 *)
  let actual = r.a76 in
  let expected = 0L in
  mark_test_run 501;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 501 failed";
  (* Paths of depth 1 *)
  (* .b76 *)
  let actual = r.b76 in
  let expected = #1n in
  mark_test_run 502;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 502 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a76 = a761; b76 = b761 } { a76 = a762; b76 = b762 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a761 a762 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b761 b762) in
  let next_r = { a76 = 100L; b76 = #101n } in
  let r_expected = { a76 = 0L; b76 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a76 *)
  r.a76 <- next_r.a76;
  let r_expected = { r_expected with a76 = next_r.a76 } in
  mark_test_run 503;
  let test = eq r r_expected in
  if not test then failwithf "test 503 failed";
  Gc.compact ();
  (* .b76 *)
  r.b76 <- next_r.b76;
  let r_expected = { r_expected with b76 = next_r.b76 } in
  mark_test_run 504;
  let test = eq r r_expected in
  if not test then failwithf "test 504 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a76; b76 } = r in
  let expected_a76 = 100L in
  mark_test_run 505;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a76 a76 in
  if not test then failwithf "test 505 failed";
  let expected_b76 = #101n in
  mark_test_run 506;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b76 b76 in
  if not test then failwithf "test 506 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a76; b76 } = r in
  let expected_a76 = 100L in
  mark_test_run 507;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a76 a76 in
  if not test then failwithf "test 507 failed";
  let expected_b76 = #101n in
  mark_test_run 508;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b76 b76 in
  if not test then failwithf "test 508 failed";

  ()
;;

let () =
  (*******************************)
  (*   t77 = { int64; unit_u }   *)
  (*******************************)
  let r = { a77 = 0L; b77 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a77 *)
  let actual = r.a77 in
  let expected = 0L in
  mark_test_run 509;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 509 failed";
  (* Paths of depth 1 *)
  (* .b77 *)
  let actual = r.b77 in
  let expected = (unbox_unit ()) in
  mark_test_run 510;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 510 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a77 = a771; b77 = b771 } { a77 = a772; b77 = b772 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a771 a772 && (fun _ _ -> true) b771 b772) in
  let next_r = { a77 = 100L; b77 = (unbox_unit ()) } in
  let r_expected = { a77 = 0L; b77 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a77 *)
  r.a77 <- next_r.a77;
  let r_expected = { r_expected with a77 = next_r.a77 } in
  mark_test_run 511;
  let test = eq r r_expected in
  if not test then failwithf "test 511 failed";
  Gc.compact ();
  (* .b77 *)
  r.b77 <- next_r.b77;
  let r_expected = { r_expected with b77 = next_r.b77 } in
  mark_test_run 512;
  let test = eq r r_expected in
  if not test then failwithf "test 512 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a77; b77 } = r in
  let expected_a77 = 100L in
  mark_test_run 513;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a77 a77 in
  if not test then failwithf "test 513 failed";
  let expected_b77 = (unbox_unit ()) in
  mark_test_run 514;
  let test = (fun _ _ -> true) expected_b77 b77 in
  if not test then failwithf "test 514 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a77; b77 } = r in
  let expected_a77 = 100L in
  mark_test_run 515;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a77 a77 in
  if not test then failwithf "test 515 failed";
  let expected_b77 = (unbox_unit ()) in
  mark_test_run 516;
  let test = (fun _ _ -> true) expected_b77 b77 in
  if not test then failwithf "test 516 failed";

  ()
;;

let () =
  (******************************)
  (*   t78 = { int64; float }   *)
  (******************************)
  let r = { a78 = 0L; b78 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a78 *)
  let actual = r.a78 in
  let expected = 0L in
  mark_test_run 517;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 517 failed";
  (* Paths of depth 1 *)
  (* .b78 *)
  let actual = r.b78 in
  let expected = 1. in
  mark_test_run 518;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 518 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a78 = a781; b78 = b781 } { a78 = a782; b78 = b782 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a781 a782 && (fun a b -> Float.equal (globalize a) (globalize b)) b781 b782) in
  let next_r = { a78 = 100L; b78 = 101. } in
  let r_expected = { a78 = 0L; b78 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a78 *)
  r.a78 <- next_r.a78;
  let r_expected = { r_expected with a78 = next_r.a78 } in
  mark_test_run 519;
  let test = eq r r_expected in
  if not test then failwithf "test 519 failed";
  Gc.compact ();
  (* .b78 *)
  r.b78 <- next_r.b78;
  let r_expected = { r_expected with b78 = next_r.b78 } in
  mark_test_run 520;
  let test = eq r r_expected in
  if not test then failwithf "test 520 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a78; b78 } = r in
  let expected_a78 = 100L in
  mark_test_run 521;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a78 a78 in
  if not test then failwithf "test 521 failed";
  let expected_b78 = 101. in
  mark_test_run 522;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b78 b78 in
  if not test then failwithf "test 522 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a78; b78 } = r in
  let expected_a78 = 100L in
  mark_test_run 523;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a78 a78 in
  if not test then failwithf "test 523 failed";
  let expected_b78 = 101. in
  mark_test_run 524;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b78 b78 in
  if not test then failwithf "test 524 failed";

  ()
;;

let () =
  (***********************************)
  (*   t79 = { int64; (| unit_u) }   *)
  (***********************************)
  let r = { a79 = 0L; b79 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a79 *)
  let actual = r.a79 in
  let expected = 0L in
  mark_test_run 525;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 525 failed";
  (* Paths of depth 1 *)
  (* .b79 *)
  let actual = r.b79 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 526;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 526 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a79 = a791; b79 = b791 } { a79 = a792; b79 = b792 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a791 a792 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b791 b792) in
  let next_r = { a79 = 100L; b79 = C15_0((unbox_unit ())) } in
  let r_expected = { a79 = 0L; b79 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a79 *)
  r.a79 <- next_r.a79;
  let r_expected = { r_expected with a79 = next_r.a79 } in
  mark_test_run 527;
  let test = eq r r_expected in
  if not test then failwithf "test 527 failed";
  Gc.compact ();
  (* .b79 *)
  r.b79 <- next_r.b79;
  let r_expected = { r_expected with b79 = next_r.b79 } in
  mark_test_run 528;
  let test = eq r r_expected in
  if not test then failwithf "test 528 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a79; b79 } = r in
  let expected_a79 = 100L in
  mark_test_run 529;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a79 a79 in
  if not test then failwithf "test 529 failed";
  let expected_b79 = C15_0((unbox_unit ())) in
  mark_test_run 530;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b79 b79 in
  if not test then failwithf "test 530 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a79; b79 } = r in
  let expected_a79 = 100L in
  mark_test_run 531;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a79 a79 in
  if not test then failwithf "test 531 failed";
  let expected_b79 = C15_0((unbox_unit ())) in
  mark_test_run 532;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b79 b79 in
  if not test then failwithf "test 532 failed";

  ()
;;

let () =
  (*************************************************************************)
  (*   t80 = { int64; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (*************************************************************************)
  let r = { a80 = 0L; b80 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a80 *)
  let actual = r.a80 in
  let expected = 0L in
  mark_test_run 533;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 533 failed";
  (* Paths of depth 1 *)
  (* .b80 *)
  let actual = r.b80 in
  let expected = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 534;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 534 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a80 = a801; b80 = b801 } { a80 = a802; b80 = b802 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a801 a802 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b801 b802) in
  let next_r = { a80 = 100L; b80 = C17_2(#((unbox_unit ()), (unbox_unit ()))) } in
  let r_expected = { a80 = 0L; b80 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a80 *)
  r.a80 <- next_r.a80;
  let r_expected = { r_expected with a80 = next_r.a80 } in
  mark_test_run 535;
  let test = eq r r_expected in
  if not test then failwithf "test 535 failed";
  Gc.compact ();
  (* .b80 *)
  r.b80 <- next_r.b80;
  let r_expected = { r_expected with b80 = next_r.b80 } in
  mark_test_run 536;
  let test = eq r r_expected in
  if not test then failwithf "test 536 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a80; b80 } = r in
  let expected_a80 = 100L in
  mark_test_run 537;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a80 a80 in
  if not test then failwithf "test 537 failed";
  let expected_b80 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 538;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b80 b80 in
  if not test then failwithf "test 538 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a80; b80 } = r in
  let expected_a80 = 100L in
  mark_test_run 539;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a80 a80 in
  if not test then failwithf "test 539 failed";
  let expected_b80 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 540;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b80 b80 in
  if not test then failwithf "test 540 failed";

  ()
;;

let () =
  (***************************************)
  (*   t81 = { int64; #(unit_u, int) }   *)
  (***************************************)
  let r = { a81 = 0L; b81 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a81 *)
  let actual = r.a81 in
  let expected = 0L in
  mark_test_run 541;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 541 failed";
  (* Paths of depth 1 *)
  (* .b81 *)
  let actual = r.b81 in
  let expected = #((unbox_unit ()), 1) in
  mark_test_run 542;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 542 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a81 = a811; b81 = b811 } { a81 = a812; b81 = b812 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a811 a812 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b811 b812) in
  let next_r = { a81 = 100L; b81 = #((unbox_unit ()), 101) } in
  let r_expected = { a81 = 0L; b81 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a81 *)
  r.a81 <- next_r.a81;
  let r_expected = { r_expected with a81 = next_r.a81 } in
  mark_test_run 543;
  let test = eq r r_expected in
  if not test then failwithf "test 543 failed";
  Gc.compact ();
  (* .b81 *)
  r.b81 <- next_r.b81;
  let r_expected = { r_expected with b81 = next_r.b81 } in
  mark_test_run 544;
  let test = eq r r_expected in
  if not test then failwithf "test 544 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a81; b81 } = r in
  let expected_a81 = 100L in
  mark_test_run 545;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a81 a81 in
  if not test then failwithf "test 545 failed";
  let expected_b81 = #((unbox_unit ()), 101) in
  mark_test_run 546;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b81 b81 in
  if not test then failwithf "test 546 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a81; b81 } = r in
  let expected_a81 = 100L in
  mark_test_run 547;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a81 a81 in
  if not test then failwithf "test 547 failed";
  let expected_b81 = #((unbox_unit ()), 101) in
  mark_test_run 548;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b81 b81 in
  if not test then failwithf "test 548 failed";

  ()
;;

let () =
  (******************************************)
  (*   t82 = { int64; #(unit_u, int64#) }   *)
  (******************************************)
  let r = { a82 = 0L; b82 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a82 *)
  let actual = r.a82 in
  let expected = 0L in
  mark_test_run 549;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 549 failed";
  (* Paths of depth 1 *)
  (* .b82 *)
  let actual = r.b82 in
  let expected = #((unbox_unit ()), #1L) in
  mark_test_run 550;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 550 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a82 = a821; b82 = b821 } { a82 = a822; b82 = b822 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a821 a822 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b821 b822) in
  let next_r = { a82 = 100L; b82 = #((unbox_unit ()), #101L) } in
  let r_expected = { a82 = 0L; b82 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a82 *)
  r.a82 <- next_r.a82;
  let r_expected = { r_expected with a82 = next_r.a82 } in
  mark_test_run 551;
  let test = eq r r_expected in
  if not test then failwithf "test 551 failed";
  Gc.compact ();
  (* .b82 *)
  r.b82 <- next_r.b82;
  let r_expected = { r_expected with b82 = next_r.b82 } in
  mark_test_run 552;
  let test = eq r r_expected in
  if not test then failwithf "test 552 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a82; b82 } = r in
  let expected_a82 = 100L in
  mark_test_run 553;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a82 a82 in
  if not test then failwithf "test 553 failed";
  let expected_b82 = #((unbox_unit ()), #101L) in
  mark_test_run 554;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b82 b82 in
  if not test then failwithf "test 554 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a82; b82 } = r in
  let expected_a82 = 100L in
  mark_test_run 555;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a82 a82 in
  if not test then failwithf "test 555 failed";
  let expected_b82 = #((unbox_unit ()), #101L) in
  mark_test_run 556;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b82 b82 in
  if not test then failwithf "test 556 failed";

  ()
;;

let () =
  (******************************************)
  (*   t83 = { int64; #(unit_u, unit_u) }   *)
  (******************************************)
  let r = { a83 = 0L; b83 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a83 *)
  let actual = r.a83 in
  let expected = 0L in
  mark_test_run 557;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 557 failed";
  (* Paths of depth 1 *)
  (* .b83 *)
  let actual = r.b83 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 558;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 558 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a83 = a831; b83 = b831 } { a83 = a832; b83 = b832 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a831 a832 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b831 b832) in
  let next_r = { a83 = 100L; b83 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a83 = 0L; b83 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a83 *)
  r.a83 <- next_r.a83;
  let r_expected = { r_expected with a83 = next_r.a83 } in
  mark_test_run 559;
  let test = eq r r_expected in
  if not test then failwithf "test 559 failed";
  Gc.compact ();
  (* .b83 *)
  r.b83 <- next_r.b83;
  let r_expected = { r_expected with b83 = next_r.b83 } in
  mark_test_run 560;
  let test = eq r r_expected in
  if not test then failwithf "test 560 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a83; b83 } = r in
  let expected_a83 = 100L in
  mark_test_run 561;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a83 a83 in
  if not test then failwithf "test 561 failed";
  let expected_b83 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 562;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b83 b83 in
  if not test then failwithf "test 562 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a83; b83 } = r in
  let expected_a83 = 100L in
  mark_test_run 563;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a83 a83 in
  if not test then failwithf "test 563 failed";
  let expected_b83 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 564;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b83 b83 in
  if not test then failwithf "test 564 failed";

  ()
;;

let () =
  (******************************************)
  (*   t84 = { int64; #(unit_u, string) }   *)
  (******************************************)
  let r = { a84 = 0L; b84 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a84 *)
  let actual = r.a84 in
  let expected = 0L in
  mark_test_run 565;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 565 failed";
  (* Paths of depth 1 *)
  (* .b84 *)
  let actual = r.b84 in
  let expected = #((unbox_unit ()), "1") in
  mark_test_run 566;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 566 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a84 = a841; b84 = b841 } { a84 = a842; b84 = b842 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a841 a842 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b841 b842) in
  let next_r = { a84 = 100L; b84 = #((unbox_unit ()), "101") } in
  let r_expected = { a84 = 0L; b84 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a84 *)
  r.a84 <- next_r.a84;
  let r_expected = { r_expected with a84 = next_r.a84 } in
  mark_test_run 567;
  let test = eq r r_expected in
  if not test then failwithf "test 567 failed";
  Gc.compact ();
  (* .b84 *)
  r.b84 <- next_r.b84;
  let r_expected = { r_expected with b84 = next_r.b84 } in
  mark_test_run 568;
  let test = eq r r_expected in
  if not test then failwithf "test 568 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a84; b84 } = r in
  let expected_a84 = 100L in
  mark_test_run 569;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a84 a84 in
  if not test then failwithf "test 569 failed";
  let expected_b84 = #((unbox_unit ()), "101") in
  mark_test_run 570;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b84 b84 in
  if not test then failwithf "test 570 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a84; b84 } = r in
  let expected_a84 = 100L in
  mark_test_run 571;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a84 a84 in
  if not test then failwithf "test 571 failed";
  let expected_b84 = #((unbox_unit ()), "101") in
  mark_test_run 572;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b84 b84 in
  if not test then failwithf "test 572 failed";

  ()
;;

let () =
  (************************)
  (*   t85 = { int64# }   *)
  (************************)
  let r = { a85 = #0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a85 *)
  let actual = r.a85 in
  let expected = #0L in
  mark_test_run 573;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 573 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a85 = a851 } { a85 = a852 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a851 a852) in
  let next_r = { a85 = #100L } in
  let r_expected = { a85 = #0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a85 *)
  r.a85 <- next_r.a85;
  let r_expected = { r_expected with a85 = next_r.a85 } in
  mark_test_run 574;
  let test = eq r r_expected in
  if not test then failwithf "test 574 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a85 } = r in
  let expected_a85 = #100L in
  mark_test_run 575;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a85 a85 in
  if not test then failwithf "test 575 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a85 } = r in
  let expected_a85 = #100L in
  mark_test_run 576;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a85 a85 in
  if not test then failwithf "test 576 failed";

  ()
;;

let () =
  (*****************************)
  (*   t86 = { int64#; int }   *)
  (*****************************)
  let r = { a86 = #0L; b86 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a86 *)
  let actual = r.a86 in
  let expected = #0L in
  mark_test_run 577;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 577 failed";
  (* Paths of depth 1 *)
  (* .b86 *)
  let actual = r.b86 in
  let expected = 1 in
  mark_test_run 578;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 578 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a86 = a861; b86 = b861 } { a86 = a862; b86 = b862 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a861 a862 && (fun a b -> Int.equal a b) b861 b862) in
  let next_r = { a86 = #100L; b86 = 101 } in
  let r_expected = { a86 = #0L; b86 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a86 *)
  r.a86 <- next_r.a86;
  let r_expected = { r_expected with a86 = next_r.a86 } in
  mark_test_run 579;
  let test = eq r r_expected in
  if not test then failwithf "test 579 failed";
  Gc.compact ();
  (* .b86 *)
  r.b86 <- next_r.b86;
  let r_expected = { r_expected with b86 = next_r.b86 } in
  mark_test_run 580;
  let test = eq r r_expected in
  if not test then failwithf "test 580 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a86; b86 } = r in
  let expected_a86 = #100L in
  mark_test_run 581;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a86 a86 in
  if not test then failwithf "test 581 failed";
  let expected_b86 = 101 in
  mark_test_run 582;
  let test = (fun a b -> Int.equal a b) expected_b86 b86 in
  if not test then failwithf "test 582 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a86; b86 } = r in
  let expected_a86 = #100L in
  mark_test_run 583;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a86 a86 in
  if not test then failwithf "test 583 failed";
  let expected_b86 = 101 in
  mark_test_run 584;
  let test = (fun a b -> Int.equal a b) expected_b86 b86 in
  if not test then failwithf "test 584 failed";

  ()
;;

let () =
  (*******************************)
  (*   t87 = { int64#; int64 }   *)
  (*******************************)
  let r = { a87 = #0L; b87 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a87 *)
  let actual = r.a87 in
  let expected = #0L in
  mark_test_run 585;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 585 failed";
  (* Paths of depth 1 *)
  (* .b87 *)
  let actual = r.b87 in
  let expected = 1L in
  mark_test_run 586;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 586 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a87 = a871; b87 = b871 } { a87 = a872; b87 = b872 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a871 a872 && (fun a b -> Int64.equal (globalize a) (globalize b)) b871 b872) in
  let next_r = { a87 = #100L; b87 = 101L } in
  let r_expected = { a87 = #0L; b87 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a87 *)
  r.a87 <- next_r.a87;
  let r_expected = { r_expected with a87 = next_r.a87 } in
  mark_test_run 587;
  let test = eq r r_expected in
  if not test then failwithf "test 587 failed";
  Gc.compact ();
  (* .b87 *)
  r.b87 <- next_r.b87;
  let r_expected = { r_expected with b87 = next_r.b87 } in
  mark_test_run 588;
  let test = eq r r_expected in
  if not test then failwithf "test 588 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a87; b87 } = r in
  let expected_a87 = #100L in
  mark_test_run 589;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a87 a87 in
  if not test then failwithf "test 589 failed";
  let expected_b87 = 101L in
  mark_test_run 590;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b87 b87 in
  if not test then failwithf "test 590 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a87; b87 } = r in
  let expected_a87 = #100L in
  mark_test_run 591;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a87 a87 in
  if not test then failwithf "test 591 failed";
  let expected_b87 = 101L in
  mark_test_run 592;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b87 b87 in
  if not test then failwithf "test 592 failed";

  ()
;;

let () =
  (********************************)
  (*   t88 = { int64#; int64# }   *)
  (********************************)
  let r = { a88 = #0L; b88 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a88 *)
  let actual = r.a88 in
  let expected = #0L in
  mark_test_run 593;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 593 failed";
  (* Paths of depth 1 *)
  (* .b88 *)
  let actual = r.b88 in
  let expected = #1L in
  mark_test_run 594;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 594 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a88 = a881; b88 = b881 } { a88 = a882; b88 = b882 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a881 a882 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b881 b882) in
  let next_r = { a88 = #100L; b88 = #101L } in
  let r_expected = { a88 = #0L; b88 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a88 *)
  r.a88 <- next_r.a88;
  let r_expected = { r_expected with a88 = next_r.a88 } in
  mark_test_run 595;
  let test = eq r r_expected in
  if not test then failwithf "test 595 failed";
  Gc.compact ();
  (* .b88 *)
  r.b88 <- next_r.b88;
  let r_expected = { r_expected with b88 = next_r.b88 } in
  mark_test_run 596;
  let test = eq r r_expected in
  if not test then failwithf "test 596 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a88; b88 } = r in
  let expected_a88 = #100L in
  mark_test_run 597;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a88 a88 in
  if not test then failwithf "test 597 failed";
  let expected_b88 = #101L in
  mark_test_run 598;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b88 b88 in
  if not test then failwithf "test 598 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a88; b88 } = r in
  let expected_a88 = #100L in
  mark_test_run 599;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a88 a88 in
  if not test then failwithf "test 599 failed";
  let expected_b88 = #101L in
  mark_test_run 600;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b88 b88 in
  if not test then failwithf "test 600 failed";

  ()
;;

let () =
  (********************************)
  (*   t89 = { int64#; int32# }   *)
  (********************************)
  let r = { a89 = #0L; b89 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a89 *)
  let actual = r.a89 in
  let expected = #0L in
  mark_test_run 601;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 601 failed";
  (* Paths of depth 1 *)
  (* .b89 *)
  let actual = r.b89 in
  let expected = #1l in
  mark_test_run 602;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 602 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a89 = a891; b89 = b891 } { a89 = a892; b89 = b892 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a891 a892 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b891 b892) in
  let next_r = { a89 = #100L; b89 = #101l } in
  let r_expected = { a89 = #0L; b89 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a89 *)
  r.a89 <- next_r.a89;
  let r_expected = { r_expected with a89 = next_r.a89 } in
  mark_test_run 603;
  let test = eq r r_expected in
  if not test then failwithf "test 603 failed";
  Gc.compact ();
  (* .b89 *)
  r.b89 <- next_r.b89;
  let r_expected = { r_expected with b89 = next_r.b89 } in
  mark_test_run 604;
  let test = eq r r_expected in
  if not test then failwithf "test 604 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a89; b89 } = r in
  let expected_a89 = #100L in
  mark_test_run 605;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a89 a89 in
  if not test then failwithf "test 605 failed";
  let expected_b89 = #101l in
  mark_test_run 606;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b89 b89 in
  if not test then failwithf "test 606 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a89; b89 } = r in
  let expected_a89 = #100L in
  mark_test_run 607;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a89 a89 in
  if not test then failwithf "test 607 failed";
  let expected_b89 = #101l in
  mark_test_run 608;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b89 b89 in
  if not test then failwithf "test 608 failed";

  ()
;;

let () =
  (************************************)
  (*   t90 = { int64#; nativeint# }   *)
  (************************************)
  let r = { a90 = #0L; b90 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a90 *)
  let actual = r.a90 in
  let expected = #0L in
  mark_test_run 609;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 609 failed";
  (* Paths of depth 1 *)
  (* .b90 *)
  let actual = r.b90 in
  let expected = #1n in
  mark_test_run 610;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 610 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a90 = a901; b90 = b901 } { a90 = a902; b90 = b902 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a901 a902 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b901 b902) in
  let next_r = { a90 = #100L; b90 = #101n } in
  let r_expected = { a90 = #0L; b90 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a90 *)
  r.a90 <- next_r.a90;
  let r_expected = { r_expected with a90 = next_r.a90 } in
  mark_test_run 611;
  let test = eq r r_expected in
  if not test then failwithf "test 611 failed";
  Gc.compact ();
  (* .b90 *)
  r.b90 <- next_r.b90;
  let r_expected = { r_expected with b90 = next_r.b90 } in
  mark_test_run 612;
  let test = eq r r_expected in
  if not test then failwithf "test 612 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a90; b90 } = r in
  let expected_a90 = #100L in
  mark_test_run 613;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a90 a90 in
  if not test then failwithf "test 613 failed";
  let expected_b90 = #101n in
  mark_test_run 614;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b90 b90 in
  if not test then failwithf "test 614 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a90; b90 } = r in
  let expected_a90 = #100L in
  mark_test_run 615;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a90 a90 in
  if not test then failwithf "test 615 failed";
  let expected_b90 = #101n in
  mark_test_run 616;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b90 b90 in
  if not test then failwithf "test 616 failed";

  ()
;;

let () =
  (********************************)
  (*   t91 = { int64#; unit_u }   *)
  (********************************)
  let r = { a91 = #0L; b91 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a91 *)
  let actual = r.a91 in
  let expected = #0L in
  mark_test_run 617;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 617 failed";
  (* Paths of depth 1 *)
  (* .b91 *)
  let actual = r.b91 in
  let expected = (unbox_unit ()) in
  mark_test_run 618;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 618 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a91 = a911; b91 = b911 } { a91 = a912; b91 = b912 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a911 a912 && (fun _ _ -> true) b911 b912) in
  let next_r = { a91 = #100L; b91 = (unbox_unit ()) } in
  let r_expected = { a91 = #0L; b91 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a91 *)
  r.a91 <- next_r.a91;
  let r_expected = { r_expected with a91 = next_r.a91 } in
  mark_test_run 619;
  let test = eq r r_expected in
  if not test then failwithf "test 619 failed";
  Gc.compact ();
  (* .b91 *)
  r.b91 <- next_r.b91;
  let r_expected = { r_expected with b91 = next_r.b91 } in
  mark_test_run 620;
  let test = eq r r_expected in
  if not test then failwithf "test 620 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a91; b91 } = r in
  let expected_a91 = #100L in
  mark_test_run 621;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a91 a91 in
  if not test then failwithf "test 621 failed";
  let expected_b91 = (unbox_unit ()) in
  mark_test_run 622;
  let test = (fun _ _ -> true) expected_b91 b91 in
  if not test then failwithf "test 622 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a91; b91 } = r in
  let expected_a91 = #100L in
  mark_test_run 623;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a91 a91 in
  if not test then failwithf "test 623 failed";
  let expected_b91 = (unbox_unit ()) in
  mark_test_run 624;
  let test = (fun _ _ -> true) expected_b91 b91 in
  if not test then failwithf "test 624 failed";

  ()
;;

let () =
  (*******************************)
  (*   t92 = { int64#; float }   *)
  (*******************************)
  let r = { a92 = #0L; b92 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a92 *)
  let actual = r.a92 in
  let expected = #0L in
  mark_test_run 625;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 625 failed";
  (* Paths of depth 1 *)
  (* .b92 *)
  let actual = r.b92 in
  let expected = 1. in
  mark_test_run 626;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 626 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a92 = a921; b92 = b921 } { a92 = a922; b92 = b922 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a921 a922 && (fun a b -> Float.equal (globalize a) (globalize b)) b921 b922) in
  let next_r = { a92 = #100L; b92 = 101. } in
  let r_expected = { a92 = #0L; b92 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a92 *)
  r.a92 <- next_r.a92;
  let r_expected = { r_expected with a92 = next_r.a92 } in
  mark_test_run 627;
  let test = eq r r_expected in
  if not test then failwithf "test 627 failed";
  Gc.compact ();
  (* .b92 *)
  r.b92 <- next_r.b92;
  let r_expected = { r_expected with b92 = next_r.b92 } in
  mark_test_run 628;
  let test = eq r r_expected in
  if not test then failwithf "test 628 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a92; b92 } = r in
  let expected_a92 = #100L in
  mark_test_run 629;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a92 a92 in
  if not test then failwithf "test 629 failed";
  let expected_b92 = 101. in
  mark_test_run 630;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b92 b92 in
  if not test then failwithf "test 630 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a92; b92 } = r in
  let expected_a92 = #100L in
  mark_test_run 631;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a92 a92 in
  if not test then failwithf "test 631 failed";
  let expected_b92 = 101. in
  mark_test_run 632;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b92 b92 in
  if not test then failwithf "test 632 failed";

  ()
;;

let () =
  (************************************)
  (*   t93 = { int64#; (| unit_u) }   *)
  (************************************)
  let r = { a93 = #0L; b93 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a93 *)
  let actual = r.a93 in
  let expected = #0L in
  mark_test_run 633;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 633 failed";
  (* Paths of depth 1 *)
  (* .b93 *)
  let actual = r.b93 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 634;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 634 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a93 = a931; b93 = b931 } { a93 = a932; b93 = b932 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a931 a932 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b931 b932) in
  let next_r = { a93 = #100L; b93 = C15_0((unbox_unit ())) } in
  let r_expected = { a93 = #0L; b93 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a93 *)
  r.a93 <- next_r.a93;
  let r_expected = { r_expected with a93 = next_r.a93 } in
  mark_test_run 635;
  let test = eq r r_expected in
  if not test then failwithf "test 635 failed";
  Gc.compact ();
  (* .b93 *)
  r.b93 <- next_r.b93;
  let r_expected = { r_expected with b93 = next_r.b93 } in
  mark_test_run 636;
  let test = eq r r_expected in
  if not test then failwithf "test 636 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a93; b93 } = r in
  let expected_a93 = #100L in
  mark_test_run 637;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a93 a93 in
  if not test then failwithf "test 637 failed";
  let expected_b93 = C15_0((unbox_unit ())) in
  mark_test_run 638;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b93 b93 in
  if not test then failwithf "test 638 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a93; b93 } = r in
  let expected_a93 = #100L in
  mark_test_run 639;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a93 a93 in
  if not test then failwithf "test 639 failed";
  let expected_b93 = C15_0((unbox_unit ())) in
  mark_test_run 640;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b93 b93 in
  if not test then failwithf "test 640 failed";

  ()
;;

let () =
  (**************************************************************************)
  (*   t94 = { int64#; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (**************************************************************************)
  let r = { a94 = #0L; b94 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a94 *)
  let actual = r.a94 in
  let expected = #0L in
  mark_test_run 641;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 641 failed";
  (* Paths of depth 1 *)
  (* .b94 *)
  let actual = r.b94 in
  let expected = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 642;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 642 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a94 = a941; b94 = b941 } { a94 = a942; b94 = b942 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a941 a942 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b941 b942) in
  let next_r = { a94 = #100L; b94 = C17_2(#((unbox_unit ()), (unbox_unit ()))) } in
  let r_expected = { a94 = #0L; b94 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a94 *)
  r.a94 <- next_r.a94;
  let r_expected = { r_expected with a94 = next_r.a94 } in
  mark_test_run 643;
  let test = eq r r_expected in
  if not test then failwithf "test 643 failed";
  Gc.compact ();
  (* .b94 *)
  r.b94 <- next_r.b94;
  let r_expected = { r_expected with b94 = next_r.b94 } in
  mark_test_run 644;
  let test = eq r r_expected in
  if not test then failwithf "test 644 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a94; b94 } = r in
  let expected_a94 = #100L in
  mark_test_run 645;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a94 a94 in
  if not test then failwithf "test 645 failed";
  let expected_b94 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 646;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b94 b94 in
  if not test then failwithf "test 646 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a94; b94 } = r in
  let expected_a94 = #100L in
  mark_test_run 647;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a94 a94 in
  if not test then failwithf "test 647 failed";
  let expected_b94 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 648;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b94 b94 in
  if not test then failwithf "test 648 failed";

  ()
;;

let () =
  (****************************************)
  (*   t95 = { int64#; #(unit_u, int) }   *)
  (****************************************)
  let r = { a95 = #0L; b95 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a95 *)
  let actual = r.a95 in
  let expected = #0L in
  mark_test_run 649;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 649 failed";
  (* Paths of depth 1 *)
  (* .b95 *)
  let actual = r.b95 in
  let expected = #((unbox_unit ()), 1) in
  mark_test_run 650;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 650 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a95 = a951; b95 = b951 } { a95 = a952; b95 = b952 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a951 a952 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b951 b952) in
  let next_r = { a95 = #100L; b95 = #((unbox_unit ()), 101) } in
  let r_expected = { a95 = #0L; b95 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a95 *)
  r.a95 <- next_r.a95;
  let r_expected = { r_expected with a95 = next_r.a95 } in
  mark_test_run 651;
  let test = eq r r_expected in
  if not test then failwithf "test 651 failed";
  Gc.compact ();
  (* .b95 *)
  r.b95 <- next_r.b95;
  let r_expected = { r_expected with b95 = next_r.b95 } in
  mark_test_run 652;
  let test = eq r r_expected in
  if not test then failwithf "test 652 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a95; b95 } = r in
  let expected_a95 = #100L in
  mark_test_run 653;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a95 a95 in
  if not test then failwithf "test 653 failed";
  let expected_b95 = #((unbox_unit ()), 101) in
  mark_test_run 654;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b95 b95 in
  if not test then failwithf "test 654 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a95; b95 } = r in
  let expected_a95 = #100L in
  mark_test_run 655;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a95 a95 in
  if not test then failwithf "test 655 failed";
  let expected_b95 = #((unbox_unit ()), 101) in
  mark_test_run 656;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b95 b95 in
  if not test then failwithf "test 656 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t96 = { int64#; #(unit_u, int64#) }   *)
  (*******************************************)
  let r = { a96 = #0L; b96 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a96 *)
  let actual = r.a96 in
  let expected = #0L in
  mark_test_run 657;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 657 failed";
  (* Paths of depth 1 *)
  (* .b96 *)
  let actual = r.b96 in
  let expected = #((unbox_unit ()), #1L) in
  mark_test_run 658;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 658 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a96 = a961; b96 = b961 } { a96 = a962; b96 = b962 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a961 a962 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b961 b962) in
  let next_r = { a96 = #100L; b96 = #((unbox_unit ()), #101L) } in
  let r_expected = { a96 = #0L; b96 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a96 *)
  r.a96 <- next_r.a96;
  let r_expected = { r_expected with a96 = next_r.a96 } in
  mark_test_run 659;
  let test = eq r r_expected in
  if not test then failwithf "test 659 failed";
  Gc.compact ();
  (* .b96 *)
  r.b96 <- next_r.b96;
  let r_expected = { r_expected with b96 = next_r.b96 } in
  mark_test_run 660;
  let test = eq r r_expected in
  if not test then failwithf "test 660 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a96; b96 } = r in
  let expected_a96 = #100L in
  mark_test_run 661;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a96 a96 in
  if not test then failwithf "test 661 failed";
  let expected_b96 = #((unbox_unit ()), #101L) in
  mark_test_run 662;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b96 b96 in
  if not test then failwithf "test 662 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a96; b96 } = r in
  let expected_a96 = #100L in
  mark_test_run 663;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a96 a96 in
  if not test then failwithf "test 663 failed";
  let expected_b96 = #((unbox_unit ()), #101L) in
  mark_test_run 664;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b96 b96 in
  if not test then failwithf "test 664 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t97 = { int64#; #(unit_u, unit_u) }   *)
  (*******************************************)
  let r = { a97 = #0L; b97 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a97 *)
  let actual = r.a97 in
  let expected = #0L in
  mark_test_run 665;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 665 failed";
  (* Paths of depth 1 *)
  (* .b97 *)
  let actual = r.b97 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 666;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 666 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a97 = a971; b97 = b971 } { a97 = a972; b97 = b972 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a971 a972 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b971 b972) in
  let next_r = { a97 = #100L; b97 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a97 = #0L; b97 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a97 *)
  r.a97 <- next_r.a97;
  let r_expected = { r_expected with a97 = next_r.a97 } in
  mark_test_run 667;
  let test = eq r r_expected in
  if not test then failwithf "test 667 failed";
  Gc.compact ();
  (* .b97 *)
  r.b97 <- next_r.b97;
  let r_expected = { r_expected with b97 = next_r.b97 } in
  mark_test_run 668;
  let test = eq r r_expected in
  if not test then failwithf "test 668 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a97; b97 } = r in
  let expected_a97 = #100L in
  mark_test_run 669;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a97 a97 in
  if not test then failwithf "test 669 failed";
  let expected_b97 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 670;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b97 b97 in
  if not test then failwithf "test 670 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a97; b97 } = r in
  let expected_a97 = #100L in
  mark_test_run 671;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a97 a97 in
  if not test then failwithf "test 671 failed";
  let expected_b97 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 672;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b97 b97 in
  if not test then failwithf "test 672 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t98 = { int64#; #(unit_u, string) }   *)
  (*******************************************)
  let r = { a98 = #0L; b98 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a98 *)
  let actual = r.a98 in
  let expected = #0L in
  mark_test_run 673;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 673 failed";
  (* Paths of depth 1 *)
  (* .b98 *)
  let actual = r.b98 in
  let expected = #((unbox_unit ()), "1") in
  mark_test_run 674;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 674 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a98 = a981; b98 = b981 } { a98 = a982; b98 = b982 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a981 a982 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b981 b982) in
  let next_r = { a98 = #100L; b98 = #((unbox_unit ()), "101") } in
  let r_expected = { a98 = #0L; b98 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a98 *)
  r.a98 <- next_r.a98;
  let r_expected = { r_expected with a98 = next_r.a98 } in
  mark_test_run 675;
  let test = eq r r_expected in
  if not test then failwithf "test 675 failed";
  Gc.compact ();
  (* .b98 *)
  r.b98 <- next_r.b98;
  let r_expected = { r_expected with b98 = next_r.b98 } in
  mark_test_run 676;
  let test = eq r r_expected in
  if not test then failwithf "test 676 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a98; b98 } = r in
  let expected_a98 = #100L in
  mark_test_run 677;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a98 a98 in
  if not test then failwithf "test 677 failed";
  let expected_b98 = #((unbox_unit ()), "101") in
  mark_test_run 678;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b98 b98 in
  if not test then failwithf "test 678 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a98; b98 } = r in
  let expected_a98 = #100L in
  mark_test_run 679;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a98 a98 in
  if not test then failwithf "test 679 failed";
  let expected_b98 = #((unbox_unit ()), "101") in
  mark_test_run 680;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b98 b98 in
  if not test then failwithf "test 680 failed";

  ()
;;

let () =
  (************************)
  (*   t99 = { int32# }   *)
  (************************)
  let r = { a99 = #0l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a99 *)
  let actual = r.a99 in
  let expected = #0l in
  mark_test_run 681;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 681 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a99 = a991 } { a99 = a992 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a991 a992) in
  let next_r = { a99 = #100l } in
  let r_expected = { a99 = #0l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a99 *)
  r.a99 <- next_r.a99;
  let r_expected = { r_expected with a99 = next_r.a99 } in
  mark_test_run 682;
  let test = eq r r_expected in
  if not test then failwithf "test 682 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a99 } = r in
  let expected_a99 = #100l in
  mark_test_run 683;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a99 a99 in
  if not test then failwithf "test 683 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a99 } = r in
  let expected_a99 = #100l in
  mark_test_run 684;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a99 a99 in
  if not test then failwithf "test 684 failed";

  ()
;;

let () =
  (******************************)
  (*   t100 = { int32#; int }   *)
  (******************************)
  let r = { a100 = #0l; b100 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a100 *)
  let actual = r.a100 in
  let expected = #0l in
  mark_test_run 685;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 685 failed";
  (* Paths of depth 1 *)
  (* .b100 *)
  let actual = r.b100 in
  let expected = 1 in
  mark_test_run 686;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 686 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a100 = a1001; b100 = b1001 } { a100 = a1002; b100 = b1002 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1001 a1002 && (fun a b -> Int.equal a b) b1001 b1002) in
  let next_r = { a100 = #100l; b100 = 101 } in
  let r_expected = { a100 = #0l; b100 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a100 *)
  r.a100 <- next_r.a100;
  let r_expected = { r_expected with a100 = next_r.a100 } in
  mark_test_run 687;
  let test = eq r r_expected in
  if not test then failwithf "test 687 failed";
  Gc.compact ();
  (* .b100 *)
  r.b100 <- next_r.b100;
  let r_expected = { r_expected with b100 = next_r.b100 } in
  mark_test_run 688;
  let test = eq r r_expected in
  if not test then failwithf "test 688 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a100; b100 } = r in
  let expected_a100 = #100l in
  mark_test_run 689;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a100 a100 in
  if not test then failwithf "test 689 failed";
  let expected_b100 = 101 in
  mark_test_run 690;
  let test = (fun a b -> Int.equal a b) expected_b100 b100 in
  if not test then failwithf "test 690 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a100; b100 } = r in
  let expected_a100 = #100l in
  mark_test_run 691;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a100 a100 in
  if not test then failwithf "test 691 failed";
  let expected_b100 = 101 in
  mark_test_run 692;
  let test = (fun a b -> Int.equal a b) expected_b100 b100 in
  if not test then failwithf "test 692 failed";

  ()
;;

let () =
  (***********************************)
  (*   t101 = { int32#; int; int }   *)
  (***********************************)
  let r = { a101 = #0l; b101 = 1; c101 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a101 *)
  let actual = r.a101 in
  let expected = #0l in
  mark_test_run 693;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 693 failed";
  (* Paths of depth 1 *)
  (* .b101 *)
  let actual = r.b101 in
  let expected = 1 in
  mark_test_run 694;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 694 failed";
  (* Paths of depth 1 *)
  (* .c101 *)
  let actual = r.c101 in
  let expected = 2 in
  mark_test_run 695;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 695 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a101 = a1011; b101 = b1011; c101 = c1011 } { a101 = a1012; b101 = b1012; c101 = c1012 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1011 a1012 && (fun a b -> Int.equal a b) b1011 b1012 && (fun a b -> Int.equal a b) c1011 c1012) in
  let next_r = { a101 = #100l; b101 = 101; c101 = 102 } in
  let r_expected = { a101 = #0l; b101 = 1; c101 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a101 *)
  r.a101 <- next_r.a101;
  let r_expected = { r_expected with a101 = next_r.a101 } in
  mark_test_run 696;
  let test = eq r r_expected in
  if not test then failwithf "test 696 failed";
  Gc.compact ();
  (* .b101 *)
  r.b101 <- next_r.b101;
  let r_expected = { r_expected with b101 = next_r.b101 } in
  mark_test_run 697;
  let test = eq r r_expected in
  if not test then failwithf "test 697 failed";
  Gc.compact ();
  (* .c101 *)
  r.c101 <- next_r.c101;
  let r_expected = { r_expected with c101 = next_r.c101 } in
  mark_test_run 698;
  let test = eq r r_expected in
  if not test then failwithf "test 698 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a101; b101; c101 } = r in
  let expected_a101 = #100l in
  mark_test_run 699;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a101 a101 in
  if not test then failwithf "test 699 failed";
  let expected_b101 = 101 in
  mark_test_run 700;
  let test = (fun a b -> Int.equal a b) expected_b101 b101 in
  if not test then failwithf "test 700 failed";
  let expected_c101 = 102 in
  mark_test_run 701;
  let test = (fun a b -> Int.equal a b) expected_c101 c101 in
  if not test then failwithf "test 701 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a101; b101; c101 } = r in
  let expected_a101 = #100l in
  mark_test_run 702;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a101 a101 in
  if not test then failwithf "test 702 failed";
  let expected_b101 = 101 in
  mark_test_run 703;
  let test = (fun a b -> Int.equal a b) expected_b101 b101 in
  if not test then failwithf "test 703 failed";
  let expected_c101 = 102 in
  mark_test_run 704;
  let test = (fun a b -> Int.equal a b) expected_c101 c101 in
  if not test then failwithf "test 704 failed";

  ()
;;

let () =
  (**************************************)
  (*   t102 = { int32#; int; int32# }   *)
  (**************************************)
  let r = { a102 = #0l; b102 = 1; c102 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a102 *)
  let actual = r.a102 in
  let expected = #0l in
  mark_test_run 705;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 705 failed";
  (* Paths of depth 1 *)
  (* .b102 *)
  let actual = r.b102 in
  let expected = 1 in
  mark_test_run 706;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 706 failed";
  (* Paths of depth 1 *)
  (* .c102 *)
  let actual = r.c102 in
  let expected = #2l in
  mark_test_run 707;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 707 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a102 = a1021; b102 = b1021; c102 = c1021 } { a102 = a1022; b102 = b1022; c102 = c1022 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1021 a1022 && (fun a b -> Int.equal a b) b1021 b1022 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c1021 c1022) in
  let next_r = { a102 = #100l; b102 = 101; c102 = #102l } in
  let r_expected = { a102 = #0l; b102 = 1; c102 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a102 *)
  r.a102 <- next_r.a102;
  let r_expected = { r_expected with a102 = next_r.a102 } in
  mark_test_run 708;
  let test = eq r r_expected in
  if not test then failwithf "test 708 failed";
  Gc.compact ();
  (* .b102 *)
  r.b102 <- next_r.b102;
  let r_expected = { r_expected with b102 = next_r.b102 } in
  mark_test_run 709;
  let test = eq r r_expected in
  if not test then failwithf "test 709 failed";
  Gc.compact ();
  (* .c102 *)
  r.c102 <- next_r.c102;
  let r_expected = { r_expected with c102 = next_r.c102 } in
  mark_test_run 710;
  let test = eq r r_expected in
  if not test then failwithf "test 710 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a102; b102; c102 } = r in
  let expected_a102 = #100l in
  mark_test_run 711;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a102 a102 in
  if not test then failwithf "test 711 failed";
  let expected_b102 = 101 in
  mark_test_run 712;
  let test = (fun a b -> Int.equal a b) expected_b102 b102 in
  if not test then failwithf "test 712 failed";
  let expected_c102 = #102l in
  mark_test_run 713;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c102 c102 in
  if not test then failwithf "test 713 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a102; b102; c102 } = r in
  let expected_a102 = #100l in
  mark_test_run 714;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a102 a102 in
  if not test then failwithf "test 714 failed";
  let expected_b102 = 101 in
  mark_test_run 715;
  let test = (fun a b -> Int.equal a b) expected_b102 b102 in
  if not test then failwithf "test 715 failed";
  let expected_c102 = #102l in
  mark_test_run 716;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c102 c102 in
  if not test then failwithf "test 716 failed";

  ()
;;

let () =
  (********************************)
  (*   t103 = { int32#; int64 }   *)
  (********************************)
  let r = { a103 = #0l; b103 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a103 *)
  let actual = r.a103 in
  let expected = #0l in
  mark_test_run 717;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 717 failed";
  (* Paths of depth 1 *)
  (* .b103 *)
  let actual = r.b103 in
  let expected = 1L in
  mark_test_run 718;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 718 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a103 = a1031; b103 = b1031 } { a103 = a1032; b103 = b1032 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1031 a1032 && (fun a b -> Int64.equal (globalize a) (globalize b)) b1031 b1032) in
  let next_r = { a103 = #100l; b103 = 101L } in
  let r_expected = { a103 = #0l; b103 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a103 *)
  r.a103 <- next_r.a103;
  let r_expected = { r_expected with a103 = next_r.a103 } in
  mark_test_run 719;
  let test = eq r r_expected in
  if not test then failwithf "test 719 failed";
  Gc.compact ();
  (* .b103 *)
  r.b103 <- next_r.b103;
  let r_expected = { r_expected with b103 = next_r.b103 } in
  mark_test_run 720;
  let test = eq r r_expected in
  if not test then failwithf "test 720 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a103; b103 } = r in
  let expected_a103 = #100l in
  mark_test_run 721;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a103 a103 in
  if not test then failwithf "test 721 failed";
  let expected_b103 = 101L in
  mark_test_run 722;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b103 b103 in
  if not test then failwithf "test 722 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a103; b103 } = r in
  let expected_a103 = #100l in
  mark_test_run 723;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a103 a103 in
  if not test then failwithf "test 723 failed";
  let expected_b103 = 101L in
  mark_test_run 724;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b103 b103 in
  if not test then failwithf "test 724 failed";

  ()
;;

let () =
  (*********************************)
  (*   t104 = { int32#; int64# }   *)
  (*********************************)
  let r = { a104 = #0l; b104 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a104 *)
  let actual = r.a104 in
  let expected = #0l in
  mark_test_run 725;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 725 failed";
  (* Paths of depth 1 *)
  (* .b104 *)
  let actual = r.b104 in
  let expected = #1L in
  mark_test_run 726;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 726 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a104 = a1041; b104 = b1041 } { a104 = a1042; b104 = b1042 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1041 a1042 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b1041 b1042) in
  let next_r = { a104 = #100l; b104 = #101L } in
  let r_expected = { a104 = #0l; b104 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a104 *)
  r.a104 <- next_r.a104;
  let r_expected = { r_expected with a104 = next_r.a104 } in
  mark_test_run 727;
  let test = eq r r_expected in
  if not test then failwithf "test 727 failed";
  Gc.compact ();
  (* .b104 *)
  r.b104 <- next_r.b104;
  let r_expected = { r_expected with b104 = next_r.b104 } in
  mark_test_run 728;
  let test = eq r r_expected in
  if not test then failwithf "test 728 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a104; b104 } = r in
  let expected_a104 = #100l in
  mark_test_run 729;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a104 a104 in
  if not test then failwithf "test 729 failed";
  let expected_b104 = #101L in
  mark_test_run 730;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b104 b104 in
  if not test then failwithf "test 730 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a104; b104 } = r in
  let expected_a104 = #100l in
  mark_test_run 731;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a104 a104 in
  if not test then failwithf "test 731 failed";
  let expected_b104 = #101L in
  mark_test_run 732;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b104 b104 in
  if not test then failwithf "test 732 failed";

  ()
;;

let () =
  (*********************************)
  (*   t105 = { int32#; int32# }   *)
  (*********************************)
  let r = { a105 = #0l; b105 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a105 *)
  let actual = r.a105 in
  let expected = #0l in
  mark_test_run 733;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 733 failed";
  (* Paths of depth 1 *)
  (* .b105 *)
  let actual = r.b105 in
  let expected = #1l in
  mark_test_run 734;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 734 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a105 = a1051; b105 = b1051 } { a105 = a1052; b105 = b1052 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1051 a1052 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1051 b1052) in
  let next_r = { a105 = #100l; b105 = #101l } in
  let r_expected = { a105 = #0l; b105 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a105 *)
  r.a105 <- next_r.a105;
  let r_expected = { r_expected with a105 = next_r.a105 } in
  mark_test_run 735;
  let test = eq r r_expected in
  if not test then failwithf "test 735 failed";
  Gc.compact ();
  (* .b105 *)
  r.b105 <- next_r.b105;
  let r_expected = { r_expected with b105 = next_r.b105 } in
  mark_test_run 736;
  let test = eq r r_expected in
  if not test then failwithf "test 736 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a105; b105 } = r in
  let expected_a105 = #100l in
  mark_test_run 737;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a105 a105 in
  if not test then failwithf "test 737 failed";
  let expected_b105 = #101l in
  mark_test_run 738;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b105 b105 in
  if not test then failwithf "test 738 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a105; b105 } = r in
  let expected_a105 = #100l in
  mark_test_run 739;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a105 a105 in
  if not test then failwithf "test 739 failed";
  let expected_b105 = #101l in
  mark_test_run 740;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b105 b105 in
  if not test then failwithf "test 740 failed";

  ()
;;

let () =
  (**************************************)
  (*   t106 = { int32#; int32#; int }   *)
  (**************************************)
  let r = { a106 = #0l; b106 = #1l; c106 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a106 *)
  let actual = r.a106 in
  let expected = #0l in
  mark_test_run 741;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 741 failed";
  (* Paths of depth 1 *)
  (* .b106 *)
  let actual = r.b106 in
  let expected = #1l in
  mark_test_run 742;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 742 failed";
  (* Paths of depth 1 *)
  (* .c106 *)
  let actual = r.c106 in
  let expected = 2 in
  mark_test_run 743;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 743 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a106 = a1061; b106 = b1061; c106 = c1061 } { a106 = a1062; b106 = b1062; c106 = c1062 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1061 a1062 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1061 b1062 && (fun a b -> Int.equal a b) c1061 c1062) in
  let next_r = { a106 = #100l; b106 = #101l; c106 = 102 } in
  let r_expected = { a106 = #0l; b106 = #1l; c106 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a106 *)
  r.a106 <- next_r.a106;
  let r_expected = { r_expected with a106 = next_r.a106 } in
  mark_test_run 744;
  let test = eq r r_expected in
  if not test then failwithf "test 744 failed";
  Gc.compact ();
  (* .b106 *)
  r.b106 <- next_r.b106;
  let r_expected = { r_expected with b106 = next_r.b106 } in
  mark_test_run 745;
  let test = eq r r_expected in
  if not test then failwithf "test 745 failed";
  Gc.compact ();
  (* .c106 *)
  r.c106 <- next_r.c106;
  let r_expected = { r_expected with c106 = next_r.c106 } in
  mark_test_run 746;
  let test = eq r r_expected in
  if not test then failwithf "test 746 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a106; b106; c106 } = r in
  let expected_a106 = #100l in
  mark_test_run 747;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a106 a106 in
  if not test then failwithf "test 747 failed";
  let expected_b106 = #101l in
  mark_test_run 748;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b106 b106 in
  if not test then failwithf "test 748 failed";
  let expected_c106 = 102 in
  mark_test_run 749;
  let test = (fun a b -> Int.equal a b) expected_c106 c106 in
  if not test then failwithf "test 749 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a106; b106; c106 } = r in
  let expected_a106 = #100l in
  mark_test_run 750;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a106 a106 in
  if not test then failwithf "test 750 failed";
  let expected_b106 = #101l in
  mark_test_run 751;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b106 b106 in
  if not test then failwithf "test 751 failed";
  let expected_c106 = 102 in
  mark_test_run 752;
  let test = (fun a b -> Int.equal a b) expected_c106 c106 in
  if not test then failwithf "test 752 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t107 = { int32#; int32#; int32# }   *)
  (*****************************************)
  let r = { a107 = #0l; b107 = #1l; c107 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a107 *)
  let actual = r.a107 in
  let expected = #0l in
  mark_test_run 753;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 753 failed";
  (* Paths of depth 1 *)
  (* .b107 *)
  let actual = r.b107 in
  let expected = #1l in
  mark_test_run 754;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 754 failed";
  (* Paths of depth 1 *)
  (* .c107 *)
  let actual = r.c107 in
  let expected = #2l in
  mark_test_run 755;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 755 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a107 = a1071; b107 = b1071; c107 = c1071 } { a107 = a1072; b107 = b1072; c107 = c1072 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1071 a1072 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1071 b1072 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c1071 c1072) in
  let next_r = { a107 = #100l; b107 = #101l; c107 = #102l } in
  let r_expected = { a107 = #0l; b107 = #1l; c107 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a107 *)
  r.a107 <- next_r.a107;
  let r_expected = { r_expected with a107 = next_r.a107 } in
  mark_test_run 756;
  let test = eq r r_expected in
  if not test then failwithf "test 756 failed";
  Gc.compact ();
  (* .b107 *)
  r.b107 <- next_r.b107;
  let r_expected = { r_expected with b107 = next_r.b107 } in
  mark_test_run 757;
  let test = eq r r_expected in
  if not test then failwithf "test 757 failed";
  Gc.compact ();
  (* .c107 *)
  r.c107 <- next_r.c107;
  let r_expected = { r_expected with c107 = next_r.c107 } in
  mark_test_run 758;
  let test = eq r r_expected in
  if not test then failwithf "test 758 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a107; b107; c107 } = r in
  let expected_a107 = #100l in
  mark_test_run 759;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a107 a107 in
  if not test then failwithf "test 759 failed";
  let expected_b107 = #101l in
  mark_test_run 760;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b107 b107 in
  if not test then failwithf "test 760 failed";
  let expected_c107 = #102l in
  mark_test_run 761;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c107 c107 in
  if not test then failwithf "test 761 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a107; b107; c107 } = r in
  let expected_a107 = #100l in
  mark_test_run 762;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a107 a107 in
  if not test then failwithf "test 762 failed";
  let expected_b107 = #101l in
  mark_test_run 763;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b107 b107 in
  if not test then failwithf "test 763 failed";
  let expected_c107 = #102l in
  mark_test_run 764;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c107 c107 in
  if not test then failwithf "test 764 failed";

  ()
;;

let () =
  (*************************************)
  (*   t108 = { int32#; nativeint# }   *)
  (*************************************)
  let r = { a108 = #0l; b108 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a108 *)
  let actual = r.a108 in
  let expected = #0l in
  mark_test_run 765;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 765 failed";
  (* Paths of depth 1 *)
  (* .b108 *)
  let actual = r.b108 in
  let expected = #1n in
  mark_test_run 766;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 766 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a108 = a1081; b108 = b1081 } { a108 = a1082; b108 = b1082 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1081 a1082 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b1081 b1082) in
  let next_r = { a108 = #100l; b108 = #101n } in
  let r_expected = { a108 = #0l; b108 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a108 *)
  r.a108 <- next_r.a108;
  let r_expected = { r_expected with a108 = next_r.a108 } in
  mark_test_run 767;
  let test = eq r r_expected in
  if not test then failwithf "test 767 failed";
  Gc.compact ();
  (* .b108 *)
  r.b108 <- next_r.b108;
  let r_expected = { r_expected with b108 = next_r.b108 } in
  mark_test_run 768;
  let test = eq r r_expected in
  if not test then failwithf "test 768 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a108; b108 } = r in
  let expected_a108 = #100l in
  mark_test_run 769;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a108 a108 in
  if not test then failwithf "test 769 failed";
  let expected_b108 = #101n in
  mark_test_run 770;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b108 b108 in
  if not test then failwithf "test 770 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a108; b108 } = r in
  let expected_a108 = #100l in
  mark_test_run 771;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a108 a108 in
  if not test then failwithf "test 771 failed";
  let expected_b108 = #101n in
  mark_test_run 772;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b108 b108 in
  if not test then failwithf "test 772 failed";

  ()
;;

let () =
  (*********************************)
  (*   t109 = { int32#; unit_u }   *)
  (*********************************)
  let r = { a109 = #0l; b109 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a109 *)
  let actual = r.a109 in
  let expected = #0l in
  mark_test_run 773;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 773 failed";
  (* Paths of depth 1 *)
  (* .b109 *)
  let actual = r.b109 in
  let expected = (unbox_unit ()) in
  mark_test_run 774;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 774 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a109 = a1091; b109 = b1091 } { a109 = a1092; b109 = b1092 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1091 a1092 && (fun _ _ -> true) b1091 b1092) in
  let next_r = { a109 = #100l; b109 = (unbox_unit ()) } in
  let r_expected = { a109 = #0l; b109 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a109 *)
  r.a109 <- next_r.a109;
  let r_expected = { r_expected with a109 = next_r.a109 } in
  mark_test_run 775;
  let test = eq r r_expected in
  if not test then failwithf "test 775 failed";
  Gc.compact ();
  (* .b109 *)
  r.b109 <- next_r.b109;
  let r_expected = { r_expected with b109 = next_r.b109 } in
  mark_test_run 776;
  let test = eq r r_expected in
  if not test then failwithf "test 776 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a109; b109 } = r in
  let expected_a109 = #100l in
  mark_test_run 777;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a109 a109 in
  if not test then failwithf "test 777 failed";
  let expected_b109 = (unbox_unit ()) in
  mark_test_run 778;
  let test = (fun _ _ -> true) expected_b109 b109 in
  if not test then failwithf "test 778 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a109; b109 } = r in
  let expected_a109 = #100l in
  mark_test_run 779;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a109 a109 in
  if not test then failwithf "test 779 failed";
  let expected_b109 = (unbox_unit ()) in
  mark_test_run 780;
  let test = (fun _ _ -> true) expected_b109 b109 in
  if not test then failwithf "test 780 failed";

  ()
;;

let () =
  (********************************)
  (*   t110 = { int32#; float }   *)
  (********************************)
  let r = { a110 = #0l; b110 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a110 *)
  let actual = r.a110 in
  let expected = #0l in
  mark_test_run 781;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 781 failed";
  (* Paths of depth 1 *)
  (* .b110 *)
  let actual = r.b110 in
  let expected = 1. in
  mark_test_run 782;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 782 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a110 = a1101; b110 = b1101 } { a110 = a1102; b110 = b1102 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1101 a1102 && (fun a b -> Float.equal (globalize a) (globalize b)) b1101 b1102) in
  let next_r = { a110 = #100l; b110 = 101. } in
  let r_expected = { a110 = #0l; b110 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a110 *)
  r.a110 <- next_r.a110;
  let r_expected = { r_expected with a110 = next_r.a110 } in
  mark_test_run 783;
  let test = eq r r_expected in
  if not test then failwithf "test 783 failed";
  Gc.compact ();
  (* .b110 *)
  r.b110 <- next_r.b110;
  let r_expected = { r_expected with b110 = next_r.b110 } in
  mark_test_run 784;
  let test = eq r r_expected in
  if not test then failwithf "test 784 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a110; b110 } = r in
  let expected_a110 = #100l in
  mark_test_run 785;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a110 a110 in
  if not test then failwithf "test 785 failed";
  let expected_b110 = 101. in
  mark_test_run 786;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b110 b110 in
  if not test then failwithf "test 786 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a110; b110 } = r in
  let expected_a110 = #100l in
  mark_test_run 787;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a110 a110 in
  if not test then failwithf "test 787 failed";
  let expected_b110 = 101. in
  mark_test_run 788;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b110 b110 in
  if not test then failwithf "test 788 failed";

  ()
;;

let () =
  (*************************************)
  (*   t111 = { int32#; (| unit_u) }   *)
  (*************************************)
  let r = { a111 = #0l; b111 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a111 *)
  let actual = r.a111 in
  let expected = #0l in
  mark_test_run 789;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 789 failed";
  (* Paths of depth 1 *)
  (* .b111 *)
  let actual = r.b111 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 790;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 790 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a111 = a1111; b111 = b1111 } { a111 = a1112; b111 = b1112 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1111 a1112 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b1111 b1112) in
  let next_r = { a111 = #100l; b111 = C15_0((unbox_unit ())) } in
  let r_expected = { a111 = #0l; b111 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a111 *)
  r.a111 <- next_r.a111;
  let r_expected = { r_expected with a111 = next_r.a111 } in
  mark_test_run 791;
  let test = eq r r_expected in
  if not test then failwithf "test 791 failed";
  Gc.compact ();
  (* .b111 *)
  r.b111 <- next_r.b111;
  let r_expected = { r_expected with b111 = next_r.b111 } in
  mark_test_run 792;
  let test = eq r r_expected in
  if not test then failwithf "test 792 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a111; b111 } = r in
  let expected_a111 = #100l in
  mark_test_run 793;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a111 a111 in
  if not test then failwithf "test 793 failed";
  let expected_b111 = C15_0((unbox_unit ())) in
  mark_test_run 794;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b111 b111 in
  if not test then failwithf "test 794 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a111; b111 } = r in
  let expected_a111 = #100l in
  mark_test_run 795;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a111 a111 in
  if not test then failwithf "test 795 failed";
  let expected_b111 = C15_0((unbox_unit ())) in
  mark_test_run 796;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b111 b111 in
  if not test then failwithf "test 796 failed";

  ()
;;

let () =
  (***************************************************************************)
  (*   t112 = { int32#; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (***************************************************************************)
  let r = { a112 = #0l; b112 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a112 *)
  let actual = r.a112 in
  let expected = #0l in
  mark_test_run 797;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 797 failed";
  (* Paths of depth 1 *)
  (* .b112 *)
  let actual = r.b112 in
  let expected = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 798;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 798 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a112 = a1121; b112 = b1121 } { a112 = a1122; b112 = b1122 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1121 a1122 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b1121 b1122) in
  let next_r = { a112 = #100l; b112 = C17_2(#((unbox_unit ()), (unbox_unit ()))) } in
  let r_expected = { a112 = #0l; b112 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a112 *)
  r.a112 <- next_r.a112;
  let r_expected = { r_expected with a112 = next_r.a112 } in
  mark_test_run 799;
  let test = eq r r_expected in
  if not test then failwithf "test 799 failed";
  Gc.compact ();
  (* .b112 *)
  r.b112 <- next_r.b112;
  let r_expected = { r_expected with b112 = next_r.b112 } in
  mark_test_run 800;
  let test = eq r r_expected in
  if not test then failwithf "test 800 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a112; b112 } = r in
  let expected_a112 = #100l in
  mark_test_run 801;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a112 a112 in
  if not test then failwithf "test 801 failed";
  let expected_b112 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 802;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b112 b112 in
  if not test then failwithf "test 802 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a112; b112 } = r in
  let expected_a112 = #100l in
  mark_test_run 803;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a112 a112 in
  if not test then failwithf "test 803 failed";
  let expected_b112 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 804;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b112 b112 in
  if not test then failwithf "test 804 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t113 = { int32#; #(unit_u, int) }   *)
  (*****************************************)
  let r = { a113 = #0l; b113 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a113 *)
  let actual = r.a113 in
  let expected = #0l in
  mark_test_run 805;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 805 failed";
  (* Paths of depth 1 *)
  (* .b113 *)
  let actual = r.b113 in
  let expected = #((unbox_unit ()), 1) in
  mark_test_run 806;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 806 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a113 = a1131; b113 = b1131 } { a113 = a1132; b113 = b1132 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1131 a1132 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b1131 b1132) in
  let next_r = { a113 = #100l; b113 = #((unbox_unit ()), 101) } in
  let r_expected = { a113 = #0l; b113 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a113 *)
  r.a113 <- next_r.a113;
  let r_expected = { r_expected with a113 = next_r.a113 } in
  mark_test_run 807;
  let test = eq r r_expected in
  if not test then failwithf "test 807 failed";
  Gc.compact ();
  (* .b113 *)
  r.b113 <- next_r.b113;
  let r_expected = { r_expected with b113 = next_r.b113 } in
  mark_test_run 808;
  let test = eq r r_expected in
  if not test then failwithf "test 808 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a113; b113 } = r in
  let expected_a113 = #100l in
  mark_test_run 809;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a113 a113 in
  if not test then failwithf "test 809 failed";
  let expected_b113 = #((unbox_unit ()), 101) in
  mark_test_run 810;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b113 b113 in
  if not test then failwithf "test 810 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a113; b113 } = r in
  let expected_a113 = #100l in
  mark_test_run 811;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a113 a113 in
  if not test then failwithf "test 811 failed";
  let expected_b113 = #((unbox_unit ()), 101) in
  mark_test_run 812;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b113 b113 in
  if not test then failwithf "test 812 failed";

  ()
;;

let () =
  (********************************************)
  (*   t114 = { int32#; #(unit_u, int64#) }   *)
  (********************************************)
  let r = { a114 = #0l; b114 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a114 *)
  let actual = r.a114 in
  let expected = #0l in
  mark_test_run 813;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 813 failed";
  (* Paths of depth 1 *)
  (* .b114 *)
  let actual = r.b114 in
  let expected = #((unbox_unit ()), #1L) in
  mark_test_run 814;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 814 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a114 = a1141; b114 = b1141 } { a114 = a1142; b114 = b1142 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1141 a1142 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b1141 b1142) in
  let next_r = { a114 = #100l; b114 = #((unbox_unit ()), #101L) } in
  let r_expected = { a114 = #0l; b114 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a114 *)
  r.a114 <- next_r.a114;
  let r_expected = { r_expected with a114 = next_r.a114 } in
  mark_test_run 815;
  let test = eq r r_expected in
  if not test then failwithf "test 815 failed";
  Gc.compact ();
  (* .b114 *)
  r.b114 <- next_r.b114;
  let r_expected = { r_expected with b114 = next_r.b114 } in
  mark_test_run 816;
  let test = eq r r_expected in
  if not test then failwithf "test 816 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a114; b114 } = r in
  let expected_a114 = #100l in
  mark_test_run 817;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a114 a114 in
  if not test then failwithf "test 817 failed";
  let expected_b114 = #((unbox_unit ()), #101L) in
  mark_test_run 818;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b114 b114 in
  if not test then failwithf "test 818 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a114; b114 } = r in
  let expected_a114 = #100l in
  mark_test_run 819;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a114 a114 in
  if not test then failwithf "test 819 failed";
  let expected_b114 = #((unbox_unit ()), #101L) in
  mark_test_run 820;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b114 b114 in
  if not test then failwithf "test 820 failed";

  ()
;;

let () =
  (********************************************)
  (*   t115 = { int32#; #(unit_u, unit_u) }   *)
  (********************************************)
  let r = { a115 = #0l; b115 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a115 *)
  let actual = r.a115 in
  let expected = #0l in
  mark_test_run 821;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 821 failed";
  (* Paths of depth 1 *)
  (* .b115 *)
  let actual = r.b115 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 822;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 822 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a115 = a1151; b115 = b1151 } { a115 = a1152; b115 = b1152 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1151 a1152 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b1151 b1152) in
  let next_r = { a115 = #100l; b115 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a115 = #0l; b115 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a115 *)
  r.a115 <- next_r.a115;
  let r_expected = { r_expected with a115 = next_r.a115 } in
  mark_test_run 823;
  let test = eq r r_expected in
  if not test then failwithf "test 823 failed";
  Gc.compact ();
  (* .b115 *)
  r.b115 <- next_r.b115;
  let r_expected = { r_expected with b115 = next_r.b115 } in
  mark_test_run 824;
  let test = eq r r_expected in
  if not test then failwithf "test 824 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a115; b115 } = r in
  let expected_a115 = #100l in
  mark_test_run 825;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a115 a115 in
  if not test then failwithf "test 825 failed";
  let expected_b115 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 826;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b115 b115 in
  if not test then failwithf "test 826 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a115; b115 } = r in
  let expected_a115 = #100l in
  mark_test_run 827;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a115 a115 in
  if not test then failwithf "test 827 failed";
  let expected_b115 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 828;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b115 b115 in
  if not test then failwithf "test 828 failed";

  ()
;;

let () =
  (********************************************)
  (*   t116 = { int32#; #(unit_u, string) }   *)
  (********************************************)
  let r = { a116 = #0l; b116 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a116 *)
  let actual = r.a116 in
  let expected = #0l in
  mark_test_run 829;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 829 failed";
  (* Paths of depth 1 *)
  (* .b116 *)
  let actual = r.b116 in
  let expected = #((unbox_unit ()), "1") in
  mark_test_run 830;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 830 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a116 = a1161; b116 = b1161 } { a116 = a1162; b116 = b1162 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1161 a1162 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b1161 b1162) in
  let next_r = { a116 = #100l; b116 = #((unbox_unit ()), "101") } in
  let r_expected = { a116 = #0l; b116 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a116 *)
  r.a116 <- next_r.a116;
  let r_expected = { r_expected with a116 = next_r.a116 } in
  mark_test_run 831;
  let test = eq r r_expected in
  if not test then failwithf "test 831 failed";
  Gc.compact ();
  (* .b116 *)
  r.b116 <- next_r.b116;
  let r_expected = { r_expected with b116 = next_r.b116 } in
  mark_test_run 832;
  let test = eq r r_expected in
  if not test then failwithf "test 832 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a116; b116 } = r in
  let expected_a116 = #100l in
  mark_test_run 833;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a116 a116 in
  if not test then failwithf "test 833 failed";
  let expected_b116 = #((unbox_unit ()), "101") in
  mark_test_run 834;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b116 b116 in
  if not test then failwithf "test 834 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a116; b116 } = r in
  let expected_a116 = #100l in
  mark_test_run 835;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a116 a116 in
  if not test then failwithf "test 835 failed";
  let expected_b116 = #((unbox_unit ()), "101") in
  mark_test_run 836;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b116 b116 in
  if not test then failwithf "test 836 failed";

  ()
;;

let () =
  (***********************************)
  (*   t117 = { int32#; #{ int } }   *)
  (***********************************)
  let r = { a117 = #0l; b117 = #{ a23 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a117 *)
  let actual = r.a117 in
  let expected = #0l in
  mark_test_run 837;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 837 failed";
  (* Paths of depth 1 *)
  (* .b117 *)
  let actual = r.b117 in
  let expected = #{ a23 = 1 } in
  mark_test_run 838;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 838 failed";
  (* Paths of depth 2 *)
  (* .b117.#a23 *)
  let actual = r.b117.#a23 in
  let expected = 1 in
  mark_test_run 839;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 839 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a117 = a1171; b117 = b1171 } { a117 = a1172; b117 = b1172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1171 a1172 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b1171 b1172) in
  let next_r = { a117 = #100l; b117 = #{ a23 = 101 } } in
  let r_expected = { a117 = #0l; b117 = #{ a23 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a117 *)
  r.a117 <- next_r.a117;
  let r_expected = { r_expected with a117 = next_r.a117 } in
  mark_test_run 840;
  let test = eq r r_expected in
  if not test then failwithf "test 840 failed";
  Gc.compact ();
  (* .b117 *)
  r.b117 <- next_r.b117;
  let r_expected = { r_expected with b117 = next_r.b117 } in
  mark_test_run 841;
  let test = eq r r_expected in
  if not test then failwithf "test 841 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a117; b117 = #{ a23 } } = r in
  let expected_a117 = #100l in
  mark_test_run 842;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a117 a117 in
  if not test then failwithf "test 842 failed";
  let expected_a23 = 101 in
  mark_test_run 843;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 843 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a117; b117 } = r in
  let expected_a117 = #100l in
  mark_test_run 844;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a117 a117 in
  if not test then failwithf "test 844 failed";
  let expected_b117 = #{ a23 = 101 } in
  mark_test_run 845;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) expected_b117 b117 in
  if not test then failwithf "test 845 failed";

  ()
;;

let () =
  (****************************************)
  (*   t118 = { int32#; #{ int; int } }   *)
  (****************************************)
  let r = { a118 = #0l; b118 = #{ a25 = 1; b25 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a118 *)
  let actual = r.a118 in
  let expected = #0l in
  mark_test_run 846;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 846 failed";
  (* Paths of depth 1 *)
  (* .b118 *)
  let actual = r.b118 in
  let expected = #{ a25 = 1; b25 = 2 } in
  mark_test_run 847;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 847 failed";
  (* Paths of depth 2 *)
  (* .b118.#a25 *)
  let actual = r.b118.#a25 in
  let expected = 1 in
  mark_test_run 848;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 848 failed";
  (* .b118.#b25 *)
  let actual = r.b118.#b25 in
  let expected = 2 in
  mark_test_run 849;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 849 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a118 = a1181; b118 = b1181 } { a118 = a1182; b118 = b1182 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1181 a1182 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b1181 b1182) in
  let next_r = { a118 = #100l; b118 = #{ a25 = 101; b25 = 102 } } in
  let r_expected = { a118 = #0l; b118 = #{ a25 = 1; b25 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a118 *)
  r.a118 <- next_r.a118;
  let r_expected = { r_expected with a118 = next_r.a118 } in
  mark_test_run 850;
  let test = eq r r_expected in
  if not test then failwithf "test 850 failed";
  Gc.compact ();
  (* .b118 *)
  r.b118 <- next_r.b118;
  let r_expected = { r_expected with b118 = next_r.b118 } in
  mark_test_run 851;
  let test = eq r r_expected in
  if not test then failwithf "test 851 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a118; b118 = #{ a25; b25 } } = r in
  let expected_a118 = #100l in
  mark_test_run 852;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a118 a118 in
  if not test then failwithf "test 852 failed";
  let expected_a25 = 101 in
  mark_test_run 853;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 853 failed";
  let expected_b25 = 102 in
  mark_test_run 854;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 854 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a118; b118 } = r in
  let expected_a118 = #100l in
  mark_test_run 855;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a118 a118 in
  if not test then failwithf "test 855 failed";
  let expected_b118 = #{ a25 = 101; b25 = 102 } in
  mark_test_run 856;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) expected_b118 b118 in
  if not test then failwithf "test 856 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t119 = { int32#; #{ int; int32# } }   *)
  (*******************************************)
  let r = { a119 = #0l; b119 = #{ a27 = 1; b27 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a119 *)
  let actual = r.a119 in
  let expected = #0l in
  mark_test_run 857;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 857 failed";
  (* Paths of depth 1 *)
  (* .b119 *)
  let actual = r.b119 in
  let expected = #{ a27 = 1; b27 = #2l } in
  mark_test_run 858;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 858 failed";
  (* Paths of depth 2 *)
  (* .b119.#a27 *)
  let actual = r.b119.#a27 in
  let expected = 1 in
  mark_test_run 859;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 859 failed";
  (* .b119.#b27 *)
  let actual = r.b119.#b27 in
  let expected = #2l in
  mark_test_run 860;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 860 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a119 = a1191; b119 = b1191 } { a119 = a1192; b119 = b1192 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1191 a1192 && (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) b1191 b1192) in
  let next_r = { a119 = #100l; b119 = #{ a27 = 101; b27 = #102l } } in
  let r_expected = { a119 = #0l; b119 = #{ a27 = 1; b27 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a119 *)
  r.a119 <- next_r.a119;
  let r_expected = { r_expected with a119 = next_r.a119 } in
  mark_test_run 861;
  let test = eq r r_expected in
  if not test then failwithf "test 861 failed";
  Gc.compact ();
  (* .b119 *)
  r.b119 <- next_r.b119;
  let r_expected = { r_expected with b119 = next_r.b119 } in
  mark_test_run 862;
  let test = eq r r_expected in
  if not test then failwithf "test 862 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a119; b119 = #{ a27; b27 } } = r in
  let expected_a119 = #100l in
  mark_test_run 863;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a119 a119 in
  if not test then failwithf "test 863 failed";
  let expected_a27 = 101 in
  mark_test_run 864;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 864 failed";
  let expected_b27 = #102l in
  mark_test_run 865;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 865 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a119; b119 } = r in
  let expected_a119 = #100l in
  mark_test_run 866;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a119 a119 in
  if not test then failwithf "test 866 failed";
  let expected_b119 = #{ a27 = 101; b27 = #102l } in
  mark_test_run 867;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) expected_b119 b119 in
  if not test then failwithf "test 867 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t120 = { int32#; #{ int; #{ int } } }   *)
  (*********************************************)
  let r = { a120 = #0l; b120 = #{ a31 = 1; b31 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a120 *)
  let actual = r.a120 in
  let expected = #0l in
  mark_test_run 868;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 868 failed";
  (* Paths of depth 1 *)
  (* .b120 *)
  let actual = r.b120 in
  let expected = #{ a31 = 1; b31 = #{ a23 = 2 } } in
  mark_test_run 869;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int.equal a b) a311 a312 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b311 b312) actual expected in
  if not test then failwithf "test 869 failed";
  (* Paths of depth 2 *)
  (* .b120.#a31 *)
  let actual = r.b120.#a31 in
  let expected = 1 in
  mark_test_run 870;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 870 failed";
  (* .b120.#b31 *)
  let actual = r.b120.#b31 in
  let expected = #{ a23 = 2 } in
  mark_test_run 871;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 871 failed";
  (* Paths of depth 3 *)
  (* .b120.#b31.#a23 *)
  let actual = r.b120.#b31.#a23 in
  let expected = 2 in
  mark_test_run 872;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 872 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a120 = a1201; b120 = b1201 } { a120 = a1202; b120 = b1202 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1201 a1202 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int.equal a b) a311 a312 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b311 b312) b1201 b1202) in
  let next_r = { a120 = #100l; b120 = #{ a31 = 101; b31 = #{ a23 = 102 } } } in
  let r_expected = { a120 = #0l; b120 = #{ a31 = 1; b31 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a120 *)
  r.a120 <- next_r.a120;
  let r_expected = { r_expected with a120 = next_r.a120 } in
  mark_test_run 873;
  let test = eq r r_expected in
  if not test then failwithf "test 873 failed";
  Gc.compact ();
  (* .b120 *)
  r.b120 <- next_r.b120;
  let r_expected = { r_expected with b120 = next_r.b120 } in
  mark_test_run 874;
  let test = eq r r_expected in
  if not test then failwithf "test 874 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a120; b120 = #{ a31; b31 = #{ a23 } } } = r in
  let expected_a120 = #100l in
  mark_test_run 875;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a120 a120 in
  if not test then failwithf "test 875 failed";
  let expected_a31 = 101 in
  mark_test_run 876;
  let test = (fun a b -> Int.equal a b) expected_a31 a31 in
  if not test then failwithf "test 876 failed";
  let expected_a23 = 102 in
  mark_test_run 877;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 877 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a120; b120 } = r in
  let expected_a120 = #100l in
  mark_test_run 878;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a120 a120 in
  if not test then failwithf "test 878 failed";
  let expected_b120 = #{ a31 = 101; b31 = #{ a23 = 102 } } in
  mark_test_run 879;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int.equal a b) a311 a312 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b311 b312) expected_b120 b120 in
  if not test then failwithf "test 879 failed";

  ()
;;

let () =
  (************************************************)
  (*   t121 = { int32#; #{ int; #{ int32# } } }   *)
  (************************************************)
  let r = { a121 = #0l; b121 = #{ a34 = 1; b34 = #{ a33 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a121 *)
  let actual = r.a121 in
  let expected = #0l in
  mark_test_run 880;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 880 failed";
  (* Paths of depth 1 *)
  (* .b121 *)
  let actual = r.b121 in
  let expected = #{ a34 = 1; b34 = #{ a33 = #2l } } in
  mark_test_run 881;
  let test = (fun #{ a34 = a341; b34 = b341 } #{ a34 = a342; b34 = b342 } -> (fun a b -> Int.equal a b) a341 a342 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b341 b342) actual expected in
  if not test then failwithf "test 881 failed";
  (* Paths of depth 2 *)
  (* .b121.#a34 *)
  let actual = r.b121.#a34 in
  let expected = 1 in
  mark_test_run 882;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 882 failed";
  (* .b121.#b34 *)
  let actual = r.b121.#b34 in
  let expected = #{ a33 = #2l } in
  mark_test_run 883;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) actual expected in
  if not test then failwithf "test 883 failed";
  (* Paths of depth 3 *)
  (* .b121.#b34.#a33 *)
  let actual = r.b121.#b34.#a33 in
  let expected = #2l in
  mark_test_run 884;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 884 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a121 = a1211; b121 = b1211 } { a121 = a1212; b121 = b1212 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1211 a1212 && (fun #{ a34 = a341; b34 = b341 } #{ a34 = a342; b34 = b342 } -> (fun a b -> Int.equal a b) a341 a342 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b341 b342) b1211 b1212) in
  let next_r = { a121 = #100l; b121 = #{ a34 = 101; b34 = #{ a33 = #102l } } } in
  let r_expected = { a121 = #0l; b121 = #{ a34 = 1; b34 = #{ a33 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a121 *)
  r.a121 <- next_r.a121;
  let r_expected = { r_expected with a121 = next_r.a121 } in
  mark_test_run 885;
  let test = eq r r_expected in
  if not test then failwithf "test 885 failed";
  Gc.compact ();
  (* .b121 *)
  r.b121 <- next_r.b121;
  let r_expected = { r_expected with b121 = next_r.b121 } in
  mark_test_run 886;
  let test = eq r r_expected in
  if not test then failwithf "test 886 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a121; b121 = #{ a34; b34 = #{ a33 } } } = r in
  let expected_a121 = #100l in
  mark_test_run 887;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a121 a121 in
  if not test then failwithf "test 887 failed";
  let expected_a34 = 101 in
  mark_test_run 888;
  let test = (fun a b -> Int.equal a b) expected_a34 a34 in
  if not test then failwithf "test 888 failed";
  let expected_a33 = #102l in
  mark_test_run 889;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 889 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a121; b121 } = r in
  let expected_a121 = #100l in
  mark_test_run 890;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a121 a121 in
  if not test then failwithf "test 890 failed";
  let expected_b121 = #{ a34 = 101; b34 = #{ a33 = #102l } } in
  mark_test_run 891;
  let test = (fun #{ a34 = a341; b34 = b341 } #{ a34 = a342; b34 = b342 } -> (fun a b -> Int.equal a b) a341 a342 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b341 b342) expected_b121 b121 in
  if not test then failwithf "test 891 failed";

  ()
;;

let () =
  (**************************************)
  (*   t122 = { int32#; #{ int32# } }   *)
  (**************************************)
  let r = { a122 = #0l; b122 = #{ a33 = #1l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a122 *)
  let actual = r.a122 in
  let expected = #0l in
  mark_test_run 892;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 892 failed";
  (* Paths of depth 1 *)
  (* .b122 *)
  let actual = r.b122 in
  let expected = #{ a33 = #1l } in
  mark_test_run 893;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) actual expected in
  if not test then failwithf "test 893 failed";
  (* Paths of depth 2 *)
  (* .b122.#a33 *)
  let actual = r.b122.#a33 in
  let expected = #1l in
  mark_test_run 894;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 894 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a122 = a1221; b122 = b1221 } { a122 = a1222; b122 = b1222 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1221 a1222 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b1221 b1222) in
  let next_r = { a122 = #100l; b122 = #{ a33 = #101l } } in
  let r_expected = { a122 = #0l; b122 = #{ a33 = #1l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a122 *)
  r.a122 <- next_r.a122;
  let r_expected = { r_expected with a122 = next_r.a122 } in
  mark_test_run 895;
  let test = eq r r_expected in
  if not test then failwithf "test 895 failed";
  Gc.compact ();
  (* .b122 *)
  r.b122 <- next_r.b122;
  let r_expected = { r_expected with b122 = next_r.b122 } in
  mark_test_run 896;
  let test = eq r r_expected in
  if not test then failwithf "test 896 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a122; b122 = #{ a33 } } = r in
  let expected_a122 = #100l in
  mark_test_run 897;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a122 a122 in
  if not test then failwithf "test 897 failed";
  let expected_a33 = #101l in
  mark_test_run 898;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 898 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a122; b122 } = r in
  let expected_a122 = #100l in
  mark_test_run 899;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a122 a122 in
  if not test then failwithf "test 899 failed";
  let expected_b122 = #{ a33 = #101l } in
  mark_test_run 900;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) expected_b122 b122 in
  if not test then failwithf "test 900 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t123 = { int32#; #{ int32#; int } }   *)
  (*******************************************)
  let r = { a123 = #0l; b123 = #{ a40 = #1l; b40 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a123 *)
  let actual = r.a123 in
  let expected = #0l in
  mark_test_run 901;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 901 failed";
  (* Paths of depth 1 *)
  (* .b123 *)
  let actual = r.b123 in
  let expected = #{ a40 = #1l; b40 = 2 } in
  mark_test_run 902;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 902 failed";
  (* Paths of depth 2 *)
  (* .b123.#a40 *)
  let actual = r.b123.#a40 in
  let expected = #1l in
  mark_test_run 903;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 903 failed";
  (* .b123.#b40 *)
  let actual = r.b123.#b40 in
  let expected = 2 in
  mark_test_run 904;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 904 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a123 = a1231; b123 = b1231 } { a123 = a1232; b123 = b1232 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1231 a1232 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b1231 b1232) in
  let next_r = { a123 = #100l; b123 = #{ a40 = #101l; b40 = 102 } } in
  let r_expected = { a123 = #0l; b123 = #{ a40 = #1l; b40 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a123 *)
  r.a123 <- next_r.a123;
  let r_expected = { r_expected with a123 = next_r.a123 } in
  mark_test_run 905;
  let test = eq r r_expected in
  if not test then failwithf "test 905 failed";
  Gc.compact ();
  (* .b123 *)
  r.b123 <- next_r.b123;
  let r_expected = { r_expected with b123 = next_r.b123 } in
  mark_test_run 906;
  let test = eq r r_expected in
  if not test then failwithf "test 906 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a123; b123 = #{ a40; b40 } } = r in
  let expected_a123 = #100l in
  mark_test_run 907;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a123 a123 in
  if not test then failwithf "test 907 failed";
  let expected_a40 = #101l in
  mark_test_run 908;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 908 failed";
  let expected_b40 = 102 in
  mark_test_run 909;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 909 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a123; b123 } = r in
  let expected_a123 = #100l in
  mark_test_run 910;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a123 a123 in
  if not test then failwithf "test 910 failed";
  let expected_b123 = #{ a40 = #101l; b40 = 102 } in
  mark_test_run 911;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) expected_b123 b123 in
  if not test then failwithf "test 911 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t124 = { int32#; #{ int32#; int32# } }   *)
  (**********************************************)
  let r = { a124 = #0l; b124 = #{ a42 = #1l; b42 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a124 *)
  let actual = r.a124 in
  let expected = #0l in
  mark_test_run 912;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 912 failed";
  (* Paths of depth 1 *)
  (* .b124 *)
  let actual = r.b124 in
  let expected = #{ a42 = #1l; b42 = #2l } in
  mark_test_run 913;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 913 failed";
  (* Paths of depth 2 *)
  (* .b124.#a42 *)
  let actual = r.b124.#a42 in
  let expected = #1l in
  mark_test_run 914;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 914 failed";
  (* .b124.#b42 *)
  let actual = r.b124.#b42 in
  let expected = #2l in
  mark_test_run 915;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 915 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a124 = a1241; b124 = b1241 } { a124 = a1242; b124 = b1242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1241 a1242 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) b1241 b1242) in
  let next_r = { a124 = #100l; b124 = #{ a42 = #101l; b42 = #102l } } in
  let r_expected = { a124 = #0l; b124 = #{ a42 = #1l; b42 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a124 *)
  r.a124 <- next_r.a124;
  let r_expected = { r_expected with a124 = next_r.a124 } in
  mark_test_run 916;
  let test = eq r r_expected in
  if not test then failwithf "test 916 failed";
  Gc.compact ();
  (* .b124 *)
  r.b124 <- next_r.b124;
  let r_expected = { r_expected with b124 = next_r.b124 } in
  mark_test_run 917;
  let test = eq r r_expected in
  if not test then failwithf "test 917 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a124; b124 = #{ a42; b42 } } = r in
  let expected_a124 = #100l in
  mark_test_run 918;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a124 a124 in
  if not test then failwithf "test 918 failed";
  let expected_a42 = #101l in
  mark_test_run 919;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 919 failed";
  let expected_b42 = #102l in
  mark_test_run 920;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 920 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a124; b124 } = r in
  let expected_a124 = #100l in
  mark_test_run 921;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a124 a124 in
  if not test then failwithf "test 921 failed";
  let expected_b124 = #{ a42 = #101l; b42 = #102l } in
  mark_test_run 922;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) expected_b124 b124 in
  if not test then failwithf "test 922 failed";

  ()
;;

let () =
  (************************************************)
  (*   t125 = { int32#; #{ int32#; #{ int } } }   *)
  (************************************************)
  let r = { a125 = #0l; b125 = #{ a44 = #1l; b44 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a125 *)
  let actual = r.a125 in
  let expected = #0l in
  mark_test_run 923;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 923 failed";
  (* Paths of depth 1 *)
  (* .b125 *)
  let actual = r.b125 in
  let expected = #{ a44 = #1l; b44 = #{ a23 = 2 } } in
  mark_test_run 924;
  let test = (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a441 a442 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b441 b442) actual expected in
  if not test then failwithf "test 924 failed";
  (* Paths of depth 2 *)
  (* .b125.#a44 *)
  let actual = r.b125.#a44 in
  let expected = #1l in
  mark_test_run 925;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 925 failed";
  (* .b125.#b44 *)
  let actual = r.b125.#b44 in
  let expected = #{ a23 = 2 } in
  mark_test_run 926;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 926 failed";
  (* Paths of depth 3 *)
  (* .b125.#b44.#a23 *)
  let actual = r.b125.#b44.#a23 in
  let expected = 2 in
  mark_test_run 927;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 927 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a125 = a1251; b125 = b1251 } { a125 = a1252; b125 = b1252 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1251 a1252 && (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a441 a442 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b441 b442) b1251 b1252) in
  let next_r = { a125 = #100l; b125 = #{ a44 = #101l; b44 = #{ a23 = 102 } } } in
  let r_expected = { a125 = #0l; b125 = #{ a44 = #1l; b44 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a125 *)
  r.a125 <- next_r.a125;
  let r_expected = { r_expected with a125 = next_r.a125 } in
  mark_test_run 928;
  let test = eq r r_expected in
  if not test then failwithf "test 928 failed";
  Gc.compact ();
  (* .b125 *)
  r.b125 <- next_r.b125;
  let r_expected = { r_expected with b125 = next_r.b125 } in
  mark_test_run 929;
  let test = eq r r_expected in
  if not test then failwithf "test 929 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a125; b125 = #{ a44; b44 = #{ a23 } } } = r in
  let expected_a125 = #100l in
  mark_test_run 930;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a125 a125 in
  if not test then failwithf "test 930 failed";
  let expected_a44 = #101l in
  mark_test_run 931;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a44 a44 in
  if not test then failwithf "test 931 failed";
  let expected_a23 = 102 in
  mark_test_run 932;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 932 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a125; b125 } = r in
  let expected_a125 = #100l in
  mark_test_run 933;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a125 a125 in
  if not test then failwithf "test 933 failed";
  let expected_b125 = #{ a44 = #101l; b44 = #{ a23 = 102 } } in
  mark_test_run 934;
  let test = (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a441 a442 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b441 b442) expected_b125 b125 in
  if not test then failwithf "test 934 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t126 = { int32#; #{ int32#; #{ int32# } } }   *)
  (***************************************************)
  let r = { a126 = #0l; b126 = #{ a46 = #1l; b46 = #{ a33 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a126 *)
  let actual = r.a126 in
  let expected = #0l in
  mark_test_run 935;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 935 failed";
  (* Paths of depth 1 *)
  (* .b126 *)
  let actual = r.b126 in
  let expected = #{ a46 = #1l; b46 = #{ a33 = #2l } } in
  mark_test_run 936;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a461 a462 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b461 b462) actual expected in
  if not test then failwithf "test 936 failed";
  (* Paths of depth 2 *)
  (* .b126.#a46 *)
  let actual = r.b126.#a46 in
  let expected = #1l in
  mark_test_run 937;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 937 failed";
  (* .b126.#b46 *)
  let actual = r.b126.#b46 in
  let expected = #{ a33 = #2l } in
  mark_test_run 938;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) actual expected in
  if not test then failwithf "test 938 failed";
  (* Paths of depth 3 *)
  (* .b126.#b46.#a33 *)
  let actual = r.b126.#b46.#a33 in
  let expected = #2l in
  mark_test_run 939;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 939 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a126 = a1261; b126 = b1261 } { a126 = a1262; b126 = b1262 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1261 a1262 && (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a461 a462 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b461 b462) b1261 b1262) in
  let next_r = { a126 = #100l; b126 = #{ a46 = #101l; b46 = #{ a33 = #102l } } } in
  let r_expected = { a126 = #0l; b126 = #{ a46 = #1l; b46 = #{ a33 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a126 *)
  r.a126 <- next_r.a126;
  let r_expected = { r_expected with a126 = next_r.a126 } in
  mark_test_run 940;
  let test = eq r r_expected in
  if not test then failwithf "test 940 failed";
  Gc.compact ();
  (* .b126 *)
  r.b126 <- next_r.b126;
  let r_expected = { r_expected with b126 = next_r.b126 } in
  mark_test_run 941;
  let test = eq r r_expected in
  if not test then failwithf "test 941 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a126; b126 = #{ a46; b46 = #{ a33 } } } = r in
  let expected_a126 = #100l in
  mark_test_run 942;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a126 a126 in
  if not test then failwithf "test 942 failed";
  let expected_a46 = #101l in
  mark_test_run 943;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a46 a46 in
  if not test then failwithf "test 943 failed";
  let expected_a33 = #102l in
  mark_test_run 944;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 944 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a126; b126 } = r in
  let expected_a126 = #100l in
  mark_test_run 945;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a126 a126 in
  if not test then failwithf "test 945 failed";
  let expected_b126 = #{ a46 = #101l; b46 = #{ a33 = #102l } } in
  mark_test_run 946;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a461 a462 && (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) b461 b462) expected_b126 b126 in
  if not test then failwithf "test 946 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t127 = { int32#; #{ #{ int; int } } }   *)
  (*********************************************)
  let r = { a127 = #0l; b127 = #{ a57 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a127 *)
  let actual = r.a127 in
  let expected = #0l in
  mark_test_run 947;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 947 failed";
  (* Paths of depth 1 *)
  (* .b127 *)
  let actual = r.b127 in
  let expected = #{ a57 = #{ a25 = 1; b25 = 2 } } in
  mark_test_run 948;
  let test = (fun #{ a57 = a571 } #{ a57 = a572 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a571 a572) actual expected in
  if not test then failwithf "test 948 failed";
  (* Paths of depth 2 *)
  (* .b127.#a57 *)
  let actual = r.b127.#a57 in
  let expected = #{ a25 = 1; b25 = 2 } in
  mark_test_run 949;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 949 failed";
  (* Paths of depth 3 *)
  (* .b127.#a57.#a25 *)
  let actual = r.b127.#a57.#a25 in
  let expected = 1 in
  mark_test_run 950;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 950 failed";
  (* .b127.#a57.#b25 *)
  let actual = r.b127.#a57.#b25 in
  let expected = 2 in
  mark_test_run 951;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 951 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a127 = a1271; b127 = b1271 } { a127 = a1272; b127 = b1272 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1271 a1272 && (fun #{ a57 = a571 } #{ a57 = a572 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a571 a572) b1271 b1272) in
  let next_r = { a127 = #100l; b127 = #{ a57 = #{ a25 = 101; b25 = 102 } } } in
  let r_expected = { a127 = #0l; b127 = #{ a57 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a127 *)
  r.a127 <- next_r.a127;
  let r_expected = { r_expected with a127 = next_r.a127 } in
  mark_test_run 952;
  let test = eq r r_expected in
  if not test then failwithf "test 952 failed";
  Gc.compact ();
  (* .b127 *)
  r.b127 <- next_r.b127;
  let r_expected = { r_expected with b127 = next_r.b127 } in
  mark_test_run 953;
  let test = eq r r_expected in
  if not test then failwithf "test 953 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a127; b127 = #{ a57 = #{ a25; b25 } } } = r in
  let expected_a127 = #100l in
  mark_test_run 954;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a127 a127 in
  if not test then failwithf "test 954 failed";
  let expected_a25 = 101 in
  mark_test_run 955;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 955 failed";
  let expected_b25 = 102 in
  mark_test_run 956;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 956 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a127; b127 } = r in
  let expected_a127 = #100l in
  mark_test_run 957;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a127 a127 in
  if not test then failwithf "test 957 failed";
  let expected_b127 = #{ a57 = #{ a25 = 101; b25 = 102 } } in
  mark_test_run 958;
  let test = (fun #{ a57 = a571 } #{ a57 = a572 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a571 a572) expected_b127 b127 in
  if not test then failwithf "test 958 failed";

  ()
;;

let () =
  (************************************************)
  (*   t128 = { int32#; #{ #{ int; int32# } } }   *)
  (************************************************)
  let r = { a128 = #0l; b128 = #{ a59 = #{ a27 = 1; b27 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a128 *)
  let actual = r.a128 in
  let expected = #0l in
  mark_test_run 959;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 959 failed";
  (* Paths of depth 1 *)
  (* .b128 *)
  let actual = r.b128 in
  let expected = #{ a59 = #{ a27 = 1; b27 = #2l } } in
  mark_test_run 960;
  let test = (fun #{ a59 = a591 } #{ a59 = a592 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a591 a592) actual expected in
  if not test then failwithf "test 960 failed";
  (* Paths of depth 2 *)
  (* .b128.#a59 *)
  let actual = r.b128.#a59 in
  let expected = #{ a27 = 1; b27 = #2l } in
  mark_test_run 961;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 961 failed";
  (* Paths of depth 3 *)
  (* .b128.#a59.#a27 *)
  let actual = r.b128.#a59.#a27 in
  let expected = 1 in
  mark_test_run 962;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 962 failed";
  (* .b128.#a59.#b27 *)
  let actual = r.b128.#a59.#b27 in
  let expected = #2l in
  mark_test_run 963;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 963 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a128 = a1281; b128 = b1281 } { a128 = a1282; b128 = b1282 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1281 a1282 && (fun #{ a59 = a591 } #{ a59 = a592 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a591 a592) b1281 b1282) in
  let next_r = { a128 = #100l; b128 = #{ a59 = #{ a27 = 101; b27 = #102l } } } in
  let r_expected = { a128 = #0l; b128 = #{ a59 = #{ a27 = 1; b27 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a128 *)
  r.a128 <- next_r.a128;
  let r_expected = { r_expected with a128 = next_r.a128 } in
  mark_test_run 964;
  let test = eq r r_expected in
  if not test then failwithf "test 964 failed";
  Gc.compact ();
  (* .b128 *)
  r.b128 <- next_r.b128;
  let r_expected = { r_expected with b128 = next_r.b128 } in
  mark_test_run 965;
  let test = eq r r_expected in
  if not test then failwithf "test 965 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a128; b128 = #{ a59 = #{ a27; b27 } } } = r in
  let expected_a128 = #100l in
  mark_test_run 966;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a128 a128 in
  if not test then failwithf "test 966 failed";
  let expected_a27 = 101 in
  mark_test_run 967;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 967 failed";
  let expected_b27 = #102l in
  mark_test_run 968;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 968 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a128; b128 } = r in
  let expected_a128 = #100l in
  mark_test_run 969;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a128 a128 in
  if not test then failwithf "test 969 failed";
  let expected_b128 = #{ a59 = #{ a27 = 101; b27 = #102l } } in
  mark_test_run 970;
  let test = (fun #{ a59 = a591 } #{ a59 = a592 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a591 a592) expected_b128 b128 in
  if not test then failwithf "test 970 failed";

  ()
;;

let () =
  (************************************************)
  (*   t129 = { int32#; #{ #{ int32#; int } } }   *)
  (************************************************)
  let r = { a129 = #0l; b129 = #{ a63 = #{ a40 = #1l; b40 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a129 *)
  let actual = r.a129 in
  let expected = #0l in
  mark_test_run 971;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 971 failed";
  (* Paths of depth 1 *)
  (* .b129 *)
  let actual = r.b129 in
  let expected = #{ a63 = #{ a40 = #1l; b40 = 2 } } in
  mark_test_run 972;
  let test = (fun #{ a63 = a631 } #{ a63 = a632 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a631 a632) actual expected in
  if not test then failwithf "test 972 failed";
  (* Paths of depth 2 *)
  (* .b129.#a63 *)
  let actual = r.b129.#a63 in
  let expected = #{ a40 = #1l; b40 = 2 } in
  mark_test_run 973;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 973 failed";
  (* Paths of depth 3 *)
  (* .b129.#a63.#a40 *)
  let actual = r.b129.#a63.#a40 in
  let expected = #1l in
  mark_test_run 974;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 974 failed";
  (* .b129.#a63.#b40 *)
  let actual = r.b129.#a63.#b40 in
  let expected = 2 in
  mark_test_run 975;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 975 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a129 = a1291; b129 = b1291 } { a129 = a1292; b129 = b1292 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1291 a1292 && (fun #{ a63 = a631 } #{ a63 = a632 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a631 a632) b1291 b1292) in
  let next_r = { a129 = #100l; b129 = #{ a63 = #{ a40 = #101l; b40 = 102 } } } in
  let r_expected = { a129 = #0l; b129 = #{ a63 = #{ a40 = #1l; b40 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a129 *)
  r.a129 <- next_r.a129;
  let r_expected = { r_expected with a129 = next_r.a129 } in
  mark_test_run 976;
  let test = eq r r_expected in
  if not test then failwithf "test 976 failed";
  Gc.compact ();
  (* .b129 *)
  r.b129 <- next_r.b129;
  let r_expected = { r_expected with b129 = next_r.b129 } in
  mark_test_run 977;
  let test = eq r r_expected in
  if not test then failwithf "test 977 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a129; b129 = #{ a63 = #{ a40; b40 } } } = r in
  let expected_a129 = #100l in
  mark_test_run 978;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a129 a129 in
  if not test then failwithf "test 978 failed";
  let expected_a40 = #101l in
  mark_test_run 979;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 979 failed";
  let expected_b40 = 102 in
  mark_test_run 980;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 980 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a129; b129 } = r in
  let expected_a129 = #100l in
  mark_test_run 981;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a129 a129 in
  if not test then failwithf "test 981 failed";
  let expected_b129 = #{ a63 = #{ a40 = #101l; b40 = 102 } } in
  mark_test_run 982;
  let test = (fun #{ a63 = a631 } #{ a63 = a632 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a631 a632) expected_b129 b129 in
  if not test then failwithf "test 982 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t130 = { int32#; #{ #{ int32#; int32# } } }   *)
  (***************************************************)
  let r = { a130 = #0l; b130 = #{ a65 = #{ a42 = #1l; b42 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a130 *)
  let actual = r.a130 in
  let expected = #0l in
  mark_test_run 983;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 983 failed";
  (* Paths of depth 1 *)
  (* .b130 *)
  let actual = r.b130 in
  let expected = #{ a65 = #{ a42 = #1l; b42 = #2l } } in
  mark_test_run 984;
  let test = (fun #{ a65 = a651 } #{ a65 = a652 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a651 a652) actual expected in
  if not test then failwithf "test 984 failed";
  (* Paths of depth 2 *)
  (* .b130.#a65 *)
  let actual = r.b130.#a65 in
  let expected = #{ a42 = #1l; b42 = #2l } in
  mark_test_run 985;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 985 failed";
  (* Paths of depth 3 *)
  (* .b130.#a65.#a42 *)
  let actual = r.b130.#a65.#a42 in
  let expected = #1l in
  mark_test_run 986;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 986 failed";
  (* .b130.#a65.#b42 *)
  let actual = r.b130.#a65.#b42 in
  let expected = #2l in
  mark_test_run 987;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 987 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a130 = a1301; b130 = b1301 } { a130 = a1302; b130 = b1302 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1301 a1302 && (fun #{ a65 = a651 } #{ a65 = a652 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a651 a652) b1301 b1302) in
  let next_r = { a130 = #100l; b130 = #{ a65 = #{ a42 = #101l; b42 = #102l } } } in
  let r_expected = { a130 = #0l; b130 = #{ a65 = #{ a42 = #1l; b42 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a130 *)
  r.a130 <- next_r.a130;
  let r_expected = { r_expected with a130 = next_r.a130 } in
  mark_test_run 988;
  let test = eq r r_expected in
  if not test then failwithf "test 988 failed";
  Gc.compact ();
  (* .b130 *)
  r.b130 <- next_r.b130;
  let r_expected = { r_expected with b130 = next_r.b130 } in
  mark_test_run 989;
  let test = eq r r_expected in
  if not test then failwithf "test 989 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a130; b130 = #{ a65 = #{ a42; b42 } } } = r in
  let expected_a130 = #100l in
  mark_test_run 990;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a130 a130 in
  if not test then failwithf "test 990 failed";
  let expected_a42 = #101l in
  mark_test_run 991;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 991 failed";
  let expected_b42 = #102l in
  mark_test_run 992;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 992 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a130; b130 } = r in
  let expected_a130 = #100l in
  mark_test_run 993;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a130 a130 in
  if not test then failwithf "test 993 failed";
  let expected_b130 = #{ a65 = #{ a42 = #101l; b42 = #102l } } in
  mark_test_run 994;
  let test = (fun #{ a65 = a651 } #{ a65 = a652 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a651 a652) expected_b130 b130 in
  if not test then failwithf "test 994 failed";

  ()
;;

let () =
  (*****************************)
  (*   t131 = { nativeint# }   *)
  (*****************************)
  let r = { a131 = #0n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a131 *)
  let actual = r.a131 in
  let expected = #0n in
  mark_test_run 995;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 995 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a131 = a1311 } { a131 = a1312 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1311 a1312) in
  let next_r = { a131 = #100n } in
  let r_expected = { a131 = #0n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a131 *)
  r.a131 <- next_r.a131;
  let r_expected = { r_expected with a131 = next_r.a131 } in
  mark_test_run 996;
  let test = eq r r_expected in
  if not test then failwithf "test 996 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a131 } = r in
  let expected_a131 = #100n in
  mark_test_run 997;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a131 a131 in
  if not test then failwithf "test 997 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a131 } = r in
  let expected_a131 = #100n in
  mark_test_run 998;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a131 a131 in
  if not test then failwithf "test 998 failed";

  ()
;;

let () =
  (**********************************)
  (*   t132 = { nativeint#; int }   *)
  (**********************************)
  let r = { a132 = #0n; b132 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a132 *)
  let actual = r.a132 in
  let expected = #0n in
  mark_test_run 999;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 999 failed";
  (* Paths of depth 1 *)
  (* .b132 *)
  let actual = r.b132 in
  let expected = 1 in
  mark_test_run 1000;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1000 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a132 = a1321; b132 = b1321 } { a132 = a1322; b132 = b1322 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1321 a1322 && (fun a b -> Int.equal a b) b1321 b1322) in
  let next_r = { a132 = #100n; b132 = 101 } in
  let r_expected = { a132 = #0n; b132 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a132 *)
  r.a132 <- next_r.a132;
  let r_expected = { r_expected with a132 = next_r.a132 } in
  mark_test_run 1001;
  let test = eq r r_expected in
  if not test then failwithf "test 1001 failed";
  Gc.compact ();
  (* .b132 *)
  r.b132 <- next_r.b132;
  let r_expected = { r_expected with b132 = next_r.b132 } in
  mark_test_run 1002;
  let test = eq r r_expected in
  if not test then failwithf "test 1002 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a132; b132 } = r in
  let expected_a132 = #100n in
  mark_test_run 1003;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a132 a132 in
  if not test then failwithf "test 1003 failed";
  let expected_b132 = 101 in
  mark_test_run 1004;
  let test = (fun a b -> Int.equal a b) expected_b132 b132 in
  if not test then failwithf "test 1004 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a132; b132 } = r in
  let expected_a132 = #100n in
  mark_test_run 1005;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a132 a132 in
  if not test then failwithf "test 1005 failed";
  let expected_b132 = 101 in
  mark_test_run 1006;
  let test = (fun a b -> Int.equal a b) expected_b132 b132 in
  if not test then failwithf "test 1006 failed";

  ()
;;

let () =
  (************************************)
  (*   t133 = { nativeint#; int64 }   *)
  (************************************)
  let r = { a133 = #0n; b133 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a133 *)
  let actual = r.a133 in
  let expected = #0n in
  mark_test_run 1007;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1007 failed";
  (* Paths of depth 1 *)
  (* .b133 *)
  let actual = r.b133 in
  let expected = 1L in
  mark_test_run 1008;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1008 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a133 = a1331; b133 = b1331 } { a133 = a1332; b133 = b1332 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1331 a1332 && (fun a b -> Int64.equal (globalize a) (globalize b)) b1331 b1332) in
  let next_r = { a133 = #100n; b133 = 101L } in
  let r_expected = { a133 = #0n; b133 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a133 *)
  r.a133 <- next_r.a133;
  let r_expected = { r_expected with a133 = next_r.a133 } in
  mark_test_run 1009;
  let test = eq r r_expected in
  if not test then failwithf "test 1009 failed";
  Gc.compact ();
  (* .b133 *)
  r.b133 <- next_r.b133;
  let r_expected = { r_expected with b133 = next_r.b133 } in
  mark_test_run 1010;
  let test = eq r r_expected in
  if not test then failwithf "test 1010 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a133; b133 } = r in
  let expected_a133 = #100n in
  mark_test_run 1011;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a133 a133 in
  if not test then failwithf "test 1011 failed";
  let expected_b133 = 101L in
  mark_test_run 1012;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b133 b133 in
  if not test then failwithf "test 1012 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a133; b133 } = r in
  let expected_a133 = #100n in
  mark_test_run 1013;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a133 a133 in
  if not test then failwithf "test 1013 failed";
  let expected_b133 = 101L in
  mark_test_run 1014;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b133 b133 in
  if not test then failwithf "test 1014 failed";

  ()
;;

let () =
  (*************************************)
  (*   t134 = { nativeint#; int64# }   *)
  (*************************************)
  let r = { a134 = #0n; b134 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a134 *)
  let actual = r.a134 in
  let expected = #0n in
  mark_test_run 1015;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1015 failed";
  (* Paths of depth 1 *)
  (* .b134 *)
  let actual = r.b134 in
  let expected = #1L in
  mark_test_run 1016;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 1016 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a134 = a1341; b134 = b1341 } { a134 = a1342; b134 = b1342 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1341 a1342 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b1341 b1342) in
  let next_r = { a134 = #100n; b134 = #101L } in
  let r_expected = { a134 = #0n; b134 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a134 *)
  r.a134 <- next_r.a134;
  let r_expected = { r_expected with a134 = next_r.a134 } in
  mark_test_run 1017;
  let test = eq r r_expected in
  if not test then failwithf "test 1017 failed";
  Gc.compact ();
  (* .b134 *)
  r.b134 <- next_r.b134;
  let r_expected = { r_expected with b134 = next_r.b134 } in
  mark_test_run 1018;
  let test = eq r r_expected in
  if not test then failwithf "test 1018 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a134; b134 } = r in
  let expected_a134 = #100n in
  mark_test_run 1019;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a134 a134 in
  if not test then failwithf "test 1019 failed";
  let expected_b134 = #101L in
  mark_test_run 1020;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b134 b134 in
  if not test then failwithf "test 1020 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a134; b134 } = r in
  let expected_a134 = #100n in
  mark_test_run 1021;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a134 a134 in
  if not test then failwithf "test 1021 failed";
  let expected_b134 = #101L in
  mark_test_run 1022;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b134 b134 in
  if not test then failwithf "test 1022 failed";

  ()
;;

let () =
  (*************************************)
  (*   t135 = { nativeint#; int32# }   *)
  (*************************************)
  let r = { a135 = #0n; b135 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a135 *)
  let actual = r.a135 in
  let expected = #0n in
  mark_test_run 1023;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1023 failed";
  (* Paths of depth 1 *)
  (* .b135 *)
  let actual = r.b135 in
  let expected = #1l in
  mark_test_run 1024;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1024 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a135 = a1351; b135 = b1351 } { a135 = a1352; b135 = b1352 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1351 a1352 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1351 b1352) in
  let next_r = { a135 = #100n; b135 = #101l } in
  let r_expected = { a135 = #0n; b135 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a135 *)
  r.a135 <- next_r.a135;
  let r_expected = { r_expected with a135 = next_r.a135 } in
  mark_test_run 1025;
  let test = eq r r_expected in
  if not test then failwithf "test 1025 failed";
  Gc.compact ();
  (* .b135 *)
  r.b135 <- next_r.b135;
  let r_expected = { r_expected with b135 = next_r.b135 } in
  mark_test_run 1026;
  let test = eq r r_expected in
  if not test then failwithf "test 1026 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a135; b135 } = r in
  let expected_a135 = #100n in
  mark_test_run 1027;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a135 a135 in
  if not test then failwithf "test 1027 failed";
  let expected_b135 = #101l in
  mark_test_run 1028;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b135 b135 in
  if not test then failwithf "test 1028 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a135; b135 } = r in
  let expected_a135 = #100n in
  mark_test_run 1029;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a135 a135 in
  if not test then failwithf "test 1029 failed";
  let expected_b135 = #101l in
  mark_test_run 1030;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b135 b135 in
  if not test then failwithf "test 1030 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t136 = { nativeint#; nativeint# }   *)
  (*****************************************)
  let r = { a136 = #0n; b136 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a136 *)
  let actual = r.a136 in
  let expected = #0n in
  mark_test_run 1031;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1031 failed";
  (* Paths of depth 1 *)
  (* .b136 *)
  let actual = r.b136 in
  let expected = #1n in
  mark_test_run 1032;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1032 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a136 = a1361; b136 = b1361 } { a136 = a1362; b136 = b1362 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1361 a1362 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b1361 b1362) in
  let next_r = { a136 = #100n; b136 = #101n } in
  let r_expected = { a136 = #0n; b136 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a136 *)
  r.a136 <- next_r.a136;
  let r_expected = { r_expected with a136 = next_r.a136 } in
  mark_test_run 1033;
  let test = eq r r_expected in
  if not test then failwithf "test 1033 failed";
  Gc.compact ();
  (* .b136 *)
  r.b136 <- next_r.b136;
  let r_expected = { r_expected with b136 = next_r.b136 } in
  mark_test_run 1034;
  let test = eq r r_expected in
  if not test then failwithf "test 1034 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a136; b136 } = r in
  let expected_a136 = #100n in
  mark_test_run 1035;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a136 a136 in
  if not test then failwithf "test 1035 failed";
  let expected_b136 = #101n in
  mark_test_run 1036;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b136 b136 in
  if not test then failwithf "test 1036 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a136; b136 } = r in
  let expected_a136 = #100n in
  mark_test_run 1037;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a136 a136 in
  if not test then failwithf "test 1037 failed";
  let expected_b136 = #101n in
  mark_test_run 1038;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b136 b136 in
  if not test then failwithf "test 1038 failed";

  ()
;;

let () =
  (*************************************)
  (*   t137 = { nativeint#; unit_u }   *)
  (*************************************)
  let r = { a137 = #0n; b137 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a137 *)
  let actual = r.a137 in
  let expected = #0n in
  mark_test_run 1039;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1039 failed";
  (* Paths of depth 1 *)
  (* .b137 *)
  let actual = r.b137 in
  let expected = (unbox_unit ()) in
  mark_test_run 1040;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1040 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a137 = a1371; b137 = b1371 } { a137 = a1372; b137 = b1372 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1371 a1372 && (fun _ _ -> true) b1371 b1372) in
  let next_r = { a137 = #100n; b137 = (unbox_unit ()) } in
  let r_expected = { a137 = #0n; b137 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a137 *)
  r.a137 <- next_r.a137;
  let r_expected = { r_expected with a137 = next_r.a137 } in
  mark_test_run 1041;
  let test = eq r r_expected in
  if not test then failwithf "test 1041 failed";
  Gc.compact ();
  (* .b137 *)
  r.b137 <- next_r.b137;
  let r_expected = { r_expected with b137 = next_r.b137 } in
  mark_test_run 1042;
  let test = eq r r_expected in
  if not test then failwithf "test 1042 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a137; b137 } = r in
  let expected_a137 = #100n in
  mark_test_run 1043;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a137 a137 in
  if not test then failwithf "test 1043 failed";
  let expected_b137 = (unbox_unit ()) in
  mark_test_run 1044;
  let test = (fun _ _ -> true) expected_b137 b137 in
  if not test then failwithf "test 1044 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a137; b137 } = r in
  let expected_a137 = #100n in
  mark_test_run 1045;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a137 a137 in
  if not test then failwithf "test 1045 failed";
  let expected_b137 = (unbox_unit ()) in
  mark_test_run 1046;
  let test = (fun _ _ -> true) expected_b137 b137 in
  if not test then failwithf "test 1046 failed";

  ()
;;

let () =
  (************************************)
  (*   t138 = { nativeint#; float }   *)
  (************************************)
  let r = { a138 = #0n; b138 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a138 *)
  let actual = r.a138 in
  let expected = #0n in
  mark_test_run 1047;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1047 failed";
  (* Paths of depth 1 *)
  (* .b138 *)
  let actual = r.b138 in
  let expected = 1. in
  mark_test_run 1048;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1048 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a138 = a1381; b138 = b1381 } { a138 = a1382; b138 = b1382 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1381 a1382 && (fun a b -> Float.equal (globalize a) (globalize b)) b1381 b1382) in
  let next_r = { a138 = #100n; b138 = 101. } in
  let r_expected = { a138 = #0n; b138 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a138 *)
  r.a138 <- next_r.a138;
  let r_expected = { r_expected with a138 = next_r.a138 } in
  mark_test_run 1049;
  let test = eq r r_expected in
  if not test then failwithf "test 1049 failed";
  Gc.compact ();
  (* .b138 *)
  r.b138 <- next_r.b138;
  let r_expected = { r_expected with b138 = next_r.b138 } in
  mark_test_run 1050;
  let test = eq r r_expected in
  if not test then failwithf "test 1050 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a138; b138 } = r in
  let expected_a138 = #100n in
  mark_test_run 1051;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a138 a138 in
  if not test then failwithf "test 1051 failed";
  let expected_b138 = 101. in
  mark_test_run 1052;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b138 b138 in
  if not test then failwithf "test 1052 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a138; b138 } = r in
  let expected_a138 = #100n in
  mark_test_run 1053;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a138 a138 in
  if not test then failwithf "test 1053 failed";
  let expected_b138 = 101. in
  mark_test_run 1054;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b138 b138 in
  if not test then failwithf "test 1054 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t139 = { nativeint#; (| unit_u) }   *)
  (*****************************************)
  let r = { a139 = #0n; b139 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a139 *)
  let actual = r.a139 in
  let expected = #0n in
  mark_test_run 1055;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1055 failed";
  (* Paths of depth 1 *)
  (* .b139 *)
  let actual = r.b139 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 1056;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 1056 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a139 = a1391; b139 = b1391 } { a139 = a1392; b139 = b1392 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1391 a1392 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b1391 b1392) in
  let next_r = { a139 = #100n; b139 = C15_0((unbox_unit ())) } in
  let r_expected = { a139 = #0n; b139 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a139 *)
  r.a139 <- next_r.a139;
  let r_expected = { r_expected with a139 = next_r.a139 } in
  mark_test_run 1057;
  let test = eq r r_expected in
  if not test then failwithf "test 1057 failed";
  Gc.compact ();
  (* .b139 *)
  r.b139 <- next_r.b139;
  let r_expected = { r_expected with b139 = next_r.b139 } in
  mark_test_run 1058;
  let test = eq r r_expected in
  if not test then failwithf "test 1058 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a139; b139 } = r in
  let expected_a139 = #100n in
  mark_test_run 1059;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a139 a139 in
  if not test then failwithf "test 1059 failed";
  let expected_b139 = C15_0((unbox_unit ())) in
  mark_test_run 1060;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b139 b139 in
  if not test then failwithf "test 1060 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a139; b139 } = r in
  let expected_a139 = #100n in
  mark_test_run 1061;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a139 a139 in
  if not test then failwithf "test 1061 failed";
  let expected_b139 = C15_0((unbox_unit ())) in
  mark_test_run 1062;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b139 b139 in
  if not test then failwithf "test 1062 failed";

  ()
;;

let () =
  (*******************************************************************************)
  (*   t140 = { nativeint#; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (*******************************************************************************)
  let r = { a140 = #0n; b140 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a140 *)
  let actual = r.a140 in
  let expected = #0n in
  mark_test_run 1063;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1063 failed";
  (* Paths of depth 1 *)
  (* .b140 *)
  let actual = r.b140 in
  let expected = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 1064;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 1064 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a140 = a1401; b140 = b1401 } { a140 = a1402; b140 = b1402 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1401 a1402 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b1401 b1402) in
  let next_r = { a140 = #100n; b140 = C17_2(#((unbox_unit ()), (unbox_unit ()))) } in
  let r_expected = { a140 = #0n; b140 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a140 *)
  r.a140 <- next_r.a140;
  let r_expected = { r_expected with a140 = next_r.a140 } in
  mark_test_run 1065;
  let test = eq r r_expected in
  if not test then failwithf "test 1065 failed";
  Gc.compact ();
  (* .b140 *)
  r.b140 <- next_r.b140;
  let r_expected = { r_expected with b140 = next_r.b140 } in
  mark_test_run 1066;
  let test = eq r r_expected in
  if not test then failwithf "test 1066 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a140; b140 } = r in
  let expected_a140 = #100n in
  mark_test_run 1067;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a140 a140 in
  if not test then failwithf "test 1067 failed";
  let expected_b140 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 1068;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b140 b140 in
  if not test then failwithf "test 1068 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a140; b140 } = r in
  let expected_a140 = #100n in
  mark_test_run 1069;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a140 a140 in
  if not test then failwithf "test 1069 failed";
  let expected_b140 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 1070;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b140 b140 in
  if not test then failwithf "test 1070 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t141 = { nativeint#; #(unit_u, int) }   *)
  (*********************************************)
  let r = { a141 = #0n; b141 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a141 *)
  let actual = r.a141 in
  let expected = #0n in
  mark_test_run 1071;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1071 failed";
  (* Paths of depth 1 *)
  (* .b141 *)
  let actual = r.b141 in
  let expected = #((unbox_unit ()), 1) in
  mark_test_run 1072;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 1072 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a141 = a1411; b141 = b1411 } { a141 = a1412; b141 = b1412 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1411 a1412 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b1411 b1412) in
  let next_r = { a141 = #100n; b141 = #((unbox_unit ()), 101) } in
  let r_expected = { a141 = #0n; b141 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a141 *)
  r.a141 <- next_r.a141;
  let r_expected = { r_expected with a141 = next_r.a141 } in
  mark_test_run 1073;
  let test = eq r r_expected in
  if not test then failwithf "test 1073 failed";
  Gc.compact ();
  (* .b141 *)
  r.b141 <- next_r.b141;
  let r_expected = { r_expected with b141 = next_r.b141 } in
  mark_test_run 1074;
  let test = eq r r_expected in
  if not test then failwithf "test 1074 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a141; b141 } = r in
  let expected_a141 = #100n in
  mark_test_run 1075;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a141 a141 in
  if not test then failwithf "test 1075 failed";
  let expected_b141 = #((unbox_unit ()), 101) in
  mark_test_run 1076;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b141 b141 in
  if not test then failwithf "test 1076 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a141; b141 } = r in
  let expected_a141 = #100n in
  mark_test_run 1077;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a141 a141 in
  if not test then failwithf "test 1077 failed";
  let expected_b141 = #((unbox_unit ()), 101) in
  mark_test_run 1078;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b141 b141 in
  if not test then failwithf "test 1078 failed";

  ()
;;

let () =
  (************************************************)
  (*   t142 = { nativeint#; #(unit_u, int64#) }   *)
  (************************************************)
  let r = { a142 = #0n; b142 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a142 *)
  let actual = r.a142 in
  let expected = #0n in
  mark_test_run 1079;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1079 failed";
  (* Paths of depth 1 *)
  (* .b142 *)
  let actual = r.b142 in
  let expected = #((unbox_unit ()), #1L) in
  mark_test_run 1080;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 1080 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a142 = a1421; b142 = b1421 } { a142 = a1422; b142 = b1422 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1421 a1422 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b1421 b1422) in
  let next_r = { a142 = #100n; b142 = #((unbox_unit ()), #101L) } in
  let r_expected = { a142 = #0n; b142 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a142 *)
  r.a142 <- next_r.a142;
  let r_expected = { r_expected with a142 = next_r.a142 } in
  mark_test_run 1081;
  let test = eq r r_expected in
  if not test then failwithf "test 1081 failed";
  Gc.compact ();
  (* .b142 *)
  r.b142 <- next_r.b142;
  let r_expected = { r_expected with b142 = next_r.b142 } in
  mark_test_run 1082;
  let test = eq r r_expected in
  if not test then failwithf "test 1082 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a142; b142 } = r in
  let expected_a142 = #100n in
  mark_test_run 1083;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a142 a142 in
  if not test then failwithf "test 1083 failed";
  let expected_b142 = #((unbox_unit ()), #101L) in
  mark_test_run 1084;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b142 b142 in
  if not test then failwithf "test 1084 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a142; b142 } = r in
  let expected_a142 = #100n in
  mark_test_run 1085;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a142 a142 in
  if not test then failwithf "test 1085 failed";
  let expected_b142 = #((unbox_unit ()), #101L) in
  mark_test_run 1086;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b142 b142 in
  if not test then failwithf "test 1086 failed";

  ()
;;

let () =
  (************************************************)
  (*   t143 = { nativeint#; #(unit_u, unit_u) }   *)
  (************************************************)
  let r = { a143 = #0n; b143 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a143 *)
  let actual = r.a143 in
  let expected = #0n in
  mark_test_run 1087;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1087 failed";
  (* Paths of depth 1 *)
  (* .b143 *)
  let actual = r.b143 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 1088;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 1088 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a143 = a1431; b143 = b1431 } { a143 = a1432; b143 = b1432 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1431 a1432 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b1431 b1432) in
  let next_r = { a143 = #100n; b143 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a143 = #0n; b143 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a143 *)
  r.a143 <- next_r.a143;
  let r_expected = { r_expected with a143 = next_r.a143 } in
  mark_test_run 1089;
  let test = eq r r_expected in
  if not test then failwithf "test 1089 failed";
  Gc.compact ();
  (* .b143 *)
  r.b143 <- next_r.b143;
  let r_expected = { r_expected with b143 = next_r.b143 } in
  mark_test_run 1090;
  let test = eq r r_expected in
  if not test then failwithf "test 1090 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a143; b143 } = r in
  let expected_a143 = #100n in
  mark_test_run 1091;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a143 a143 in
  if not test then failwithf "test 1091 failed";
  let expected_b143 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 1092;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b143 b143 in
  if not test then failwithf "test 1092 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a143; b143 } = r in
  let expected_a143 = #100n in
  mark_test_run 1093;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a143 a143 in
  if not test then failwithf "test 1093 failed";
  let expected_b143 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 1094;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b143 b143 in
  if not test then failwithf "test 1094 failed";

  ()
;;

let () =
  (************************************************)
  (*   t144 = { nativeint#; #(unit_u, string) }   *)
  (************************************************)
  let r = { a144 = #0n; b144 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a144 *)
  let actual = r.a144 in
  let expected = #0n in
  mark_test_run 1095;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1095 failed";
  (* Paths of depth 1 *)
  (* .b144 *)
  let actual = r.b144 in
  let expected = #((unbox_unit ()), "1") in
  mark_test_run 1096;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 1096 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a144 = a1441; b144 = b1441 } { a144 = a1442; b144 = b1442 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1441 a1442 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b1441 b1442) in
  let next_r = { a144 = #100n; b144 = #((unbox_unit ()), "101") } in
  let r_expected = { a144 = #0n; b144 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a144 *)
  r.a144 <- next_r.a144;
  let r_expected = { r_expected with a144 = next_r.a144 } in
  mark_test_run 1097;
  let test = eq r r_expected in
  if not test then failwithf "test 1097 failed";
  Gc.compact ();
  (* .b144 *)
  r.b144 <- next_r.b144;
  let r_expected = { r_expected with b144 = next_r.b144 } in
  mark_test_run 1098;
  let test = eq r r_expected in
  if not test then failwithf "test 1098 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a144; b144 } = r in
  let expected_a144 = #100n in
  mark_test_run 1099;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a144 a144 in
  if not test then failwithf "test 1099 failed";
  let expected_b144 = #((unbox_unit ()), "101") in
  mark_test_run 1100;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b144 b144 in
  if not test then failwithf "test 1100 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a144; b144 } = r in
  let expected_a144 = #100n in
  mark_test_run 1101;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a144 a144 in
  if not test then failwithf "test 1101 failed";
  let expected_b144 = #((unbox_unit ()), "101") in
  mark_test_run 1102;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b144 b144 in
  if not test then failwithf "test 1102 failed";

  ()
;;

let () =
  (******************************)
  (*   t145 = { unit_u; int }   *)
  (******************************)
  let r = { a145 = (unbox_unit ()); b145 = 0 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a145 *)
  let actual = r.a145 in
  let expected = (unbox_unit ()) in
  mark_test_run 1103;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1103 failed";
  (* Paths of depth 1 *)
  (* .b145 *)
  let actual = r.b145 in
  let expected = 0 in
  mark_test_run 1104;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1104 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a145 = a1451; b145 = b1451 } { a145 = a1452; b145 = b1452 } -> (fun _ _ -> true) a1451 a1452 && (fun a b -> Int.equal a b) b1451 b1452) in
  let next_r = { a145 = (unbox_unit ()); b145 = 100 } in
  let r_expected = { a145 = (unbox_unit ()); b145 = 0 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a145 *)
  r.a145 <- next_r.a145;
  let r_expected = { r_expected with a145 = next_r.a145 } in
  mark_test_run 1105;
  let test = eq r r_expected in
  if not test then failwithf "test 1105 failed";
  Gc.compact ();
  (* .b145 *)
  r.b145 <- next_r.b145;
  let r_expected = { r_expected with b145 = next_r.b145 } in
  mark_test_run 1106;
  let test = eq r r_expected in
  if not test then failwithf "test 1106 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a145; b145 } = r in
  let expected_a145 = (unbox_unit ()) in
  mark_test_run 1107;
  let test = (fun _ _ -> true) expected_a145 a145 in
  if not test then failwithf "test 1107 failed";
  let expected_b145 = 100 in
  mark_test_run 1108;
  let test = (fun a b -> Int.equal a b) expected_b145 b145 in
  if not test then failwithf "test 1108 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a145; b145 } = r in
  let expected_a145 = (unbox_unit ()) in
  mark_test_run 1109;
  let test = (fun _ _ -> true) expected_a145 a145 in
  if not test then failwithf "test 1109 failed";
  let expected_b145 = 100 in
  mark_test_run 1110;
  let test = (fun a b -> Int.equal a b) expected_b145 b145 in
  if not test then failwithf "test 1110 failed";

  ()
;;

let () =
  (********************************)
  (*   t146 = { unit_u; int64 }   *)
  (********************************)
  let r = { a146 = (unbox_unit ()); b146 = 0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a146 *)
  let actual = r.a146 in
  let expected = (unbox_unit ()) in
  mark_test_run 1111;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1111 failed";
  (* Paths of depth 1 *)
  (* .b146 *)
  let actual = r.b146 in
  let expected = 0L in
  mark_test_run 1112;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1112 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a146 = a1461; b146 = b1461 } { a146 = a1462; b146 = b1462 } -> (fun _ _ -> true) a1461 a1462 && (fun a b -> Int64.equal (globalize a) (globalize b)) b1461 b1462) in
  let next_r = { a146 = (unbox_unit ()); b146 = 100L } in
  let r_expected = { a146 = (unbox_unit ()); b146 = 0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a146 *)
  r.a146 <- next_r.a146;
  let r_expected = { r_expected with a146 = next_r.a146 } in
  mark_test_run 1113;
  let test = eq r r_expected in
  if not test then failwithf "test 1113 failed";
  Gc.compact ();
  (* .b146 *)
  r.b146 <- next_r.b146;
  let r_expected = { r_expected with b146 = next_r.b146 } in
  mark_test_run 1114;
  let test = eq r r_expected in
  if not test then failwithf "test 1114 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a146; b146 } = r in
  let expected_a146 = (unbox_unit ()) in
  mark_test_run 1115;
  let test = (fun _ _ -> true) expected_a146 a146 in
  if not test then failwithf "test 1115 failed";
  let expected_b146 = 100L in
  mark_test_run 1116;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b146 b146 in
  if not test then failwithf "test 1116 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a146; b146 } = r in
  let expected_a146 = (unbox_unit ()) in
  mark_test_run 1117;
  let test = (fun _ _ -> true) expected_a146 a146 in
  if not test then failwithf "test 1117 failed";
  let expected_b146 = 100L in
  mark_test_run 1118;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b146 b146 in
  if not test then failwithf "test 1118 failed";

  ()
;;

let () =
  (*********************************)
  (*   t147 = { unit_u; int64# }   *)
  (*********************************)
  let r = { a147 = (unbox_unit ()); b147 = #0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a147 *)
  let actual = r.a147 in
  let expected = (unbox_unit ()) in
  mark_test_run 1119;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1119 failed";
  (* Paths of depth 1 *)
  (* .b147 *)
  let actual = r.b147 in
  let expected = #0L in
  mark_test_run 1120;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 1120 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a147 = a1471; b147 = b1471 } { a147 = a1472; b147 = b1472 } -> (fun _ _ -> true) a1471 a1472 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b1471 b1472) in
  let next_r = { a147 = (unbox_unit ()); b147 = #100L } in
  let r_expected = { a147 = (unbox_unit ()); b147 = #0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a147 *)
  r.a147 <- next_r.a147;
  let r_expected = { r_expected with a147 = next_r.a147 } in
  mark_test_run 1121;
  let test = eq r r_expected in
  if not test then failwithf "test 1121 failed";
  Gc.compact ();
  (* .b147 *)
  r.b147 <- next_r.b147;
  let r_expected = { r_expected with b147 = next_r.b147 } in
  mark_test_run 1122;
  let test = eq r r_expected in
  if not test then failwithf "test 1122 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a147; b147 } = r in
  let expected_a147 = (unbox_unit ()) in
  mark_test_run 1123;
  let test = (fun _ _ -> true) expected_a147 a147 in
  if not test then failwithf "test 1123 failed";
  let expected_b147 = #100L in
  mark_test_run 1124;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b147 b147 in
  if not test then failwithf "test 1124 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a147; b147 } = r in
  let expected_a147 = (unbox_unit ()) in
  mark_test_run 1125;
  let test = (fun _ _ -> true) expected_a147 a147 in
  if not test then failwithf "test 1125 failed";
  let expected_b147 = #100L in
  mark_test_run 1126;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b147 b147 in
  if not test then failwithf "test 1126 failed";

  ()
;;

let () =
  (*********************************)
  (*   t148 = { unit_u; int32# }   *)
  (*********************************)
  let r = { a148 = (unbox_unit ()); b148 = #0l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a148 *)
  let actual = r.a148 in
  let expected = (unbox_unit ()) in
  mark_test_run 1127;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1127 failed";
  (* Paths of depth 1 *)
  (* .b148 *)
  let actual = r.b148 in
  let expected = #0l in
  mark_test_run 1128;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1128 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a148 = a1481; b148 = b1481 } { a148 = a1482; b148 = b1482 } -> (fun _ _ -> true) a1481 a1482 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1481 b1482) in
  let next_r = { a148 = (unbox_unit ()); b148 = #100l } in
  let r_expected = { a148 = (unbox_unit ()); b148 = #0l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a148 *)
  r.a148 <- next_r.a148;
  let r_expected = { r_expected with a148 = next_r.a148 } in
  mark_test_run 1129;
  let test = eq r r_expected in
  if not test then failwithf "test 1129 failed";
  Gc.compact ();
  (* .b148 *)
  r.b148 <- next_r.b148;
  let r_expected = { r_expected with b148 = next_r.b148 } in
  mark_test_run 1130;
  let test = eq r r_expected in
  if not test then failwithf "test 1130 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a148; b148 } = r in
  let expected_a148 = (unbox_unit ()) in
  mark_test_run 1131;
  let test = (fun _ _ -> true) expected_a148 a148 in
  if not test then failwithf "test 1131 failed";
  let expected_b148 = #100l in
  mark_test_run 1132;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b148 b148 in
  if not test then failwithf "test 1132 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a148; b148 } = r in
  let expected_a148 = (unbox_unit ()) in
  mark_test_run 1133;
  let test = (fun _ _ -> true) expected_a148 a148 in
  if not test then failwithf "test 1133 failed";
  let expected_b148 = #100l in
  mark_test_run 1134;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b148 b148 in
  if not test then failwithf "test 1134 failed";

  ()
;;

let () =
  (*************************************)
  (*   t149 = { unit_u; nativeint# }   *)
  (*************************************)
  let r = { a149 = (unbox_unit ()); b149 = #0n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a149 *)
  let actual = r.a149 in
  let expected = (unbox_unit ()) in
  mark_test_run 1135;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1135 failed";
  (* Paths of depth 1 *)
  (* .b149 *)
  let actual = r.b149 in
  let expected = #0n in
  mark_test_run 1136;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1136 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a149 = a1491; b149 = b1491 } { a149 = a1492; b149 = b1492 } -> (fun _ _ -> true) a1491 a1492 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b1491 b1492) in
  let next_r = { a149 = (unbox_unit ()); b149 = #100n } in
  let r_expected = { a149 = (unbox_unit ()); b149 = #0n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a149 *)
  r.a149 <- next_r.a149;
  let r_expected = { r_expected with a149 = next_r.a149 } in
  mark_test_run 1137;
  let test = eq r r_expected in
  if not test then failwithf "test 1137 failed";
  Gc.compact ();
  (* .b149 *)
  r.b149 <- next_r.b149;
  let r_expected = { r_expected with b149 = next_r.b149 } in
  mark_test_run 1138;
  let test = eq r r_expected in
  if not test then failwithf "test 1138 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a149; b149 } = r in
  let expected_a149 = (unbox_unit ()) in
  mark_test_run 1139;
  let test = (fun _ _ -> true) expected_a149 a149 in
  if not test then failwithf "test 1139 failed";
  let expected_b149 = #100n in
  mark_test_run 1140;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b149 b149 in
  if not test then failwithf "test 1140 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a149; b149 } = r in
  let expected_a149 = (unbox_unit ()) in
  mark_test_run 1141;
  let test = (fun _ _ -> true) expected_a149 a149 in
  if not test then failwithf "test 1141 failed";
  let expected_b149 = #100n in
  mark_test_run 1142;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b149 b149 in
  if not test then failwithf "test 1142 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t150 = { unit_u; unit_u; string }   *)
  (*****************************************)
  let r = { a150 = (unbox_unit ()); b150 = (unbox_unit ()); c150 = "0" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a150 *)
  let actual = r.a150 in
  let expected = (unbox_unit ()) in
  mark_test_run 1143;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1143 failed";
  (* Paths of depth 1 *)
  (* .b150 *)
  let actual = r.b150 in
  let expected = (unbox_unit ()) in
  mark_test_run 1144;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1144 failed";
  (* Paths of depth 1 *)
  (* .c150 *)
  let actual = r.c150 in
  let expected = "0" in
  mark_test_run 1145;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1145 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a150 = a1501; b150 = b1501; c150 = c1501 } { a150 = a1502; b150 = b1502; c150 = c1502 } -> (fun _ _ -> true) a1501 a1502 && (fun _ _ -> true) b1501 b1502 && (fun a b -> String.equal (globalize a) (globalize b)) c1501 c1502) in
  let next_r = { a150 = (unbox_unit ()); b150 = (unbox_unit ()); c150 = "100" } in
  let r_expected = { a150 = (unbox_unit ()); b150 = (unbox_unit ()); c150 = "0" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a150 *)
  r.a150 <- next_r.a150;
  let r_expected = { r_expected with a150 = next_r.a150 } in
  mark_test_run 1146;
  let test = eq r r_expected in
  if not test then failwithf "test 1146 failed";
  Gc.compact ();
  (* .b150 *)
  r.b150 <- next_r.b150;
  let r_expected = { r_expected with b150 = next_r.b150 } in
  mark_test_run 1147;
  let test = eq r r_expected in
  if not test then failwithf "test 1147 failed";
  Gc.compact ();
  (* .c150 *)
  r.c150 <- next_r.c150;
  let r_expected = { r_expected with c150 = next_r.c150 } in
  mark_test_run 1148;
  let test = eq r r_expected in
  if not test then failwithf "test 1148 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a150; b150; c150 } = r in
  let expected_a150 = (unbox_unit ()) in
  mark_test_run 1149;
  let test = (fun _ _ -> true) expected_a150 a150 in
  if not test then failwithf "test 1149 failed";
  let expected_b150 = (unbox_unit ()) in
  mark_test_run 1150;
  let test = (fun _ _ -> true) expected_b150 b150 in
  if not test then failwithf "test 1150 failed";
  let expected_c150 = "100" in
  mark_test_run 1151;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c150 c150 in
  if not test then failwithf "test 1151 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a150; b150; c150 } = r in
  let expected_a150 = (unbox_unit ()) in
  mark_test_run 1152;
  let test = (fun _ _ -> true) expected_a150 a150 in
  if not test then failwithf "test 1152 failed";
  let expected_b150 = (unbox_unit ()) in
  mark_test_run 1153;
  let test = (fun _ _ -> true) expected_b150 b150 in
  if not test then failwithf "test 1153 failed";
  let expected_c150 = "100" in
  mark_test_run 1154;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c150 c150 in
  if not test then failwithf "test 1154 failed";

  ()
;;

let () =
  (********************************)
  (*   t151 = { unit_u; float }   *)
  (********************************)
  let r = { a151 = (unbox_unit ()); b151 = 0. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a151 *)
  let actual = r.a151 in
  let expected = (unbox_unit ()) in
  mark_test_run 1155;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1155 failed";
  (* Paths of depth 1 *)
  (* .b151 *)
  let actual = r.b151 in
  let expected = 0. in
  mark_test_run 1156;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1156 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a151 = a1511; b151 = b1511 } { a151 = a1512; b151 = b1512 } -> (fun _ _ -> true) a1511 a1512 && (fun a b -> Float.equal (globalize a) (globalize b)) b1511 b1512) in
  let next_r = { a151 = (unbox_unit ()); b151 = 100. } in
  let r_expected = { a151 = (unbox_unit ()); b151 = 0. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a151 *)
  r.a151 <- next_r.a151;
  let r_expected = { r_expected with a151 = next_r.a151 } in
  mark_test_run 1157;
  let test = eq r r_expected in
  if not test then failwithf "test 1157 failed";
  Gc.compact ();
  (* .b151 *)
  r.b151 <- next_r.b151;
  let r_expected = { r_expected with b151 = next_r.b151 } in
  mark_test_run 1158;
  let test = eq r r_expected in
  if not test then failwithf "test 1158 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a151; b151 } = r in
  let expected_a151 = (unbox_unit ()) in
  mark_test_run 1159;
  let test = (fun _ _ -> true) expected_a151 a151 in
  if not test then failwithf "test 1159 failed";
  let expected_b151 = 100. in
  mark_test_run 1160;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b151 b151 in
  if not test then failwithf "test 1160 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a151; b151 } = r in
  let expected_a151 = (unbox_unit ()) in
  mark_test_run 1161;
  let test = (fun _ _ -> true) expected_a151 a151 in
  if not test then failwithf "test 1161 failed";
  let expected_b151 = 100. in
  mark_test_run 1162;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b151 b151 in
  if not test then failwithf "test 1162 failed";

  ()
;;

let () =
  (*********************************)
  (*   t152 = { unit_u; string }   *)
  (*********************************)
  let r = { a152 = (unbox_unit ()); b152 = "0" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a152 *)
  let actual = r.a152 in
  let expected = (unbox_unit ()) in
  mark_test_run 1163;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1163 failed";
  (* Paths of depth 1 *)
  (* .b152 *)
  let actual = r.b152 in
  let expected = "0" in
  mark_test_run 1164;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1164 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a152 = a1521; b152 = b1521 } { a152 = a1522; b152 = b1522 } -> (fun _ _ -> true) a1521 a1522 && (fun a b -> String.equal (globalize a) (globalize b)) b1521 b1522) in
  let next_r = { a152 = (unbox_unit ()); b152 = "100" } in
  let r_expected = { a152 = (unbox_unit ()); b152 = "0" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a152 *)
  r.a152 <- next_r.a152;
  let r_expected = { r_expected with a152 = next_r.a152 } in
  mark_test_run 1165;
  let test = eq r r_expected in
  if not test then failwithf "test 1165 failed";
  Gc.compact ();
  (* .b152 *)
  r.b152 <- next_r.b152;
  let r_expected = { r_expected with b152 = next_r.b152 } in
  mark_test_run 1166;
  let test = eq r r_expected in
  if not test then failwithf "test 1166 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a152; b152 } = r in
  let expected_a152 = (unbox_unit ()) in
  mark_test_run 1167;
  let test = (fun _ _ -> true) expected_a152 a152 in
  if not test then failwithf "test 1167 failed";
  let expected_b152 = "100" in
  mark_test_run 1168;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b152 b152 in
  if not test then failwithf "test 1168 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a152; b152 } = r in
  let expected_a152 = (unbox_unit ()) in
  mark_test_run 1169;
  let test = (fun _ _ -> true) expected_a152 a152 in
  if not test then failwithf "test 1169 failed";
  let expected_b152 = "100" in
  mark_test_run 1170;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b152 b152 in
  if not test then failwithf "test 1170 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t153 = { unit_u; string; unit_u }   *)
  (*****************************************)
  let r = { a153 = (unbox_unit ()); b153 = "0"; c153 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a153 *)
  let actual = r.a153 in
  let expected = (unbox_unit ()) in
  mark_test_run 1171;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1171 failed";
  (* Paths of depth 1 *)
  (* .b153 *)
  let actual = r.b153 in
  let expected = "0" in
  mark_test_run 1172;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1172 failed";
  (* Paths of depth 1 *)
  (* .c153 *)
  let actual = r.c153 in
  let expected = (unbox_unit ()) in
  mark_test_run 1173;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1173 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a153 = a1531; b153 = b1531; c153 = c1531 } { a153 = a1532; b153 = b1532; c153 = c1532 } -> (fun _ _ -> true) a1531 a1532 && (fun a b -> String.equal (globalize a) (globalize b)) b1531 b1532 && (fun _ _ -> true) c1531 c1532) in
  let next_r = { a153 = (unbox_unit ()); b153 = "100"; c153 = (unbox_unit ()) } in
  let r_expected = { a153 = (unbox_unit ()); b153 = "0"; c153 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a153 *)
  r.a153 <- next_r.a153;
  let r_expected = { r_expected with a153 = next_r.a153 } in
  mark_test_run 1174;
  let test = eq r r_expected in
  if not test then failwithf "test 1174 failed";
  Gc.compact ();
  (* .b153 *)
  r.b153 <- next_r.b153;
  let r_expected = { r_expected with b153 = next_r.b153 } in
  mark_test_run 1175;
  let test = eq r r_expected in
  if not test then failwithf "test 1175 failed";
  Gc.compact ();
  (* .c153 *)
  r.c153 <- next_r.c153;
  let r_expected = { r_expected with c153 = next_r.c153 } in
  mark_test_run 1176;
  let test = eq r r_expected in
  if not test then failwithf "test 1176 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a153; b153; c153 } = r in
  let expected_a153 = (unbox_unit ()) in
  mark_test_run 1177;
  let test = (fun _ _ -> true) expected_a153 a153 in
  if not test then failwithf "test 1177 failed";
  let expected_b153 = "100" in
  mark_test_run 1178;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b153 b153 in
  if not test then failwithf "test 1178 failed";
  let expected_c153 = (unbox_unit ()) in
  mark_test_run 1179;
  let test = (fun _ _ -> true) expected_c153 c153 in
  if not test then failwithf "test 1179 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a153; b153; c153 } = r in
  let expected_a153 = (unbox_unit ()) in
  mark_test_run 1180;
  let test = (fun _ _ -> true) expected_a153 a153 in
  if not test then failwithf "test 1180 failed";
  let expected_b153 = "100" in
  mark_test_run 1181;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b153 b153 in
  if not test then failwithf "test 1181 failed";
  let expected_c153 = (unbox_unit ()) in
  mark_test_run 1182;
  let test = (fun _ _ -> true) expected_c153 c153 in
  if not test then failwithf "test 1182 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t154 = { unit_u; string; string }   *)
  (*****************************************)
  let r = { a154 = (unbox_unit ()); b154 = "0"; c154 = "1" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a154 *)
  let actual = r.a154 in
  let expected = (unbox_unit ()) in
  mark_test_run 1183;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1183 failed";
  (* Paths of depth 1 *)
  (* .b154 *)
  let actual = r.b154 in
  let expected = "0" in
  mark_test_run 1184;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1184 failed";
  (* Paths of depth 1 *)
  (* .c154 *)
  let actual = r.c154 in
  let expected = "1" in
  mark_test_run 1185;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1185 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a154 = a1541; b154 = b1541; c154 = c1541 } { a154 = a1542; b154 = b1542; c154 = c1542 } -> (fun _ _ -> true) a1541 a1542 && (fun a b -> String.equal (globalize a) (globalize b)) b1541 b1542 && (fun a b -> String.equal (globalize a) (globalize b)) c1541 c1542) in
  let next_r = { a154 = (unbox_unit ()); b154 = "100"; c154 = "101" } in
  let r_expected = { a154 = (unbox_unit ()); b154 = "0"; c154 = "1" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a154 *)
  r.a154 <- next_r.a154;
  let r_expected = { r_expected with a154 = next_r.a154 } in
  mark_test_run 1186;
  let test = eq r r_expected in
  if not test then failwithf "test 1186 failed";
  Gc.compact ();
  (* .b154 *)
  r.b154 <- next_r.b154;
  let r_expected = { r_expected with b154 = next_r.b154 } in
  mark_test_run 1187;
  let test = eq r r_expected in
  if not test then failwithf "test 1187 failed";
  Gc.compact ();
  (* .c154 *)
  r.c154 <- next_r.c154;
  let r_expected = { r_expected with c154 = next_r.c154 } in
  mark_test_run 1188;
  let test = eq r r_expected in
  if not test then failwithf "test 1188 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a154; b154; c154 } = r in
  let expected_a154 = (unbox_unit ()) in
  mark_test_run 1189;
  let test = (fun _ _ -> true) expected_a154 a154 in
  if not test then failwithf "test 1189 failed";
  let expected_b154 = "100" in
  mark_test_run 1190;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b154 b154 in
  if not test then failwithf "test 1190 failed";
  let expected_c154 = "101" in
  mark_test_run 1191;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c154 c154 in
  if not test then failwithf "test 1191 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a154; b154; c154 } = r in
  let expected_a154 = (unbox_unit ()) in
  mark_test_run 1192;
  let test = (fun _ _ -> true) expected_a154 a154 in
  if not test then failwithf "test 1192 failed";
  let expected_b154 = "100" in
  mark_test_run 1193;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b154 b154 in
  if not test then failwithf "test 1193 failed";
  let expected_c154 = "101" in
  mark_test_run 1194;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c154 c154 in
  if not test then failwithf "test 1194 failed";

  ()
;;

let () =
  (*************************************)
  (*   t155 = { unit_u; (| unit_u) }   *)
  (*************************************)
  let r = { a155 = (unbox_unit ()); b155 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a155 *)
  let actual = r.a155 in
  let expected = (unbox_unit ()) in
  mark_test_run 1195;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1195 failed";
  (* Paths of depth 1 *)
  (* .b155 *)
  let actual = r.b155 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 1196;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 1196 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a155 = a1551; b155 = b1551 } { a155 = a1552; b155 = b1552 } -> (fun _ _ -> true) a1551 a1552 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b1551 b1552) in
  let next_r = { a155 = (unbox_unit ()); b155 = C15_0((unbox_unit ())) } in
  let r_expected = { a155 = (unbox_unit ()); b155 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a155 *)
  r.a155 <- next_r.a155;
  let r_expected = { r_expected with a155 = next_r.a155 } in
  mark_test_run 1197;
  let test = eq r r_expected in
  if not test then failwithf "test 1197 failed";
  Gc.compact ();
  (* .b155 *)
  r.b155 <- next_r.b155;
  let r_expected = { r_expected with b155 = next_r.b155 } in
  mark_test_run 1198;
  let test = eq r r_expected in
  if not test then failwithf "test 1198 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a155; b155 } = r in
  let expected_a155 = (unbox_unit ()) in
  mark_test_run 1199;
  let test = (fun _ _ -> true) expected_a155 a155 in
  if not test then failwithf "test 1199 failed";
  let expected_b155 = C15_0((unbox_unit ())) in
  mark_test_run 1200;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b155 b155 in
  if not test then failwithf "test 1200 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a155; b155 } = r in
  let expected_a155 = (unbox_unit ()) in
  mark_test_run 1201;
  let test = (fun _ _ -> true) expected_a155 a155 in
  if not test then failwithf "test 1201 failed";
  let expected_b155 = C15_0((unbox_unit ())) in
  mark_test_run 1202;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b155 b155 in
  if not test then failwithf "test 1202 failed";

  ()
;;

let () =
  (***************************************************************************)
  (*   t156 = { unit_u; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (***************************************************************************)
  let r = { a156 = (unbox_unit ()); b156 = C17_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a156 *)
  let actual = r.a156 in
  let expected = (unbox_unit ()) in
  mark_test_run 1203;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1203 failed";
  (* Paths of depth 1 *)
  (* .b156 *)
  let actual = r.b156 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 1204;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 1204 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a156 = a1561; b156 = b1561 } { a156 = a1562; b156 = b1562 } -> (fun _ _ -> true) a1561 a1562 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b1561 b1562) in
  let next_r = { a156 = (unbox_unit ()); b156 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a156 = (unbox_unit ()); b156 = C17_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a156 *)
  r.a156 <- next_r.a156;
  let r_expected = { r_expected with a156 = next_r.a156 } in
  mark_test_run 1205;
  let test = eq r r_expected in
  if not test then failwithf "test 1205 failed";
  Gc.compact ();
  (* .b156 *)
  r.b156 <- next_r.b156;
  let r_expected = { r_expected with b156 = next_r.b156 } in
  mark_test_run 1206;
  let test = eq r r_expected in
  if not test then failwithf "test 1206 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a156; b156 } = r in
  let expected_a156 = (unbox_unit ()) in
  mark_test_run 1207;
  let test = (fun _ _ -> true) expected_a156 a156 in
  if not test then failwithf "test 1207 failed";
  let expected_b156 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 1208;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b156 b156 in
  if not test then failwithf "test 1208 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a156; b156 } = r in
  let expected_a156 = (unbox_unit ()) in
  mark_test_run 1209;
  let test = (fun _ _ -> true) expected_a156 a156 in
  if not test then failwithf "test 1209 failed";
  let expected_b156 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 1210;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b156 b156 in
  if not test then failwithf "test 1210 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t157 = { unit_u; #(unit_u, int) }   *)
  (*****************************************)
  let r = { a157 = (unbox_unit ()); b157 = #((unbox_unit ()), 0) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a157 *)
  let actual = r.a157 in
  let expected = (unbox_unit ()) in
  mark_test_run 1211;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1211 failed";
  (* Paths of depth 1 *)
  (* .b157 *)
  let actual = r.b157 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 1212;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 1212 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a157 = a1571; b157 = b1571 } { a157 = a1572; b157 = b1572 } -> (fun _ _ -> true) a1571 a1572 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b1571 b1572) in
  let next_r = { a157 = (unbox_unit ()); b157 = #((unbox_unit ()), 100) } in
  let r_expected = { a157 = (unbox_unit ()); b157 = #((unbox_unit ()), 0) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a157 *)
  r.a157 <- next_r.a157;
  let r_expected = { r_expected with a157 = next_r.a157 } in
  mark_test_run 1213;
  let test = eq r r_expected in
  if not test then failwithf "test 1213 failed";
  Gc.compact ();
  (* .b157 *)
  r.b157 <- next_r.b157;
  let r_expected = { r_expected with b157 = next_r.b157 } in
  mark_test_run 1214;
  let test = eq r r_expected in
  if not test then failwithf "test 1214 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a157; b157 } = r in
  let expected_a157 = (unbox_unit ()) in
  mark_test_run 1215;
  let test = (fun _ _ -> true) expected_a157 a157 in
  if not test then failwithf "test 1215 failed";
  let expected_b157 = #((unbox_unit ()), 100) in
  mark_test_run 1216;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b157 b157 in
  if not test then failwithf "test 1216 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a157; b157 } = r in
  let expected_a157 = (unbox_unit ()) in
  mark_test_run 1217;
  let test = (fun _ _ -> true) expected_a157 a157 in
  if not test then failwithf "test 1217 failed";
  let expected_b157 = #((unbox_unit ()), 100) in
  mark_test_run 1218;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b157 b157 in
  if not test then failwithf "test 1218 failed";

  ()
;;

let () =
  (********************************************)
  (*   t158 = { unit_u; #(unit_u, int64#) }   *)
  (********************************************)
  let r = { a158 = (unbox_unit ()); b158 = #((unbox_unit ()), #0L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a158 *)
  let actual = r.a158 in
  let expected = (unbox_unit ()) in
  mark_test_run 1219;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1219 failed";
  (* Paths of depth 1 *)
  (* .b158 *)
  let actual = r.b158 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 1220;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 1220 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a158 = a1581; b158 = b1581 } { a158 = a1582; b158 = b1582 } -> (fun _ _ -> true) a1581 a1582 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b1581 b1582) in
  let next_r = { a158 = (unbox_unit ()); b158 = #((unbox_unit ()), #100L) } in
  let r_expected = { a158 = (unbox_unit ()); b158 = #((unbox_unit ()), #0L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a158 *)
  r.a158 <- next_r.a158;
  let r_expected = { r_expected with a158 = next_r.a158 } in
  mark_test_run 1221;
  let test = eq r r_expected in
  if not test then failwithf "test 1221 failed";
  Gc.compact ();
  (* .b158 *)
  r.b158 <- next_r.b158;
  let r_expected = { r_expected with b158 = next_r.b158 } in
  mark_test_run 1222;
  let test = eq r r_expected in
  if not test then failwithf "test 1222 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a158; b158 } = r in
  let expected_a158 = (unbox_unit ()) in
  mark_test_run 1223;
  let test = (fun _ _ -> true) expected_a158 a158 in
  if not test then failwithf "test 1223 failed";
  let expected_b158 = #((unbox_unit ()), #100L) in
  mark_test_run 1224;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b158 b158 in
  if not test then failwithf "test 1224 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a158; b158 } = r in
  let expected_a158 = (unbox_unit ()) in
  mark_test_run 1225;
  let test = (fun _ _ -> true) expected_a158 a158 in
  if not test then failwithf "test 1225 failed";
  let expected_b158 = #((unbox_unit ()), #100L) in
  mark_test_run 1226;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b158 b158 in
  if not test then failwithf "test 1226 failed";

  ()
;;

let () =
  (********************************************)
  (*   t159 = { unit_u; #(unit_u, string) }   *)
  (********************************************)
  let r = { a159 = (unbox_unit ()); b159 = #((unbox_unit ()), "0") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a159 *)
  let actual = r.a159 in
  let expected = (unbox_unit ()) in
  mark_test_run 1227;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1227 failed";
  (* Paths of depth 1 *)
  (* .b159 *)
  let actual = r.b159 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 1228;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 1228 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a159 = a1591; b159 = b1591 } { a159 = a1592; b159 = b1592 } -> (fun _ _ -> true) a1591 a1592 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b1591 b1592) in
  let next_r = { a159 = (unbox_unit ()); b159 = #((unbox_unit ()), "100") } in
  let r_expected = { a159 = (unbox_unit ()); b159 = #((unbox_unit ()), "0") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a159 *)
  r.a159 <- next_r.a159;
  let r_expected = { r_expected with a159 = next_r.a159 } in
  mark_test_run 1229;
  let test = eq r r_expected in
  if not test then failwithf "test 1229 failed";
  Gc.compact ();
  (* .b159 *)
  r.b159 <- next_r.b159;
  let r_expected = { r_expected with b159 = next_r.b159 } in
  mark_test_run 1230;
  let test = eq r r_expected in
  if not test then failwithf "test 1230 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a159; b159 } = r in
  let expected_a159 = (unbox_unit ()) in
  mark_test_run 1231;
  let test = (fun _ _ -> true) expected_a159 a159 in
  if not test then failwithf "test 1231 failed";
  let expected_b159 = #((unbox_unit ()), "100") in
  mark_test_run 1232;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b159 b159 in
  if not test then failwithf "test 1232 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a159; b159 } = r in
  let expected_a159 = (unbox_unit ()) in
  mark_test_run 1233;
  let test = (fun _ _ -> true) expected_a159 a159 in
  if not test then failwithf "test 1233 failed";
  let expected_b159 = #((unbox_unit ()), "100") in
  mark_test_run 1234;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b159 b159 in
  if not test then failwithf "test 1234 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t161 = { unit_u; #{ unit_u; string } }   *)
  (**********************************************)
  let r = { a161 = (unbox_unit ()); b161 = #{ a160 = (unbox_unit ()); b160 = "0" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a161 *)
  let actual = r.a161 in
  let expected = (unbox_unit ()) in
  mark_test_run 1235;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1235 failed";
  (* Paths of depth 1 *)
  (* .b161 *)
  let actual = r.b161 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "0" } in
  mark_test_run 1236;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 1236 failed";
  (* Paths of depth 2 *)
  (* .b161.#a160 *)
  let actual = r.b161.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 1237;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1237 failed";
  (* .b161.#b160 *)
  let actual = r.b161.#b160 in
  let expected = "0" in
  mark_test_run 1238;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1238 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a161 = a1611; b161 = b1611 } { a161 = a1612; b161 = b1612 } -> (fun _ _ -> true) a1611 a1612 && (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) b1611 b1612) in
  let next_r = { a161 = (unbox_unit ()); b161 = #{ a160 = (unbox_unit ()); b160 = "100" } } in
  let r_expected = { a161 = (unbox_unit ()); b161 = #{ a160 = (unbox_unit ()); b160 = "0" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a161 *)
  r.a161 <- next_r.a161;
  let r_expected = { r_expected with a161 = next_r.a161 } in
  mark_test_run 1239;
  let test = eq r r_expected in
  if not test then failwithf "test 1239 failed";
  Gc.compact ();
  (* .b161 *)
  r.b161 <- next_r.b161;
  let r_expected = { r_expected with b161 = next_r.b161 } in
  mark_test_run 1240;
  let test = eq r r_expected in
  if not test then failwithf "test 1240 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a161; b161 = #{ a160; b160 } } = r in
  let expected_a161 = (unbox_unit ()) in
  mark_test_run 1241;
  let test = (fun _ _ -> true) expected_a161 a161 in
  if not test then failwithf "test 1241 failed";
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 1242;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 1242 failed";
  let expected_b160 = "100" in
  mark_test_run 1243;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 1243 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a161; b161 } = r in
  let expected_a161 = (unbox_unit ()) in
  mark_test_run 1244;
  let test = (fun _ _ -> true) expected_a161 a161 in
  if not test then failwithf "test 1244 failed";
  let expected_b161 = #{ a160 = (unbox_unit ()); b160 = "100" } in
  mark_test_run 1245;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) expected_b161 b161 in
  if not test then failwithf "test 1245 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t164 = { unit_u; #{ unit_u; #{ string } } }   *)
  (***************************************************)
  let r = { a164 = (unbox_unit ()); b164 = #{ a163 = (unbox_unit ()); b163 = #{ a162 = "0" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a164 *)
  let actual = r.a164 in
  let expected = (unbox_unit ()) in
  mark_test_run 1246;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1246 failed";
  (* Paths of depth 1 *)
  (* .b164 *)
  let actual = r.b164 in
  let expected = #{ a163 = (unbox_unit ()); b163 = #{ a162 = "0" } } in
  mark_test_run 1247;
  let test = (fun #{ a163 = a1631; b163 = b1631 } #{ a163 = a1632; b163 = b1632 } -> (fun _ _ -> true) a1631 a1632 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1631 b1632) actual expected in
  if not test then failwithf "test 1247 failed";
  (* Paths of depth 2 *)
  (* .b164.#a163 *)
  let actual = r.b164.#a163 in
  let expected = (unbox_unit ()) in
  mark_test_run 1248;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1248 failed";
  (* .b164.#b163 *)
  let actual = r.b164.#b163 in
  let expected = #{ a162 = "0" } in
  mark_test_run 1249;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) actual expected in
  if not test then failwithf "test 1249 failed";
  (* Paths of depth 3 *)
  (* .b164.#b163.#a162 *)
  let actual = r.b164.#b163.#a162 in
  let expected = "0" in
  mark_test_run 1250;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1250 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a164 = a1641; b164 = b1641 } { a164 = a1642; b164 = b1642 } -> (fun _ _ -> true) a1641 a1642 && (fun #{ a163 = a1631; b163 = b1631 } #{ a163 = a1632; b163 = b1632 } -> (fun _ _ -> true) a1631 a1632 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1631 b1632) b1641 b1642) in
  let next_r = { a164 = (unbox_unit ()); b164 = #{ a163 = (unbox_unit ()); b163 = #{ a162 = "100" } } } in
  let r_expected = { a164 = (unbox_unit ()); b164 = #{ a163 = (unbox_unit ()); b163 = #{ a162 = "0" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a164 *)
  r.a164 <- next_r.a164;
  let r_expected = { r_expected with a164 = next_r.a164 } in
  mark_test_run 1251;
  let test = eq r r_expected in
  if not test then failwithf "test 1251 failed";
  Gc.compact ();
  (* .b164 *)
  r.b164 <- next_r.b164;
  let r_expected = { r_expected with b164 = next_r.b164 } in
  mark_test_run 1252;
  let test = eq r r_expected in
  if not test then failwithf "test 1252 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a164; b164 = #{ a163; b163 = #{ a162 } } } = r in
  let expected_a164 = (unbox_unit ()) in
  mark_test_run 1253;
  let test = (fun _ _ -> true) expected_a164 a164 in
  if not test then failwithf "test 1253 failed";
  let expected_a163 = (unbox_unit ()) in
  mark_test_run 1254;
  let test = (fun _ _ -> true) expected_a163 a163 in
  if not test then failwithf "test 1254 failed";
  let expected_a162 = "100" in
  mark_test_run 1255;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a162 a162 in
  if not test then failwithf "test 1255 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a164; b164 } = r in
  let expected_a164 = (unbox_unit ()) in
  mark_test_run 1256;
  let test = (fun _ _ -> true) expected_a164 a164 in
  if not test then failwithf "test 1256 failed";
  let expected_b164 = #{ a163 = (unbox_unit ()); b163 = #{ a162 = "100" } } in
  mark_test_run 1257;
  let test = (fun #{ a163 = a1631; b163 = b1631 } #{ a163 = a1632; b163 = b1632 } -> (fun _ _ -> true) a1631 a1632 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1631 b1632) expected_b164 b164 in
  if not test then failwithf "test 1257 failed";

  ()
;;

let () =
  (**************************************)
  (*   t165 = { unit_u; #{ string } }   *)
  (**************************************)
  let r = { a165 = (unbox_unit ()); b165 = #{ a162 = "0" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a165 *)
  let actual = r.a165 in
  let expected = (unbox_unit ()) in
  mark_test_run 1258;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1258 failed";
  (* Paths of depth 1 *)
  (* .b165 *)
  let actual = r.b165 in
  let expected = #{ a162 = "0" } in
  mark_test_run 1259;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) actual expected in
  if not test then failwithf "test 1259 failed";
  (* Paths of depth 2 *)
  (* .b165.#a162 *)
  let actual = r.b165.#a162 in
  let expected = "0" in
  mark_test_run 1260;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1260 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a165 = a1651; b165 = b1651 } { a165 = a1652; b165 = b1652 } -> (fun _ _ -> true) a1651 a1652 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1651 b1652) in
  let next_r = { a165 = (unbox_unit ()); b165 = #{ a162 = "100" } } in
  let r_expected = { a165 = (unbox_unit ()); b165 = #{ a162 = "0" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a165 *)
  r.a165 <- next_r.a165;
  let r_expected = { r_expected with a165 = next_r.a165 } in
  mark_test_run 1261;
  let test = eq r r_expected in
  if not test then failwithf "test 1261 failed";
  Gc.compact ();
  (* .b165 *)
  r.b165 <- next_r.b165;
  let r_expected = { r_expected with b165 = next_r.b165 } in
  mark_test_run 1262;
  let test = eq r r_expected in
  if not test then failwithf "test 1262 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a165; b165 = #{ a162 } } = r in
  let expected_a165 = (unbox_unit ()) in
  mark_test_run 1263;
  let test = (fun _ _ -> true) expected_a165 a165 in
  if not test then failwithf "test 1263 failed";
  let expected_a162 = "100" in
  mark_test_run 1264;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a162 a162 in
  if not test then failwithf "test 1264 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a165; b165 } = r in
  let expected_a165 = (unbox_unit ()) in
  mark_test_run 1265;
  let test = (fun _ _ -> true) expected_a165 a165 in
  if not test then failwithf "test 1265 failed";
  let expected_b165 = #{ a162 = "100" } in
  mark_test_run 1266;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) expected_b165 b165 in
  if not test then failwithf "test 1266 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t167 = { unit_u; #{ string; unit_u } }   *)
  (**********************************************)
  let r = { a167 = (unbox_unit ()); b167 = #{ a166 = "0"; b166 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a167 *)
  let actual = r.a167 in
  let expected = (unbox_unit ()) in
  mark_test_run 1267;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1267 failed";
  (* Paths of depth 1 *)
  (* .b167 *)
  let actual = r.b167 in
  let expected = #{ a166 = "0"; b166 = (unbox_unit ()) } in
  mark_test_run 1268;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 1268 failed";
  (* Paths of depth 2 *)
  (* .b167.#a166 *)
  let actual = r.b167.#a166 in
  let expected = "0" in
  mark_test_run 1269;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1269 failed";
  (* .b167.#b166 *)
  let actual = r.b167.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 1270;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1270 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a167 = a1671; b167 = b1671 } { a167 = a1672; b167 = b1672 } -> (fun _ _ -> true) a1671 a1672 && (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) b1671 b1672) in
  let next_r = { a167 = (unbox_unit ()); b167 = #{ a166 = "100"; b166 = (unbox_unit ()) } } in
  let r_expected = { a167 = (unbox_unit ()); b167 = #{ a166 = "0"; b166 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a167 *)
  r.a167 <- next_r.a167;
  let r_expected = { r_expected with a167 = next_r.a167 } in
  mark_test_run 1271;
  let test = eq r r_expected in
  if not test then failwithf "test 1271 failed";
  Gc.compact ();
  (* .b167 *)
  r.b167 <- next_r.b167;
  let r_expected = { r_expected with b167 = next_r.b167 } in
  mark_test_run 1272;
  let test = eq r r_expected in
  if not test then failwithf "test 1272 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a167; b167 = #{ a166; b166 } } = r in
  let expected_a167 = (unbox_unit ()) in
  mark_test_run 1273;
  let test = (fun _ _ -> true) expected_a167 a167 in
  if not test then failwithf "test 1273 failed";
  let expected_a166 = "100" in
  mark_test_run 1274;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 1274 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 1275;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 1275 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a167; b167 } = r in
  let expected_a167 = (unbox_unit ()) in
  mark_test_run 1276;
  let test = (fun _ _ -> true) expected_a167 a167 in
  if not test then failwithf "test 1276 failed";
  let expected_b167 = #{ a166 = "100"; b166 = (unbox_unit ()) } in
  mark_test_run 1277;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) expected_b167 b167 in
  if not test then failwithf "test 1277 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t169 = { unit_u; #{ string; string } }   *)
  (**********************************************)
  let r = { a169 = (unbox_unit ()); b169 = #{ a168 = "0"; b168 = "1" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a169 *)
  let actual = r.a169 in
  let expected = (unbox_unit ()) in
  mark_test_run 1278;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1278 failed";
  (* Paths of depth 1 *)
  (* .b169 *)
  let actual = r.b169 in
  let expected = #{ a168 = "0"; b168 = "1" } in
  mark_test_run 1279;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 1279 failed";
  (* Paths of depth 2 *)
  (* .b169.#a168 *)
  let actual = r.b169.#a168 in
  let expected = "0" in
  mark_test_run 1280;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1280 failed";
  (* .b169.#b168 *)
  let actual = r.b169.#b168 in
  let expected = "1" in
  mark_test_run 1281;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1281 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a169 = a1691; b169 = b1691 } { a169 = a1692; b169 = b1692 } -> (fun _ _ -> true) a1691 a1692 && (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) b1691 b1692) in
  let next_r = { a169 = (unbox_unit ()); b169 = #{ a168 = "100"; b168 = "101" } } in
  let r_expected = { a169 = (unbox_unit ()); b169 = #{ a168 = "0"; b168 = "1" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a169 *)
  r.a169 <- next_r.a169;
  let r_expected = { r_expected with a169 = next_r.a169 } in
  mark_test_run 1282;
  let test = eq r r_expected in
  if not test then failwithf "test 1282 failed";
  Gc.compact ();
  (* .b169 *)
  r.b169 <- next_r.b169;
  let r_expected = { r_expected with b169 = next_r.b169 } in
  mark_test_run 1283;
  let test = eq r r_expected in
  if not test then failwithf "test 1283 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a169; b169 = #{ a168; b168 } } = r in
  let expected_a169 = (unbox_unit ()) in
  mark_test_run 1284;
  let test = (fun _ _ -> true) expected_a169 a169 in
  if not test then failwithf "test 1284 failed";
  let expected_a168 = "100" in
  mark_test_run 1285;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 1285 failed";
  let expected_b168 = "101" in
  mark_test_run 1286;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 1286 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a169; b169 } = r in
  let expected_a169 = (unbox_unit ()) in
  mark_test_run 1287;
  let test = (fun _ _ -> true) expected_a169 a169 in
  if not test then failwithf "test 1287 failed";
  let expected_b169 = #{ a168 = "100"; b168 = "101" } in
  mark_test_run 1288;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) expected_b169 b169 in
  if not test then failwithf "test 1288 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t172 = { unit_u; #{ string; #{ unit_u } } }   *)
  (***************************************************)
  let r = { a172 = (unbox_unit ()); b172 = #{ a171 = "0"; b171 = #{ a170 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a172 *)
  let actual = r.a172 in
  let expected = (unbox_unit ()) in
  mark_test_run 1289;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1289 failed";
  (* Paths of depth 1 *)
  (* .b172 *)
  let actual = r.b172 in
  let expected = #{ a171 = "0"; b171 = #{ a170 = (unbox_unit ()) } } in
  mark_test_run 1290;
  let test = (fun #{ a171 = a1711; b171 = b1711 } #{ a171 = a1712; b171 = b1712 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1711 a1712 && (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) b1711 b1712) actual expected in
  if not test then failwithf "test 1290 failed";
  (* Paths of depth 2 *)
  (* .b172.#a171 *)
  let actual = r.b172.#a171 in
  let expected = "0" in
  mark_test_run 1291;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1291 failed";
  (* .b172.#b171 *)
  let actual = r.b172.#b171 in
  let expected = #{ a170 = (unbox_unit ()) } in
  mark_test_run 1292;
  let test = (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) actual expected in
  if not test then failwithf "test 1292 failed";
  (* Paths of depth 3 *)
  (* .b172.#b171.#a170 *)
  let actual = r.b172.#b171.#a170 in
  let expected = (unbox_unit ()) in
  mark_test_run 1293;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1293 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a172 = a1721; b172 = b1721 } { a172 = a1722; b172 = b1722 } -> (fun _ _ -> true) a1721 a1722 && (fun #{ a171 = a1711; b171 = b1711 } #{ a171 = a1712; b171 = b1712 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1711 a1712 && (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) b1711 b1712) b1721 b1722) in
  let next_r = { a172 = (unbox_unit ()); b172 = #{ a171 = "100"; b171 = #{ a170 = (unbox_unit ()) } } } in
  let r_expected = { a172 = (unbox_unit ()); b172 = #{ a171 = "0"; b171 = #{ a170 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a172 *)
  r.a172 <- next_r.a172;
  let r_expected = { r_expected with a172 = next_r.a172 } in
  mark_test_run 1294;
  let test = eq r r_expected in
  if not test then failwithf "test 1294 failed";
  Gc.compact ();
  (* .b172 *)
  r.b172 <- next_r.b172;
  let r_expected = { r_expected with b172 = next_r.b172 } in
  mark_test_run 1295;
  let test = eq r r_expected in
  if not test then failwithf "test 1295 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a172; b172 = #{ a171; b171 = #{ a170 } } } = r in
  let expected_a172 = (unbox_unit ()) in
  mark_test_run 1296;
  let test = (fun _ _ -> true) expected_a172 a172 in
  if not test then failwithf "test 1296 failed";
  let expected_a171 = "100" in
  mark_test_run 1297;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a171 a171 in
  if not test then failwithf "test 1297 failed";
  let expected_a170 = (unbox_unit ()) in
  mark_test_run 1298;
  let test = (fun _ _ -> true) expected_a170 a170 in
  if not test then failwithf "test 1298 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a172; b172 } = r in
  let expected_a172 = (unbox_unit ()) in
  mark_test_run 1299;
  let test = (fun _ _ -> true) expected_a172 a172 in
  if not test then failwithf "test 1299 failed";
  let expected_b172 = #{ a171 = "100"; b171 = #{ a170 = (unbox_unit ()) } } in
  mark_test_run 1300;
  let test = (fun #{ a171 = a1711; b171 = b1711 } #{ a171 = a1712; b171 = b1712 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1711 a1712 && (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) b1711 b1712) expected_b172 b172 in
  if not test then failwithf "test 1300 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t174 = { unit_u; #{ string; #{ string } } }   *)
  (***************************************************)
  let r = { a174 = (unbox_unit ()); b174 = #{ a173 = "0"; b173 = #{ a162 = "1" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a174 *)
  let actual = r.a174 in
  let expected = (unbox_unit ()) in
  mark_test_run 1301;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1301 failed";
  (* Paths of depth 1 *)
  (* .b174 *)
  let actual = r.b174 in
  let expected = #{ a173 = "0"; b173 = #{ a162 = "1" } } in
  mark_test_run 1302;
  let test = (fun #{ a173 = a1731; b173 = b1731 } #{ a173 = a1732; b173 = b1732 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1731 a1732 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1731 b1732) actual expected in
  if not test then failwithf "test 1302 failed";
  (* Paths of depth 2 *)
  (* .b174.#a173 *)
  let actual = r.b174.#a173 in
  let expected = "0" in
  mark_test_run 1303;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1303 failed";
  (* .b174.#b173 *)
  let actual = r.b174.#b173 in
  let expected = #{ a162 = "1" } in
  mark_test_run 1304;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) actual expected in
  if not test then failwithf "test 1304 failed";
  (* Paths of depth 3 *)
  (* .b174.#b173.#a162 *)
  let actual = r.b174.#b173.#a162 in
  let expected = "1" in
  mark_test_run 1305;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1305 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a174 = a1741; b174 = b1741 } { a174 = a1742; b174 = b1742 } -> (fun _ _ -> true) a1741 a1742 && (fun #{ a173 = a1731; b173 = b1731 } #{ a173 = a1732; b173 = b1732 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1731 a1732 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1731 b1732) b1741 b1742) in
  let next_r = { a174 = (unbox_unit ()); b174 = #{ a173 = "100"; b173 = #{ a162 = "101" } } } in
  let r_expected = { a174 = (unbox_unit ()); b174 = #{ a173 = "0"; b173 = #{ a162 = "1" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a174 *)
  r.a174 <- next_r.a174;
  let r_expected = { r_expected with a174 = next_r.a174 } in
  mark_test_run 1306;
  let test = eq r r_expected in
  if not test then failwithf "test 1306 failed";
  Gc.compact ();
  (* .b174 *)
  r.b174 <- next_r.b174;
  let r_expected = { r_expected with b174 = next_r.b174 } in
  mark_test_run 1307;
  let test = eq r r_expected in
  if not test then failwithf "test 1307 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a174; b174 = #{ a173; b173 = #{ a162 } } } = r in
  let expected_a174 = (unbox_unit ()) in
  mark_test_run 1308;
  let test = (fun _ _ -> true) expected_a174 a174 in
  if not test then failwithf "test 1308 failed";
  let expected_a173 = "100" in
  mark_test_run 1309;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a173 a173 in
  if not test then failwithf "test 1309 failed";
  let expected_a162 = "101" in
  mark_test_run 1310;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a162 a162 in
  if not test then failwithf "test 1310 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a174; b174 } = r in
  let expected_a174 = (unbox_unit ()) in
  mark_test_run 1311;
  let test = (fun _ _ -> true) expected_a174 a174 in
  if not test then failwithf "test 1311 failed";
  let expected_b174 = #{ a173 = "100"; b173 = #{ a162 = "101" } } in
  mark_test_run 1312;
  let test = (fun #{ a173 = a1731; b173 = b1731 } #{ a173 = a1732; b173 = b1732 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1731 a1732 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1731 b1732) expected_b174 b174 in
  if not test then failwithf "test 1312 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t176 = { unit_u; #{ #{ unit_u; string } } }   *)
  (***************************************************)
  let r = { a176 = (unbox_unit ()); b176 = #{ a175 = #{ a160 = (unbox_unit ()); b160 = "0" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a176 *)
  let actual = r.a176 in
  let expected = (unbox_unit ()) in
  mark_test_run 1313;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1313 failed";
  (* Paths of depth 1 *)
  (* .b176 *)
  let actual = r.b176 in
  let expected = #{ a175 = #{ a160 = (unbox_unit ()); b160 = "0" } } in
  mark_test_run 1314;
  let test = (fun #{ a175 = a1751 } #{ a175 = a1752 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a1751 a1752) actual expected in
  if not test then failwithf "test 1314 failed";
  (* Paths of depth 2 *)
  (* .b176.#a175 *)
  let actual = r.b176.#a175 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "0" } in
  mark_test_run 1315;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 1315 failed";
  (* Paths of depth 3 *)
  (* .b176.#a175.#a160 *)
  let actual = r.b176.#a175.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 1316;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1316 failed";
  (* .b176.#a175.#b160 *)
  let actual = r.b176.#a175.#b160 in
  let expected = "0" in
  mark_test_run 1317;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1317 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a176 = a1761; b176 = b1761 } { a176 = a1762; b176 = b1762 } -> (fun _ _ -> true) a1761 a1762 && (fun #{ a175 = a1751 } #{ a175 = a1752 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a1751 a1752) b1761 b1762) in
  let next_r = { a176 = (unbox_unit ()); b176 = #{ a175 = #{ a160 = (unbox_unit ()); b160 = "100" } } } in
  let r_expected = { a176 = (unbox_unit ()); b176 = #{ a175 = #{ a160 = (unbox_unit ()); b160 = "0" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a176 *)
  r.a176 <- next_r.a176;
  let r_expected = { r_expected with a176 = next_r.a176 } in
  mark_test_run 1318;
  let test = eq r r_expected in
  if not test then failwithf "test 1318 failed";
  Gc.compact ();
  (* .b176 *)
  r.b176 <- next_r.b176;
  let r_expected = { r_expected with b176 = next_r.b176 } in
  mark_test_run 1319;
  let test = eq r r_expected in
  if not test then failwithf "test 1319 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a176; b176 = #{ a175 = #{ a160; b160 } } } = r in
  let expected_a176 = (unbox_unit ()) in
  mark_test_run 1320;
  let test = (fun _ _ -> true) expected_a176 a176 in
  if not test then failwithf "test 1320 failed";
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 1321;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 1321 failed";
  let expected_b160 = "100" in
  mark_test_run 1322;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 1322 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a176; b176 } = r in
  let expected_a176 = (unbox_unit ()) in
  mark_test_run 1323;
  let test = (fun _ _ -> true) expected_a176 a176 in
  if not test then failwithf "test 1323 failed";
  let expected_b176 = #{ a175 = #{ a160 = (unbox_unit ()); b160 = "100" } } in
  mark_test_run 1324;
  let test = (fun #{ a175 = a1751 } #{ a175 = a1752 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a1751 a1752) expected_b176 b176 in
  if not test then failwithf "test 1324 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t178 = { unit_u; #{ #{ string; unit_u } } }   *)
  (***************************************************)
  let r = { a178 = (unbox_unit ()); b178 = #{ a177 = #{ a166 = "0"; b166 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a178 *)
  let actual = r.a178 in
  let expected = (unbox_unit ()) in
  mark_test_run 1325;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1325 failed";
  (* Paths of depth 1 *)
  (* .b178 *)
  let actual = r.b178 in
  let expected = #{ a177 = #{ a166 = "0"; b166 = (unbox_unit ()) } } in
  mark_test_run 1326;
  let test = (fun #{ a177 = a1771 } #{ a177 = a1772 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a1771 a1772) actual expected in
  if not test then failwithf "test 1326 failed";
  (* Paths of depth 2 *)
  (* .b178.#a177 *)
  let actual = r.b178.#a177 in
  let expected = #{ a166 = "0"; b166 = (unbox_unit ()) } in
  mark_test_run 1327;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 1327 failed";
  (* Paths of depth 3 *)
  (* .b178.#a177.#a166 *)
  let actual = r.b178.#a177.#a166 in
  let expected = "0" in
  mark_test_run 1328;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1328 failed";
  (* .b178.#a177.#b166 *)
  let actual = r.b178.#a177.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 1329;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1329 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a178 = a1781; b178 = b1781 } { a178 = a1782; b178 = b1782 } -> (fun _ _ -> true) a1781 a1782 && (fun #{ a177 = a1771 } #{ a177 = a1772 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a1771 a1772) b1781 b1782) in
  let next_r = { a178 = (unbox_unit ()); b178 = #{ a177 = #{ a166 = "100"; b166 = (unbox_unit ()) } } } in
  let r_expected = { a178 = (unbox_unit ()); b178 = #{ a177 = #{ a166 = "0"; b166 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a178 *)
  r.a178 <- next_r.a178;
  let r_expected = { r_expected with a178 = next_r.a178 } in
  mark_test_run 1330;
  let test = eq r r_expected in
  if not test then failwithf "test 1330 failed";
  Gc.compact ();
  (* .b178 *)
  r.b178 <- next_r.b178;
  let r_expected = { r_expected with b178 = next_r.b178 } in
  mark_test_run 1331;
  let test = eq r r_expected in
  if not test then failwithf "test 1331 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a178; b178 = #{ a177 = #{ a166; b166 } } } = r in
  let expected_a178 = (unbox_unit ()) in
  mark_test_run 1332;
  let test = (fun _ _ -> true) expected_a178 a178 in
  if not test then failwithf "test 1332 failed";
  let expected_a166 = "100" in
  mark_test_run 1333;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 1333 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 1334;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 1334 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a178; b178 } = r in
  let expected_a178 = (unbox_unit ()) in
  mark_test_run 1335;
  let test = (fun _ _ -> true) expected_a178 a178 in
  if not test then failwithf "test 1335 failed";
  let expected_b178 = #{ a177 = #{ a166 = "100"; b166 = (unbox_unit ()) } } in
  mark_test_run 1336;
  let test = (fun #{ a177 = a1771 } #{ a177 = a1772 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a1771 a1772) expected_b178 b178 in
  if not test then failwithf "test 1336 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t180 = { unit_u; #{ #{ string; string } } }   *)
  (***************************************************)
  let r = { a180 = (unbox_unit ()); b180 = #{ a179 = #{ a168 = "0"; b168 = "1" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a180 *)
  let actual = r.a180 in
  let expected = (unbox_unit ()) in
  mark_test_run 1337;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1337 failed";
  (* Paths of depth 1 *)
  (* .b180 *)
  let actual = r.b180 in
  let expected = #{ a179 = #{ a168 = "0"; b168 = "1" } } in
  mark_test_run 1338;
  let test = (fun #{ a179 = a1791 } #{ a179 = a1792 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a1791 a1792) actual expected in
  if not test then failwithf "test 1338 failed";
  (* Paths of depth 2 *)
  (* .b180.#a179 *)
  let actual = r.b180.#a179 in
  let expected = #{ a168 = "0"; b168 = "1" } in
  mark_test_run 1339;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 1339 failed";
  (* Paths of depth 3 *)
  (* .b180.#a179.#a168 *)
  let actual = r.b180.#a179.#a168 in
  let expected = "0" in
  mark_test_run 1340;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1340 failed";
  (* .b180.#a179.#b168 *)
  let actual = r.b180.#a179.#b168 in
  let expected = "1" in
  mark_test_run 1341;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1341 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a180 = a1801; b180 = b1801 } { a180 = a1802; b180 = b1802 } -> (fun _ _ -> true) a1801 a1802 && (fun #{ a179 = a1791 } #{ a179 = a1792 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a1791 a1792) b1801 b1802) in
  let next_r = { a180 = (unbox_unit ()); b180 = #{ a179 = #{ a168 = "100"; b168 = "101" } } } in
  let r_expected = { a180 = (unbox_unit ()); b180 = #{ a179 = #{ a168 = "0"; b168 = "1" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a180 *)
  r.a180 <- next_r.a180;
  let r_expected = { r_expected with a180 = next_r.a180 } in
  mark_test_run 1342;
  let test = eq r r_expected in
  if not test then failwithf "test 1342 failed";
  Gc.compact ();
  (* .b180 *)
  r.b180 <- next_r.b180;
  let r_expected = { r_expected with b180 = next_r.b180 } in
  mark_test_run 1343;
  let test = eq r r_expected in
  if not test then failwithf "test 1343 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a180; b180 = #{ a179 = #{ a168; b168 } } } = r in
  let expected_a180 = (unbox_unit ()) in
  mark_test_run 1344;
  let test = (fun _ _ -> true) expected_a180 a180 in
  if not test then failwithf "test 1344 failed";
  let expected_a168 = "100" in
  mark_test_run 1345;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 1345 failed";
  let expected_b168 = "101" in
  mark_test_run 1346;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 1346 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a180; b180 } = r in
  let expected_a180 = (unbox_unit ()) in
  mark_test_run 1347;
  let test = (fun _ _ -> true) expected_a180 a180 in
  if not test then failwithf "test 1347 failed";
  let expected_b180 = #{ a179 = #{ a168 = "100"; b168 = "101" } } in
  mark_test_run 1348;
  let test = (fun #{ a179 = a1791 } #{ a179 = a1792 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a1791 a1792) expected_b180 b180 in
  if not test then failwithf "test 1348 failed";

  ()
;;

let () =
  (************************)
  (*   t181 = { float }   *)
  (************************)
  let r = { a181 = 0. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a181 *)
  let actual = r.a181 in
  let expected = 0. in
  mark_test_run 1349;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1349 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a181 = a1811 } { a181 = a1812 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1811 a1812) in
  let next_r = { a181 = 100. } in
  let r_expected = { a181 = 0. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a181 *)
  r.a181 <- next_r.a181;
  let r_expected = { r_expected with a181 = next_r.a181 } in
  mark_test_run 1350;
  let test = eq r r_expected in
  if not test then failwithf "test 1350 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a181 } = r in
  let expected_a181 = 100. in
  mark_test_run 1351;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a181 a181 in
  if not test then failwithf "test 1351 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a181 } = r in
  let expected_a181 = 100. in
  mark_test_run 1352;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a181 a181 in
  if not test then failwithf "test 1352 failed";

  ()
;;

let () =
  (*****************************)
  (*   t182 = { float; int }   *)
  (*****************************)
  let r = { a182 = 0.; b182 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a182 *)
  let actual = r.a182 in
  let expected = 0. in
  mark_test_run 1353;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1353 failed";
  (* Paths of depth 1 *)
  (* .b182 *)
  let actual = r.b182 in
  let expected = 1 in
  mark_test_run 1354;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1354 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a182 = a1821; b182 = b1821 } { a182 = a1822; b182 = b1822 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1821 a1822 && (fun a b -> Int.equal a b) b1821 b1822) in
  let next_r = { a182 = 100.; b182 = 101 } in
  let r_expected = { a182 = 0.; b182 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a182 *)
  r.a182 <- next_r.a182;
  let r_expected = { r_expected with a182 = next_r.a182 } in
  mark_test_run 1355;
  let test = eq r r_expected in
  if not test then failwithf "test 1355 failed";
  Gc.compact ();
  (* .b182 *)
  r.b182 <- next_r.b182;
  let r_expected = { r_expected with b182 = next_r.b182 } in
  mark_test_run 1356;
  let test = eq r r_expected in
  if not test then failwithf "test 1356 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a182; b182 } = r in
  let expected_a182 = 100. in
  mark_test_run 1357;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a182 a182 in
  if not test then failwithf "test 1357 failed";
  let expected_b182 = 101 in
  mark_test_run 1358;
  let test = (fun a b -> Int.equal a b) expected_b182 b182 in
  if not test then failwithf "test 1358 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a182; b182 } = r in
  let expected_a182 = 100. in
  mark_test_run 1359;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a182 a182 in
  if not test then failwithf "test 1359 failed";
  let expected_b182 = 101 in
  mark_test_run 1360;
  let test = (fun a b -> Int.equal a b) expected_b182 b182 in
  if not test then failwithf "test 1360 failed";

  ()
;;

let () =
  (**********************************)
  (*   t183 = { float; int; int }   *)
  (**********************************)
  let r = { a183 = 0.; b183 = 1; c183 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a183 *)
  let actual = r.a183 in
  let expected = 0. in
  mark_test_run 1361;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1361 failed";
  (* Paths of depth 1 *)
  (* .b183 *)
  let actual = r.b183 in
  let expected = 1 in
  mark_test_run 1362;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1362 failed";
  (* Paths of depth 1 *)
  (* .c183 *)
  let actual = r.c183 in
  let expected = 2 in
  mark_test_run 1363;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1363 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a183 = a1831; b183 = b1831; c183 = c1831 } { a183 = a1832; b183 = b1832; c183 = c1832 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1831 a1832 && (fun a b -> Int.equal a b) b1831 b1832 && (fun a b -> Int.equal a b) c1831 c1832) in
  let next_r = { a183 = 100.; b183 = 101; c183 = 102 } in
  let r_expected = { a183 = 0.; b183 = 1; c183 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a183 *)
  r.a183 <- next_r.a183;
  let r_expected = { r_expected with a183 = next_r.a183 } in
  mark_test_run 1364;
  let test = eq r r_expected in
  if not test then failwithf "test 1364 failed";
  Gc.compact ();
  (* .b183 *)
  r.b183 <- next_r.b183;
  let r_expected = { r_expected with b183 = next_r.b183 } in
  mark_test_run 1365;
  let test = eq r r_expected in
  if not test then failwithf "test 1365 failed";
  Gc.compact ();
  (* .c183 *)
  r.c183 <- next_r.c183;
  let r_expected = { r_expected with c183 = next_r.c183 } in
  mark_test_run 1366;
  let test = eq r r_expected in
  if not test then failwithf "test 1366 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a183; b183; c183 } = r in
  let expected_a183 = 100. in
  mark_test_run 1367;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a183 a183 in
  if not test then failwithf "test 1367 failed";
  let expected_b183 = 101 in
  mark_test_run 1368;
  let test = (fun a b -> Int.equal a b) expected_b183 b183 in
  if not test then failwithf "test 1368 failed";
  let expected_c183 = 102 in
  mark_test_run 1369;
  let test = (fun a b -> Int.equal a b) expected_c183 c183 in
  if not test then failwithf "test 1369 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a183; b183; c183 } = r in
  let expected_a183 = 100. in
  mark_test_run 1370;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a183 a183 in
  if not test then failwithf "test 1370 failed";
  let expected_b183 = 101 in
  mark_test_run 1371;
  let test = (fun a b -> Int.equal a b) expected_b183 b183 in
  if not test then failwithf "test 1371 failed";
  let expected_c183 = 102 in
  mark_test_run 1372;
  let test = (fun a b -> Int.equal a b) expected_c183 c183 in
  if not test then failwithf "test 1372 failed";

  ()
;;

let () =
  (************************************)
  (*   t184 = { float; int; float }   *)
  (************************************)
  let r = { a184 = 0.; b184 = 1; c184 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a184 *)
  let actual = r.a184 in
  let expected = 0. in
  mark_test_run 1373;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1373 failed";
  (* Paths of depth 1 *)
  (* .b184 *)
  let actual = r.b184 in
  let expected = 1 in
  mark_test_run 1374;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1374 failed";
  (* Paths of depth 1 *)
  (* .c184 *)
  let actual = r.c184 in
  let expected = 2. in
  mark_test_run 1375;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1375 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a184 = a1841; b184 = b1841; c184 = c1841 } { a184 = a1842; b184 = b1842; c184 = c1842 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1841 a1842 && (fun a b -> Int.equal a b) b1841 b1842 && (fun a b -> Float.equal (globalize a) (globalize b)) c1841 c1842) in
  let next_r = { a184 = 100.; b184 = 101; c184 = 102. } in
  let r_expected = { a184 = 0.; b184 = 1; c184 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a184 *)
  r.a184 <- next_r.a184;
  let r_expected = { r_expected with a184 = next_r.a184 } in
  mark_test_run 1376;
  let test = eq r r_expected in
  if not test then failwithf "test 1376 failed";
  Gc.compact ();
  (* .b184 *)
  r.b184 <- next_r.b184;
  let r_expected = { r_expected with b184 = next_r.b184 } in
  mark_test_run 1377;
  let test = eq r r_expected in
  if not test then failwithf "test 1377 failed";
  Gc.compact ();
  (* .c184 *)
  r.c184 <- next_r.c184;
  let r_expected = { r_expected with c184 = next_r.c184 } in
  mark_test_run 1378;
  let test = eq r r_expected in
  if not test then failwithf "test 1378 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a184; b184; c184 } = r in
  let expected_a184 = 100. in
  mark_test_run 1379;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a184 a184 in
  if not test then failwithf "test 1379 failed";
  let expected_b184 = 101 in
  mark_test_run 1380;
  let test = (fun a b -> Int.equal a b) expected_b184 b184 in
  if not test then failwithf "test 1380 failed";
  let expected_c184 = 102. in
  mark_test_run 1381;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c184 c184 in
  if not test then failwithf "test 1381 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a184; b184; c184 } = r in
  let expected_a184 = 100. in
  mark_test_run 1382;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a184 a184 in
  if not test then failwithf "test 1382 failed";
  let expected_b184 = 101 in
  mark_test_run 1383;
  let test = (fun a b -> Int.equal a b) expected_b184 b184 in
  if not test then failwithf "test 1383 failed";
  let expected_c184 = 102. in
  mark_test_run 1384;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c184 c184 in
  if not test then failwithf "test 1384 failed";

  ()
;;

let () =
  (*******************************)
  (*   t185 = { float; int64 }   *)
  (*******************************)
  let r = { a185 = 0.; b185 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a185 *)
  let actual = r.a185 in
  let expected = 0. in
  mark_test_run 1385;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1385 failed";
  (* Paths of depth 1 *)
  (* .b185 *)
  let actual = r.b185 in
  let expected = 1L in
  mark_test_run 1386;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1386 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a185 = a1851; b185 = b1851 } { a185 = a1852; b185 = b1852 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1851 a1852 && (fun a b -> Int64.equal (globalize a) (globalize b)) b1851 b1852) in
  let next_r = { a185 = 100.; b185 = 101L } in
  let r_expected = { a185 = 0.; b185 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a185 *)
  r.a185 <- next_r.a185;
  let r_expected = { r_expected with a185 = next_r.a185 } in
  mark_test_run 1387;
  let test = eq r r_expected in
  if not test then failwithf "test 1387 failed";
  Gc.compact ();
  (* .b185 *)
  r.b185 <- next_r.b185;
  let r_expected = { r_expected with b185 = next_r.b185 } in
  mark_test_run 1388;
  let test = eq r r_expected in
  if not test then failwithf "test 1388 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a185; b185 } = r in
  let expected_a185 = 100. in
  mark_test_run 1389;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a185 a185 in
  if not test then failwithf "test 1389 failed";
  let expected_b185 = 101L in
  mark_test_run 1390;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b185 b185 in
  if not test then failwithf "test 1390 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a185; b185 } = r in
  let expected_a185 = 100. in
  mark_test_run 1391;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a185 a185 in
  if not test then failwithf "test 1391 failed";
  let expected_b185 = 101L in
  mark_test_run 1392;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b185 b185 in
  if not test then failwithf "test 1392 failed";

  ()
;;

let () =
  (********************************)
  (*   t186 = { float; int64# }   *)
  (********************************)
  let r = { a186 = 0.; b186 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a186 *)
  let actual = r.a186 in
  let expected = 0. in
  mark_test_run 1393;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1393 failed";
  (* Paths of depth 1 *)
  (* .b186 *)
  let actual = r.b186 in
  let expected = #1L in
  mark_test_run 1394;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 1394 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a186 = a1861; b186 = b1861 } { a186 = a1862; b186 = b1862 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1861 a1862 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b1861 b1862) in
  let next_r = { a186 = 100.; b186 = #101L } in
  let r_expected = { a186 = 0.; b186 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a186 *)
  r.a186 <- next_r.a186;
  let r_expected = { r_expected with a186 = next_r.a186 } in
  mark_test_run 1395;
  let test = eq r r_expected in
  if not test then failwithf "test 1395 failed";
  Gc.compact ();
  (* .b186 *)
  r.b186 <- next_r.b186;
  let r_expected = { r_expected with b186 = next_r.b186 } in
  mark_test_run 1396;
  let test = eq r r_expected in
  if not test then failwithf "test 1396 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a186; b186 } = r in
  let expected_a186 = 100. in
  mark_test_run 1397;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a186 a186 in
  if not test then failwithf "test 1397 failed";
  let expected_b186 = #101L in
  mark_test_run 1398;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b186 b186 in
  if not test then failwithf "test 1398 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a186; b186 } = r in
  let expected_a186 = 100. in
  mark_test_run 1399;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a186 a186 in
  if not test then failwithf "test 1399 failed";
  let expected_b186 = #101L in
  mark_test_run 1400;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b186 b186 in
  if not test then failwithf "test 1400 failed";

  ()
;;

let () =
  (********************************)
  (*   t187 = { float; int32# }   *)
  (********************************)
  let r = { a187 = 0.; b187 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a187 *)
  let actual = r.a187 in
  let expected = 0. in
  mark_test_run 1401;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1401 failed";
  (* Paths of depth 1 *)
  (* .b187 *)
  let actual = r.b187 in
  let expected = #1l in
  mark_test_run 1402;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1402 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a187 = a1871; b187 = b1871 } { a187 = a1872; b187 = b1872 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1871 a1872 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1871 b1872) in
  let next_r = { a187 = 100.; b187 = #101l } in
  let r_expected = { a187 = 0.; b187 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a187 *)
  r.a187 <- next_r.a187;
  let r_expected = { r_expected with a187 = next_r.a187 } in
  mark_test_run 1403;
  let test = eq r r_expected in
  if not test then failwithf "test 1403 failed";
  Gc.compact ();
  (* .b187 *)
  r.b187 <- next_r.b187;
  let r_expected = { r_expected with b187 = next_r.b187 } in
  mark_test_run 1404;
  let test = eq r r_expected in
  if not test then failwithf "test 1404 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a187; b187 } = r in
  let expected_a187 = 100. in
  mark_test_run 1405;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a187 a187 in
  if not test then failwithf "test 1405 failed";
  let expected_b187 = #101l in
  mark_test_run 1406;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b187 b187 in
  if not test then failwithf "test 1406 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a187; b187 } = r in
  let expected_a187 = 100. in
  mark_test_run 1407;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a187 a187 in
  if not test then failwithf "test 1407 failed";
  let expected_b187 = #101l in
  mark_test_run 1408;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b187 b187 in
  if not test then failwithf "test 1408 failed";

  ()
;;

let () =
  (************************************)
  (*   t188 = { float; nativeint# }   *)
  (************************************)
  let r = { a188 = 0.; b188 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a188 *)
  let actual = r.a188 in
  let expected = 0. in
  mark_test_run 1409;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1409 failed";
  (* Paths of depth 1 *)
  (* .b188 *)
  let actual = r.b188 in
  let expected = #1n in
  mark_test_run 1410;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 1410 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a188 = a1881; b188 = b1881 } { a188 = a1882; b188 = b1882 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1881 a1882 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b1881 b1882) in
  let next_r = { a188 = 100.; b188 = #101n } in
  let r_expected = { a188 = 0.; b188 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a188 *)
  r.a188 <- next_r.a188;
  let r_expected = { r_expected with a188 = next_r.a188 } in
  mark_test_run 1411;
  let test = eq r r_expected in
  if not test then failwithf "test 1411 failed";
  Gc.compact ();
  (* .b188 *)
  r.b188 <- next_r.b188;
  let r_expected = { r_expected with b188 = next_r.b188 } in
  mark_test_run 1412;
  let test = eq r r_expected in
  if not test then failwithf "test 1412 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a188; b188 } = r in
  let expected_a188 = 100. in
  mark_test_run 1413;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a188 a188 in
  if not test then failwithf "test 1413 failed";
  let expected_b188 = #101n in
  mark_test_run 1414;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b188 b188 in
  if not test then failwithf "test 1414 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a188; b188 } = r in
  let expected_a188 = 100. in
  mark_test_run 1415;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a188 a188 in
  if not test then failwithf "test 1415 failed";
  let expected_b188 = #101n in
  mark_test_run 1416;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b188 b188 in
  if not test then failwithf "test 1416 failed";

  ()
;;

let () =
  (********************************)
  (*   t189 = { float; unit_u }   *)
  (********************************)
  let r = { a189 = 0.; b189 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a189 *)
  let actual = r.a189 in
  let expected = 0. in
  mark_test_run 1417;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1417 failed";
  (* Paths of depth 1 *)
  (* .b189 *)
  let actual = r.b189 in
  let expected = (unbox_unit ()) in
  mark_test_run 1418;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 1418 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a189 = a1891; b189 = b1891 } { a189 = a1892; b189 = b1892 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1891 a1892 && (fun _ _ -> true) b1891 b1892) in
  let next_r = { a189 = 100.; b189 = (unbox_unit ()) } in
  let r_expected = { a189 = 0.; b189 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a189 *)
  r.a189 <- next_r.a189;
  let r_expected = { r_expected with a189 = next_r.a189 } in
  mark_test_run 1419;
  let test = eq r r_expected in
  if not test then failwithf "test 1419 failed";
  Gc.compact ();
  (* .b189 *)
  r.b189 <- next_r.b189;
  let r_expected = { r_expected with b189 = next_r.b189 } in
  mark_test_run 1420;
  let test = eq r r_expected in
  if not test then failwithf "test 1420 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a189; b189 } = r in
  let expected_a189 = 100. in
  mark_test_run 1421;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a189 a189 in
  if not test then failwithf "test 1421 failed";
  let expected_b189 = (unbox_unit ()) in
  mark_test_run 1422;
  let test = (fun _ _ -> true) expected_b189 b189 in
  if not test then failwithf "test 1422 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a189; b189 } = r in
  let expected_a189 = 100. in
  mark_test_run 1423;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a189 a189 in
  if not test then failwithf "test 1423 failed";
  let expected_b189 = (unbox_unit ()) in
  mark_test_run 1424;
  let test = (fun _ _ -> true) expected_b189 b189 in
  if not test then failwithf "test 1424 failed";

  ()
;;

let () =
  (*******************************)
  (*   t190 = { float; float }   *)
  (*******************************)
  let r = { a190 = 0.; b190 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a190 *)
  let actual = r.a190 in
  let expected = 0. in
  mark_test_run 1425;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1425 failed";
  (* Paths of depth 1 *)
  (* .b190 *)
  let actual = r.b190 in
  let expected = 1. in
  mark_test_run 1426;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1426 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a190 = a1901; b190 = b1901 } { a190 = a1902; b190 = b1902 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1901 a1902 && (fun a b -> Float.equal (globalize a) (globalize b)) b1901 b1902) in
  let next_r = { a190 = 100.; b190 = 101. } in
  let r_expected = { a190 = 0.; b190 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a190 *)
  r.a190 <- next_r.a190;
  let r_expected = { r_expected with a190 = next_r.a190 } in
  mark_test_run 1427;
  let test = eq r r_expected in
  if not test then failwithf "test 1427 failed";
  Gc.compact ();
  (* .b190 *)
  r.b190 <- next_r.b190;
  let r_expected = { r_expected with b190 = next_r.b190 } in
  mark_test_run 1428;
  let test = eq r r_expected in
  if not test then failwithf "test 1428 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a190; b190 } = r in
  let expected_a190 = 100. in
  mark_test_run 1429;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a190 a190 in
  if not test then failwithf "test 1429 failed";
  let expected_b190 = 101. in
  mark_test_run 1430;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b190 b190 in
  if not test then failwithf "test 1430 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a190; b190 } = r in
  let expected_a190 = 100. in
  mark_test_run 1431;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a190 a190 in
  if not test then failwithf "test 1431 failed";
  let expected_b190 = 101. in
  mark_test_run 1432;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b190 b190 in
  if not test then failwithf "test 1432 failed";

  ()
;;

let () =
  (************************************)
  (*   t191 = { float; float; int }   *)
  (************************************)
  let r = { a191 = 0.; b191 = 1.; c191 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a191 *)
  let actual = r.a191 in
  let expected = 0. in
  mark_test_run 1433;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1433 failed";
  (* Paths of depth 1 *)
  (* .b191 *)
  let actual = r.b191 in
  let expected = 1. in
  mark_test_run 1434;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1434 failed";
  (* Paths of depth 1 *)
  (* .c191 *)
  let actual = r.c191 in
  let expected = 2 in
  mark_test_run 1435;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1435 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a191 = a1911; b191 = b1911; c191 = c1911 } { a191 = a1912; b191 = b1912; c191 = c1912 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1911 a1912 && (fun a b -> Float.equal (globalize a) (globalize b)) b1911 b1912 && (fun a b -> Int.equal a b) c1911 c1912) in
  let next_r = { a191 = 100.; b191 = 101.; c191 = 102 } in
  let r_expected = { a191 = 0.; b191 = 1.; c191 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a191 *)
  r.a191 <- next_r.a191;
  let r_expected = { r_expected with a191 = next_r.a191 } in
  mark_test_run 1436;
  let test = eq r r_expected in
  if not test then failwithf "test 1436 failed";
  Gc.compact ();
  (* .b191 *)
  r.b191 <- next_r.b191;
  let r_expected = { r_expected with b191 = next_r.b191 } in
  mark_test_run 1437;
  let test = eq r r_expected in
  if not test then failwithf "test 1437 failed";
  Gc.compact ();
  (* .c191 *)
  r.c191 <- next_r.c191;
  let r_expected = { r_expected with c191 = next_r.c191 } in
  mark_test_run 1438;
  let test = eq r r_expected in
  if not test then failwithf "test 1438 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a191; b191; c191 } = r in
  let expected_a191 = 100. in
  mark_test_run 1439;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a191 a191 in
  if not test then failwithf "test 1439 failed";
  let expected_b191 = 101. in
  mark_test_run 1440;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b191 b191 in
  if not test then failwithf "test 1440 failed";
  let expected_c191 = 102 in
  mark_test_run 1441;
  let test = (fun a b -> Int.equal a b) expected_c191 c191 in
  if not test then failwithf "test 1441 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a191; b191; c191 } = r in
  let expected_a191 = 100. in
  mark_test_run 1442;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a191 a191 in
  if not test then failwithf "test 1442 failed";
  let expected_b191 = 101. in
  mark_test_run 1443;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b191 b191 in
  if not test then failwithf "test 1443 failed";
  let expected_c191 = 102 in
  mark_test_run 1444;
  let test = (fun a b -> Int.equal a b) expected_c191 c191 in
  if not test then failwithf "test 1444 failed";

  ()
;;

let () =
  (**************************************)
  (*   t192 = { float; float; float }   *)
  (**************************************)
  let r = { a192 = 0.; b192 = 1.; c192 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a192 *)
  let actual = r.a192 in
  let expected = 0. in
  mark_test_run 1445;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1445 failed";
  (* Paths of depth 1 *)
  (* .b192 *)
  let actual = r.b192 in
  let expected = 1. in
  mark_test_run 1446;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1446 failed";
  (* Paths of depth 1 *)
  (* .c192 *)
  let actual = r.c192 in
  let expected = 2. in
  mark_test_run 1447;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1447 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a192 = a1921; b192 = b1921; c192 = c1921 } { a192 = a1922; b192 = b1922; c192 = c1922 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1921 a1922 && (fun a b -> Float.equal (globalize a) (globalize b)) b1921 b1922 && (fun a b -> Float.equal (globalize a) (globalize b)) c1921 c1922) in
  let next_r = { a192 = 100.; b192 = 101.; c192 = 102. } in
  let r_expected = { a192 = 0.; b192 = 1.; c192 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a192 *)
  r.a192 <- next_r.a192;
  let r_expected = { r_expected with a192 = next_r.a192 } in
  mark_test_run 1448;
  let test = eq r r_expected in
  if not test then failwithf "test 1448 failed";
  Gc.compact ();
  (* .b192 *)
  r.b192 <- next_r.b192;
  let r_expected = { r_expected with b192 = next_r.b192 } in
  mark_test_run 1449;
  let test = eq r r_expected in
  if not test then failwithf "test 1449 failed";
  Gc.compact ();
  (* .c192 *)
  r.c192 <- next_r.c192;
  let r_expected = { r_expected with c192 = next_r.c192 } in
  mark_test_run 1450;
  let test = eq r r_expected in
  if not test then failwithf "test 1450 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a192; b192; c192 } = r in
  let expected_a192 = 100. in
  mark_test_run 1451;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a192 a192 in
  if not test then failwithf "test 1451 failed";
  let expected_b192 = 101. in
  mark_test_run 1452;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b192 b192 in
  if not test then failwithf "test 1452 failed";
  let expected_c192 = 102. in
  mark_test_run 1453;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c192 c192 in
  if not test then failwithf "test 1453 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a192; b192; c192 } = r in
  let expected_a192 = 100. in
  mark_test_run 1454;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a192 a192 in
  if not test then failwithf "test 1454 failed";
  let expected_b192 = 101. in
  mark_test_run 1455;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b192 b192 in
  if not test then failwithf "test 1455 failed";
  let expected_c192 = 102. in
  mark_test_run 1456;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c192 c192 in
  if not test then failwithf "test 1456 failed";

  ()
;;

let () =
  (***************************************)
  (*   t193 = { float; float; float# }   *)
  (***************************************)
  let r = { a193 = 0.; b193 = 1.; c193 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a193 *)
  let actual = r.a193 in
  let expected = 0. in
  mark_test_run 1457;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1457 failed";
  (* Paths of depth 1 *)
  (* .b193 *)
  let actual = r.b193 in
  let expected = 1. in
  mark_test_run 1458;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1458 failed";
  (* Paths of depth 1 *)
  (* .c193 *)
  let actual = r.c193 in
  let expected = #2. in
  mark_test_run 1459;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1459 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a193 = a1931; b193 = b1931; c193 = c1931 } { a193 = a1932; b193 = b1932; c193 = c1932 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1931 a1932 && (fun a b -> Float.equal (globalize a) (globalize b)) b1931 b1932 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) c1931 c1932) in
  let next_r = { a193 = 100.; b193 = 101.; c193 = #102. } in
  let r_expected = { a193 = 0.; b193 = 1.; c193 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a193 *)
  r.a193 <- next_r.a193;
  let r_expected = { r_expected with a193 = next_r.a193 } in
  mark_test_run 1460;
  let test = eq r r_expected in
  if not test then failwithf "test 1460 failed";
  Gc.compact ();
  (* .b193 *)
  r.b193 <- next_r.b193;
  let r_expected = { r_expected with b193 = next_r.b193 } in
  mark_test_run 1461;
  let test = eq r r_expected in
  if not test then failwithf "test 1461 failed";
  Gc.compact ();
  (* .c193 *)
  r.c193 <- next_r.c193;
  let r_expected = { r_expected with c193 = next_r.c193 } in
  mark_test_run 1462;
  let test = eq r r_expected in
  if not test then failwithf "test 1462 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a193; b193; c193 } = r in
  let expected_a193 = 100. in
  mark_test_run 1463;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a193 a193 in
  if not test then failwithf "test 1463 failed";
  let expected_b193 = 101. in
  mark_test_run 1464;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b193 b193 in
  if not test then failwithf "test 1464 failed";
  let expected_c193 = #102. in
  mark_test_run 1465;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c193 c193 in
  if not test then failwithf "test 1465 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a193; b193; c193 } = r in
  let expected_a193 = 100. in
  mark_test_run 1466;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a193 a193 in
  if not test then failwithf "test 1466 failed";
  let expected_b193 = 101. in
  mark_test_run 1467;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b193 b193 in
  if not test then failwithf "test 1467 failed";
  let expected_c193 = #102. in
  mark_test_run 1468;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c193 c193 in
  if not test then failwithf "test 1468 failed";

  ()
;;

let () =
  (********************************)
  (*   t194 = { float; float# }   *)
  (********************************)
  let r = { a194 = 0.; b194 = #1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a194 *)
  let actual = r.a194 in
  let expected = 0. in
  mark_test_run 1469;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1469 failed";
  (* Paths of depth 1 *)
  (* .b194 *)
  let actual = r.b194 in
  let expected = #1. in
  mark_test_run 1470;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1470 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a194 = a1941; b194 = b1941 } { a194 = a1942; b194 = b1942 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1941 a1942 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1941 b1942) in
  let next_r = { a194 = 100.; b194 = #101. } in
  let r_expected = { a194 = 0.; b194 = #1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a194 *)
  r.a194 <- next_r.a194;
  let r_expected = { r_expected with a194 = next_r.a194 } in
  mark_test_run 1471;
  let test = eq r r_expected in
  if not test then failwithf "test 1471 failed";
  Gc.compact ();
  (* .b194 *)
  r.b194 <- next_r.b194;
  let r_expected = { r_expected with b194 = next_r.b194 } in
  mark_test_run 1472;
  let test = eq r r_expected in
  if not test then failwithf "test 1472 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a194; b194 } = r in
  let expected_a194 = 100. in
  mark_test_run 1473;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a194 a194 in
  if not test then failwithf "test 1473 failed";
  let expected_b194 = #101. in
  mark_test_run 1474;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b194 b194 in
  if not test then failwithf "test 1474 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a194; b194 } = r in
  let expected_a194 = 100. in
  mark_test_run 1475;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a194 a194 in
  if not test then failwithf "test 1475 failed";
  let expected_b194 = #101. in
  mark_test_run 1476;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b194 b194 in
  if not test then failwithf "test 1476 failed";

  ()
;;

let () =
  (***************************************)
  (*   t195 = { float; float#; float }   *)
  (***************************************)
  let r = { a195 = 0.; b195 = #1.; c195 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a195 *)
  let actual = r.a195 in
  let expected = 0. in
  mark_test_run 1477;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1477 failed";
  (* Paths of depth 1 *)
  (* .b195 *)
  let actual = r.b195 in
  let expected = #1. in
  mark_test_run 1478;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1478 failed";
  (* Paths of depth 1 *)
  (* .c195 *)
  let actual = r.c195 in
  let expected = 2. in
  mark_test_run 1479;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1479 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a195 = a1951; b195 = b1951; c195 = c1951 } { a195 = a1952; b195 = b1952; c195 = c1952 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1951 a1952 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1951 b1952 && (fun a b -> Float.equal (globalize a) (globalize b)) c1951 c1952) in
  let next_r = { a195 = 100.; b195 = #101.; c195 = 102. } in
  let r_expected = { a195 = 0.; b195 = #1.; c195 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a195 *)
  r.a195 <- next_r.a195;
  let r_expected = { r_expected with a195 = next_r.a195 } in
  mark_test_run 1480;
  let test = eq r r_expected in
  if not test then failwithf "test 1480 failed";
  Gc.compact ();
  (* .b195 *)
  r.b195 <- next_r.b195;
  let r_expected = { r_expected with b195 = next_r.b195 } in
  mark_test_run 1481;
  let test = eq r r_expected in
  if not test then failwithf "test 1481 failed";
  Gc.compact ();
  (* .c195 *)
  r.c195 <- next_r.c195;
  let r_expected = { r_expected with c195 = next_r.c195 } in
  mark_test_run 1482;
  let test = eq r r_expected in
  if not test then failwithf "test 1482 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a195; b195; c195 } = r in
  let expected_a195 = 100. in
  mark_test_run 1483;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a195 a195 in
  if not test then failwithf "test 1483 failed";
  let expected_b195 = #101. in
  mark_test_run 1484;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b195 b195 in
  if not test then failwithf "test 1484 failed";
  let expected_c195 = 102. in
  mark_test_run 1485;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c195 c195 in
  if not test then failwithf "test 1485 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a195; b195; c195 } = r in
  let expected_a195 = 100. in
  mark_test_run 1486;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a195 a195 in
  if not test then failwithf "test 1486 failed";
  let expected_b195 = #101. in
  mark_test_run 1487;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b195 b195 in
  if not test then failwithf "test 1487 failed";
  let expected_c195 = 102. in
  mark_test_run 1488;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c195 c195 in
  if not test then failwithf "test 1488 failed";

  ()
;;

let () =
  (****************************************)
  (*   t196 = { float; float#; float# }   *)
  (****************************************)
  let r = { a196 = 0.; b196 = #1.; c196 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a196 *)
  let actual = r.a196 in
  let expected = 0. in
  mark_test_run 1489;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1489 failed";
  (* Paths of depth 1 *)
  (* .b196 *)
  let actual = r.b196 in
  let expected = #1. in
  mark_test_run 1490;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1490 failed";
  (* Paths of depth 1 *)
  (* .c196 *)
  let actual = r.c196 in
  let expected = #2. in
  mark_test_run 1491;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1491 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a196 = a1961; b196 = b1961; c196 = c1961 } { a196 = a1962; b196 = b1962; c196 = c1962 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1961 a1962 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1961 b1962 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) c1961 c1962) in
  let next_r = { a196 = 100.; b196 = #101.; c196 = #102. } in
  let r_expected = { a196 = 0.; b196 = #1.; c196 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a196 *)
  r.a196 <- next_r.a196;
  let r_expected = { r_expected with a196 = next_r.a196 } in
  mark_test_run 1492;
  let test = eq r r_expected in
  if not test then failwithf "test 1492 failed";
  Gc.compact ();
  (* .b196 *)
  r.b196 <- next_r.b196;
  let r_expected = { r_expected with b196 = next_r.b196 } in
  mark_test_run 1493;
  let test = eq r r_expected in
  if not test then failwithf "test 1493 failed";
  Gc.compact ();
  (* .c196 *)
  r.c196 <- next_r.c196;
  let r_expected = { r_expected with c196 = next_r.c196 } in
  mark_test_run 1494;
  let test = eq r r_expected in
  if not test then failwithf "test 1494 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a196; b196; c196 } = r in
  let expected_a196 = 100. in
  mark_test_run 1495;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a196 a196 in
  if not test then failwithf "test 1495 failed";
  let expected_b196 = #101. in
  mark_test_run 1496;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b196 b196 in
  if not test then failwithf "test 1496 failed";
  let expected_c196 = #102. in
  mark_test_run 1497;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c196 c196 in
  if not test then failwithf "test 1497 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a196; b196; c196 } = r in
  let expected_a196 = 100. in
  mark_test_run 1498;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a196 a196 in
  if not test then failwithf "test 1498 failed";
  let expected_b196 = #101. in
  mark_test_run 1499;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b196 b196 in
  if not test then failwithf "test 1499 failed";
  let expected_c196 = #102. in
  mark_test_run 1500;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c196 c196 in
  if not test then failwithf "test 1500 failed";

  ()
;;

let () =
  (************************************)
  (*   t197 = { float; (| unit_u) }   *)
  (************************************)
  let r = { a197 = 0.; b197 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a197 *)
  let actual = r.a197 in
  let expected = 0. in
  mark_test_run 1501;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1501 failed";
  (* Paths of depth 1 *)
  (* .b197 *)
  let actual = r.b197 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 1502;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 1502 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a197 = a1971; b197 = b1971 } { a197 = a1972; b197 = b1972 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1971 a1972 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b1971 b1972) in
  let next_r = { a197 = 100.; b197 = C15_0((unbox_unit ())) } in
  let r_expected = { a197 = 0.; b197 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a197 *)
  r.a197 <- next_r.a197;
  let r_expected = { r_expected with a197 = next_r.a197 } in
  mark_test_run 1503;
  let test = eq r r_expected in
  if not test then failwithf "test 1503 failed";
  Gc.compact ();
  (* .b197 *)
  r.b197 <- next_r.b197;
  let r_expected = { r_expected with b197 = next_r.b197 } in
  mark_test_run 1504;
  let test = eq r r_expected in
  if not test then failwithf "test 1504 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a197; b197 } = r in
  let expected_a197 = 100. in
  mark_test_run 1505;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a197 a197 in
  if not test then failwithf "test 1505 failed";
  let expected_b197 = C15_0((unbox_unit ())) in
  mark_test_run 1506;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b197 b197 in
  if not test then failwithf "test 1506 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a197; b197 } = r in
  let expected_a197 = 100. in
  mark_test_run 1507;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a197 a197 in
  if not test then failwithf "test 1507 failed";
  let expected_b197 = C15_0((unbox_unit ())) in
  mark_test_run 1508;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b197 b197 in
  if not test then failwithf "test 1508 failed";

  ()
;;

let () =
  (**************************************************************************)
  (*   t198 = { float; (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (**************************************************************************)
  let r = { a198 = 0.; b198 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a198 *)
  let actual = r.a198 in
  let expected = 0. in
  mark_test_run 1509;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1509 failed";
  (* Paths of depth 1 *)
  (* .b198 *)
  let actual = r.b198 in
  let expected = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 1510;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 1510 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a198 = a1981; b198 = b1981 } { a198 = a1982; b198 = b1982 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1981 a1982 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b1981 b1982) in
  let next_r = { a198 = 100.; b198 = C17_2(#((unbox_unit ()), (unbox_unit ()))) } in
  let r_expected = { a198 = 0.; b198 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a198 *)
  r.a198 <- next_r.a198;
  let r_expected = { r_expected with a198 = next_r.a198 } in
  mark_test_run 1511;
  let test = eq r r_expected in
  if not test then failwithf "test 1511 failed";
  Gc.compact ();
  (* .b198 *)
  r.b198 <- next_r.b198;
  let r_expected = { r_expected with b198 = next_r.b198 } in
  mark_test_run 1512;
  let test = eq r r_expected in
  if not test then failwithf "test 1512 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a198; b198 } = r in
  let expected_a198 = 100. in
  mark_test_run 1513;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a198 a198 in
  if not test then failwithf "test 1513 failed";
  let expected_b198 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 1514;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b198 b198 in
  if not test then failwithf "test 1514 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a198; b198 } = r in
  let expected_a198 = 100. in
  mark_test_run 1515;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a198 a198 in
  if not test then failwithf "test 1515 failed";
  let expected_b198 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 1516;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b198 b198 in
  if not test then failwithf "test 1516 failed";

  ()
;;

let () =
  (****************************************)
  (*   t199 = { float; #(unit_u, int) }   *)
  (****************************************)
  let r = { a199 = 0.; b199 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a199 *)
  let actual = r.a199 in
  let expected = 0. in
  mark_test_run 1517;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1517 failed";
  (* Paths of depth 1 *)
  (* .b199 *)
  let actual = r.b199 in
  let expected = #((unbox_unit ()), 1) in
  mark_test_run 1518;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 1518 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a199 = a1991; b199 = b1991 } { a199 = a1992; b199 = b1992 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1991 a1992 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b1991 b1992) in
  let next_r = { a199 = 100.; b199 = #((unbox_unit ()), 101) } in
  let r_expected = { a199 = 0.; b199 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a199 *)
  r.a199 <- next_r.a199;
  let r_expected = { r_expected with a199 = next_r.a199 } in
  mark_test_run 1519;
  let test = eq r r_expected in
  if not test then failwithf "test 1519 failed";
  Gc.compact ();
  (* .b199 *)
  r.b199 <- next_r.b199;
  let r_expected = { r_expected with b199 = next_r.b199 } in
  mark_test_run 1520;
  let test = eq r r_expected in
  if not test then failwithf "test 1520 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a199; b199 } = r in
  let expected_a199 = 100. in
  mark_test_run 1521;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a199 a199 in
  if not test then failwithf "test 1521 failed";
  let expected_b199 = #((unbox_unit ()), 101) in
  mark_test_run 1522;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b199 b199 in
  if not test then failwithf "test 1522 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a199; b199 } = r in
  let expected_a199 = 100. in
  mark_test_run 1523;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a199 a199 in
  if not test then failwithf "test 1523 failed";
  let expected_b199 = #((unbox_unit ()), 101) in
  mark_test_run 1524;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b199 b199 in
  if not test then failwithf "test 1524 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t200 = { float; #(unit_u, int64#) }   *)
  (*******************************************)
  let r = { a200 = 0.; b200 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a200 *)
  let actual = r.a200 in
  let expected = 0. in
  mark_test_run 1525;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1525 failed";
  (* Paths of depth 1 *)
  (* .b200 *)
  let actual = r.b200 in
  let expected = #((unbox_unit ()), #1L) in
  mark_test_run 1526;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 1526 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a200 = a2001; b200 = b2001 } { a200 = a2002; b200 = b2002 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2001 a2002 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b2001 b2002) in
  let next_r = { a200 = 100.; b200 = #((unbox_unit ()), #101L) } in
  let r_expected = { a200 = 0.; b200 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a200 *)
  r.a200 <- next_r.a200;
  let r_expected = { r_expected with a200 = next_r.a200 } in
  mark_test_run 1527;
  let test = eq r r_expected in
  if not test then failwithf "test 1527 failed";
  Gc.compact ();
  (* .b200 *)
  r.b200 <- next_r.b200;
  let r_expected = { r_expected with b200 = next_r.b200 } in
  mark_test_run 1528;
  let test = eq r r_expected in
  if not test then failwithf "test 1528 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a200; b200 } = r in
  let expected_a200 = 100. in
  mark_test_run 1529;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a200 a200 in
  if not test then failwithf "test 1529 failed";
  let expected_b200 = #((unbox_unit ()), #101L) in
  mark_test_run 1530;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b200 b200 in
  if not test then failwithf "test 1530 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a200; b200 } = r in
  let expected_a200 = 100. in
  mark_test_run 1531;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a200 a200 in
  if not test then failwithf "test 1531 failed";
  let expected_b200 = #((unbox_unit ()), #101L) in
  mark_test_run 1532;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b200 b200 in
  if not test then failwithf "test 1532 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t201 = { float; #(unit_u, unit_u) }   *)
  (*******************************************)
  let r = { a201 = 0.; b201 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a201 *)
  let actual = r.a201 in
  let expected = 0. in
  mark_test_run 1533;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1533 failed";
  (* Paths of depth 1 *)
  (* .b201 *)
  let actual = r.b201 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 1534;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 1534 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a201 = a2011; b201 = b2011 } { a201 = a2012; b201 = b2012 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2011 a2012 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b2011 b2012) in
  let next_r = { a201 = 100.; b201 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a201 = 0.; b201 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a201 *)
  r.a201 <- next_r.a201;
  let r_expected = { r_expected with a201 = next_r.a201 } in
  mark_test_run 1535;
  let test = eq r r_expected in
  if not test then failwithf "test 1535 failed";
  Gc.compact ();
  (* .b201 *)
  r.b201 <- next_r.b201;
  let r_expected = { r_expected with b201 = next_r.b201 } in
  mark_test_run 1536;
  let test = eq r r_expected in
  if not test then failwithf "test 1536 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a201; b201 } = r in
  let expected_a201 = 100. in
  mark_test_run 1537;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a201 a201 in
  if not test then failwithf "test 1537 failed";
  let expected_b201 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 1538;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b201 b201 in
  if not test then failwithf "test 1538 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a201; b201 } = r in
  let expected_a201 = 100. in
  mark_test_run 1539;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a201 a201 in
  if not test then failwithf "test 1539 failed";
  let expected_b201 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 1540;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b201 b201 in
  if not test then failwithf "test 1540 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t202 = { float; #(unit_u, string) }   *)
  (*******************************************)
  let r = { a202 = 0.; b202 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a202 *)
  let actual = r.a202 in
  let expected = 0. in
  mark_test_run 1541;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1541 failed";
  (* Paths of depth 1 *)
  (* .b202 *)
  let actual = r.b202 in
  let expected = #((unbox_unit ()), "1") in
  mark_test_run 1542;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 1542 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a202 = a2021; b202 = b2021 } { a202 = a2022; b202 = b2022 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2021 a2022 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b2021 b2022) in
  let next_r = { a202 = 100.; b202 = #((unbox_unit ()), "101") } in
  let r_expected = { a202 = 0.; b202 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a202 *)
  r.a202 <- next_r.a202;
  let r_expected = { r_expected with a202 = next_r.a202 } in
  mark_test_run 1543;
  let test = eq r r_expected in
  if not test then failwithf "test 1543 failed";
  Gc.compact ();
  (* .b202 *)
  r.b202 <- next_r.b202;
  let r_expected = { r_expected with b202 = next_r.b202 } in
  mark_test_run 1544;
  let test = eq r r_expected in
  if not test then failwithf "test 1544 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a202; b202 } = r in
  let expected_a202 = 100. in
  mark_test_run 1545;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a202 a202 in
  if not test then failwithf "test 1545 failed";
  let expected_b202 = #((unbox_unit ()), "101") in
  mark_test_run 1546;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b202 b202 in
  if not test then failwithf "test 1546 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a202; b202 } = r in
  let expected_a202 = 100. in
  mark_test_run 1547;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a202 a202 in
  if not test then failwithf "test 1547 failed";
  let expected_b202 = #((unbox_unit ()), "101") in
  mark_test_run 1548;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b202 b202 in
  if not test then failwithf "test 1548 failed";

  ()
;;

let () =
  (**********************************)
  (*   t203 = { float; #{ int } }   *)
  (**********************************)
  let r = { a203 = 0.; b203 = #{ a23 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a203 *)
  let actual = r.a203 in
  let expected = 0. in
  mark_test_run 1549;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1549 failed";
  (* Paths of depth 1 *)
  (* .b203 *)
  let actual = r.b203 in
  let expected = #{ a23 = 1 } in
  mark_test_run 1550;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 1550 failed";
  (* Paths of depth 2 *)
  (* .b203.#a23 *)
  let actual = r.b203.#a23 in
  let expected = 1 in
  mark_test_run 1551;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1551 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a203 = a2031; b203 = b2031 } { a203 = a2032; b203 = b2032 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2031 a2032 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b2031 b2032) in
  let next_r = { a203 = 100.; b203 = #{ a23 = 101 } } in
  let r_expected = { a203 = 0.; b203 = #{ a23 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a203 *)
  r.a203 <- next_r.a203;
  let r_expected = { r_expected with a203 = next_r.a203 } in
  mark_test_run 1552;
  let test = eq r r_expected in
  if not test then failwithf "test 1552 failed";
  Gc.compact ();
  (* .b203 *)
  r.b203 <- next_r.b203;
  let r_expected = { r_expected with b203 = next_r.b203 } in
  mark_test_run 1553;
  let test = eq r r_expected in
  if not test then failwithf "test 1553 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a203; b203 = #{ a23 } } = r in
  let expected_a203 = 100. in
  mark_test_run 1554;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a203 a203 in
  if not test then failwithf "test 1554 failed";
  let expected_a23 = 101 in
  mark_test_run 1555;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 1555 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a203; b203 } = r in
  let expected_a203 = 100. in
  mark_test_run 1556;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a203 a203 in
  if not test then failwithf "test 1556 failed";
  let expected_b203 = #{ a23 = 101 } in
  mark_test_run 1557;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) expected_b203 b203 in
  if not test then failwithf "test 1557 failed";

  ()
;;

let () =
  (***************************************)
  (*   t204 = { float; #{ int; int } }   *)
  (***************************************)
  let r = { a204 = 0.; b204 = #{ a25 = 1; b25 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a204 *)
  let actual = r.a204 in
  let expected = 0. in
  mark_test_run 1558;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1558 failed";
  (* Paths of depth 1 *)
  (* .b204 *)
  let actual = r.b204 in
  let expected = #{ a25 = 1; b25 = 2 } in
  mark_test_run 1559;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 1559 failed";
  (* Paths of depth 2 *)
  (* .b204.#a25 *)
  let actual = r.b204.#a25 in
  let expected = 1 in
  mark_test_run 1560;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1560 failed";
  (* .b204.#b25 *)
  let actual = r.b204.#b25 in
  let expected = 2 in
  mark_test_run 1561;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1561 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a204 = a2041; b204 = b2041 } { a204 = a2042; b204 = b2042 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2041 a2042 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b2041 b2042) in
  let next_r = { a204 = 100.; b204 = #{ a25 = 101; b25 = 102 } } in
  let r_expected = { a204 = 0.; b204 = #{ a25 = 1; b25 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a204 *)
  r.a204 <- next_r.a204;
  let r_expected = { r_expected with a204 = next_r.a204 } in
  mark_test_run 1562;
  let test = eq r r_expected in
  if not test then failwithf "test 1562 failed";
  Gc.compact ();
  (* .b204 *)
  r.b204 <- next_r.b204;
  let r_expected = { r_expected with b204 = next_r.b204 } in
  mark_test_run 1563;
  let test = eq r r_expected in
  if not test then failwithf "test 1563 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a204; b204 = #{ a25; b25 } } = r in
  let expected_a204 = 100. in
  mark_test_run 1564;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a204 a204 in
  if not test then failwithf "test 1564 failed";
  let expected_a25 = 101 in
  mark_test_run 1565;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 1565 failed";
  let expected_b25 = 102 in
  mark_test_run 1566;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 1566 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a204; b204 } = r in
  let expected_a204 = 100. in
  mark_test_run 1567;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a204 a204 in
  if not test then failwithf "test 1567 failed";
  let expected_b204 = #{ a25 = 101; b25 = 102 } in
  mark_test_run 1568;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) expected_b204 b204 in
  if not test then failwithf "test 1568 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t205 = { float; #{ int; float } }   *)
  (*****************************************)
  let r = { a205 = 0.; b205 = #{ a29 = 1; b29 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a205 *)
  let actual = r.a205 in
  let expected = 0. in
  mark_test_run 1569;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1569 failed";
  (* Paths of depth 1 *)
  (* .b205 *)
  let actual = r.b205 in
  let expected = #{ a29 = 1; b29 = 2. } in
  mark_test_run 1570;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 1570 failed";
  (* Paths of depth 2 *)
  (* .b205.#a29 *)
  let actual = r.b205.#a29 in
  let expected = 1 in
  mark_test_run 1571;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1571 failed";
  (* .b205.#b29 *)
  let actual = r.b205.#b29 in
  let expected = 2. in
  mark_test_run 1572;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1572 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a205 = a2051; b205 = b2051 } { a205 = a2052; b205 = b2052 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2051 a2052 && (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) b2051 b2052) in
  let next_r = { a205 = 100.; b205 = #{ a29 = 101; b29 = 102. } } in
  let r_expected = { a205 = 0.; b205 = #{ a29 = 1; b29 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a205 *)
  r.a205 <- next_r.a205;
  let r_expected = { r_expected with a205 = next_r.a205 } in
  mark_test_run 1573;
  let test = eq r r_expected in
  if not test then failwithf "test 1573 failed";
  Gc.compact ();
  (* .b205 *)
  r.b205 <- next_r.b205;
  let r_expected = { r_expected with b205 = next_r.b205 } in
  mark_test_run 1574;
  let test = eq r r_expected in
  if not test then failwithf "test 1574 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a205; b205 = #{ a29; b29 } } = r in
  let expected_a205 = 100. in
  mark_test_run 1575;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a205 a205 in
  if not test then failwithf "test 1575 failed";
  let expected_a29 = 101 in
  mark_test_run 1576;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 1576 failed";
  let expected_b29 = 102. in
  mark_test_run 1577;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 1577 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a205; b205 } = r in
  let expected_a205 = 100. in
  mark_test_run 1578;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a205 a205 in
  if not test then failwithf "test 1578 failed";
  let expected_b205 = #{ a29 = 101; b29 = 102. } in
  mark_test_run 1579;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) expected_b205 b205 in
  if not test then failwithf "test 1579 failed";

  ()
;;

let () =
  (********************************************)
  (*   t206 = { float; #{ int; #{ int } } }   *)
  (********************************************)
  let r = { a206 = 0.; b206 = #{ a31 = 1; b31 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a206 *)
  let actual = r.a206 in
  let expected = 0. in
  mark_test_run 1580;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1580 failed";
  (* Paths of depth 1 *)
  (* .b206 *)
  let actual = r.b206 in
  let expected = #{ a31 = 1; b31 = #{ a23 = 2 } } in
  mark_test_run 1581;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int.equal a b) a311 a312 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b311 b312) actual expected in
  if not test then failwithf "test 1581 failed";
  (* Paths of depth 2 *)
  (* .b206.#a31 *)
  let actual = r.b206.#a31 in
  let expected = 1 in
  mark_test_run 1582;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1582 failed";
  (* .b206.#b31 *)
  let actual = r.b206.#b31 in
  let expected = #{ a23 = 2 } in
  mark_test_run 1583;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 1583 failed";
  (* Paths of depth 3 *)
  (* .b206.#b31.#a23 *)
  let actual = r.b206.#b31.#a23 in
  let expected = 2 in
  mark_test_run 1584;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1584 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a206 = a2061; b206 = b2061 } { a206 = a2062; b206 = b2062 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2061 a2062 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int.equal a b) a311 a312 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b311 b312) b2061 b2062) in
  let next_r = { a206 = 100.; b206 = #{ a31 = 101; b31 = #{ a23 = 102 } } } in
  let r_expected = { a206 = 0.; b206 = #{ a31 = 1; b31 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a206 *)
  r.a206 <- next_r.a206;
  let r_expected = { r_expected with a206 = next_r.a206 } in
  mark_test_run 1585;
  let test = eq r r_expected in
  if not test then failwithf "test 1585 failed";
  Gc.compact ();
  (* .b206 *)
  r.b206 <- next_r.b206;
  let r_expected = { r_expected with b206 = next_r.b206 } in
  mark_test_run 1586;
  let test = eq r r_expected in
  if not test then failwithf "test 1586 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a206; b206 = #{ a31; b31 = #{ a23 } } } = r in
  let expected_a206 = 100. in
  mark_test_run 1587;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a206 a206 in
  if not test then failwithf "test 1587 failed";
  let expected_a31 = 101 in
  mark_test_run 1588;
  let test = (fun a b -> Int.equal a b) expected_a31 a31 in
  if not test then failwithf "test 1588 failed";
  let expected_a23 = 102 in
  mark_test_run 1589;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 1589 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a206; b206 } = r in
  let expected_a206 = 100. in
  mark_test_run 1590;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a206 a206 in
  if not test then failwithf "test 1590 failed";
  let expected_b206 = #{ a31 = 101; b31 = #{ a23 = 102 } } in
  mark_test_run 1591;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int.equal a b) a311 a312 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b311 b312) expected_b206 b206 in
  if not test then failwithf "test 1591 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t207 = { float; #{ int; #{ float } } }   *)
  (**********************************************)
  let r = { a207 = 0.; b207 = #{ a37 = 1; b37 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a207 *)
  let actual = r.a207 in
  let expected = 0. in
  mark_test_run 1592;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1592 failed";
  (* Paths of depth 1 *)
  (* .b207 *)
  let actual = r.b207 in
  let expected = #{ a37 = 1; b37 = #{ a36 = 2. } } in
  mark_test_run 1593;
  let test = (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int.equal a b) a371 a372 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b371 b372) actual expected in
  if not test then failwithf "test 1593 failed";
  (* Paths of depth 2 *)
  (* .b207.#a37 *)
  let actual = r.b207.#a37 in
  let expected = 1 in
  mark_test_run 1594;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1594 failed";
  (* .b207.#b37 *)
  let actual = r.b207.#b37 in
  let expected = #{ a36 = 2. } in
  mark_test_run 1595;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 1595 failed";
  (* Paths of depth 3 *)
  (* .b207.#b37.#a36 *)
  let actual = r.b207.#b37.#a36 in
  let expected = 2. in
  mark_test_run 1596;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1596 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a207 = a2071; b207 = b2071 } { a207 = a2072; b207 = b2072 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2071 a2072 && (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int.equal a b) a371 a372 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b371 b372) b2071 b2072) in
  let next_r = { a207 = 100.; b207 = #{ a37 = 101; b37 = #{ a36 = 102. } } } in
  let r_expected = { a207 = 0.; b207 = #{ a37 = 1; b37 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a207 *)
  r.a207 <- next_r.a207;
  let r_expected = { r_expected with a207 = next_r.a207 } in
  mark_test_run 1597;
  let test = eq r r_expected in
  if not test then failwithf "test 1597 failed";
  Gc.compact ();
  (* .b207 *)
  r.b207 <- next_r.b207;
  let r_expected = { r_expected with b207 = next_r.b207 } in
  mark_test_run 1598;
  let test = eq r r_expected in
  if not test then failwithf "test 1598 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a207; b207 = #{ a37; b37 = #{ a36 } } } = r in
  let expected_a207 = 100. in
  mark_test_run 1599;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a207 a207 in
  if not test then failwithf "test 1599 failed";
  let expected_a37 = 101 in
  mark_test_run 1600;
  let test = (fun a b -> Int.equal a b) expected_a37 a37 in
  if not test then failwithf "test 1600 failed";
  let expected_a36 = 102. in
  mark_test_run 1601;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 1601 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a207; b207 } = r in
  let expected_a207 = 100. in
  mark_test_run 1602;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a207 a207 in
  if not test then failwithf "test 1602 failed";
  let expected_b207 = #{ a37 = 101; b37 = #{ a36 = 102. } } in
  mark_test_run 1603;
  let test = (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int.equal a b) a371 a372 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b371 b372) expected_b207 b207 in
  if not test then failwithf "test 1603 failed";

  ()
;;

let () =
  (************************************)
  (*   t208 = { float; #{ float } }   *)
  (************************************)
  let r = { a208 = 0.; b208 = #{ a36 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a208 *)
  let actual = r.a208 in
  let expected = 0. in
  mark_test_run 1604;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1604 failed";
  (* Paths of depth 1 *)
  (* .b208 *)
  let actual = r.b208 in
  let expected = #{ a36 = 1. } in
  mark_test_run 1605;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 1605 failed";
  (* Paths of depth 2 *)
  (* .b208.#a36 *)
  let actual = r.b208.#a36 in
  let expected = 1. in
  mark_test_run 1606;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1606 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a208 = a2081; b208 = b2081 } { a208 = a2082; b208 = b2082 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2081 a2082 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b2081 b2082) in
  let next_r = { a208 = 100.; b208 = #{ a36 = 101. } } in
  let r_expected = { a208 = 0.; b208 = #{ a36 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a208 *)
  r.a208 <- next_r.a208;
  let r_expected = { r_expected with a208 = next_r.a208 } in
  mark_test_run 1607;
  let test = eq r r_expected in
  if not test then failwithf "test 1607 failed";
  Gc.compact ();
  (* .b208 *)
  r.b208 <- next_r.b208;
  let r_expected = { r_expected with b208 = next_r.b208 } in
  mark_test_run 1608;
  let test = eq r r_expected in
  if not test then failwithf "test 1608 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a208; b208 = #{ a36 } } = r in
  let expected_a208 = 100. in
  mark_test_run 1609;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a208 a208 in
  if not test then failwithf "test 1609 failed";
  let expected_a36 = 101. in
  mark_test_run 1610;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 1610 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a208; b208 } = r in
  let expected_a208 = 100. in
  mark_test_run 1611;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a208 a208 in
  if not test then failwithf "test 1611 failed";
  let expected_b208 = #{ a36 = 101. } in
  mark_test_run 1612;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) expected_b208 b208 in
  if not test then failwithf "test 1612 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t209 = { float; #{ float; int } }   *)
  (*****************************************)
  let r = { a209 = 0.; b209 = #{ a49 = 1.; b49 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a209 *)
  let actual = r.a209 in
  let expected = 0. in
  mark_test_run 1613;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1613 failed";
  (* Paths of depth 1 *)
  (* .b209 *)
  let actual = r.b209 in
  let expected = #{ a49 = 1.; b49 = 2 } in
  mark_test_run 1614;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 1614 failed";
  (* Paths of depth 2 *)
  (* .b209.#a49 *)
  let actual = r.b209.#a49 in
  let expected = 1. in
  mark_test_run 1615;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1615 failed";
  (* .b209.#b49 *)
  let actual = r.b209.#b49 in
  let expected = 2 in
  mark_test_run 1616;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1616 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a209 = a2091; b209 = b2091 } { a209 = a2092; b209 = b2092 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2091 a2092 && (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) b2091 b2092) in
  let next_r = { a209 = 100.; b209 = #{ a49 = 101.; b49 = 102 } } in
  let r_expected = { a209 = 0.; b209 = #{ a49 = 1.; b49 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a209 *)
  r.a209 <- next_r.a209;
  let r_expected = { r_expected with a209 = next_r.a209 } in
  mark_test_run 1617;
  let test = eq r r_expected in
  if not test then failwithf "test 1617 failed";
  Gc.compact ();
  (* .b209 *)
  r.b209 <- next_r.b209;
  let r_expected = { r_expected with b209 = next_r.b209 } in
  mark_test_run 1618;
  let test = eq r r_expected in
  if not test then failwithf "test 1618 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a209; b209 = #{ a49; b49 } } = r in
  let expected_a209 = 100. in
  mark_test_run 1619;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a209 a209 in
  if not test then failwithf "test 1619 failed";
  let expected_a49 = 101. in
  mark_test_run 1620;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 1620 failed";
  let expected_b49 = 102 in
  mark_test_run 1621;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 1621 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a209; b209 } = r in
  let expected_a209 = 100. in
  mark_test_run 1622;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a209 a209 in
  if not test then failwithf "test 1622 failed";
  let expected_b209 = #{ a49 = 101.; b49 = 102 } in
  mark_test_run 1623;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) expected_b209 b209 in
  if not test then failwithf "test 1623 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t210 = { float; #{ float; float } }   *)
  (*******************************************)
  let r = { a210 = 0.; b210 = #{ a51 = 1.; b51 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a210 *)
  let actual = r.a210 in
  let expected = 0. in
  mark_test_run 1624;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1624 failed";
  (* Paths of depth 1 *)
  (* .b210 *)
  let actual = r.b210 in
  let expected = #{ a51 = 1.; b51 = 2. } in
  mark_test_run 1625;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 1625 failed";
  (* Paths of depth 2 *)
  (* .b210.#a51 *)
  let actual = r.b210.#a51 in
  let expected = 1. in
  mark_test_run 1626;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1626 failed";
  (* .b210.#b51 *)
  let actual = r.b210.#b51 in
  let expected = 2. in
  mark_test_run 1627;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1627 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a210 = a2101; b210 = b2101 } { a210 = a2102; b210 = b2102 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2101 a2102 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b2101 b2102) in
  let next_r = { a210 = 100.; b210 = #{ a51 = 101.; b51 = 102. } } in
  let r_expected = { a210 = 0.; b210 = #{ a51 = 1.; b51 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a210 *)
  r.a210 <- next_r.a210;
  let r_expected = { r_expected with a210 = next_r.a210 } in
  mark_test_run 1628;
  let test = eq r r_expected in
  if not test then failwithf "test 1628 failed";
  Gc.compact ();
  (* .b210 *)
  r.b210 <- next_r.b210;
  let r_expected = { r_expected with b210 = next_r.b210 } in
  mark_test_run 1629;
  let test = eq r r_expected in
  if not test then failwithf "test 1629 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a210; b210 = #{ a51; b51 } } = r in
  let expected_a210 = 100. in
  mark_test_run 1630;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a210 a210 in
  if not test then failwithf "test 1630 failed";
  let expected_a51 = 101. in
  mark_test_run 1631;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 1631 failed";
  let expected_b51 = 102. in
  mark_test_run 1632;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 1632 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a210; b210 } = r in
  let expected_a210 = 100. in
  mark_test_run 1633;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a210 a210 in
  if not test then failwithf "test 1633 failed";
  let expected_b210 = #{ a51 = 101.; b51 = 102. } in
  mark_test_run 1634;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) expected_b210 b210 in
  if not test then failwithf "test 1634 failed";

  ()
;;

let () =
  (********************************************)
  (*   t212 = { float; #{ float; float# } }   *)
  (********************************************)
  let r = { a212 = 0.; b212 = #{ a211 = 1.; b211 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a212 *)
  let actual = r.a212 in
  let expected = 0. in
  mark_test_run 1635;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1635 failed";
  (* Paths of depth 1 *)
  (* .b212 *)
  let actual = r.b212 in
  let expected = #{ a211 = 1.; b211 = #2. } in
  mark_test_run 1636;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 1636 failed";
  (* Paths of depth 2 *)
  (* .b212.#a211 *)
  let actual = r.b212.#a211 in
  let expected = 1. in
  mark_test_run 1637;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1637 failed";
  (* .b212.#b211 *)
  let actual = r.b212.#b211 in
  let expected = #2. in
  mark_test_run 1638;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1638 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a212 = a2121; b212 = b2121 } { a212 = a2122; b212 = b2122 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2121 a2122 && (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) b2121 b2122) in
  let next_r = { a212 = 100.; b212 = #{ a211 = 101.; b211 = #102. } } in
  let r_expected = { a212 = 0.; b212 = #{ a211 = 1.; b211 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a212 *)
  r.a212 <- next_r.a212;
  let r_expected = { r_expected with a212 = next_r.a212 } in
  mark_test_run 1639;
  let test = eq r r_expected in
  if not test then failwithf "test 1639 failed";
  Gc.compact ();
  (* .b212 *)
  r.b212 <- next_r.b212;
  let r_expected = { r_expected with b212 = next_r.b212 } in
  mark_test_run 1640;
  let test = eq r r_expected in
  if not test then failwithf "test 1640 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a212; b212 = #{ a211; b211 } } = r in
  let expected_a212 = 100. in
  mark_test_run 1641;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a212 a212 in
  if not test then failwithf "test 1641 failed";
  let expected_a211 = 101. in
  mark_test_run 1642;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 1642 failed";
  let expected_b211 = #102. in
  mark_test_run 1643;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 1643 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a212; b212 } = r in
  let expected_a212 = 100. in
  mark_test_run 1644;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a212 a212 in
  if not test then failwithf "test 1644 failed";
  let expected_b212 = #{ a211 = 101.; b211 = #102. } in
  mark_test_run 1645;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) expected_b212 b212 in
  if not test then failwithf "test 1645 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t213 = { float; #{ float; #{ int } } }   *)
  (**********************************************)
  let r = { a213 = 0.; b213 = #{ a53 = 1.; b53 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a213 *)
  let actual = r.a213 in
  let expected = 0. in
  mark_test_run 1646;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1646 failed";
  (* Paths of depth 1 *)
  (* .b213 *)
  let actual = r.b213 in
  let expected = #{ a53 = 1.; b53 = #{ a23 = 2 } } in
  mark_test_run 1647;
  let test = (fun #{ a53 = a531; b53 = b531 } #{ a53 = a532; b53 = b532 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a531 a532 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b531 b532) actual expected in
  if not test then failwithf "test 1647 failed";
  (* Paths of depth 2 *)
  (* .b213.#a53 *)
  let actual = r.b213.#a53 in
  let expected = 1. in
  mark_test_run 1648;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1648 failed";
  (* .b213.#b53 *)
  let actual = r.b213.#b53 in
  let expected = #{ a23 = 2 } in
  mark_test_run 1649;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 1649 failed";
  (* Paths of depth 3 *)
  (* .b213.#b53.#a23 *)
  let actual = r.b213.#b53.#a23 in
  let expected = 2 in
  mark_test_run 1650;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1650 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a213 = a2131; b213 = b2131 } { a213 = a2132; b213 = b2132 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2131 a2132 && (fun #{ a53 = a531; b53 = b531 } #{ a53 = a532; b53 = b532 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a531 a532 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b531 b532) b2131 b2132) in
  let next_r = { a213 = 100.; b213 = #{ a53 = 101.; b53 = #{ a23 = 102 } } } in
  let r_expected = { a213 = 0.; b213 = #{ a53 = 1.; b53 = #{ a23 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a213 *)
  r.a213 <- next_r.a213;
  let r_expected = { r_expected with a213 = next_r.a213 } in
  mark_test_run 1651;
  let test = eq r r_expected in
  if not test then failwithf "test 1651 failed";
  Gc.compact ();
  (* .b213 *)
  r.b213 <- next_r.b213;
  let r_expected = { r_expected with b213 = next_r.b213 } in
  mark_test_run 1652;
  let test = eq r r_expected in
  if not test then failwithf "test 1652 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a213; b213 = #{ a53; b53 = #{ a23 } } } = r in
  let expected_a213 = 100. in
  mark_test_run 1653;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a213 a213 in
  if not test then failwithf "test 1653 failed";
  let expected_a53 = 101. in
  mark_test_run 1654;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a53 a53 in
  if not test then failwithf "test 1654 failed";
  let expected_a23 = 102 in
  mark_test_run 1655;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 1655 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a213; b213 } = r in
  let expected_a213 = 100. in
  mark_test_run 1656;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a213 a213 in
  if not test then failwithf "test 1656 failed";
  let expected_b213 = #{ a53 = 101.; b53 = #{ a23 = 102 } } in
  mark_test_run 1657;
  let test = (fun #{ a53 = a531; b53 = b531 } #{ a53 = a532; b53 = b532 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a531 a532 && (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) b531 b532) expected_b213 b213 in
  if not test then failwithf "test 1657 failed";

  ()
;;

let () =
  (************************************************)
  (*   t214 = { float; #{ float; #{ float } } }   *)
  (************************************************)
  let r = { a214 = 0.; b214 = #{ a55 = 1.; b55 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a214 *)
  let actual = r.a214 in
  let expected = 0. in
  mark_test_run 1658;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1658 failed";
  (* Paths of depth 1 *)
  (* .b214 *)
  let actual = r.b214 in
  let expected = #{ a55 = 1.; b55 = #{ a36 = 2. } } in
  mark_test_run 1659;
  let test = (fun #{ a55 = a551; b55 = b551 } #{ a55 = a552; b55 = b552 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a551 a552 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b551 b552) actual expected in
  if not test then failwithf "test 1659 failed";
  (* Paths of depth 2 *)
  (* .b214.#a55 *)
  let actual = r.b214.#a55 in
  let expected = 1. in
  mark_test_run 1660;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1660 failed";
  (* .b214.#b55 *)
  let actual = r.b214.#b55 in
  let expected = #{ a36 = 2. } in
  mark_test_run 1661;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 1661 failed";
  (* Paths of depth 3 *)
  (* .b214.#b55.#a36 *)
  let actual = r.b214.#b55.#a36 in
  let expected = 2. in
  mark_test_run 1662;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1662 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a214 = a2141; b214 = b2141 } { a214 = a2142; b214 = b2142 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2141 a2142 && (fun #{ a55 = a551; b55 = b551 } #{ a55 = a552; b55 = b552 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a551 a552 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b551 b552) b2141 b2142) in
  let next_r = { a214 = 100.; b214 = #{ a55 = 101.; b55 = #{ a36 = 102. } } } in
  let r_expected = { a214 = 0.; b214 = #{ a55 = 1.; b55 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a214 *)
  r.a214 <- next_r.a214;
  let r_expected = { r_expected with a214 = next_r.a214 } in
  mark_test_run 1663;
  let test = eq r r_expected in
  if not test then failwithf "test 1663 failed";
  Gc.compact ();
  (* .b214 *)
  r.b214 <- next_r.b214;
  let r_expected = { r_expected with b214 = next_r.b214 } in
  mark_test_run 1664;
  let test = eq r r_expected in
  if not test then failwithf "test 1664 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a214; b214 = #{ a55; b55 = #{ a36 } } } = r in
  let expected_a214 = 100. in
  mark_test_run 1665;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a214 a214 in
  if not test then failwithf "test 1665 failed";
  let expected_a55 = 101. in
  mark_test_run 1666;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a55 a55 in
  if not test then failwithf "test 1666 failed";
  let expected_a36 = 102. in
  mark_test_run 1667;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 1667 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a214; b214 } = r in
  let expected_a214 = 100. in
  mark_test_run 1668;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a214 a214 in
  if not test then failwithf "test 1668 failed";
  let expected_b214 = #{ a55 = 101.; b55 = #{ a36 = 102. } } in
  mark_test_run 1669;
  let test = (fun #{ a55 = a551; b55 = b551 } #{ a55 = a552; b55 = b552 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a551 a552 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b551 b552) expected_b214 b214 in
  if not test then failwithf "test 1669 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t217 = { float; #{ float; #{ float# } } }   *)
  (*************************************************)
  let r = { a217 = 0.; b217 = #{ a216 = 1.; b216 = #{ a215 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a217 *)
  let actual = r.a217 in
  let expected = 0. in
  mark_test_run 1670;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1670 failed";
  (* Paths of depth 1 *)
  (* .b217 *)
  let actual = r.b217 in
  let expected = #{ a216 = 1.; b216 = #{ a215 = #2. } } in
  mark_test_run 1671;
  let test = (fun #{ a216 = a2161; b216 = b2161 } #{ a216 = a2162; b216 = b2162 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2161 a2162 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2161 b2162) actual expected in
  if not test then failwithf "test 1671 failed";
  (* Paths of depth 2 *)
  (* .b217.#a216 *)
  let actual = r.b217.#a216 in
  let expected = 1. in
  mark_test_run 1672;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1672 failed";
  (* .b217.#b216 *)
  let actual = r.b217.#b216 in
  let expected = #{ a215 = #2. } in
  mark_test_run 1673;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) actual expected in
  if not test then failwithf "test 1673 failed";
  (* Paths of depth 3 *)
  (* .b217.#b216.#a215 *)
  let actual = r.b217.#b216.#a215 in
  let expected = #2. in
  mark_test_run 1674;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1674 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a217 = a2171; b217 = b2171 } { a217 = a2172; b217 = b2172 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2171 a2172 && (fun #{ a216 = a2161; b216 = b2161 } #{ a216 = a2162; b216 = b2162 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2161 a2162 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2161 b2162) b2171 b2172) in
  let next_r = { a217 = 100.; b217 = #{ a216 = 101.; b216 = #{ a215 = #102. } } } in
  let r_expected = { a217 = 0.; b217 = #{ a216 = 1.; b216 = #{ a215 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a217 *)
  r.a217 <- next_r.a217;
  let r_expected = { r_expected with a217 = next_r.a217 } in
  mark_test_run 1675;
  let test = eq r r_expected in
  if not test then failwithf "test 1675 failed";
  Gc.compact ();
  (* .b217 *)
  r.b217 <- next_r.b217;
  let r_expected = { r_expected with b217 = next_r.b217 } in
  mark_test_run 1676;
  let test = eq r r_expected in
  if not test then failwithf "test 1676 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a217; b217 = #{ a216; b216 = #{ a215 } } } = r in
  let expected_a217 = 100. in
  mark_test_run 1677;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a217 a217 in
  if not test then failwithf "test 1677 failed";
  let expected_a216 = 101. in
  mark_test_run 1678;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a216 a216 in
  if not test then failwithf "test 1678 failed";
  let expected_a215 = #102. in
  mark_test_run 1679;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a215 a215 in
  if not test then failwithf "test 1679 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a217; b217 } = r in
  let expected_a217 = 100. in
  mark_test_run 1680;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a217 a217 in
  if not test then failwithf "test 1680 failed";
  let expected_b217 = #{ a216 = 101.; b216 = #{ a215 = #102. } } in
  mark_test_run 1681;
  let test = (fun #{ a216 = a2161; b216 = b2161 } #{ a216 = a2162; b216 = b2162 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2161 a2162 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2161 b2162) expected_b217 b217 in
  if not test then failwithf "test 1681 failed";

  ()
;;

let () =
  (*************************************)
  (*   t218 = { float; #{ float# } }   *)
  (*************************************)
  let r = { a218 = 0.; b218 = #{ a215 = #1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a218 *)
  let actual = r.a218 in
  let expected = 0. in
  mark_test_run 1682;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1682 failed";
  (* Paths of depth 1 *)
  (* .b218 *)
  let actual = r.b218 in
  let expected = #{ a215 = #1. } in
  mark_test_run 1683;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) actual expected in
  if not test then failwithf "test 1683 failed";
  (* Paths of depth 2 *)
  (* .b218.#a215 *)
  let actual = r.b218.#a215 in
  let expected = #1. in
  mark_test_run 1684;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1684 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a218 = a2181; b218 = b2181 } { a218 = a2182; b218 = b2182 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2181 a2182 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2181 b2182) in
  let next_r = { a218 = 100.; b218 = #{ a215 = #101. } } in
  let r_expected = { a218 = 0.; b218 = #{ a215 = #1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a218 *)
  r.a218 <- next_r.a218;
  let r_expected = { r_expected with a218 = next_r.a218 } in
  mark_test_run 1685;
  let test = eq r r_expected in
  if not test then failwithf "test 1685 failed";
  Gc.compact ();
  (* .b218 *)
  r.b218 <- next_r.b218;
  let r_expected = { r_expected with b218 = next_r.b218 } in
  mark_test_run 1686;
  let test = eq r r_expected in
  if not test then failwithf "test 1686 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a218; b218 = #{ a215 } } = r in
  let expected_a218 = 100. in
  mark_test_run 1687;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a218 a218 in
  if not test then failwithf "test 1687 failed";
  let expected_a215 = #101. in
  mark_test_run 1688;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a215 a215 in
  if not test then failwithf "test 1688 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a218; b218 } = r in
  let expected_a218 = 100. in
  mark_test_run 1689;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a218 a218 in
  if not test then failwithf "test 1689 failed";
  let expected_b218 = #{ a215 = #101. } in
  mark_test_run 1690;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) expected_b218 b218 in
  if not test then failwithf "test 1690 failed";

  ()
;;

let () =
  (********************************************)
  (*   t220 = { float; #{ float#; float } }   *)
  (********************************************)
  let r = { a220 = 0.; b220 = #{ a219 = #1.; b219 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a220 *)
  let actual = r.a220 in
  let expected = 0. in
  mark_test_run 1691;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1691 failed";
  (* Paths of depth 1 *)
  (* .b220 *)
  let actual = r.b220 in
  let expected = #{ a219 = #1.; b219 = 2. } in
  mark_test_run 1692;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 1692 failed";
  (* Paths of depth 2 *)
  (* .b220.#a219 *)
  let actual = r.b220.#a219 in
  let expected = #1. in
  mark_test_run 1693;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1693 failed";
  (* .b220.#b219 *)
  let actual = r.b220.#b219 in
  let expected = 2. in
  mark_test_run 1694;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1694 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a220 = a2201; b220 = b2201 } { a220 = a2202; b220 = b2202 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2201 a2202 && (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) b2201 b2202) in
  let next_r = { a220 = 100.; b220 = #{ a219 = #101.; b219 = 102. } } in
  let r_expected = { a220 = 0.; b220 = #{ a219 = #1.; b219 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a220 *)
  r.a220 <- next_r.a220;
  let r_expected = { r_expected with a220 = next_r.a220 } in
  mark_test_run 1695;
  let test = eq r r_expected in
  if not test then failwithf "test 1695 failed";
  Gc.compact ();
  (* .b220 *)
  r.b220 <- next_r.b220;
  let r_expected = { r_expected with b220 = next_r.b220 } in
  mark_test_run 1696;
  let test = eq r r_expected in
  if not test then failwithf "test 1696 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a220; b220 = #{ a219; b219 } } = r in
  let expected_a220 = 100. in
  mark_test_run 1697;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a220 a220 in
  if not test then failwithf "test 1697 failed";
  let expected_a219 = #101. in
  mark_test_run 1698;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 1698 failed";
  let expected_b219 = 102. in
  mark_test_run 1699;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 1699 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a220; b220 } = r in
  let expected_a220 = 100. in
  mark_test_run 1700;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a220 a220 in
  if not test then failwithf "test 1700 failed";
  let expected_b220 = #{ a219 = #101.; b219 = 102. } in
  mark_test_run 1701;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) expected_b220 b220 in
  if not test then failwithf "test 1701 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t222 = { float; #{ float#; float# } }   *)
  (*********************************************)
  let r = { a222 = 0.; b222 = #{ a221 = #1.; b221 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a222 *)
  let actual = r.a222 in
  let expected = 0. in
  mark_test_run 1702;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1702 failed";
  (* Paths of depth 1 *)
  (* .b222 *)
  let actual = r.b222 in
  let expected = #{ a221 = #1.; b221 = #2. } in
  mark_test_run 1703;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 1703 failed";
  (* Paths of depth 2 *)
  (* .b222.#a221 *)
  let actual = r.b222.#a221 in
  let expected = #1. in
  mark_test_run 1704;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1704 failed";
  (* .b222.#b221 *)
  let actual = r.b222.#b221 in
  let expected = #2. in
  mark_test_run 1705;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1705 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a222 = a2221; b222 = b2221 } { a222 = a2222; b222 = b2222 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2221 a2222 && (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) b2221 b2222) in
  let next_r = { a222 = 100.; b222 = #{ a221 = #101.; b221 = #102. } } in
  let r_expected = { a222 = 0.; b222 = #{ a221 = #1.; b221 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a222 *)
  r.a222 <- next_r.a222;
  let r_expected = { r_expected with a222 = next_r.a222 } in
  mark_test_run 1706;
  let test = eq r r_expected in
  if not test then failwithf "test 1706 failed";
  Gc.compact ();
  (* .b222 *)
  r.b222 <- next_r.b222;
  let r_expected = { r_expected with b222 = next_r.b222 } in
  mark_test_run 1707;
  let test = eq r r_expected in
  if not test then failwithf "test 1707 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a222; b222 = #{ a221; b221 } } = r in
  let expected_a222 = 100. in
  mark_test_run 1708;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a222 a222 in
  if not test then failwithf "test 1708 failed";
  let expected_a221 = #101. in
  mark_test_run 1709;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 1709 failed";
  let expected_b221 = #102. in
  mark_test_run 1710;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 1710 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a222; b222 } = r in
  let expected_a222 = 100. in
  mark_test_run 1711;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a222 a222 in
  if not test then failwithf "test 1711 failed";
  let expected_b222 = #{ a221 = #101.; b221 = #102. } in
  mark_test_run 1712;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) expected_b222 b222 in
  if not test then failwithf "test 1712 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t224 = { float; #{ float#; #{ float } } }   *)
  (*************************************************)
  let r = { a224 = 0.; b224 = #{ a223 = #1.; b223 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a224 *)
  let actual = r.a224 in
  let expected = 0. in
  mark_test_run 1713;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1713 failed";
  (* Paths of depth 1 *)
  (* .b224 *)
  let actual = r.b224 in
  let expected = #{ a223 = #1.; b223 = #{ a36 = 2. } } in
  mark_test_run 1714;
  let test = (fun #{ a223 = a2231; b223 = b2231 } #{ a223 = a2232; b223 = b2232 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2231 a2232 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b2231 b2232) actual expected in
  if not test then failwithf "test 1714 failed";
  (* Paths of depth 2 *)
  (* .b224.#a223 *)
  let actual = r.b224.#a223 in
  let expected = #1. in
  mark_test_run 1715;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1715 failed";
  (* .b224.#b223 *)
  let actual = r.b224.#b223 in
  let expected = #{ a36 = 2. } in
  mark_test_run 1716;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 1716 failed";
  (* Paths of depth 3 *)
  (* .b224.#b223.#a36 *)
  let actual = r.b224.#b223.#a36 in
  let expected = 2. in
  mark_test_run 1717;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1717 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a224 = a2241; b224 = b2241 } { a224 = a2242; b224 = b2242 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2241 a2242 && (fun #{ a223 = a2231; b223 = b2231 } #{ a223 = a2232; b223 = b2232 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2231 a2232 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b2231 b2232) b2241 b2242) in
  let next_r = { a224 = 100.; b224 = #{ a223 = #101.; b223 = #{ a36 = 102. } } } in
  let r_expected = { a224 = 0.; b224 = #{ a223 = #1.; b223 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a224 *)
  r.a224 <- next_r.a224;
  let r_expected = { r_expected with a224 = next_r.a224 } in
  mark_test_run 1718;
  let test = eq r r_expected in
  if not test then failwithf "test 1718 failed";
  Gc.compact ();
  (* .b224 *)
  r.b224 <- next_r.b224;
  let r_expected = { r_expected with b224 = next_r.b224 } in
  mark_test_run 1719;
  let test = eq r r_expected in
  if not test then failwithf "test 1719 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a224; b224 = #{ a223; b223 = #{ a36 } } } = r in
  let expected_a224 = 100. in
  mark_test_run 1720;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a224 a224 in
  if not test then failwithf "test 1720 failed";
  let expected_a223 = #101. in
  mark_test_run 1721;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a223 a223 in
  if not test then failwithf "test 1721 failed";
  let expected_a36 = 102. in
  mark_test_run 1722;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 1722 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a224; b224 } = r in
  let expected_a224 = 100. in
  mark_test_run 1723;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a224 a224 in
  if not test then failwithf "test 1723 failed";
  let expected_b224 = #{ a223 = #101.; b223 = #{ a36 = 102. } } in
  mark_test_run 1724;
  let test = (fun #{ a223 = a2231; b223 = b2231 } #{ a223 = a2232; b223 = b2232 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2231 a2232 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b2231 b2232) expected_b224 b224 in
  if not test then failwithf "test 1724 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t226 = { float; #{ float#; #{ float# } } }   *)
  (**************************************************)
  let r = { a226 = 0.; b226 = #{ a225 = #1.; b225 = #{ a215 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a226 *)
  let actual = r.a226 in
  let expected = 0. in
  mark_test_run 1725;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1725 failed";
  (* Paths of depth 1 *)
  (* .b226 *)
  let actual = r.b226 in
  let expected = #{ a225 = #1.; b225 = #{ a215 = #2. } } in
  mark_test_run 1726;
  let test = (fun #{ a225 = a2251; b225 = b2251 } #{ a225 = a2252; b225 = b2252 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2251 a2252 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2251 b2252) actual expected in
  if not test then failwithf "test 1726 failed";
  (* Paths of depth 2 *)
  (* .b226.#a225 *)
  let actual = r.b226.#a225 in
  let expected = #1. in
  mark_test_run 1727;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1727 failed";
  (* .b226.#b225 *)
  let actual = r.b226.#b225 in
  let expected = #{ a215 = #2. } in
  mark_test_run 1728;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) actual expected in
  if not test then failwithf "test 1728 failed";
  (* Paths of depth 3 *)
  (* .b226.#b225.#a215 *)
  let actual = r.b226.#b225.#a215 in
  let expected = #2. in
  mark_test_run 1729;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1729 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a226 = a2261; b226 = b2261 } { a226 = a2262; b226 = b2262 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2261 a2262 && (fun #{ a225 = a2251; b225 = b2251 } #{ a225 = a2252; b225 = b2252 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2251 a2252 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2251 b2252) b2261 b2262) in
  let next_r = { a226 = 100.; b226 = #{ a225 = #101.; b225 = #{ a215 = #102. } } } in
  let r_expected = { a226 = 0.; b226 = #{ a225 = #1.; b225 = #{ a215 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a226 *)
  r.a226 <- next_r.a226;
  let r_expected = { r_expected with a226 = next_r.a226 } in
  mark_test_run 1730;
  let test = eq r r_expected in
  if not test then failwithf "test 1730 failed";
  Gc.compact ();
  (* .b226 *)
  r.b226 <- next_r.b226;
  let r_expected = { r_expected with b226 = next_r.b226 } in
  mark_test_run 1731;
  let test = eq r r_expected in
  if not test then failwithf "test 1731 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a226; b226 = #{ a225; b225 = #{ a215 } } } = r in
  let expected_a226 = 100. in
  mark_test_run 1732;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a226 a226 in
  if not test then failwithf "test 1732 failed";
  let expected_a225 = #101. in
  mark_test_run 1733;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a225 a225 in
  if not test then failwithf "test 1733 failed";
  let expected_a215 = #102. in
  mark_test_run 1734;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a215 a215 in
  if not test then failwithf "test 1734 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a226; b226 } = r in
  let expected_a226 = 100. in
  mark_test_run 1735;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a226 a226 in
  if not test then failwithf "test 1735 failed";
  let expected_b226 = #{ a225 = #101.; b225 = #{ a215 = #102. } } in
  mark_test_run 1736;
  let test = (fun #{ a225 = a2251; b225 = b2251 } #{ a225 = a2252; b225 = b2252 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2251 a2252 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2251 b2252) expected_b226 b226 in
  if not test then failwithf "test 1736 failed";

  ()
;;

let () =
  (********************************************)
  (*   t227 = { float; #{ #{ int; int } } }   *)
  (********************************************)
  let r = { a227 = 0.; b227 = #{ a57 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a227 *)
  let actual = r.a227 in
  let expected = 0. in
  mark_test_run 1737;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1737 failed";
  (* Paths of depth 1 *)
  (* .b227 *)
  let actual = r.b227 in
  let expected = #{ a57 = #{ a25 = 1; b25 = 2 } } in
  mark_test_run 1738;
  let test = (fun #{ a57 = a571 } #{ a57 = a572 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a571 a572) actual expected in
  if not test then failwithf "test 1738 failed";
  (* Paths of depth 2 *)
  (* .b227.#a57 *)
  let actual = r.b227.#a57 in
  let expected = #{ a25 = 1; b25 = 2 } in
  mark_test_run 1739;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 1739 failed";
  (* Paths of depth 3 *)
  (* .b227.#a57.#a25 *)
  let actual = r.b227.#a57.#a25 in
  let expected = 1 in
  mark_test_run 1740;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1740 failed";
  (* .b227.#a57.#b25 *)
  let actual = r.b227.#a57.#b25 in
  let expected = 2 in
  mark_test_run 1741;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1741 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a227 = a2271; b227 = b2271 } { a227 = a2272; b227 = b2272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2271 a2272 && (fun #{ a57 = a571 } #{ a57 = a572 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a571 a572) b2271 b2272) in
  let next_r = { a227 = 100.; b227 = #{ a57 = #{ a25 = 101; b25 = 102 } } } in
  let r_expected = { a227 = 0.; b227 = #{ a57 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a227 *)
  r.a227 <- next_r.a227;
  let r_expected = { r_expected with a227 = next_r.a227 } in
  mark_test_run 1742;
  let test = eq r r_expected in
  if not test then failwithf "test 1742 failed";
  Gc.compact ();
  (* .b227 *)
  r.b227 <- next_r.b227;
  let r_expected = { r_expected with b227 = next_r.b227 } in
  mark_test_run 1743;
  let test = eq r r_expected in
  if not test then failwithf "test 1743 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a227; b227 = #{ a57 = #{ a25; b25 } } } = r in
  let expected_a227 = 100. in
  mark_test_run 1744;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a227 a227 in
  if not test then failwithf "test 1744 failed";
  let expected_a25 = 101 in
  mark_test_run 1745;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 1745 failed";
  let expected_b25 = 102 in
  mark_test_run 1746;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 1746 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a227; b227 } = r in
  let expected_a227 = 100. in
  mark_test_run 1747;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a227 a227 in
  if not test then failwithf "test 1747 failed";
  let expected_b227 = #{ a57 = #{ a25 = 101; b25 = 102 } } in
  mark_test_run 1748;
  let test = (fun #{ a57 = a571 } #{ a57 = a572 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a571 a572) expected_b227 b227 in
  if not test then failwithf "test 1748 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t228 = { float; #{ #{ int; float } } }   *)
  (**********************************************)
  let r = { a228 = 0.; b228 = #{ a61 = #{ a29 = 1; b29 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a228 *)
  let actual = r.a228 in
  let expected = 0. in
  mark_test_run 1749;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1749 failed";
  (* Paths of depth 1 *)
  (* .b228 *)
  let actual = r.b228 in
  let expected = #{ a61 = #{ a29 = 1; b29 = 2. } } in
  mark_test_run 1750;
  let test = (fun #{ a61 = a611 } #{ a61 = a612 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a611 a612) actual expected in
  if not test then failwithf "test 1750 failed";
  (* Paths of depth 2 *)
  (* .b228.#a61 *)
  let actual = r.b228.#a61 in
  let expected = #{ a29 = 1; b29 = 2. } in
  mark_test_run 1751;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 1751 failed";
  (* Paths of depth 3 *)
  (* .b228.#a61.#a29 *)
  let actual = r.b228.#a61.#a29 in
  let expected = 1 in
  mark_test_run 1752;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1752 failed";
  (* .b228.#a61.#b29 *)
  let actual = r.b228.#a61.#b29 in
  let expected = 2. in
  mark_test_run 1753;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1753 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a228 = a2281; b228 = b2281 } { a228 = a2282; b228 = b2282 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2281 a2282 && (fun #{ a61 = a611 } #{ a61 = a612 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a611 a612) b2281 b2282) in
  let next_r = { a228 = 100.; b228 = #{ a61 = #{ a29 = 101; b29 = 102. } } } in
  let r_expected = { a228 = 0.; b228 = #{ a61 = #{ a29 = 1; b29 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a228 *)
  r.a228 <- next_r.a228;
  let r_expected = { r_expected with a228 = next_r.a228 } in
  mark_test_run 1754;
  let test = eq r r_expected in
  if not test then failwithf "test 1754 failed";
  Gc.compact ();
  (* .b228 *)
  r.b228 <- next_r.b228;
  let r_expected = { r_expected with b228 = next_r.b228 } in
  mark_test_run 1755;
  let test = eq r r_expected in
  if not test then failwithf "test 1755 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a228; b228 = #{ a61 = #{ a29; b29 } } } = r in
  let expected_a228 = 100. in
  mark_test_run 1756;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a228 a228 in
  if not test then failwithf "test 1756 failed";
  let expected_a29 = 101 in
  mark_test_run 1757;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 1757 failed";
  let expected_b29 = 102. in
  mark_test_run 1758;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 1758 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a228; b228 } = r in
  let expected_a228 = 100. in
  mark_test_run 1759;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a228 a228 in
  if not test then failwithf "test 1759 failed";
  let expected_b228 = #{ a61 = #{ a29 = 101; b29 = 102. } } in
  mark_test_run 1760;
  let test = (fun #{ a61 = a611 } #{ a61 = a612 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a611 a612) expected_b228 b228 in
  if not test then failwithf "test 1760 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t229 = { float; #{ #{ float; int } } }   *)
  (**********************************************)
  let r = { a229 = 0.; b229 = #{ a67 = #{ a49 = 1.; b49 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a229 *)
  let actual = r.a229 in
  let expected = 0. in
  mark_test_run 1761;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1761 failed";
  (* Paths of depth 1 *)
  (* .b229 *)
  let actual = r.b229 in
  let expected = #{ a67 = #{ a49 = 1.; b49 = 2 } } in
  mark_test_run 1762;
  let test = (fun #{ a67 = a671 } #{ a67 = a672 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a671 a672) actual expected in
  if not test then failwithf "test 1762 failed";
  (* Paths of depth 2 *)
  (* .b229.#a67 *)
  let actual = r.b229.#a67 in
  let expected = #{ a49 = 1.; b49 = 2 } in
  mark_test_run 1763;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 1763 failed";
  (* Paths of depth 3 *)
  (* .b229.#a67.#a49 *)
  let actual = r.b229.#a67.#a49 in
  let expected = 1. in
  mark_test_run 1764;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1764 failed";
  (* .b229.#a67.#b49 *)
  let actual = r.b229.#a67.#b49 in
  let expected = 2 in
  mark_test_run 1765;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1765 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a229 = a2291; b229 = b2291 } { a229 = a2292; b229 = b2292 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2291 a2292 && (fun #{ a67 = a671 } #{ a67 = a672 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a671 a672) b2291 b2292) in
  let next_r = { a229 = 100.; b229 = #{ a67 = #{ a49 = 101.; b49 = 102 } } } in
  let r_expected = { a229 = 0.; b229 = #{ a67 = #{ a49 = 1.; b49 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a229 *)
  r.a229 <- next_r.a229;
  let r_expected = { r_expected with a229 = next_r.a229 } in
  mark_test_run 1766;
  let test = eq r r_expected in
  if not test then failwithf "test 1766 failed";
  Gc.compact ();
  (* .b229 *)
  r.b229 <- next_r.b229;
  let r_expected = { r_expected with b229 = next_r.b229 } in
  mark_test_run 1767;
  let test = eq r r_expected in
  if not test then failwithf "test 1767 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a229; b229 = #{ a67 = #{ a49; b49 } } } = r in
  let expected_a229 = 100. in
  mark_test_run 1768;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a229 a229 in
  if not test then failwithf "test 1768 failed";
  let expected_a49 = 101. in
  mark_test_run 1769;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 1769 failed";
  let expected_b49 = 102 in
  mark_test_run 1770;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 1770 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a229; b229 } = r in
  let expected_a229 = 100. in
  mark_test_run 1771;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a229 a229 in
  if not test then failwithf "test 1771 failed";
  let expected_b229 = #{ a67 = #{ a49 = 101.; b49 = 102 } } in
  mark_test_run 1772;
  let test = (fun #{ a67 = a671 } #{ a67 = a672 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a671 a672) expected_b229 b229 in
  if not test then failwithf "test 1772 failed";

  ()
;;

let () =
  (************************************************)
  (*   t230 = { float; #{ #{ float; float } } }   *)
  (************************************************)
  let r = { a230 = 0.; b230 = #{ a69 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a230 *)
  let actual = r.a230 in
  let expected = 0. in
  mark_test_run 1773;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1773 failed";
  (* Paths of depth 1 *)
  (* .b230 *)
  let actual = r.b230 in
  let expected = #{ a69 = #{ a51 = 1.; b51 = 2. } } in
  mark_test_run 1774;
  let test = (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a691 a692) actual expected in
  if not test then failwithf "test 1774 failed";
  (* Paths of depth 2 *)
  (* .b230.#a69 *)
  let actual = r.b230.#a69 in
  let expected = #{ a51 = 1.; b51 = 2. } in
  mark_test_run 1775;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 1775 failed";
  (* Paths of depth 3 *)
  (* .b230.#a69.#a51 *)
  let actual = r.b230.#a69.#a51 in
  let expected = 1. in
  mark_test_run 1776;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1776 failed";
  (* .b230.#a69.#b51 *)
  let actual = r.b230.#a69.#b51 in
  let expected = 2. in
  mark_test_run 1777;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1777 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a230 = a2301; b230 = b2301 } { a230 = a2302; b230 = b2302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2301 a2302 && (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a691 a692) b2301 b2302) in
  let next_r = { a230 = 100.; b230 = #{ a69 = #{ a51 = 101.; b51 = 102. } } } in
  let r_expected = { a230 = 0.; b230 = #{ a69 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a230 *)
  r.a230 <- next_r.a230;
  let r_expected = { r_expected with a230 = next_r.a230 } in
  mark_test_run 1778;
  let test = eq r r_expected in
  if not test then failwithf "test 1778 failed";
  Gc.compact ();
  (* .b230 *)
  r.b230 <- next_r.b230;
  let r_expected = { r_expected with b230 = next_r.b230 } in
  mark_test_run 1779;
  let test = eq r r_expected in
  if not test then failwithf "test 1779 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a230; b230 = #{ a69 = #{ a51; b51 } } } = r in
  let expected_a230 = 100. in
  mark_test_run 1780;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a230 a230 in
  if not test then failwithf "test 1780 failed";
  let expected_a51 = 101. in
  mark_test_run 1781;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 1781 failed";
  let expected_b51 = 102. in
  mark_test_run 1782;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 1782 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a230; b230 } = r in
  let expected_a230 = 100. in
  mark_test_run 1783;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a230 a230 in
  if not test then failwithf "test 1783 failed";
  let expected_b230 = #{ a69 = #{ a51 = 101.; b51 = 102. } } in
  mark_test_run 1784;
  let test = (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a691 a692) expected_b230 b230 in
  if not test then failwithf "test 1784 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t232 = { float; #{ #{ float; float# } } }   *)
  (*************************************************)
  let r = { a232 = 0.; b232 = #{ a231 = #{ a211 = 1.; b211 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a232 *)
  let actual = r.a232 in
  let expected = 0. in
  mark_test_run 1785;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1785 failed";
  (* Paths of depth 1 *)
  (* .b232 *)
  let actual = r.b232 in
  let expected = #{ a231 = #{ a211 = 1.; b211 = #2. } } in
  mark_test_run 1786;
  let test = (fun #{ a231 = a2311 } #{ a231 = a2312 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a2311 a2312) actual expected in
  if not test then failwithf "test 1786 failed";
  (* Paths of depth 2 *)
  (* .b232.#a231 *)
  let actual = r.b232.#a231 in
  let expected = #{ a211 = 1.; b211 = #2. } in
  mark_test_run 1787;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 1787 failed";
  (* Paths of depth 3 *)
  (* .b232.#a231.#a211 *)
  let actual = r.b232.#a231.#a211 in
  let expected = 1. in
  mark_test_run 1788;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1788 failed";
  (* .b232.#a231.#b211 *)
  let actual = r.b232.#a231.#b211 in
  let expected = #2. in
  mark_test_run 1789;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1789 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a232 = a2321; b232 = b2321 } { a232 = a2322; b232 = b2322 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2321 a2322 && (fun #{ a231 = a2311 } #{ a231 = a2312 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a2311 a2312) b2321 b2322) in
  let next_r = { a232 = 100.; b232 = #{ a231 = #{ a211 = 101.; b211 = #102. } } } in
  let r_expected = { a232 = 0.; b232 = #{ a231 = #{ a211 = 1.; b211 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a232 *)
  r.a232 <- next_r.a232;
  let r_expected = { r_expected with a232 = next_r.a232 } in
  mark_test_run 1790;
  let test = eq r r_expected in
  if not test then failwithf "test 1790 failed";
  Gc.compact ();
  (* .b232 *)
  r.b232 <- next_r.b232;
  let r_expected = { r_expected with b232 = next_r.b232 } in
  mark_test_run 1791;
  let test = eq r r_expected in
  if not test then failwithf "test 1791 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a232; b232 = #{ a231 = #{ a211; b211 } } } = r in
  let expected_a232 = 100. in
  mark_test_run 1792;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a232 a232 in
  if not test then failwithf "test 1792 failed";
  let expected_a211 = 101. in
  mark_test_run 1793;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 1793 failed";
  let expected_b211 = #102. in
  mark_test_run 1794;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 1794 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a232; b232 } = r in
  let expected_a232 = 100. in
  mark_test_run 1795;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a232 a232 in
  if not test then failwithf "test 1795 failed";
  let expected_b232 = #{ a231 = #{ a211 = 101.; b211 = #102. } } in
  mark_test_run 1796;
  let test = (fun #{ a231 = a2311 } #{ a231 = a2312 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a2311 a2312) expected_b232 b232 in
  if not test then failwithf "test 1796 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t234 = { float; #{ #{ float#; float } } }   *)
  (*************************************************)
  let r = { a234 = 0.; b234 = #{ a233 = #{ a219 = #1.; b219 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a234 *)
  let actual = r.a234 in
  let expected = 0. in
  mark_test_run 1797;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1797 failed";
  (* Paths of depth 1 *)
  (* .b234 *)
  let actual = r.b234 in
  let expected = #{ a233 = #{ a219 = #1.; b219 = 2. } } in
  mark_test_run 1798;
  let test = (fun #{ a233 = a2331 } #{ a233 = a2332 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a2331 a2332) actual expected in
  if not test then failwithf "test 1798 failed";
  (* Paths of depth 2 *)
  (* .b234.#a233 *)
  let actual = r.b234.#a233 in
  let expected = #{ a219 = #1.; b219 = 2. } in
  mark_test_run 1799;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 1799 failed";
  (* Paths of depth 3 *)
  (* .b234.#a233.#a219 *)
  let actual = r.b234.#a233.#a219 in
  let expected = #1. in
  mark_test_run 1800;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1800 failed";
  (* .b234.#a233.#b219 *)
  let actual = r.b234.#a233.#b219 in
  let expected = 2. in
  mark_test_run 1801;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1801 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a234 = a2341; b234 = b2341 } { a234 = a2342; b234 = b2342 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2341 a2342 && (fun #{ a233 = a2331 } #{ a233 = a2332 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a2331 a2332) b2341 b2342) in
  let next_r = { a234 = 100.; b234 = #{ a233 = #{ a219 = #101.; b219 = 102. } } } in
  let r_expected = { a234 = 0.; b234 = #{ a233 = #{ a219 = #1.; b219 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a234 *)
  r.a234 <- next_r.a234;
  let r_expected = { r_expected with a234 = next_r.a234 } in
  mark_test_run 1802;
  let test = eq r r_expected in
  if not test then failwithf "test 1802 failed";
  Gc.compact ();
  (* .b234 *)
  r.b234 <- next_r.b234;
  let r_expected = { r_expected with b234 = next_r.b234 } in
  mark_test_run 1803;
  let test = eq r r_expected in
  if not test then failwithf "test 1803 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a234; b234 = #{ a233 = #{ a219; b219 } } } = r in
  let expected_a234 = 100. in
  mark_test_run 1804;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a234 a234 in
  if not test then failwithf "test 1804 failed";
  let expected_a219 = #101. in
  mark_test_run 1805;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 1805 failed";
  let expected_b219 = 102. in
  mark_test_run 1806;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 1806 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a234; b234 } = r in
  let expected_a234 = 100. in
  mark_test_run 1807;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a234 a234 in
  if not test then failwithf "test 1807 failed";
  let expected_b234 = #{ a233 = #{ a219 = #101.; b219 = 102. } } in
  mark_test_run 1808;
  let test = (fun #{ a233 = a2331 } #{ a233 = a2332 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a2331 a2332) expected_b234 b234 in
  if not test then failwithf "test 1808 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t236 = { float; #{ #{ float#; float# } } }   *)
  (**************************************************)
  let r = { a236 = 0.; b236 = #{ a235 = #{ a221 = #1.; b221 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a236 *)
  let actual = r.a236 in
  let expected = 0. in
  mark_test_run 1809;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1809 failed";
  (* Paths of depth 1 *)
  (* .b236 *)
  let actual = r.b236 in
  let expected = #{ a235 = #{ a221 = #1.; b221 = #2. } } in
  mark_test_run 1810;
  let test = (fun #{ a235 = a2351 } #{ a235 = a2352 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a2351 a2352) actual expected in
  if not test then failwithf "test 1810 failed";
  (* Paths of depth 2 *)
  (* .b236.#a235 *)
  let actual = r.b236.#a235 in
  let expected = #{ a221 = #1.; b221 = #2. } in
  mark_test_run 1811;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 1811 failed";
  (* Paths of depth 3 *)
  (* .b236.#a235.#a221 *)
  let actual = r.b236.#a235.#a221 in
  let expected = #1. in
  mark_test_run 1812;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1812 failed";
  (* .b236.#a235.#b221 *)
  let actual = r.b236.#a235.#b221 in
  let expected = #2. in
  mark_test_run 1813;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1813 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a236 = a2361; b236 = b2361 } { a236 = a2362; b236 = b2362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2361 a2362 && (fun #{ a235 = a2351 } #{ a235 = a2352 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a2351 a2352) b2361 b2362) in
  let next_r = { a236 = 100.; b236 = #{ a235 = #{ a221 = #101.; b221 = #102. } } } in
  let r_expected = { a236 = 0.; b236 = #{ a235 = #{ a221 = #1.; b221 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a236 *)
  r.a236 <- next_r.a236;
  let r_expected = { r_expected with a236 = next_r.a236 } in
  mark_test_run 1814;
  let test = eq r r_expected in
  if not test then failwithf "test 1814 failed";
  Gc.compact ();
  (* .b236 *)
  r.b236 <- next_r.b236;
  let r_expected = { r_expected with b236 = next_r.b236 } in
  mark_test_run 1815;
  let test = eq r r_expected in
  if not test then failwithf "test 1815 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a236; b236 = #{ a235 = #{ a221; b221 } } } = r in
  let expected_a236 = 100. in
  mark_test_run 1816;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a236 a236 in
  if not test then failwithf "test 1816 failed";
  let expected_a221 = #101. in
  mark_test_run 1817;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 1817 failed";
  let expected_b221 = #102. in
  mark_test_run 1818;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 1818 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a236; b236 } = r in
  let expected_a236 = 100. in
  mark_test_run 1819;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a236 a236 in
  if not test then failwithf "test 1819 failed";
  let expected_b236 = #{ a235 = #{ a221 = #101.; b221 = #102. } } in
  mark_test_run 1820;
  let test = (fun #{ a235 = a2351 } #{ a235 = a2352 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a2351 a2352) expected_b236 b236 in
  if not test then failwithf "test 1820 failed";

  ()
;;

let () =
  (*************************)
  (*   t237 = { float# }   *)
  (*************************)
  let r = { a237 = #0. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a237 *)
  let actual = r.a237 in
  let expected = #0. in
  mark_test_run 1821;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1821 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a237 = a2371 } { a237 = a2372 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2371 a2372) in
  let next_r = { a237 = #100. } in
  let r_expected = { a237 = #0. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a237 *)
  r.a237 <- next_r.a237;
  let r_expected = { r_expected with a237 = next_r.a237 } in
  mark_test_run 1822;
  let test = eq r r_expected in
  if not test then failwithf "test 1822 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a237 } = r in
  let expected_a237 = #100. in
  mark_test_run 1823;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a237 a237 in
  if not test then failwithf "test 1823 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a237 } = r in
  let expected_a237 = #100. in
  mark_test_run 1824;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a237 a237 in
  if not test then failwithf "test 1824 failed";

  ()
;;

let () =
  (********************************)
  (*   t238 = { float#; float }   *)
  (********************************)
  let r = { a238 = #0.; b238 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a238 *)
  let actual = r.a238 in
  let expected = #0. in
  mark_test_run 1825;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1825 failed";
  (* Paths of depth 1 *)
  (* .b238 *)
  let actual = r.b238 in
  let expected = 1. in
  mark_test_run 1826;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1826 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a238 = a2381; b238 = b2381 } { a238 = a2382; b238 = b2382 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2381 a2382 && (fun a b -> Float.equal (globalize a) (globalize b)) b2381 b2382) in
  let next_r = { a238 = #100.; b238 = 101. } in
  let r_expected = { a238 = #0.; b238 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a238 *)
  r.a238 <- next_r.a238;
  let r_expected = { r_expected with a238 = next_r.a238 } in
  mark_test_run 1827;
  let test = eq r r_expected in
  if not test then failwithf "test 1827 failed";
  Gc.compact ();
  (* .b238 *)
  r.b238 <- next_r.b238;
  let r_expected = { r_expected with b238 = next_r.b238 } in
  mark_test_run 1828;
  let test = eq r r_expected in
  if not test then failwithf "test 1828 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a238; b238 } = r in
  let expected_a238 = #100. in
  mark_test_run 1829;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a238 a238 in
  if not test then failwithf "test 1829 failed";
  let expected_b238 = 101. in
  mark_test_run 1830;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b238 b238 in
  if not test then failwithf "test 1830 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a238; b238 } = r in
  let expected_a238 = #100. in
  mark_test_run 1831;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a238 a238 in
  if not test then failwithf "test 1831 failed";
  let expected_b238 = 101. in
  mark_test_run 1832;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b238 b238 in
  if not test then failwithf "test 1832 failed";

  ()
;;

let () =
  (***************************************)
  (*   t239 = { float#; float; float }   *)
  (***************************************)
  let r = { a239 = #0.; b239 = 1.; c239 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a239 *)
  let actual = r.a239 in
  let expected = #0. in
  mark_test_run 1833;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1833 failed";
  (* Paths of depth 1 *)
  (* .b239 *)
  let actual = r.b239 in
  let expected = 1. in
  mark_test_run 1834;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1834 failed";
  (* Paths of depth 1 *)
  (* .c239 *)
  let actual = r.c239 in
  let expected = 2. in
  mark_test_run 1835;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1835 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a239 = a2391; b239 = b2391; c239 = c2391 } { a239 = a2392; b239 = b2392; c239 = c2392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2391 a2392 && (fun a b -> Float.equal (globalize a) (globalize b)) b2391 b2392 && (fun a b -> Float.equal (globalize a) (globalize b)) c2391 c2392) in
  let next_r = { a239 = #100.; b239 = 101.; c239 = 102. } in
  let r_expected = { a239 = #0.; b239 = 1.; c239 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a239 *)
  r.a239 <- next_r.a239;
  let r_expected = { r_expected with a239 = next_r.a239 } in
  mark_test_run 1836;
  let test = eq r r_expected in
  if not test then failwithf "test 1836 failed";
  Gc.compact ();
  (* .b239 *)
  r.b239 <- next_r.b239;
  let r_expected = { r_expected with b239 = next_r.b239 } in
  mark_test_run 1837;
  let test = eq r r_expected in
  if not test then failwithf "test 1837 failed";
  Gc.compact ();
  (* .c239 *)
  r.c239 <- next_r.c239;
  let r_expected = { r_expected with c239 = next_r.c239 } in
  mark_test_run 1838;
  let test = eq r r_expected in
  if not test then failwithf "test 1838 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a239; b239; c239 } = r in
  let expected_a239 = #100. in
  mark_test_run 1839;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a239 a239 in
  if not test then failwithf "test 1839 failed";
  let expected_b239 = 101. in
  mark_test_run 1840;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b239 b239 in
  if not test then failwithf "test 1840 failed";
  let expected_c239 = 102. in
  mark_test_run 1841;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c239 c239 in
  if not test then failwithf "test 1841 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a239; b239; c239 } = r in
  let expected_a239 = #100. in
  mark_test_run 1842;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a239 a239 in
  if not test then failwithf "test 1842 failed";
  let expected_b239 = 101. in
  mark_test_run 1843;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b239 b239 in
  if not test then failwithf "test 1843 failed";
  let expected_c239 = 102. in
  mark_test_run 1844;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c239 c239 in
  if not test then failwithf "test 1844 failed";

  ()
;;

let () =
  (****************************************)
  (*   t240 = { float#; float; float# }   *)
  (****************************************)
  let r = { a240 = #0.; b240 = 1.; c240 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a240 *)
  let actual = r.a240 in
  let expected = #0. in
  mark_test_run 1845;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1845 failed";
  (* Paths of depth 1 *)
  (* .b240 *)
  let actual = r.b240 in
  let expected = 1. in
  mark_test_run 1846;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1846 failed";
  (* Paths of depth 1 *)
  (* .c240 *)
  let actual = r.c240 in
  let expected = #2. in
  mark_test_run 1847;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1847 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a240 = a2401; b240 = b2401; c240 = c2401 } { a240 = a2402; b240 = b2402; c240 = c2402 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2401 a2402 && (fun a b -> Float.equal (globalize a) (globalize b)) b2401 b2402 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) c2401 c2402) in
  let next_r = { a240 = #100.; b240 = 101.; c240 = #102. } in
  let r_expected = { a240 = #0.; b240 = 1.; c240 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a240 *)
  r.a240 <- next_r.a240;
  let r_expected = { r_expected with a240 = next_r.a240 } in
  mark_test_run 1848;
  let test = eq r r_expected in
  if not test then failwithf "test 1848 failed";
  Gc.compact ();
  (* .b240 *)
  r.b240 <- next_r.b240;
  let r_expected = { r_expected with b240 = next_r.b240 } in
  mark_test_run 1849;
  let test = eq r r_expected in
  if not test then failwithf "test 1849 failed";
  Gc.compact ();
  (* .c240 *)
  r.c240 <- next_r.c240;
  let r_expected = { r_expected with c240 = next_r.c240 } in
  mark_test_run 1850;
  let test = eq r r_expected in
  if not test then failwithf "test 1850 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a240; b240; c240 } = r in
  let expected_a240 = #100. in
  mark_test_run 1851;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a240 a240 in
  if not test then failwithf "test 1851 failed";
  let expected_b240 = 101. in
  mark_test_run 1852;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b240 b240 in
  if not test then failwithf "test 1852 failed";
  let expected_c240 = #102. in
  mark_test_run 1853;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c240 c240 in
  if not test then failwithf "test 1853 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a240; b240; c240 } = r in
  let expected_a240 = #100. in
  mark_test_run 1854;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a240 a240 in
  if not test then failwithf "test 1854 failed";
  let expected_b240 = 101. in
  mark_test_run 1855;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b240 b240 in
  if not test then failwithf "test 1855 failed";
  let expected_c240 = #102. in
  mark_test_run 1856;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c240 c240 in
  if not test then failwithf "test 1856 failed";

  ()
;;

let () =
  (*********************************)
  (*   t241 = { float#; float# }   *)
  (*********************************)
  let r = { a241 = #0.; b241 = #1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a241 *)
  let actual = r.a241 in
  let expected = #0. in
  mark_test_run 1857;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1857 failed";
  (* Paths of depth 1 *)
  (* .b241 *)
  let actual = r.b241 in
  let expected = #1. in
  mark_test_run 1858;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1858 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a241 = a2411; b241 = b2411 } { a241 = a2412; b241 = b2412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2411 a2412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2411 b2412) in
  let next_r = { a241 = #100.; b241 = #101. } in
  let r_expected = { a241 = #0.; b241 = #1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a241 *)
  r.a241 <- next_r.a241;
  let r_expected = { r_expected with a241 = next_r.a241 } in
  mark_test_run 1859;
  let test = eq r r_expected in
  if not test then failwithf "test 1859 failed";
  Gc.compact ();
  (* .b241 *)
  r.b241 <- next_r.b241;
  let r_expected = { r_expected with b241 = next_r.b241 } in
  mark_test_run 1860;
  let test = eq r r_expected in
  if not test then failwithf "test 1860 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a241; b241 } = r in
  let expected_a241 = #100. in
  mark_test_run 1861;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a241 a241 in
  if not test then failwithf "test 1861 failed";
  let expected_b241 = #101. in
  mark_test_run 1862;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b241 b241 in
  if not test then failwithf "test 1862 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a241; b241 } = r in
  let expected_a241 = #100. in
  mark_test_run 1863;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a241 a241 in
  if not test then failwithf "test 1863 failed";
  let expected_b241 = #101. in
  mark_test_run 1864;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b241 b241 in
  if not test then failwithf "test 1864 failed";

  ()
;;

let () =
  (****************************************)
  (*   t242 = { float#; float#; float }   *)
  (****************************************)
  let r = { a242 = #0.; b242 = #1.; c242 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a242 *)
  let actual = r.a242 in
  let expected = #0. in
  mark_test_run 1865;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1865 failed";
  (* Paths of depth 1 *)
  (* .b242 *)
  let actual = r.b242 in
  let expected = #1. in
  mark_test_run 1866;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1866 failed";
  (* Paths of depth 1 *)
  (* .c242 *)
  let actual = r.c242 in
  let expected = 2. in
  mark_test_run 1867;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1867 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a242 = a2421; b242 = b2421; c242 = c2421 } { a242 = a2422; b242 = b2422; c242 = c2422 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2421 a2422 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2421 b2422 && (fun a b -> Float.equal (globalize a) (globalize b)) c2421 c2422) in
  let next_r = { a242 = #100.; b242 = #101.; c242 = 102. } in
  let r_expected = { a242 = #0.; b242 = #1.; c242 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a242 *)
  r.a242 <- next_r.a242;
  let r_expected = { r_expected with a242 = next_r.a242 } in
  mark_test_run 1868;
  let test = eq r r_expected in
  if not test then failwithf "test 1868 failed";
  Gc.compact ();
  (* .b242 *)
  r.b242 <- next_r.b242;
  let r_expected = { r_expected with b242 = next_r.b242 } in
  mark_test_run 1869;
  let test = eq r r_expected in
  if not test then failwithf "test 1869 failed";
  Gc.compact ();
  (* .c242 *)
  r.c242 <- next_r.c242;
  let r_expected = { r_expected with c242 = next_r.c242 } in
  mark_test_run 1870;
  let test = eq r r_expected in
  if not test then failwithf "test 1870 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a242; b242; c242 } = r in
  let expected_a242 = #100. in
  mark_test_run 1871;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a242 a242 in
  if not test then failwithf "test 1871 failed";
  let expected_b242 = #101. in
  mark_test_run 1872;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b242 b242 in
  if not test then failwithf "test 1872 failed";
  let expected_c242 = 102. in
  mark_test_run 1873;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c242 c242 in
  if not test then failwithf "test 1873 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a242; b242; c242 } = r in
  let expected_a242 = #100. in
  mark_test_run 1874;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a242 a242 in
  if not test then failwithf "test 1874 failed";
  let expected_b242 = #101. in
  mark_test_run 1875;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b242 b242 in
  if not test then failwithf "test 1875 failed";
  let expected_c242 = 102. in
  mark_test_run 1876;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c242 c242 in
  if not test then failwithf "test 1876 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t243 = { float#; float#; float# }   *)
  (*****************************************)
  let r = { a243 = #0.; b243 = #1.; c243 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a243 *)
  let actual = r.a243 in
  let expected = #0. in
  mark_test_run 1877;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1877 failed";
  (* Paths of depth 1 *)
  (* .b243 *)
  let actual = r.b243 in
  let expected = #1. in
  mark_test_run 1878;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1878 failed";
  (* Paths of depth 1 *)
  (* .c243 *)
  let actual = r.c243 in
  let expected = #2. in
  mark_test_run 1879;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1879 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a243 = a2431; b243 = b2431; c243 = c2431 } { a243 = a2432; b243 = b2432; c243 = c2432 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2431 a2432 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2431 b2432 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) c2431 c2432) in
  let next_r = { a243 = #100.; b243 = #101.; c243 = #102. } in
  let r_expected = { a243 = #0.; b243 = #1.; c243 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a243 *)
  r.a243 <- next_r.a243;
  let r_expected = { r_expected with a243 = next_r.a243 } in
  mark_test_run 1880;
  let test = eq r r_expected in
  if not test then failwithf "test 1880 failed";
  Gc.compact ();
  (* .b243 *)
  r.b243 <- next_r.b243;
  let r_expected = { r_expected with b243 = next_r.b243 } in
  mark_test_run 1881;
  let test = eq r r_expected in
  if not test then failwithf "test 1881 failed";
  Gc.compact ();
  (* .c243 *)
  r.c243 <- next_r.c243;
  let r_expected = { r_expected with c243 = next_r.c243 } in
  mark_test_run 1882;
  let test = eq r r_expected in
  if not test then failwithf "test 1882 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a243; b243; c243 } = r in
  let expected_a243 = #100. in
  mark_test_run 1883;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a243 a243 in
  if not test then failwithf "test 1883 failed";
  let expected_b243 = #101. in
  mark_test_run 1884;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b243 b243 in
  if not test then failwithf "test 1884 failed";
  let expected_c243 = #102. in
  mark_test_run 1885;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c243 c243 in
  if not test then failwithf "test 1885 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a243; b243; c243 } = r in
  let expected_a243 = #100. in
  mark_test_run 1886;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a243 a243 in
  if not test then failwithf "test 1886 failed";
  let expected_b243 = #101. in
  mark_test_run 1887;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b243 b243 in
  if not test then failwithf "test 1887 failed";
  let expected_c243 = #102. in
  mark_test_run 1888;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c243 c243 in
  if not test then failwithf "test 1888 failed";

  ()
;;

let () =
  (*************************************)
  (*   t244 = { float#; #{ float } }   *)
  (*************************************)
  let r = { a244 = #0.; b244 = #{ a36 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a244 *)
  let actual = r.a244 in
  let expected = #0. in
  mark_test_run 1889;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1889 failed";
  (* Paths of depth 1 *)
  (* .b244 *)
  let actual = r.b244 in
  let expected = #{ a36 = 1. } in
  mark_test_run 1890;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 1890 failed";
  (* Paths of depth 2 *)
  (* .b244.#a36 *)
  let actual = r.b244.#a36 in
  let expected = 1. in
  mark_test_run 1891;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1891 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a244 = a2441; b244 = b2441 } { a244 = a2442; b244 = b2442 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2441 a2442 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b2441 b2442) in
  let next_r = { a244 = #100.; b244 = #{ a36 = 101. } } in
  let r_expected = { a244 = #0.; b244 = #{ a36 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a244 *)
  r.a244 <- next_r.a244;
  let r_expected = { r_expected with a244 = next_r.a244 } in
  mark_test_run 1892;
  let test = eq r r_expected in
  if not test then failwithf "test 1892 failed";
  Gc.compact ();
  (* .b244 *)
  r.b244 <- next_r.b244;
  let r_expected = { r_expected with b244 = next_r.b244 } in
  mark_test_run 1893;
  let test = eq r r_expected in
  if not test then failwithf "test 1893 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a244; b244 = #{ a36 } } = r in
  let expected_a244 = #100. in
  mark_test_run 1894;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a244 a244 in
  if not test then failwithf "test 1894 failed";
  let expected_a36 = 101. in
  mark_test_run 1895;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 1895 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a244; b244 } = r in
  let expected_a244 = #100. in
  mark_test_run 1896;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a244 a244 in
  if not test then failwithf "test 1896 failed";
  let expected_b244 = #{ a36 = 101. } in
  mark_test_run 1897;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) expected_b244 b244 in
  if not test then failwithf "test 1897 failed";

  ()
;;

let () =
  (********************************************)
  (*   t245 = { float#; #{ float; float } }   *)
  (********************************************)
  let r = { a245 = #0.; b245 = #{ a51 = 1.; b51 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a245 *)
  let actual = r.a245 in
  let expected = #0. in
  mark_test_run 1898;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1898 failed";
  (* Paths of depth 1 *)
  (* .b245 *)
  let actual = r.b245 in
  let expected = #{ a51 = 1.; b51 = 2. } in
  mark_test_run 1899;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 1899 failed";
  (* Paths of depth 2 *)
  (* .b245.#a51 *)
  let actual = r.b245.#a51 in
  let expected = 1. in
  mark_test_run 1900;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1900 failed";
  (* .b245.#b51 *)
  let actual = r.b245.#b51 in
  let expected = 2. in
  mark_test_run 1901;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1901 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a245 = a2451; b245 = b2451 } { a245 = a2452; b245 = b2452 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2451 a2452 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b2451 b2452) in
  let next_r = { a245 = #100.; b245 = #{ a51 = 101.; b51 = 102. } } in
  let r_expected = { a245 = #0.; b245 = #{ a51 = 1.; b51 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a245 *)
  r.a245 <- next_r.a245;
  let r_expected = { r_expected with a245 = next_r.a245 } in
  mark_test_run 1902;
  let test = eq r r_expected in
  if not test then failwithf "test 1902 failed";
  Gc.compact ();
  (* .b245 *)
  r.b245 <- next_r.b245;
  let r_expected = { r_expected with b245 = next_r.b245 } in
  mark_test_run 1903;
  let test = eq r r_expected in
  if not test then failwithf "test 1903 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a245; b245 = #{ a51; b51 } } = r in
  let expected_a245 = #100. in
  mark_test_run 1904;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a245 a245 in
  if not test then failwithf "test 1904 failed";
  let expected_a51 = 101. in
  mark_test_run 1905;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 1905 failed";
  let expected_b51 = 102. in
  mark_test_run 1906;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 1906 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a245; b245 } = r in
  let expected_a245 = #100. in
  mark_test_run 1907;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a245 a245 in
  if not test then failwithf "test 1907 failed";
  let expected_b245 = #{ a51 = 101.; b51 = 102. } in
  mark_test_run 1908;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) expected_b245 b245 in
  if not test then failwithf "test 1908 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t246 = { float#; #{ float; float# } }   *)
  (*********************************************)
  let r = { a246 = #0.; b246 = #{ a211 = 1.; b211 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a246 *)
  let actual = r.a246 in
  let expected = #0. in
  mark_test_run 1909;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1909 failed";
  (* Paths of depth 1 *)
  (* .b246 *)
  let actual = r.b246 in
  let expected = #{ a211 = 1.; b211 = #2. } in
  mark_test_run 1910;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 1910 failed";
  (* Paths of depth 2 *)
  (* .b246.#a211 *)
  let actual = r.b246.#a211 in
  let expected = 1. in
  mark_test_run 1911;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1911 failed";
  (* .b246.#b211 *)
  let actual = r.b246.#b211 in
  let expected = #2. in
  mark_test_run 1912;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1912 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a246 = a2461; b246 = b2461 } { a246 = a2462; b246 = b2462 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2461 a2462 && (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) b2461 b2462) in
  let next_r = { a246 = #100.; b246 = #{ a211 = 101.; b211 = #102. } } in
  let r_expected = { a246 = #0.; b246 = #{ a211 = 1.; b211 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a246 *)
  r.a246 <- next_r.a246;
  let r_expected = { r_expected with a246 = next_r.a246 } in
  mark_test_run 1913;
  let test = eq r r_expected in
  if not test then failwithf "test 1913 failed";
  Gc.compact ();
  (* .b246 *)
  r.b246 <- next_r.b246;
  let r_expected = { r_expected with b246 = next_r.b246 } in
  mark_test_run 1914;
  let test = eq r r_expected in
  if not test then failwithf "test 1914 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a246; b246 = #{ a211; b211 } } = r in
  let expected_a246 = #100. in
  mark_test_run 1915;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a246 a246 in
  if not test then failwithf "test 1915 failed";
  let expected_a211 = 101. in
  mark_test_run 1916;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 1916 failed";
  let expected_b211 = #102. in
  mark_test_run 1917;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 1917 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a246; b246 } = r in
  let expected_a246 = #100. in
  mark_test_run 1918;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a246 a246 in
  if not test then failwithf "test 1918 failed";
  let expected_b246 = #{ a211 = 101.; b211 = #102. } in
  mark_test_run 1919;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) expected_b246 b246 in
  if not test then failwithf "test 1919 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t247 = { float#; #{ float; #{ float } } }   *)
  (*************************************************)
  let r = { a247 = #0.; b247 = #{ a55 = 1.; b55 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a247 *)
  let actual = r.a247 in
  let expected = #0. in
  mark_test_run 1920;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1920 failed";
  (* Paths of depth 1 *)
  (* .b247 *)
  let actual = r.b247 in
  let expected = #{ a55 = 1.; b55 = #{ a36 = 2. } } in
  mark_test_run 1921;
  let test = (fun #{ a55 = a551; b55 = b551 } #{ a55 = a552; b55 = b552 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a551 a552 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b551 b552) actual expected in
  if not test then failwithf "test 1921 failed";
  (* Paths of depth 2 *)
  (* .b247.#a55 *)
  let actual = r.b247.#a55 in
  let expected = 1. in
  mark_test_run 1922;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1922 failed";
  (* .b247.#b55 *)
  let actual = r.b247.#b55 in
  let expected = #{ a36 = 2. } in
  mark_test_run 1923;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 1923 failed";
  (* Paths of depth 3 *)
  (* .b247.#b55.#a36 *)
  let actual = r.b247.#b55.#a36 in
  let expected = 2. in
  mark_test_run 1924;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1924 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a247 = a2471; b247 = b2471 } { a247 = a2472; b247 = b2472 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2471 a2472 && (fun #{ a55 = a551; b55 = b551 } #{ a55 = a552; b55 = b552 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a551 a552 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b551 b552) b2471 b2472) in
  let next_r = { a247 = #100.; b247 = #{ a55 = 101.; b55 = #{ a36 = 102. } } } in
  let r_expected = { a247 = #0.; b247 = #{ a55 = 1.; b55 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a247 *)
  r.a247 <- next_r.a247;
  let r_expected = { r_expected with a247 = next_r.a247 } in
  mark_test_run 1925;
  let test = eq r r_expected in
  if not test then failwithf "test 1925 failed";
  Gc.compact ();
  (* .b247 *)
  r.b247 <- next_r.b247;
  let r_expected = { r_expected with b247 = next_r.b247 } in
  mark_test_run 1926;
  let test = eq r r_expected in
  if not test then failwithf "test 1926 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a247; b247 = #{ a55; b55 = #{ a36 } } } = r in
  let expected_a247 = #100. in
  mark_test_run 1927;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a247 a247 in
  if not test then failwithf "test 1927 failed";
  let expected_a55 = 101. in
  mark_test_run 1928;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a55 a55 in
  if not test then failwithf "test 1928 failed";
  let expected_a36 = 102. in
  mark_test_run 1929;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 1929 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a247; b247 } = r in
  let expected_a247 = #100. in
  mark_test_run 1930;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a247 a247 in
  if not test then failwithf "test 1930 failed";
  let expected_b247 = #{ a55 = 101.; b55 = #{ a36 = 102. } } in
  mark_test_run 1931;
  let test = (fun #{ a55 = a551; b55 = b551 } #{ a55 = a552; b55 = b552 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a551 a552 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b551 b552) expected_b247 b247 in
  if not test then failwithf "test 1931 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t248 = { float#; #{ float; #{ float# } } }   *)
  (**************************************************)
  let r = { a248 = #0.; b248 = #{ a216 = 1.; b216 = #{ a215 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a248 *)
  let actual = r.a248 in
  let expected = #0. in
  mark_test_run 1932;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1932 failed";
  (* Paths of depth 1 *)
  (* .b248 *)
  let actual = r.b248 in
  let expected = #{ a216 = 1.; b216 = #{ a215 = #2. } } in
  mark_test_run 1933;
  let test = (fun #{ a216 = a2161; b216 = b2161 } #{ a216 = a2162; b216 = b2162 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2161 a2162 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2161 b2162) actual expected in
  if not test then failwithf "test 1933 failed";
  (* Paths of depth 2 *)
  (* .b248.#a216 *)
  let actual = r.b248.#a216 in
  let expected = 1. in
  mark_test_run 1934;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1934 failed";
  (* .b248.#b216 *)
  let actual = r.b248.#b216 in
  let expected = #{ a215 = #2. } in
  mark_test_run 1935;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) actual expected in
  if not test then failwithf "test 1935 failed";
  (* Paths of depth 3 *)
  (* .b248.#b216.#a215 *)
  let actual = r.b248.#b216.#a215 in
  let expected = #2. in
  mark_test_run 1936;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1936 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a248 = a2481; b248 = b2481 } { a248 = a2482; b248 = b2482 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2481 a2482 && (fun #{ a216 = a2161; b216 = b2161 } #{ a216 = a2162; b216 = b2162 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2161 a2162 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2161 b2162) b2481 b2482) in
  let next_r = { a248 = #100.; b248 = #{ a216 = 101.; b216 = #{ a215 = #102. } } } in
  let r_expected = { a248 = #0.; b248 = #{ a216 = 1.; b216 = #{ a215 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a248 *)
  r.a248 <- next_r.a248;
  let r_expected = { r_expected with a248 = next_r.a248 } in
  mark_test_run 1937;
  let test = eq r r_expected in
  if not test then failwithf "test 1937 failed";
  Gc.compact ();
  (* .b248 *)
  r.b248 <- next_r.b248;
  let r_expected = { r_expected with b248 = next_r.b248 } in
  mark_test_run 1938;
  let test = eq r r_expected in
  if not test then failwithf "test 1938 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a248; b248 = #{ a216; b216 = #{ a215 } } } = r in
  let expected_a248 = #100. in
  mark_test_run 1939;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a248 a248 in
  if not test then failwithf "test 1939 failed";
  let expected_a216 = 101. in
  mark_test_run 1940;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a216 a216 in
  if not test then failwithf "test 1940 failed";
  let expected_a215 = #102. in
  mark_test_run 1941;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a215 a215 in
  if not test then failwithf "test 1941 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a248; b248 } = r in
  let expected_a248 = #100. in
  mark_test_run 1942;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a248 a248 in
  if not test then failwithf "test 1942 failed";
  let expected_b248 = #{ a216 = 101.; b216 = #{ a215 = #102. } } in
  mark_test_run 1943;
  let test = (fun #{ a216 = a2161; b216 = b2161 } #{ a216 = a2162; b216 = b2162 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2161 a2162 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2161 b2162) expected_b248 b248 in
  if not test then failwithf "test 1943 failed";

  ()
;;

let () =
  (**************************************)
  (*   t249 = { float#; #{ float# } }   *)
  (**************************************)
  let r = { a249 = #0.; b249 = #{ a215 = #1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a249 *)
  let actual = r.a249 in
  let expected = #0. in
  mark_test_run 1944;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1944 failed";
  (* Paths of depth 1 *)
  (* .b249 *)
  let actual = r.b249 in
  let expected = #{ a215 = #1. } in
  mark_test_run 1945;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) actual expected in
  if not test then failwithf "test 1945 failed";
  (* Paths of depth 2 *)
  (* .b249.#a215 *)
  let actual = r.b249.#a215 in
  let expected = #1. in
  mark_test_run 1946;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1946 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a249 = a2491; b249 = b2491 } { a249 = a2492; b249 = b2492 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2491 a2492 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2491 b2492) in
  let next_r = { a249 = #100.; b249 = #{ a215 = #101. } } in
  let r_expected = { a249 = #0.; b249 = #{ a215 = #1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a249 *)
  r.a249 <- next_r.a249;
  let r_expected = { r_expected with a249 = next_r.a249 } in
  mark_test_run 1947;
  let test = eq r r_expected in
  if not test then failwithf "test 1947 failed";
  Gc.compact ();
  (* .b249 *)
  r.b249 <- next_r.b249;
  let r_expected = { r_expected with b249 = next_r.b249 } in
  mark_test_run 1948;
  let test = eq r r_expected in
  if not test then failwithf "test 1948 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a249; b249 = #{ a215 } } = r in
  let expected_a249 = #100. in
  mark_test_run 1949;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a249 a249 in
  if not test then failwithf "test 1949 failed";
  let expected_a215 = #101. in
  mark_test_run 1950;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a215 a215 in
  if not test then failwithf "test 1950 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a249; b249 } = r in
  let expected_a249 = #100. in
  mark_test_run 1951;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a249 a249 in
  if not test then failwithf "test 1951 failed";
  let expected_b249 = #{ a215 = #101. } in
  mark_test_run 1952;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) expected_b249 b249 in
  if not test then failwithf "test 1952 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t250 = { float#; #{ float#; float } }   *)
  (*********************************************)
  let r = { a250 = #0.; b250 = #{ a219 = #1.; b219 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a250 *)
  let actual = r.a250 in
  let expected = #0. in
  mark_test_run 1953;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1953 failed";
  (* Paths of depth 1 *)
  (* .b250 *)
  let actual = r.b250 in
  let expected = #{ a219 = #1.; b219 = 2. } in
  mark_test_run 1954;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 1954 failed";
  (* Paths of depth 2 *)
  (* .b250.#a219 *)
  let actual = r.b250.#a219 in
  let expected = #1. in
  mark_test_run 1955;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1955 failed";
  (* .b250.#b219 *)
  let actual = r.b250.#b219 in
  let expected = 2. in
  mark_test_run 1956;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1956 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a250 = a2501; b250 = b2501 } { a250 = a2502; b250 = b2502 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2501 a2502 && (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) b2501 b2502) in
  let next_r = { a250 = #100.; b250 = #{ a219 = #101.; b219 = 102. } } in
  let r_expected = { a250 = #0.; b250 = #{ a219 = #1.; b219 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a250 *)
  r.a250 <- next_r.a250;
  let r_expected = { r_expected with a250 = next_r.a250 } in
  mark_test_run 1957;
  let test = eq r r_expected in
  if not test then failwithf "test 1957 failed";
  Gc.compact ();
  (* .b250 *)
  r.b250 <- next_r.b250;
  let r_expected = { r_expected with b250 = next_r.b250 } in
  mark_test_run 1958;
  let test = eq r r_expected in
  if not test then failwithf "test 1958 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a250; b250 = #{ a219; b219 } } = r in
  let expected_a250 = #100. in
  mark_test_run 1959;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a250 a250 in
  if not test then failwithf "test 1959 failed";
  let expected_a219 = #101. in
  mark_test_run 1960;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 1960 failed";
  let expected_b219 = 102. in
  mark_test_run 1961;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 1961 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a250; b250 } = r in
  let expected_a250 = #100. in
  mark_test_run 1962;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a250 a250 in
  if not test then failwithf "test 1962 failed";
  let expected_b250 = #{ a219 = #101.; b219 = 102. } in
  mark_test_run 1963;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) expected_b250 b250 in
  if not test then failwithf "test 1963 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t251 = { float#; #{ float#; float# } }   *)
  (**********************************************)
  let r = { a251 = #0.; b251 = #{ a221 = #1.; b221 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a251 *)
  let actual = r.a251 in
  let expected = #0. in
  mark_test_run 1964;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1964 failed";
  (* Paths of depth 1 *)
  (* .b251 *)
  let actual = r.b251 in
  let expected = #{ a221 = #1.; b221 = #2. } in
  mark_test_run 1965;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 1965 failed";
  (* Paths of depth 2 *)
  (* .b251.#a221 *)
  let actual = r.b251.#a221 in
  let expected = #1. in
  mark_test_run 1966;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1966 failed";
  (* .b251.#b221 *)
  let actual = r.b251.#b221 in
  let expected = #2. in
  mark_test_run 1967;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1967 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a251 = a2511; b251 = b2511 } { a251 = a2512; b251 = b2512 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2511 a2512 && (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) b2511 b2512) in
  let next_r = { a251 = #100.; b251 = #{ a221 = #101.; b221 = #102. } } in
  let r_expected = { a251 = #0.; b251 = #{ a221 = #1.; b221 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a251 *)
  r.a251 <- next_r.a251;
  let r_expected = { r_expected with a251 = next_r.a251 } in
  mark_test_run 1968;
  let test = eq r r_expected in
  if not test then failwithf "test 1968 failed";
  Gc.compact ();
  (* .b251 *)
  r.b251 <- next_r.b251;
  let r_expected = { r_expected with b251 = next_r.b251 } in
  mark_test_run 1969;
  let test = eq r r_expected in
  if not test then failwithf "test 1969 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a251; b251 = #{ a221; b221 } } = r in
  let expected_a251 = #100. in
  mark_test_run 1970;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a251 a251 in
  if not test then failwithf "test 1970 failed";
  let expected_a221 = #101. in
  mark_test_run 1971;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 1971 failed";
  let expected_b221 = #102. in
  mark_test_run 1972;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 1972 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a251; b251 } = r in
  let expected_a251 = #100. in
  mark_test_run 1973;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a251 a251 in
  if not test then failwithf "test 1973 failed";
  let expected_b251 = #{ a221 = #101.; b221 = #102. } in
  mark_test_run 1974;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) expected_b251 b251 in
  if not test then failwithf "test 1974 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t252 = { float#; #{ float#; #{ float } } }   *)
  (**************************************************)
  let r = { a252 = #0.; b252 = #{ a223 = #1.; b223 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a252 *)
  let actual = r.a252 in
  let expected = #0. in
  mark_test_run 1975;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1975 failed";
  (* Paths of depth 1 *)
  (* .b252 *)
  let actual = r.b252 in
  let expected = #{ a223 = #1.; b223 = #{ a36 = 2. } } in
  mark_test_run 1976;
  let test = (fun #{ a223 = a2231; b223 = b2231 } #{ a223 = a2232; b223 = b2232 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2231 a2232 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b2231 b2232) actual expected in
  if not test then failwithf "test 1976 failed";
  (* Paths of depth 2 *)
  (* .b252.#a223 *)
  let actual = r.b252.#a223 in
  let expected = #1. in
  mark_test_run 1977;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1977 failed";
  (* .b252.#b223 *)
  let actual = r.b252.#b223 in
  let expected = #{ a36 = 2. } in
  mark_test_run 1978;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 1978 failed";
  (* Paths of depth 3 *)
  (* .b252.#b223.#a36 *)
  let actual = r.b252.#b223.#a36 in
  let expected = 2. in
  mark_test_run 1979;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1979 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a252 = a2521; b252 = b2521 } { a252 = a2522; b252 = b2522 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2521 a2522 && (fun #{ a223 = a2231; b223 = b2231 } #{ a223 = a2232; b223 = b2232 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2231 a2232 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b2231 b2232) b2521 b2522) in
  let next_r = { a252 = #100.; b252 = #{ a223 = #101.; b223 = #{ a36 = 102. } } } in
  let r_expected = { a252 = #0.; b252 = #{ a223 = #1.; b223 = #{ a36 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a252 *)
  r.a252 <- next_r.a252;
  let r_expected = { r_expected with a252 = next_r.a252 } in
  mark_test_run 1980;
  let test = eq r r_expected in
  if not test then failwithf "test 1980 failed";
  Gc.compact ();
  (* .b252 *)
  r.b252 <- next_r.b252;
  let r_expected = { r_expected with b252 = next_r.b252 } in
  mark_test_run 1981;
  let test = eq r r_expected in
  if not test then failwithf "test 1981 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a252; b252 = #{ a223; b223 = #{ a36 } } } = r in
  let expected_a252 = #100. in
  mark_test_run 1982;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a252 a252 in
  if not test then failwithf "test 1982 failed";
  let expected_a223 = #101. in
  mark_test_run 1983;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a223 a223 in
  if not test then failwithf "test 1983 failed";
  let expected_a36 = 102. in
  mark_test_run 1984;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 1984 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a252; b252 } = r in
  let expected_a252 = #100. in
  mark_test_run 1985;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a252 a252 in
  if not test then failwithf "test 1985 failed";
  let expected_b252 = #{ a223 = #101.; b223 = #{ a36 = 102. } } in
  mark_test_run 1986;
  let test = (fun #{ a223 = a2231; b223 = b2231 } #{ a223 = a2232; b223 = b2232 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2231 a2232 && (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) b2231 b2232) expected_b252 b252 in
  if not test then failwithf "test 1986 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t253 = { float#; #{ float#; #{ float# } } }   *)
  (***************************************************)
  let r = { a253 = #0.; b253 = #{ a225 = #1.; b225 = #{ a215 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a253 *)
  let actual = r.a253 in
  let expected = #0. in
  mark_test_run 1987;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1987 failed";
  (* Paths of depth 1 *)
  (* .b253 *)
  let actual = r.b253 in
  let expected = #{ a225 = #1.; b225 = #{ a215 = #2. } } in
  mark_test_run 1988;
  let test = (fun #{ a225 = a2251; b225 = b2251 } #{ a225 = a2252; b225 = b2252 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2251 a2252 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2251 b2252) actual expected in
  if not test then failwithf "test 1988 failed";
  (* Paths of depth 2 *)
  (* .b253.#a225 *)
  let actual = r.b253.#a225 in
  let expected = #1. in
  mark_test_run 1989;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1989 failed";
  (* .b253.#b225 *)
  let actual = r.b253.#b225 in
  let expected = #{ a215 = #2. } in
  mark_test_run 1990;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) actual expected in
  if not test then failwithf "test 1990 failed";
  (* Paths of depth 3 *)
  (* .b253.#b225.#a215 *)
  let actual = r.b253.#b225.#a215 in
  let expected = #2. in
  mark_test_run 1991;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1991 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a253 = a2531; b253 = b2531 } { a253 = a2532; b253 = b2532 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2531 a2532 && (fun #{ a225 = a2251; b225 = b2251 } #{ a225 = a2252; b225 = b2252 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2251 a2252 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2251 b2252) b2531 b2532) in
  let next_r = { a253 = #100.; b253 = #{ a225 = #101.; b225 = #{ a215 = #102. } } } in
  let r_expected = { a253 = #0.; b253 = #{ a225 = #1.; b225 = #{ a215 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a253 *)
  r.a253 <- next_r.a253;
  let r_expected = { r_expected with a253 = next_r.a253 } in
  mark_test_run 1992;
  let test = eq r r_expected in
  if not test then failwithf "test 1992 failed";
  Gc.compact ();
  (* .b253 *)
  r.b253 <- next_r.b253;
  let r_expected = { r_expected with b253 = next_r.b253 } in
  mark_test_run 1993;
  let test = eq r r_expected in
  if not test then failwithf "test 1993 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a253; b253 = #{ a225; b225 = #{ a215 } } } = r in
  let expected_a253 = #100. in
  mark_test_run 1994;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a253 a253 in
  if not test then failwithf "test 1994 failed";
  let expected_a225 = #101. in
  mark_test_run 1995;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a225 a225 in
  if not test then failwithf "test 1995 failed";
  let expected_a215 = #102. in
  mark_test_run 1996;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a215 a215 in
  if not test then failwithf "test 1996 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a253; b253 } = r in
  let expected_a253 = #100. in
  mark_test_run 1997;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a253 a253 in
  if not test then failwithf "test 1997 failed";
  let expected_b253 = #{ a225 = #101.; b225 = #{ a215 = #102. } } in
  mark_test_run 1998;
  let test = (fun #{ a225 = a2251; b225 = b2251 } #{ a225 = a2252; b225 = b2252 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2251 a2252 && (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) b2251 b2252) expected_b253 b253 in
  if not test then failwithf "test 1998 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t254 = { float#; #{ #{ float; float } } }   *)
  (*************************************************)
  let r = { a254 = #0.; b254 = #{ a69 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a254 *)
  let actual = r.a254 in
  let expected = #0. in
  mark_test_run 1999;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1999 failed";
  (* Paths of depth 1 *)
  (* .b254 *)
  let actual = r.b254 in
  let expected = #{ a69 = #{ a51 = 1.; b51 = 2. } } in
  mark_test_run 2000;
  let test = (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a691 a692) actual expected in
  if not test then failwithf "test 2000 failed";
  (* Paths of depth 2 *)
  (* .b254.#a69 *)
  let actual = r.b254.#a69 in
  let expected = #{ a51 = 1.; b51 = 2. } in
  mark_test_run 2001;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 2001 failed";
  (* Paths of depth 3 *)
  (* .b254.#a69.#a51 *)
  let actual = r.b254.#a69.#a51 in
  let expected = 1. in
  mark_test_run 2002;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2002 failed";
  (* .b254.#a69.#b51 *)
  let actual = r.b254.#a69.#b51 in
  let expected = 2. in
  mark_test_run 2003;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2003 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a254 = a2541; b254 = b2541 } { a254 = a2542; b254 = b2542 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2541 a2542 && (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a691 a692) b2541 b2542) in
  let next_r = { a254 = #100.; b254 = #{ a69 = #{ a51 = 101.; b51 = 102. } } } in
  let r_expected = { a254 = #0.; b254 = #{ a69 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a254 *)
  r.a254 <- next_r.a254;
  let r_expected = { r_expected with a254 = next_r.a254 } in
  mark_test_run 2004;
  let test = eq r r_expected in
  if not test then failwithf "test 2004 failed";
  Gc.compact ();
  (* .b254 *)
  r.b254 <- next_r.b254;
  let r_expected = { r_expected with b254 = next_r.b254 } in
  mark_test_run 2005;
  let test = eq r r_expected in
  if not test then failwithf "test 2005 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a254; b254 = #{ a69 = #{ a51; b51 } } } = r in
  let expected_a254 = #100. in
  mark_test_run 2006;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a254 a254 in
  if not test then failwithf "test 2006 failed";
  let expected_a51 = 101. in
  mark_test_run 2007;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 2007 failed";
  let expected_b51 = 102. in
  mark_test_run 2008;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 2008 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a254; b254 } = r in
  let expected_a254 = #100. in
  mark_test_run 2009;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a254 a254 in
  if not test then failwithf "test 2009 failed";
  let expected_b254 = #{ a69 = #{ a51 = 101.; b51 = 102. } } in
  mark_test_run 2010;
  let test = (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a691 a692) expected_b254 b254 in
  if not test then failwithf "test 2010 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t255 = { float#; #{ #{ float; float# } } }   *)
  (**************************************************)
  let r = { a255 = #0.; b255 = #{ a231 = #{ a211 = 1.; b211 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a255 *)
  let actual = r.a255 in
  let expected = #0. in
  mark_test_run 2011;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2011 failed";
  (* Paths of depth 1 *)
  (* .b255 *)
  let actual = r.b255 in
  let expected = #{ a231 = #{ a211 = 1.; b211 = #2. } } in
  mark_test_run 2012;
  let test = (fun #{ a231 = a2311 } #{ a231 = a2312 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a2311 a2312) actual expected in
  if not test then failwithf "test 2012 failed";
  (* Paths of depth 2 *)
  (* .b255.#a231 *)
  let actual = r.b255.#a231 in
  let expected = #{ a211 = 1.; b211 = #2. } in
  mark_test_run 2013;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 2013 failed";
  (* Paths of depth 3 *)
  (* .b255.#a231.#a211 *)
  let actual = r.b255.#a231.#a211 in
  let expected = 1. in
  mark_test_run 2014;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2014 failed";
  (* .b255.#a231.#b211 *)
  let actual = r.b255.#a231.#b211 in
  let expected = #2. in
  mark_test_run 2015;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2015 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a255 = a2551; b255 = b2551 } { a255 = a2552; b255 = b2552 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2551 a2552 && (fun #{ a231 = a2311 } #{ a231 = a2312 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a2311 a2312) b2551 b2552) in
  let next_r = { a255 = #100.; b255 = #{ a231 = #{ a211 = 101.; b211 = #102. } } } in
  let r_expected = { a255 = #0.; b255 = #{ a231 = #{ a211 = 1.; b211 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a255 *)
  r.a255 <- next_r.a255;
  let r_expected = { r_expected with a255 = next_r.a255 } in
  mark_test_run 2016;
  let test = eq r r_expected in
  if not test then failwithf "test 2016 failed";
  Gc.compact ();
  (* .b255 *)
  r.b255 <- next_r.b255;
  let r_expected = { r_expected with b255 = next_r.b255 } in
  mark_test_run 2017;
  let test = eq r r_expected in
  if not test then failwithf "test 2017 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a255; b255 = #{ a231 = #{ a211; b211 } } } = r in
  let expected_a255 = #100. in
  mark_test_run 2018;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a255 a255 in
  if not test then failwithf "test 2018 failed";
  let expected_a211 = 101. in
  mark_test_run 2019;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 2019 failed";
  let expected_b211 = #102. in
  mark_test_run 2020;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 2020 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a255; b255 } = r in
  let expected_a255 = #100. in
  mark_test_run 2021;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a255 a255 in
  if not test then failwithf "test 2021 failed";
  let expected_b255 = #{ a231 = #{ a211 = 101.; b211 = #102. } } in
  mark_test_run 2022;
  let test = (fun #{ a231 = a2311 } #{ a231 = a2312 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a2311 a2312) expected_b255 b255 in
  if not test then failwithf "test 2022 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t256 = { float#; #{ #{ float#; float } } }   *)
  (**************************************************)
  let r = { a256 = #0.; b256 = #{ a233 = #{ a219 = #1.; b219 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a256 *)
  let actual = r.a256 in
  let expected = #0. in
  mark_test_run 2023;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2023 failed";
  (* Paths of depth 1 *)
  (* .b256 *)
  let actual = r.b256 in
  let expected = #{ a233 = #{ a219 = #1.; b219 = 2. } } in
  mark_test_run 2024;
  let test = (fun #{ a233 = a2331 } #{ a233 = a2332 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a2331 a2332) actual expected in
  if not test then failwithf "test 2024 failed";
  (* Paths of depth 2 *)
  (* .b256.#a233 *)
  let actual = r.b256.#a233 in
  let expected = #{ a219 = #1.; b219 = 2. } in
  mark_test_run 2025;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 2025 failed";
  (* Paths of depth 3 *)
  (* .b256.#a233.#a219 *)
  let actual = r.b256.#a233.#a219 in
  let expected = #1. in
  mark_test_run 2026;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2026 failed";
  (* .b256.#a233.#b219 *)
  let actual = r.b256.#a233.#b219 in
  let expected = 2. in
  mark_test_run 2027;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2027 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a256 = a2561; b256 = b2561 } { a256 = a2562; b256 = b2562 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2561 a2562 && (fun #{ a233 = a2331 } #{ a233 = a2332 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a2331 a2332) b2561 b2562) in
  let next_r = { a256 = #100.; b256 = #{ a233 = #{ a219 = #101.; b219 = 102. } } } in
  let r_expected = { a256 = #0.; b256 = #{ a233 = #{ a219 = #1.; b219 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a256 *)
  r.a256 <- next_r.a256;
  let r_expected = { r_expected with a256 = next_r.a256 } in
  mark_test_run 2028;
  let test = eq r r_expected in
  if not test then failwithf "test 2028 failed";
  Gc.compact ();
  (* .b256 *)
  r.b256 <- next_r.b256;
  let r_expected = { r_expected with b256 = next_r.b256 } in
  mark_test_run 2029;
  let test = eq r r_expected in
  if not test then failwithf "test 2029 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a256; b256 = #{ a233 = #{ a219; b219 } } } = r in
  let expected_a256 = #100. in
  mark_test_run 2030;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a256 a256 in
  if not test then failwithf "test 2030 failed";
  let expected_a219 = #101. in
  mark_test_run 2031;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 2031 failed";
  let expected_b219 = 102. in
  mark_test_run 2032;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 2032 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a256; b256 } = r in
  let expected_a256 = #100. in
  mark_test_run 2033;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a256 a256 in
  if not test then failwithf "test 2033 failed";
  let expected_b256 = #{ a233 = #{ a219 = #101.; b219 = 102. } } in
  mark_test_run 2034;
  let test = (fun #{ a233 = a2331 } #{ a233 = a2332 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a2331 a2332) expected_b256 b256 in
  if not test then failwithf "test 2034 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t257 = { float#; #{ #{ float#; float# } } }   *)
  (***************************************************)
  let r = { a257 = #0.; b257 = #{ a235 = #{ a221 = #1.; b221 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a257 *)
  let actual = r.a257 in
  let expected = #0. in
  mark_test_run 2035;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2035 failed";
  (* Paths of depth 1 *)
  (* .b257 *)
  let actual = r.b257 in
  let expected = #{ a235 = #{ a221 = #1.; b221 = #2. } } in
  mark_test_run 2036;
  let test = (fun #{ a235 = a2351 } #{ a235 = a2352 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a2351 a2352) actual expected in
  if not test then failwithf "test 2036 failed";
  (* Paths of depth 2 *)
  (* .b257.#a235 *)
  let actual = r.b257.#a235 in
  let expected = #{ a221 = #1.; b221 = #2. } in
  mark_test_run 2037;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 2037 failed";
  (* Paths of depth 3 *)
  (* .b257.#a235.#a221 *)
  let actual = r.b257.#a235.#a221 in
  let expected = #1. in
  mark_test_run 2038;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2038 failed";
  (* .b257.#a235.#b221 *)
  let actual = r.b257.#a235.#b221 in
  let expected = #2. in
  mark_test_run 2039;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2039 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a257 = a2571; b257 = b2571 } { a257 = a2572; b257 = b2572 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2571 a2572 && (fun #{ a235 = a2351 } #{ a235 = a2352 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a2351 a2352) b2571 b2572) in
  let next_r = { a257 = #100.; b257 = #{ a235 = #{ a221 = #101.; b221 = #102. } } } in
  let r_expected = { a257 = #0.; b257 = #{ a235 = #{ a221 = #1.; b221 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a257 *)
  r.a257 <- next_r.a257;
  let r_expected = { r_expected with a257 = next_r.a257 } in
  mark_test_run 2040;
  let test = eq r r_expected in
  if not test then failwithf "test 2040 failed";
  Gc.compact ();
  (* .b257 *)
  r.b257 <- next_r.b257;
  let r_expected = { r_expected with b257 = next_r.b257 } in
  mark_test_run 2041;
  let test = eq r r_expected in
  if not test then failwithf "test 2041 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a257; b257 = #{ a235 = #{ a221; b221 } } } = r in
  let expected_a257 = #100. in
  mark_test_run 2042;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a257 a257 in
  if not test then failwithf "test 2042 failed";
  let expected_a221 = #101. in
  mark_test_run 2043;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 2043 failed";
  let expected_b221 = #102. in
  mark_test_run 2044;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 2044 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a257; b257 } = r in
  let expected_a257 = #100. in
  mark_test_run 2045;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a257 a257 in
  if not test then failwithf "test 2045 failed";
  let expected_b257 = #{ a235 = #{ a221 = #101.; b221 = #102. } } in
  mark_test_run 2046;
  let test = (fun #{ a235 = a2351 } #{ a235 = a2352 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a2351 a2352) expected_b257 b257 in
  if not test then failwithf "test 2046 failed";

  ()
;;

let () =
  (*************************)
  (*   t258 = { string }   *)
  (*************************)
  let r = { a258 = "0" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a258 *)
  let actual = r.a258 in
  let expected = "0" in
  mark_test_run 2047;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2047 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a258 = a2581 } { a258 = a2582 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2581 a2582) in
  let next_r = { a258 = "100" } in
  let r_expected = { a258 = "0" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a258 *)
  r.a258 <- next_r.a258;
  let r_expected = { r_expected with a258 = next_r.a258 } in
  mark_test_run 2048;
  let test = eq r r_expected in
  if not test then failwithf "test 2048 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a258 } = r in
  let expected_a258 = "100" in
  mark_test_run 2049;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a258 a258 in
  if not test then failwithf "test 2049 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a258 } = r in
  let expected_a258 = "100" in
  mark_test_run 2050;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a258 a258 in
  if not test then failwithf "test 2050 failed";

  ()
;;

let () =
  (*********************************)
  (*   t259 = { string; unit_u }   *)
  (*********************************)
  let r = { a259 = "0"; b259 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a259 *)
  let actual = r.a259 in
  let expected = "0" in
  mark_test_run 2051;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2051 failed";
  (* Paths of depth 1 *)
  (* .b259 *)
  let actual = r.b259 in
  let expected = (unbox_unit ()) in
  mark_test_run 2052;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2052 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a259 = a2591; b259 = b2591 } { a259 = a2592; b259 = b2592 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2591 a2592 && (fun _ _ -> true) b2591 b2592) in
  let next_r = { a259 = "100"; b259 = (unbox_unit ()) } in
  let r_expected = { a259 = "0"; b259 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a259 *)
  r.a259 <- next_r.a259;
  let r_expected = { r_expected with a259 = next_r.a259 } in
  mark_test_run 2053;
  let test = eq r r_expected in
  if not test then failwithf "test 2053 failed";
  Gc.compact ();
  (* .b259 *)
  r.b259 <- next_r.b259;
  let r_expected = { r_expected with b259 = next_r.b259 } in
  mark_test_run 2054;
  let test = eq r r_expected in
  if not test then failwithf "test 2054 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a259; b259 } = r in
  let expected_a259 = "100" in
  mark_test_run 2055;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a259 a259 in
  if not test then failwithf "test 2055 failed";
  let expected_b259 = (unbox_unit ()) in
  mark_test_run 2056;
  let test = (fun _ _ -> true) expected_b259 b259 in
  if not test then failwithf "test 2056 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a259; b259 } = r in
  let expected_a259 = "100" in
  mark_test_run 2057;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a259 a259 in
  if not test then failwithf "test 2057 failed";
  let expected_b259 = (unbox_unit ()) in
  mark_test_run 2058;
  let test = (fun _ _ -> true) expected_b259 b259 in
  if not test then failwithf "test 2058 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t260 = { string; unit_u; unit_u }   *)
  (*****************************************)
  let r = { a260 = "0"; b260 = (unbox_unit ()); c260 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a260 *)
  let actual = r.a260 in
  let expected = "0" in
  mark_test_run 2059;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2059 failed";
  (* Paths of depth 1 *)
  (* .b260 *)
  let actual = r.b260 in
  let expected = (unbox_unit ()) in
  mark_test_run 2060;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2060 failed";
  (* Paths of depth 1 *)
  (* .c260 *)
  let actual = r.c260 in
  let expected = (unbox_unit ()) in
  mark_test_run 2061;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2061 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a260 = a2601; b260 = b2601; c260 = c2601 } { a260 = a2602; b260 = b2602; c260 = c2602 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2601 a2602 && (fun _ _ -> true) b2601 b2602 && (fun _ _ -> true) c2601 c2602) in
  let next_r = { a260 = "100"; b260 = (unbox_unit ()); c260 = (unbox_unit ()) } in
  let r_expected = { a260 = "0"; b260 = (unbox_unit ()); c260 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a260 *)
  r.a260 <- next_r.a260;
  let r_expected = { r_expected with a260 = next_r.a260 } in
  mark_test_run 2062;
  let test = eq r r_expected in
  if not test then failwithf "test 2062 failed";
  Gc.compact ();
  (* .b260 *)
  r.b260 <- next_r.b260;
  let r_expected = { r_expected with b260 = next_r.b260 } in
  mark_test_run 2063;
  let test = eq r r_expected in
  if not test then failwithf "test 2063 failed";
  Gc.compact ();
  (* .c260 *)
  r.c260 <- next_r.c260;
  let r_expected = { r_expected with c260 = next_r.c260 } in
  mark_test_run 2064;
  let test = eq r r_expected in
  if not test then failwithf "test 2064 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a260; b260; c260 } = r in
  let expected_a260 = "100" in
  mark_test_run 2065;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a260 a260 in
  if not test then failwithf "test 2065 failed";
  let expected_b260 = (unbox_unit ()) in
  mark_test_run 2066;
  let test = (fun _ _ -> true) expected_b260 b260 in
  if not test then failwithf "test 2066 failed";
  let expected_c260 = (unbox_unit ()) in
  mark_test_run 2067;
  let test = (fun _ _ -> true) expected_c260 c260 in
  if not test then failwithf "test 2067 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a260; b260; c260 } = r in
  let expected_a260 = "100" in
  mark_test_run 2068;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a260 a260 in
  if not test then failwithf "test 2068 failed";
  let expected_b260 = (unbox_unit ()) in
  mark_test_run 2069;
  let test = (fun _ _ -> true) expected_b260 b260 in
  if not test then failwithf "test 2069 failed";
  let expected_c260 = (unbox_unit ()) in
  mark_test_run 2070;
  let test = (fun _ _ -> true) expected_c260 c260 in
  if not test then failwithf "test 2070 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t261 = { string; unit_u; string }   *)
  (*****************************************)
  let r = { a261 = "0"; b261 = (unbox_unit ()); c261 = "1" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a261 *)
  let actual = r.a261 in
  let expected = "0" in
  mark_test_run 2071;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2071 failed";
  (* Paths of depth 1 *)
  (* .b261 *)
  let actual = r.b261 in
  let expected = (unbox_unit ()) in
  mark_test_run 2072;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2072 failed";
  (* Paths of depth 1 *)
  (* .c261 *)
  let actual = r.c261 in
  let expected = "1" in
  mark_test_run 2073;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2073 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a261 = a2611; b261 = b2611; c261 = c2611 } { a261 = a2612; b261 = b2612; c261 = c2612 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2611 a2612 && (fun _ _ -> true) b2611 b2612 && (fun a b -> String.equal (globalize a) (globalize b)) c2611 c2612) in
  let next_r = { a261 = "100"; b261 = (unbox_unit ()); c261 = "101" } in
  let r_expected = { a261 = "0"; b261 = (unbox_unit ()); c261 = "1" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a261 *)
  r.a261 <- next_r.a261;
  let r_expected = { r_expected with a261 = next_r.a261 } in
  mark_test_run 2074;
  let test = eq r r_expected in
  if not test then failwithf "test 2074 failed";
  Gc.compact ();
  (* .b261 *)
  r.b261 <- next_r.b261;
  let r_expected = { r_expected with b261 = next_r.b261 } in
  mark_test_run 2075;
  let test = eq r r_expected in
  if not test then failwithf "test 2075 failed";
  Gc.compact ();
  (* .c261 *)
  r.c261 <- next_r.c261;
  let r_expected = { r_expected with c261 = next_r.c261 } in
  mark_test_run 2076;
  let test = eq r r_expected in
  if not test then failwithf "test 2076 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a261; b261; c261 } = r in
  let expected_a261 = "100" in
  mark_test_run 2077;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a261 a261 in
  if not test then failwithf "test 2077 failed";
  let expected_b261 = (unbox_unit ()) in
  mark_test_run 2078;
  let test = (fun _ _ -> true) expected_b261 b261 in
  if not test then failwithf "test 2078 failed";
  let expected_c261 = "101" in
  mark_test_run 2079;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c261 c261 in
  if not test then failwithf "test 2079 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a261; b261; c261 } = r in
  let expected_a261 = "100" in
  mark_test_run 2080;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a261 a261 in
  if not test then failwithf "test 2080 failed";
  let expected_b261 = (unbox_unit ()) in
  mark_test_run 2081;
  let test = (fun _ _ -> true) expected_b261 b261 in
  if not test then failwithf "test 2081 failed";
  let expected_c261 = "101" in
  mark_test_run 2082;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c261 c261 in
  if not test then failwithf "test 2082 failed";

  ()
;;

let () =
  (*********************************)
  (*   t262 = { string; string }   *)
  (*********************************)
  let r = { a262 = "0"; b262 = "1" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a262 *)
  let actual = r.a262 in
  let expected = "0" in
  mark_test_run 2083;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2083 failed";
  (* Paths of depth 1 *)
  (* .b262 *)
  let actual = r.b262 in
  let expected = "1" in
  mark_test_run 2084;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2084 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a262 = a2621; b262 = b2621 } { a262 = a2622; b262 = b2622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2621 a2622 && (fun a b -> String.equal (globalize a) (globalize b)) b2621 b2622) in
  let next_r = { a262 = "100"; b262 = "101" } in
  let r_expected = { a262 = "0"; b262 = "1" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a262 *)
  r.a262 <- next_r.a262;
  let r_expected = { r_expected with a262 = next_r.a262 } in
  mark_test_run 2085;
  let test = eq r r_expected in
  if not test then failwithf "test 2085 failed";
  Gc.compact ();
  (* .b262 *)
  r.b262 <- next_r.b262;
  let r_expected = { r_expected with b262 = next_r.b262 } in
  mark_test_run 2086;
  let test = eq r r_expected in
  if not test then failwithf "test 2086 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a262; b262 } = r in
  let expected_a262 = "100" in
  mark_test_run 2087;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a262 a262 in
  if not test then failwithf "test 2087 failed";
  let expected_b262 = "101" in
  mark_test_run 2088;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b262 b262 in
  if not test then failwithf "test 2088 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a262; b262 } = r in
  let expected_a262 = "100" in
  mark_test_run 2089;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a262 a262 in
  if not test then failwithf "test 2089 failed";
  let expected_b262 = "101" in
  mark_test_run 2090;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b262 b262 in
  if not test then failwithf "test 2090 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t263 = { string; string; unit_u }   *)
  (*****************************************)
  let r = { a263 = "0"; b263 = "1"; c263 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a263 *)
  let actual = r.a263 in
  let expected = "0" in
  mark_test_run 2091;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2091 failed";
  (* Paths of depth 1 *)
  (* .b263 *)
  let actual = r.b263 in
  let expected = "1" in
  mark_test_run 2092;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2092 failed";
  (* Paths of depth 1 *)
  (* .c263 *)
  let actual = r.c263 in
  let expected = (unbox_unit ()) in
  mark_test_run 2093;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2093 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a263 = a2631; b263 = b2631; c263 = c2631 } { a263 = a2632; b263 = b2632; c263 = c2632 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2631 a2632 && (fun a b -> String.equal (globalize a) (globalize b)) b2631 b2632 && (fun _ _ -> true) c2631 c2632) in
  let next_r = { a263 = "100"; b263 = "101"; c263 = (unbox_unit ()) } in
  let r_expected = { a263 = "0"; b263 = "1"; c263 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a263 *)
  r.a263 <- next_r.a263;
  let r_expected = { r_expected with a263 = next_r.a263 } in
  mark_test_run 2094;
  let test = eq r r_expected in
  if not test then failwithf "test 2094 failed";
  Gc.compact ();
  (* .b263 *)
  r.b263 <- next_r.b263;
  let r_expected = { r_expected with b263 = next_r.b263 } in
  mark_test_run 2095;
  let test = eq r r_expected in
  if not test then failwithf "test 2095 failed";
  Gc.compact ();
  (* .c263 *)
  r.c263 <- next_r.c263;
  let r_expected = { r_expected with c263 = next_r.c263 } in
  mark_test_run 2096;
  let test = eq r r_expected in
  if not test then failwithf "test 2096 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a263; b263; c263 } = r in
  let expected_a263 = "100" in
  mark_test_run 2097;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a263 a263 in
  if not test then failwithf "test 2097 failed";
  let expected_b263 = "101" in
  mark_test_run 2098;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b263 b263 in
  if not test then failwithf "test 2098 failed";
  let expected_c263 = (unbox_unit ()) in
  mark_test_run 2099;
  let test = (fun _ _ -> true) expected_c263 c263 in
  if not test then failwithf "test 2099 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a263; b263; c263 } = r in
  let expected_a263 = "100" in
  mark_test_run 2100;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a263 a263 in
  if not test then failwithf "test 2100 failed";
  let expected_b263 = "101" in
  mark_test_run 2101;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b263 b263 in
  if not test then failwithf "test 2101 failed";
  let expected_c263 = (unbox_unit ()) in
  mark_test_run 2102;
  let test = (fun _ _ -> true) expected_c263 c263 in
  if not test then failwithf "test 2102 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t264 = { string; string; string }   *)
  (*****************************************)
  let r = { a264 = "0"; b264 = "1"; c264 = "2" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a264 *)
  let actual = r.a264 in
  let expected = "0" in
  mark_test_run 2103;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2103 failed";
  (* Paths of depth 1 *)
  (* .b264 *)
  let actual = r.b264 in
  let expected = "1" in
  mark_test_run 2104;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2104 failed";
  (* Paths of depth 1 *)
  (* .c264 *)
  let actual = r.c264 in
  let expected = "2" in
  mark_test_run 2105;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2105 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a264 = a2641; b264 = b2641; c264 = c2641 } { a264 = a2642; b264 = b2642; c264 = c2642 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2641 a2642 && (fun a b -> String.equal (globalize a) (globalize b)) b2641 b2642 && (fun a b -> String.equal (globalize a) (globalize b)) c2641 c2642) in
  let next_r = { a264 = "100"; b264 = "101"; c264 = "102" } in
  let r_expected = { a264 = "0"; b264 = "1"; c264 = "2" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a264 *)
  r.a264 <- next_r.a264;
  let r_expected = { r_expected with a264 = next_r.a264 } in
  mark_test_run 2106;
  let test = eq r r_expected in
  if not test then failwithf "test 2106 failed";
  Gc.compact ();
  (* .b264 *)
  r.b264 <- next_r.b264;
  let r_expected = { r_expected with b264 = next_r.b264 } in
  mark_test_run 2107;
  let test = eq r r_expected in
  if not test then failwithf "test 2107 failed";
  Gc.compact ();
  (* .c264 *)
  r.c264 <- next_r.c264;
  let r_expected = { r_expected with c264 = next_r.c264 } in
  mark_test_run 2108;
  let test = eq r r_expected in
  if not test then failwithf "test 2108 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a264; b264; c264 } = r in
  let expected_a264 = "100" in
  mark_test_run 2109;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a264 a264 in
  if not test then failwithf "test 2109 failed";
  let expected_b264 = "101" in
  mark_test_run 2110;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b264 b264 in
  if not test then failwithf "test 2110 failed";
  let expected_c264 = "102" in
  mark_test_run 2111;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c264 c264 in
  if not test then failwithf "test 2111 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a264; b264; c264 } = r in
  let expected_a264 = "100" in
  mark_test_run 2112;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a264 a264 in
  if not test then failwithf "test 2112 failed";
  let expected_b264 = "101" in
  mark_test_run 2113;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b264 b264 in
  if not test then failwithf "test 2113 failed";
  let expected_c264 = "102" in
  mark_test_run 2114;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_c264 c264 in
  if not test then failwithf "test 2114 failed";

  ()
;;

let () =
  (**************************************)
  (*   t265 = { string; #{ unit_u } }   *)
  (**************************************)
  let r = { a265 = "0"; b265 = #{ a170 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a265 *)
  let actual = r.a265 in
  let expected = "0" in
  mark_test_run 2115;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2115 failed";
  (* Paths of depth 1 *)
  (* .b265 *)
  let actual = r.b265 in
  let expected = #{ a170 = (unbox_unit ()) } in
  mark_test_run 2116;
  let test = (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) actual expected in
  if not test then failwithf "test 2116 failed";
  (* Paths of depth 2 *)
  (* .b265.#a170 *)
  let actual = r.b265.#a170 in
  let expected = (unbox_unit ()) in
  mark_test_run 2117;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2117 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a265 = a2651; b265 = b2651 } { a265 = a2652; b265 = b2652 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2651 a2652 && (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) b2651 b2652) in
  let next_r = { a265 = "100"; b265 = #{ a170 = (unbox_unit ()) } } in
  let r_expected = { a265 = "0"; b265 = #{ a170 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a265 *)
  r.a265 <- next_r.a265;
  let r_expected = { r_expected with a265 = next_r.a265 } in
  mark_test_run 2118;
  let test = eq r r_expected in
  if not test then failwithf "test 2118 failed";
  Gc.compact ();
  (* .b265 *)
  r.b265 <- next_r.b265;
  let r_expected = { r_expected with b265 = next_r.b265 } in
  mark_test_run 2119;
  let test = eq r r_expected in
  if not test then failwithf "test 2119 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a265; b265 = #{ a170 } } = r in
  let expected_a265 = "100" in
  mark_test_run 2120;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a265 a265 in
  if not test then failwithf "test 2120 failed";
  let expected_a170 = (unbox_unit ()) in
  mark_test_run 2121;
  let test = (fun _ _ -> true) expected_a170 a170 in
  if not test then failwithf "test 2121 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a265; b265 } = r in
  let expected_a265 = "100" in
  mark_test_run 2122;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a265 a265 in
  if not test then failwithf "test 2122 failed";
  let expected_b265 = #{ a170 = (unbox_unit ()) } in
  mark_test_run 2123;
  let test = (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) expected_b265 b265 in
  if not test then failwithf "test 2123 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t267 = { string; #{ unit_u; unit_u } }   *)
  (**********************************************)
  let r = { a267 = "0"; b267 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a267 *)
  let actual = r.a267 in
  let expected = "0" in
  mark_test_run 2124;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2124 failed";
  (* Paths of depth 1 *)
  (* .b267 *)
  let actual = r.b267 in
  let expected = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } in
  mark_test_run 2125;
  let test = (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) actual expected in
  if not test then failwithf "test 2125 failed";
  (* Paths of depth 2 *)
  (* .b267.#a266 *)
  let actual = r.b267.#a266 in
  let expected = (unbox_unit ()) in
  mark_test_run 2126;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2126 failed";
  (* .b267.#b266 *)
  let actual = r.b267.#b266 in
  let expected = (unbox_unit ()) in
  mark_test_run 2127;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2127 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a267 = a2671; b267 = b2671 } { a267 = a2672; b267 = b2672 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2671 a2672 && (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) b2671 b2672) in
  let next_r = { a267 = "100"; b267 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } in
  let r_expected = { a267 = "0"; b267 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a267 *)
  r.a267 <- next_r.a267;
  let r_expected = { r_expected with a267 = next_r.a267 } in
  mark_test_run 2128;
  let test = eq r r_expected in
  if not test then failwithf "test 2128 failed";
  Gc.compact ();
  (* .b267 *)
  r.b267 <- next_r.b267;
  let r_expected = { r_expected with b267 = next_r.b267 } in
  mark_test_run 2129;
  let test = eq r r_expected in
  if not test then failwithf "test 2129 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a267; b267 = #{ a266; b266 } } = r in
  let expected_a267 = "100" in
  mark_test_run 2130;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a267 a267 in
  if not test then failwithf "test 2130 failed";
  let expected_a266 = (unbox_unit ()) in
  mark_test_run 2131;
  let test = (fun _ _ -> true) expected_a266 a266 in
  if not test then failwithf "test 2131 failed";
  let expected_b266 = (unbox_unit ()) in
  mark_test_run 2132;
  let test = (fun _ _ -> true) expected_b266 b266 in
  if not test then failwithf "test 2132 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a267; b267 } = r in
  let expected_a267 = "100" in
  mark_test_run 2133;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a267 a267 in
  if not test then failwithf "test 2133 failed";
  let expected_b267 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } in
  mark_test_run 2134;
  let test = (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) expected_b267 b267 in
  if not test then failwithf "test 2134 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t268 = { string; #{ unit_u; string } }   *)
  (**********************************************)
  let r = { a268 = "0"; b268 = #{ a160 = (unbox_unit ()); b160 = "1" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a268 *)
  let actual = r.a268 in
  let expected = "0" in
  mark_test_run 2135;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2135 failed";
  (* Paths of depth 1 *)
  (* .b268 *)
  let actual = r.b268 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "1" } in
  mark_test_run 2136;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 2136 failed";
  (* Paths of depth 2 *)
  (* .b268.#a160 *)
  let actual = r.b268.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 2137;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2137 failed";
  (* .b268.#b160 *)
  let actual = r.b268.#b160 in
  let expected = "1" in
  mark_test_run 2138;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2138 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a268 = a2681; b268 = b2681 } { a268 = a2682; b268 = b2682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2681 a2682 && (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) b2681 b2682) in
  let next_r = { a268 = "100"; b268 = #{ a160 = (unbox_unit ()); b160 = "101" } } in
  let r_expected = { a268 = "0"; b268 = #{ a160 = (unbox_unit ()); b160 = "1" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a268 *)
  r.a268 <- next_r.a268;
  let r_expected = { r_expected with a268 = next_r.a268 } in
  mark_test_run 2139;
  let test = eq r r_expected in
  if not test then failwithf "test 2139 failed";
  Gc.compact ();
  (* .b268 *)
  r.b268 <- next_r.b268;
  let r_expected = { r_expected with b268 = next_r.b268 } in
  mark_test_run 2140;
  let test = eq r r_expected in
  if not test then failwithf "test 2140 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a268; b268 = #{ a160; b160 } } = r in
  let expected_a268 = "100" in
  mark_test_run 2141;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a268 a268 in
  if not test then failwithf "test 2141 failed";
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 2142;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 2142 failed";
  let expected_b160 = "101" in
  mark_test_run 2143;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 2143 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a268; b268 } = r in
  let expected_a268 = "100" in
  mark_test_run 2144;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a268 a268 in
  if not test then failwithf "test 2144 failed";
  let expected_b268 = #{ a160 = (unbox_unit ()); b160 = "101" } in
  mark_test_run 2145;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) expected_b268 b268 in
  if not test then failwithf "test 2145 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t270 = { string; #{ unit_u; #{ unit_u } } }   *)
  (***************************************************)
  let r = { a270 = "0"; b270 = #{ a269 = (unbox_unit ()); b269 = #{ a170 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a270 *)
  let actual = r.a270 in
  let expected = "0" in
  mark_test_run 2146;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2146 failed";
  (* Paths of depth 1 *)
  (* .b270 *)
  let actual = r.b270 in
  let expected = #{ a269 = (unbox_unit ()); b269 = #{ a170 = (unbox_unit ()) } } in
  mark_test_run 2147;
  let test = (fun #{ a269 = a2691; b269 = b2691 } #{ a269 = a2692; b269 = b2692 } -> (fun _ _ -> true) a2691 a2692 && (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) b2691 b2692) actual expected in
  if not test then failwithf "test 2147 failed";
  (* Paths of depth 2 *)
  (* .b270.#a269 *)
  let actual = r.b270.#a269 in
  let expected = (unbox_unit ()) in
  mark_test_run 2148;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2148 failed";
  (* .b270.#b269 *)
  let actual = r.b270.#b269 in
  let expected = #{ a170 = (unbox_unit ()) } in
  mark_test_run 2149;
  let test = (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) actual expected in
  if not test then failwithf "test 2149 failed";
  (* Paths of depth 3 *)
  (* .b270.#b269.#a170 *)
  let actual = r.b270.#b269.#a170 in
  let expected = (unbox_unit ()) in
  mark_test_run 2150;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2150 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a270 = a2701; b270 = b2701 } { a270 = a2702; b270 = b2702 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2701 a2702 && (fun #{ a269 = a2691; b269 = b2691 } #{ a269 = a2692; b269 = b2692 } -> (fun _ _ -> true) a2691 a2692 && (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) b2691 b2692) b2701 b2702) in
  let next_r = { a270 = "100"; b270 = #{ a269 = (unbox_unit ()); b269 = #{ a170 = (unbox_unit ()) } } } in
  let r_expected = { a270 = "0"; b270 = #{ a269 = (unbox_unit ()); b269 = #{ a170 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a270 *)
  r.a270 <- next_r.a270;
  let r_expected = { r_expected with a270 = next_r.a270 } in
  mark_test_run 2151;
  let test = eq r r_expected in
  if not test then failwithf "test 2151 failed";
  Gc.compact ();
  (* .b270 *)
  r.b270 <- next_r.b270;
  let r_expected = { r_expected with b270 = next_r.b270 } in
  mark_test_run 2152;
  let test = eq r r_expected in
  if not test then failwithf "test 2152 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a270; b270 = #{ a269; b269 = #{ a170 } } } = r in
  let expected_a270 = "100" in
  mark_test_run 2153;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a270 a270 in
  if not test then failwithf "test 2153 failed";
  let expected_a269 = (unbox_unit ()) in
  mark_test_run 2154;
  let test = (fun _ _ -> true) expected_a269 a269 in
  if not test then failwithf "test 2154 failed";
  let expected_a170 = (unbox_unit ()) in
  mark_test_run 2155;
  let test = (fun _ _ -> true) expected_a170 a170 in
  if not test then failwithf "test 2155 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a270; b270 } = r in
  let expected_a270 = "100" in
  mark_test_run 2156;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a270 a270 in
  if not test then failwithf "test 2156 failed";
  let expected_b270 = #{ a269 = (unbox_unit ()); b269 = #{ a170 = (unbox_unit ()) } } in
  mark_test_run 2157;
  let test = (fun #{ a269 = a2691; b269 = b2691 } #{ a269 = a2692; b269 = b2692 } -> (fun _ _ -> true) a2691 a2692 && (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) b2691 b2692) expected_b270 b270 in
  if not test then failwithf "test 2157 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t271 = { string; #{ unit_u; #{ string } } }   *)
  (***************************************************)
  let r = { a271 = "0"; b271 = #{ a163 = (unbox_unit ()); b163 = #{ a162 = "1" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a271 *)
  let actual = r.a271 in
  let expected = "0" in
  mark_test_run 2158;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2158 failed";
  (* Paths of depth 1 *)
  (* .b271 *)
  let actual = r.b271 in
  let expected = #{ a163 = (unbox_unit ()); b163 = #{ a162 = "1" } } in
  mark_test_run 2159;
  let test = (fun #{ a163 = a1631; b163 = b1631 } #{ a163 = a1632; b163 = b1632 } -> (fun _ _ -> true) a1631 a1632 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1631 b1632) actual expected in
  if not test then failwithf "test 2159 failed";
  (* Paths of depth 2 *)
  (* .b271.#a163 *)
  let actual = r.b271.#a163 in
  let expected = (unbox_unit ()) in
  mark_test_run 2160;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2160 failed";
  (* .b271.#b163 *)
  let actual = r.b271.#b163 in
  let expected = #{ a162 = "1" } in
  mark_test_run 2161;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) actual expected in
  if not test then failwithf "test 2161 failed";
  (* Paths of depth 3 *)
  (* .b271.#b163.#a162 *)
  let actual = r.b271.#b163.#a162 in
  let expected = "1" in
  mark_test_run 2162;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2162 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a271 = a2711; b271 = b2711 } { a271 = a2712; b271 = b2712 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2711 a2712 && (fun #{ a163 = a1631; b163 = b1631 } #{ a163 = a1632; b163 = b1632 } -> (fun _ _ -> true) a1631 a1632 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1631 b1632) b2711 b2712) in
  let next_r = { a271 = "100"; b271 = #{ a163 = (unbox_unit ()); b163 = #{ a162 = "101" } } } in
  let r_expected = { a271 = "0"; b271 = #{ a163 = (unbox_unit ()); b163 = #{ a162 = "1" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a271 *)
  r.a271 <- next_r.a271;
  let r_expected = { r_expected with a271 = next_r.a271 } in
  mark_test_run 2163;
  let test = eq r r_expected in
  if not test then failwithf "test 2163 failed";
  Gc.compact ();
  (* .b271 *)
  r.b271 <- next_r.b271;
  let r_expected = { r_expected with b271 = next_r.b271 } in
  mark_test_run 2164;
  let test = eq r r_expected in
  if not test then failwithf "test 2164 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a271; b271 = #{ a163; b163 = #{ a162 } } } = r in
  let expected_a271 = "100" in
  mark_test_run 2165;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a271 a271 in
  if not test then failwithf "test 2165 failed";
  let expected_a163 = (unbox_unit ()) in
  mark_test_run 2166;
  let test = (fun _ _ -> true) expected_a163 a163 in
  if not test then failwithf "test 2166 failed";
  let expected_a162 = "101" in
  mark_test_run 2167;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a162 a162 in
  if not test then failwithf "test 2167 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a271; b271 } = r in
  let expected_a271 = "100" in
  mark_test_run 2168;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a271 a271 in
  if not test then failwithf "test 2168 failed";
  let expected_b271 = #{ a163 = (unbox_unit ()); b163 = #{ a162 = "101" } } in
  mark_test_run 2169;
  let test = (fun #{ a163 = a1631; b163 = b1631 } #{ a163 = a1632; b163 = b1632 } -> (fun _ _ -> true) a1631 a1632 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1631 b1632) expected_b271 b271 in
  if not test then failwithf "test 2169 failed";

  ()
;;

let () =
  (**************************************)
  (*   t272 = { string; #{ string } }   *)
  (**************************************)
  let r = { a272 = "0"; b272 = #{ a162 = "1" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a272 *)
  let actual = r.a272 in
  let expected = "0" in
  mark_test_run 2170;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2170 failed";
  (* Paths of depth 1 *)
  (* .b272 *)
  let actual = r.b272 in
  let expected = #{ a162 = "1" } in
  mark_test_run 2171;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) actual expected in
  if not test then failwithf "test 2171 failed";
  (* Paths of depth 2 *)
  (* .b272.#a162 *)
  let actual = r.b272.#a162 in
  let expected = "1" in
  mark_test_run 2172;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2172 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a272 = a2721; b272 = b2721 } { a272 = a2722; b272 = b2722 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2721 a2722 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b2721 b2722) in
  let next_r = { a272 = "100"; b272 = #{ a162 = "101" } } in
  let r_expected = { a272 = "0"; b272 = #{ a162 = "1" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a272 *)
  r.a272 <- next_r.a272;
  let r_expected = { r_expected with a272 = next_r.a272 } in
  mark_test_run 2173;
  let test = eq r r_expected in
  if not test then failwithf "test 2173 failed";
  Gc.compact ();
  (* .b272 *)
  r.b272 <- next_r.b272;
  let r_expected = { r_expected with b272 = next_r.b272 } in
  mark_test_run 2174;
  let test = eq r r_expected in
  if not test then failwithf "test 2174 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a272; b272 = #{ a162 } } = r in
  let expected_a272 = "100" in
  mark_test_run 2175;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a272 a272 in
  if not test then failwithf "test 2175 failed";
  let expected_a162 = "101" in
  mark_test_run 2176;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a162 a162 in
  if not test then failwithf "test 2176 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a272; b272 } = r in
  let expected_a272 = "100" in
  mark_test_run 2177;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a272 a272 in
  if not test then failwithf "test 2177 failed";
  let expected_b272 = #{ a162 = "101" } in
  mark_test_run 2178;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) expected_b272 b272 in
  if not test then failwithf "test 2178 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t273 = { string; #{ string; unit_u } }   *)
  (**********************************************)
  let r = { a273 = "0"; b273 = #{ a166 = "1"; b166 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a273 *)
  let actual = r.a273 in
  let expected = "0" in
  mark_test_run 2179;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2179 failed";
  (* Paths of depth 1 *)
  (* .b273 *)
  let actual = r.b273 in
  let expected = #{ a166 = "1"; b166 = (unbox_unit ()) } in
  mark_test_run 2180;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 2180 failed";
  (* Paths of depth 2 *)
  (* .b273.#a166 *)
  let actual = r.b273.#a166 in
  let expected = "1" in
  mark_test_run 2181;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2181 failed";
  (* .b273.#b166 *)
  let actual = r.b273.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 2182;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2182 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a273 = a2731; b273 = b2731 } { a273 = a2732; b273 = b2732 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2731 a2732 && (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) b2731 b2732) in
  let next_r = { a273 = "100"; b273 = #{ a166 = "101"; b166 = (unbox_unit ()) } } in
  let r_expected = { a273 = "0"; b273 = #{ a166 = "1"; b166 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a273 *)
  r.a273 <- next_r.a273;
  let r_expected = { r_expected with a273 = next_r.a273 } in
  mark_test_run 2183;
  let test = eq r r_expected in
  if not test then failwithf "test 2183 failed";
  Gc.compact ();
  (* .b273 *)
  r.b273 <- next_r.b273;
  let r_expected = { r_expected with b273 = next_r.b273 } in
  mark_test_run 2184;
  let test = eq r r_expected in
  if not test then failwithf "test 2184 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a273; b273 = #{ a166; b166 } } = r in
  let expected_a273 = "100" in
  mark_test_run 2185;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a273 a273 in
  if not test then failwithf "test 2185 failed";
  let expected_a166 = "101" in
  mark_test_run 2186;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 2186 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 2187;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 2187 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a273; b273 } = r in
  let expected_a273 = "100" in
  mark_test_run 2188;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a273 a273 in
  if not test then failwithf "test 2188 failed";
  let expected_b273 = #{ a166 = "101"; b166 = (unbox_unit ()) } in
  mark_test_run 2189;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) expected_b273 b273 in
  if not test then failwithf "test 2189 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t274 = { string; #{ string; string } }   *)
  (**********************************************)
  let r = { a274 = "0"; b274 = #{ a168 = "1"; b168 = "2" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a274 *)
  let actual = r.a274 in
  let expected = "0" in
  mark_test_run 2190;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2190 failed";
  (* Paths of depth 1 *)
  (* .b274 *)
  let actual = r.b274 in
  let expected = #{ a168 = "1"; b168 = "2" } in
  mark_test_run 2191;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 2191 failed";
  (* Paths of depth 2 *)
  (* .b274.#a168 *)
  let actual = r.b274.#a168 in
  let expected = "1" in
  mark_test_run 2192;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2192 failed";
  (* .b274.#b168 *)
  let actual = r.b274.#b168 in
  let expected = "2" in
  mark_test_run 2193;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2193 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a274 = a2741; b274 = b2741 } { a274 = a2742; b274 = b2742 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2741 a2742 && (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) b2741 b2742) in
  let next_r = { a274 = "100"; b274 = #{ a168 = "101"; b168 = "102" } } in
  let r_expected = { a274 = "0"; b274 = #{ a168 = "1"; b168 = "2" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a274 *)
  r.a274 <- next_r.a274;
  let r_expected = { r_expected with a274 = next_r.a274 } in
  mark_test_run 2194;
  let test = eq r r_expected in
  if not test then failwithf "test 2194 failed";
  Gc.compact ();
  (* .b274 *)
  r.b274 <- next_r.b274;
  let r_expected = { r_expected with b274 = next_r.b274 } in
  mark_test_run 2195;
  let test = eq r r_expected in
  if not test then failwithf "test 2195 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a274; b274 = #{ a168; b168 } } = r in
  let expected_a274 = "100" in
  mark_test_run 2196;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a274 a274 in
  if not test then failwithf "test 2196 failed";
  let expected_a168 = "101" in
  mark_test_run 2197;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 2197 failed";
  let expected_b168 = "102" in
  mark_test_run 2198;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 2198 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a274; b274 } = r in
  let expected_a274 = "100" in
  mark_test_run 2199;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a274 a274 in
  if not test then failwithf "test 2199 failed";
  let expected_b274 = #{ a168 = "101"; b168 = "102" } in
  mark_test_run 2200;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) expected_b274 b274 in
  if not test then failwithf "test 2200 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t275 = { string; #{ string; #{ unit_u } } }   *)
  (***************************************************)
  let r = { a275 = "0"; b275 = #{ a171 = "1"; b171 = #{ a170 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a275 *)
  let actual = r.a275 in
  let expected = "0" in
  mark_test_run 2201;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2201 failed";
  (* Paths of depth 1 *)
  (* .b275 *)
  let actual = r.b275 in
  let expected = #{ a171 = "1"; b171 = #{ a170 = (unbox_unit ()) } } in
  mark_test_run 2202;
  let test = (fun #{ a171 = a1711; b171 = b1711 } #{ a171 = a1712; b171 = b1712 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1711 a1712 && (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) b1711 b1712) actual expected in
  if not test then failwithf "test 2202 failed";
  (* Paths of depth 2 *)
  (* .b275.#a171 *)
  let actual = r.b275.#a171 in
  let expected = "1" in
  mark_test_run 2203;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2203 failed";
  (* .b275.#b171 *)
  let actual = r.b275.#b171 in
  let expected = #{ a170 = (unbox_unit ()) } in
  mark_test_run 2204;
  let test = (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) actual expected in
  if not test then failwithf "test 2204 failed";
  (* Paths of depth 3 *)
  (* .b275.#b171.#a170 *)
  let actual = r.b275.#b171.#a170 in
  let expected = (unbox_unit ()) in
  mark_test_run 2205;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2205 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a275 = a2751; b275 = b2751 } { a275 = a2752; b275 = b2752 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2751 a2752 && (fun #{ a171 = a1711; b171 = b1711 } #{ a171 = a1712; b171 = b1712 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1711 a1712 && (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) b1711 b1712) b2751 b2752) in
  let next_r = { a275 = "100"; b275 = #{ a171 = "101"; b171 = #{ a170 = (unbox_unit ()) } } } in
  let r_expected = { a275 = "0"; b275 = #{ a171 = "1"; b171 = #{ a170 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a275 *)
  r.a275 <- next_r.a275;
  let r_expected = { r_expected with a275 = next_r.a275 } in
  mark_test_run 2206;
  let test = eq r r_expected in
  if not test then failwithf "test 2206 failed";
  Gc.compact ();
  (* .b275 *)
  r.b275 <- next_r.b275;
  let r_expected = { r_expected with b275 = next_r.b275 } in
  mark_test_run 2207;
  let test = eq r r_expected in
  if not test then failwithf "test 2207 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a275; b275 = #{ a171; b171 = #{ a170 } } } = r in
  let expected_a275 = "100" in
  mark_test_run 2208;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a275 a275 in
  if not test then failwithf "test 2208 failed";
  let expected_a171 = "101" in
  mark_test_run 2209;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a171 a171 in
  if not test then failwithf "test 2209 failed";
  let expected_a170 = (unbox_unit ()) in
  mark_test_run 2210;
  let test = (fun _ _ -> true) expected_a170 a170 in
  if not test then failwithf "test 2210 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a275; b275 } = r in
  let expected_a275 = "100" in
  mark_test_run 2211;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a275 a275 in
  if not test then failwithf "test 2211 failed";
  let expected_b275 = #{ a171 = "101"; b171 = #{ a170 = (unbox_unit ()) } } in
  mark_test_run 2212;
  let test = (fun #{ a171 = a1711; b171 = b1711 } #{ a171 = a1712; b171 = b1712 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1711 a1712 && (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) b1711 b1712) expected_b275 b275 in
  if not test then failwithf "test 2212 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t276 = { string; #{ string; #{ string } } }   *)
  (***************************************************)
  let r = { a276 = "0"; b276 = #{ a173 = "1"; b173 = #{ a162 = "2" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a276 *)
  let actual = r.a276 in
  let expected = "0" in
  mark_test_run 2213;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2213 failed";
  (* Paths of depth 1 *)
  (* .b276 *)
  let actual = r.b276 in
  let expected = #{ a173 = "1"; b173 = #{ a162 = "2" } } in
  mark_test_run 2214;
  let test = (fun #{ a173 = a1731; b173 = b1731 } #{ a173 = a1732; b173 = b1732 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1731 a1732 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1731 b1732) actual expected in
  if not test then failwithf "test 2214 failed";
  (* Paths of depth 2 *)
  (* .b276.#a173 *)
  let actual = r.b276.#a173 in
  let expected = "1" in
  mark_test_run 2215;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2215 failed";
  (* .b276.#b173 *)
  let actual = r.b276.#b173 in
  let expected = #{ a162 = "2" } in
  mark_test_run 2216;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) actual expected in
  if not test then failwithf "test 2216 failed";
  (* Paths of depth 3 *)
  (* .b276.#b173.#a162 *)
  let actual = r.b276.#b173.#a162 in
  let expected = "2" in
  mark_test_run 2217;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2217 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a276 = a2761; b276 = b2761 } { a276 = a2762; b276 = b2762 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2761 a2762 && (fun #{ a173 = a1731; b173 = b1731 } #{ a173 = a1732; b173 = b1732 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1731 a1732 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1731 b1732) b2761 b2762) in
  let next_r = { a276 = "100"; b276 = #{ a173 = "101"; b173 = #{ a162 = "102" } } } in
  let r_expected = { a276 = "0"; b276 = #{ a173 = "1"; b173 = #{ a162 = "2" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a276 *)
  r.a276 <- next_r.a276;
  let r_expected = { r_expected with a276 = next_r.a276 } in
  mark_test_run 2218;
  let test = eq r r_expected in
  if not test then failwithf "test 2218 failed";
  Gc.compact ();
  (* .b276 *)
  r.b276 <- next_r.b276;
  let r_expected = { r_expected with b276 = next_r.b276 } in
  mark_test_run 2219;
  let test = eq r r_expected in
  if not test then failwithf "test 2219 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a276; b276 = #{ a173; b173 = #{ a162 } } } = r in
  let expected_a276 = "100" in
  mark_test_run 2220;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a276 a276 in
  if not test then failwithf "test 2220 failed";
  let expected_a173 = "101" in
  mark_test_run 2221;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a173 a173 in
  if not test then failwithf "test 2221 failed";
  let expected_a162 = "102" in
  mark_test_run 2222;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a162 a162 in
  if not test then failwithf "test 2222 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a276; b276 } = r in
  let expected_a276 = "100" in
  mark_test_run 2223;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a276 a276 in
  if not test then failwithf "test 2223 failed";
  let expected_b276 = #{ a173 = "101"; b173 = #{ a162 = "102" } } in
  mark_test_run 2224;
  let test = (fun #{ a173 = a1731; b173 = b1731 } #{ a173 = a1732; b173 = b1732 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1731 a1732 && (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) b1731 b1732) expected_b276 b276 in
  if not test then failwithf "test 2224 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t278 = { string; #{ #{ unit_u; unit_u } } }   *)
  (***************************************************)
  let r = { a278 = "0"; b278 = #{ a277 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a278 *)
  let actual = r.a278 in
  let expected = "0" in
  mark_test_run 2225;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2225 failed";
  (* Paths of depth 1 *)
  (* .b278 *)
  let actual = r.b278 in
  let expected = #{ a277 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } in
  mark_test_run 2226;
  let test = (fun #{ a277 = a2771 } #{ a277 = a2772 } -> (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) a2771 a2772) actual expected in
  if not test then failwithf "test 2226 failed";
  (* Paths of depth 2 *)
  (* .b278.#a277 *)
  let actual = r.b278.#a277 in
  let expected = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } in
  mark_test_run 2227;
  let test = (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) actual expected in
  if not test then failwithf "test 2227 failed";
  (* Paths of depth 3 *)
  (* .b278.#a277.#a266 *)
  let actual = r.b278.#a277.#a266 in
  let expected = (unbox_unit ()) in
  mark_test_run 2228;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2228 failed";
  (* .b278.#a277.#b266 *)
  let actual = r.b278.#a277.#b266 in
  let expected = (unbox_unit ()) in
  mark_test_run 2229;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2229 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a278 = a2781; b278 = b2781 } { a278 = a2782; b278 = b2782 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2781 a2782 && (fun #{ a277 = a2771 } #{ a277 = a2772 } -> (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) a2771 a2772) b2781 b2782) in
  let next_r = { a278 = "100"; b278 = #{ a277 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } } in
  let r_expected = { a278 = "0"; b278 = #{ a277 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a278 *)
  r.a278 <- next_r.a278;
  let r_expected = { r_expected with a278 = next_r.a278 } in
  mark_test_run 2230;
  let test = eq r r_expected in
  if not test then failwithf "test 2230 failed";
  Gc.compact ();
  (* .b278 *)
  r.b278 <- next_r.b278;
  let r_expected = { r_expected with b278 = next_r.b278 } in
  mark_test_run 2231;
  let test = eq r r_expected in
  if not test then failwithf "test 2231 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a278; b278 = #{ a277 = #{ a266; b266 } } } = r in
  let expected_a278 = "100" in
  mark_test_run 2232;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a278 a278 in
  if not test then failwithf "test 2232 failed";
  let expected_a266 = (unbox_unit ()) in
  mark_test_run 2233;
  let test = (fun _ _ -> true) expected_a266 a266 in
  if not test then failwithf "test 2233 failed";
  let expected_b266 = (unbox_unit ()) in
  mark_test_run 2234;
  let test = (fun _ _ -> true) expected_b266 b266 in
  if not test then failwithf "test 2234 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a278; b278 } = r in
  let expected_a278 = "100" in
  mark_test_run 2235;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a278 a278 in
  if not test then failwithf "test 2235 failed";
  let expected_b278 = #{ a277 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } in
  mark_test_run 2236;
  let test = (fun #{ a277 = a2771 } #{ a277 = a2772 } -> (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) a2771 a2772) expected_b278 b278 in
  if not test then failwithf "test 2236 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t279 = { string; #{ #{ unit_u; string } } }   *)
  (***************************************************)
  let r = { a279 = "0"; b279 = #{ a175 = #{ a160 = (unbox_unit ()); b160 = "1" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a279 *)
  let actual = r.a279 in
  let expected = "0" in
  mark_test_run 2237;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2237 failed";
  (* Paths of depth 1 *)
  (* .b279 *)
  let actual = r.b279 in
  let expected = #{ a175 = #{ a160 = (unbox_unit ()); b160 = "1" } } in
  mark_test_run 2238;
  let test = (fun #{ a175 = a1751 } #{ a175 = a1752 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a1751 a1752) actual expected in
  if not test then failwithf "test 2238 failed";
  (* Paths of depth 2 *)
  (* .b279.#a175 *)
  let actual = r.b279.#a175 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "1" } in
  mark_test_run 2239;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 2239 failed";
  (* Paths of depth 3 *)
  (* .b279.#a175.#a160 *)
  let actual = r.b279.#a175.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 2240;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2240 failed";
  (* .b279.#a175.#b160 *)
  let actual = r.b279.#a175.#b160 in
  let expected = "1" in
  mark_test_run 2241;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2241 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a279 = a2791; b279 = b2791 } { a279 = a2792; b279 = b2792 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2791 a2792 && (fun #{ a175 = a1751 } #{ a175 = a1752 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a1751 a1752) b2791 b2792) in
  let next_r = { a279 = "100"; b279 = #{ a175 = #{ a160 = (unbox_unit ()); b160 = "101" } } } in
  let r_expected = { a279 = "0"; b279 = #{ a175 = #{ a160 = (unbox_unit ()); b160 = "1" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a279 *)
  r.a279 <- next_r.a279;
  let r_expected = { r_expected with a279 = next_r.a279 } in
  mark_test_run 2242;
  let test = eq r r_expected in
  if not test then failwithf "test 2242 failed";
  Gc.compact ();
  (* .b279 *)
  r.b279 <- next_r.b279;
  let r_expected = { r_expected with b279 = next_r.b279 } in
  mark_test_run 2243;
  let test = eq r r_expected in
  if not test then failwithf "test 2243 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a279; b279 = #{ a175 = #{ a160; b160 } } } = r in
  let expected_a279 = "100" in
  mark_test_run 2244;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a279 a279 in
  if not test then failwithf "test 2244 failed";
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 2245;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 2245 failed";
  let expected_b160 = "101" in
  mark_test_run 2246;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 2246 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a279; b279 } = r in
  let expected_a279 = "100" in
  mark_test_run 2247;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a279 a279 in
  if not test then failwithf "test 2247 failed";
  let expected_b279 = #{ a175 = #{ a160 = (unbox_unit ()); b160 = "101" } } in
  mark_test_run 2248;
  let test = (fun #{ a175 = a1751 } #{ a175 = a1752 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a1751 a1752) expected_b279 b279 in
  if not test then failwithf "test 2248 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t280 = { string; #{ #{ string; unit_u } } }   *)
  (***************************************************)
  let r = { a280 = "0"; b280 = #{ a177 = #{ a166 = "1"; b166 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a280 *)
  let actual = r.a280 in
  let expected = "0" in
  mark_test_run 2249;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2249 failed";
  (* Paths of depth 1 *)
  (* .b280 *)
  let actual = r.b280 in
  let expected = #{ a177 = #{ a166 = "1"; b166 = (unbox_unit ()) } } in
  mark_test_run 2250;
  let test = (fun #{ a177 = a1771 } #{ a177 = a1772 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a1771 a1772) actual expected in
  if not test then failwithf "test 2250 failed";
  (* Paths of depth 2 *)
  (* .b280.#a177 *)
  let actual = r.b280.#a177 in
  let expected = #{ a166 = "1"; b166 = (unbox_unit ()) } in
  mark_test_run 2251;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 2251 failed";
  (* Paths of depth 3 *)
  (* .b280.#a177.#a166 *)
  let actual = r.b280.#a177.#a166 in
  let expected = "1" in
  mark_test_run 2252;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2252 failed";
  (* .b280.#a177.#b166 *)
  let actual = r.b280.#a177.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 2253;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2253 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a280 = a2801; b280 = b2801 } { a280 = a2802; b280 = b2802 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2801 a2802 && (fun #{ a177 = a1771 } #{ a177 = a1772 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a1771 a1772) b2801 b2802) in
  let next_r = { a280 = "100"; b280 = #{ a177 = #{ a166 = "101"; b166 = (unbox_unit ()) } } } in
  let r_expected = { a280 = "0"; b280 = #{ a177 = #{ a166 = "1"; b166 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a280 *)
  r.a280 <- next_r.a280;
  let r_expected = { r_expected with a280 = next_r.a280 } in
  mark_test_run 2254;
  let test = eq r r_expected in
  if not test then failwithf "test 2254 failed";
  Gc.compact ();
  (* .b280 *)
  r.b280 <- next_r.b280;
  let r_expected = { r_expected with b280 = next_r.b280 } in
  mark_test_run 2255;
  let test = eq r r_expected in
  if not test then failwithf "test 2255 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a280; b280 = #{ a177 = #{ a166; b166 } } } = r in
  let expected_a280 = "100" in
  mark_test_run 2256;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a280 a280 in
  if not test then failwithf "test 2256 failed";
  let expected_a166 = "101" in
  mark_test_run 2257;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 2257 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 2258;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 2258 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a280; b280 } = r in
  let expected_a280 = "100" in
  mark_test_run 2259;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a280 a280 in
  if not test then failwithf "test 2259 failed";
  let expected_b280 = #{ a177 = #{ a166 = "101"; b166 = (unbox_unit ()) } } in
  mark_test_run 2260;
  let test = (fun #{ a177 = a1771 } #{ a177 = a1772 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a1771 a1772) expected_b280 b280 in
  if not test then failwithf "test 2260 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t281 = { string; #{ #{ string; string } } }   *)
  (***************************************************)
  let r = { a281 = "0"; b281 = #{ a179 = #{ a168 = "1"; b168 = "2" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a281 *)
  let actual = r.a281 in
  let expected = "0" in
  mark_test_run 2261;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2261 failed";
  (* Paths of depth 1 *)
  (* .b281 *)
  let actual = r.b281 in
  let expected = #{ a179 = #{ a168 = "1"; b168 = "2" } } in
  mark_test_run 2262;
  let test = (fun #{ a179 = a1791 } #{ a179 = a1792 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a1791 a1792) actual expected in
  if not test then failwithf "test 2262 failed";
  (* Paths of depth 2 *)
  (* .b281.#a179 *)
  let actual = r.b281.#a179 in
  let expected = #{ a168 = "1"; b168 = "2" } in
  mark_test_run 2263;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 2263 failed";
  (* Paths of depth 3 *)
  (* .b281.#a179.#a168 *)
  let actual = r.b281.#a179.#a168 in
  let expected = "1" in
  mark_test_run 2264;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2264 failed";
  (* .b281.#a179.#b168 *)
  let actual = r.b281.#a179.#b168 in
  let expected = "2" in
  mark_test_run 2265;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2265 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a281 = a2811; b281 = b2811 } { a281 = a2812; b281 = b2812 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2811 a2812 && (fun #{ a179 = a1791 } #{ a179 = a1792 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a1791 a1792) b2811 b2812) in
  let next_r = { a281 = "100"; b281 = #{ a179 = #{ a168 = "101"; b168 = "102" } } } in
  let r_expected = { a281 = "0"; b281 = #{ a179 = #{ a168 = "1"; b168 = "2" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a281 *)
  r.a281 <- next_r.a281;
  let r_expected = { r_expected with a281 = next_r.a281 } in
  mark_test_run 2266;
  let test = eq r r_expected in
  if not test then failwithf "test 2266 failed";
  Gc.compact ();
  (* .b281 *)
  r.b281 <- next_r.b281;
  let r_expected = { r_expected with b281 = next_r.b281 } in
  mark_test_run 2267;
  let test = eq r r_expected in
  if not test then failwithf "test 2267 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a281; b281 = #{ a179 = #{ a168; b168 } } } = r in
  let expected_a281 = "100" in
  mark_test_run 2268;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a281 a281 in
  if not test then failwithf "test 2268 failed";
  let expected_a168 = "101" in
  mark_test_run 2269;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 2269 failed";
  let expected_b168 = "102" in
  mark_test_run 2270;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 2270 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a281; b281 } = r in
  let expected_a281 = "100" in
  mark_test_run 2271;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a281 a281 in
  if not test then failwithf "test 2271 failed";
  let expected_b281 = #{ a179 = #{ a168 = "101"; b168 = "102" } } in
  mark_test_run 2272;
  let test = (fun #{ a179 = a1791 } #{ a179 = a1792 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a1791 a1792) expected_b281 b281 in
  if not test then failwithf "test 2272 failed";

  ()
;;

let () =
  (*****************************)
  (*   t282 = { (| unit_u) }   *)
  (*****************************)
  let r = { a282 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a282 *)
  let actual = r.a282 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2273;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2273 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a282 = a2821 } { a282 = a2822 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2821 a2822) in
  let next_r = { a282 = C15_0((unbox_unit ())) } in
  let r_expected = { a282 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a282 *)
  r.a282 <- next_r.a282;
  let r_expected = { r_expected with a282 = next_r.a282 } in
  mark_test_run 2274;
  let test = eq r r_expected in
  if not test then failwithf "test 2274 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a282 } = r in
  let expected_a282 = C15_0((unbox_unit ())) in
  mark_test_run 2275;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a282 a282 in
  if not test then failwithf "test 2275 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a282 } = r in
  let expected_a282 = C15_0((unbox_unit ())) in
  mark_test_run 2276;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a282 a282 in
  if not test then failwithf "test 2276 failed";

  ()
;;

let () =
  (**********************************)
  (*   t283 = { (| unit_u); int }   *)
  (**********************************)
  let r = { a283 = C15_0((unbox_unit ())); b283 = 0 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a283 *)
  let actual = r.a283 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2277;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2277 failed";
  (* Paths of depth 1 *)
  (* .b283 *)
  let actual = r.b283 in
  let expected = 0 in
  mark_test_run 2278;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2278 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a283 = a2831; b283 = b2831 } { a283 = a2832; b283 = b2832 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2831 a2832 && (fun a b -> Int.equal a b) b2831 b2832) in
  let next_r = { a283 = C15_0((unbox_unit ())); b283 = 100 } in
  let r_expected = { a283 = C15_0((unbox_unit ())); b283 = 0 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a283 *)
  r.a283 <- next_r.a283;
  let r_expected = { r_expected with a283 = next_r.a283 } in
  mark_test_run 2279;
  let test = eq r r_expected in
  if not test then failwithf "test 2279 failed";
  Gc.compact ();
  (* .b283 *)
  r.b283 <- next_r.b283;
  let r_expected = { r_expected with b283 = next_r.b283 } in
  mark_test_run 2280;
  let test = eq r r_expected in
  if not test then failwithf "test 2280 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a283; b283 } = r in
  let expected_a283 = C15_0((unbox_unit ())) in
  mark_test_run 2281;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a283 a283 in
  if not test then failwithf "test 2281 failed";
  let expected_b283 = 100 in
  mark_test_run 2282;
  let test = (fun a b -> Int.equal a b) expected_b283 b283 in
  if not test then failwithf "test 2282 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a283; b283 } = r in
  let expected_a283 = C15_0((unbox_unit ())) in
  mark_test_run 2283;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a283 a283 in
  if not test then failwithf "test 2283 failed";
  let expected_b283 = 100 in
  mark_test_run 2284;
  let test = (fun a b -> Int.equal a b) expected_b283 b283 in
  if not test then failwithf "test 2284 failed";

  ()
;;

let () =
  (************************************)
  (*   t284 = { (| unit_u); int64 }   *)
  (************************************)
  let r = { a284 = C15_0((unbox_unit ())); b284 = 0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a284 *)
  let actual = r.a284 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2285;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2285 failed";
  (* Paths of depth 1 *)
  (* .b284 *)
  let actual = r.b284 in
  let expected = 0L in
  mark_test_run 2286;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2286 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a284 = a2841; b284 = b2841 } { a284 = a2842; b284 = b2842 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2841 a2842 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2841 b2842) in
  let next_r = { a284 = C15_0((unbox_unit ())); b284 = 100L } in
  let r_expected = { a284 = C15_0((unbox_unit ())); b284 = 0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a284 *)
  r.a284 <- next_r.a284;
  let r_expected = { r_expected with a284 = next_r.a284 } in
  mark_test_run 2287;
  let test = eq r r_expected in
  if not test then failwithf "test 2287 failed";
  Gc.compact ();
  (* .b284 *)
  r.b284 <- next_r.b284;
  let r_expected = { r_expected with b284 = next_r.b284 } in
  mark_test_run 2288;
  let test = eq r r_expected in
  if not test then failwithf "test 2288 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a284; b284 } = r in
  let expected_a284 = C15_0((unbox_unit ())) in
  mark_test_run 2289;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a284 a284 in
  if not test then failwithf "test 2289 failed";
  let expected_b284 = 100L in
  mark_test_run 2290;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b284 b284 in
  if not test then failwithf "test 2290 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a284; b284 } = r in
  let expected_a284 = C15_0((unbox_unit ())) in
  mark_test_run 2291;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a284 a284 in
  if not test then failwithf "test 2291 failed";
  let expected_b284 = 100L in
  mark_test_run 2292;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b284 b284 in
  if not test then failwithf "test 2292 failed";

  ()
;;

let () =
  (*************************************)
  (*   t285 = { (| unit_u); int64# }   *)
  (*************************************)
  let r = { a285 = C15_0((unbox_unit ())); b285 = #0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a285 *)
  let actual = r.a285 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2293;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2293 failed";
  (* Paths of depth 1 *)
  (* .b285 *)
  let actual = r.b285 in
  let expected = #0L in
  mark_test_run 2294;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 2294 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a285 = a2851; b285 = b2851 } { a285 = a2852; b285 = b2852 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2851 a2852 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2851 b2852) in
  let next_r = { a285 = C15_0((unbox_unit ())); b285 = #100L } in
  let r_expected = { a285 = C15_0((unbox_unit ())); b285 = #0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a285 *)
  r.a285 <- next_r.a285;
  let r_expected = { r_expected with a285 = next_r.a285 } in
  mark_test_run 2295;
  let test = eq r r_expected in
  if not test then failwithf "test 2295 failed";
  Gc.compact ();
  (* .b285 *)
  r.b285 <- next_r.b285;
  let r_expected = { r_expected with b285 = next_r.b285 } in
  mark_test_run 2296;
  let test = eq r r_expected in
  if not test then failwithf "test 2296 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a285; b285 } = r in
  let expected_a285 = C15_0((unbox_unit ())) in
  mark_test_run 2297;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a285 a285 in
  if not test then failwithf "test 2297 failed";
  let expected_b285 = #100L in
  mark_test_run 2298;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b285 b285 in
  if not test then failwithf "test 2298 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a285; b285 } = r in
  let expected_a285 = C15_0((unbox_unit ())) in
  mark_test_run 2299;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a285 a285 in
  if not test then failwithf "test 2299 failed";
  let expected_b285 = #100L in
  mark_test_run 2300;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b285 b285 in
  if not test then failwithf "test 2300 failed";

  ()
;;

let () =
  (*************************************)
  (*   t286 = { (| unit_u); int32# }   *)
  (*************************************)
  let r = { a286 = C15_0((unbox_unit ())); b286 = #0l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a286 *)
  let actual = r.a286 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2301;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2301 failed";
  (* Paths of depth 1 *)
  (* .b286 *)
  let actual = r.b286 in
  let expected = #0l in
  mark_test_run 2302;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2302 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a286 = a2861; b286 = b2861 } { a286 = a2862; b286 = b2862 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2861 a2862 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2861 b2862) in
  let next_r = { a286 = C15_0((unbox_unit ())); b286 = #100l } in
  let r_expected = { a286 = C15_0((unbox_unit ())); b286 = #0l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a286 *)
  r.a286 <- next_r.a286;
  let r_expected = { r_expected with a286 = next_r.a286 } in
  mark_test_run 2303;
  let test = eq r r_expected in
  if not test then failwithf "test 2303 failed";
  Gc.compact ();
  (* .b286 *)
  r.b286 <- next_r.b286;
  let r_expected = { r_expected with b286 = next_r.b286 } in
  mark_test_run 2304;
  let test = eq r r_expected in
  if not test then failwithf "test 2304 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a286; b286 } = r in
  let expected_a286 = C15_0((unbox_unit ())) in
  mark_test_run 2305;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a286 a286 in
  if not test then failwithf "test 2305 failed";
  let expected_b286 = #100l in
  mark_test_run 2306;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b286 b286 in
  if not test then failwithf "test 2306 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a286; b286 } = r in
  let expected_a286 = C15_0((unbox_unit ())) in
  mark_test_run 2307;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a286 a286 in
  if not test then failwithf "test 2307 failed";
  let expected_b286 = #100l in
  mark_test_run 2308;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b286 b286 in
  if not test then failwithf "test 2308 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t287 = { (| unit_u); nativeint# }   *)
  (*****************************************)
  let r = { a287 = C15_0((unbox_unit ())); b287 = #0n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a287 *)
  let actual = r.a287 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2309;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2309 failed";
  (* Paths of depth 1 *)
  (* .b287 *)
  let actual = r.b287 in
  let expected = #0n in
  mark_test_run 2310;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 2310 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a287 = a2871; b287 = b2871 } { a287 = a2872; b287 = b2872 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2871 a2872 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b2871 b2872) in
  let next_r = { a287 = C15_0((unbox_unit ())); b287 = #100n } in
  let r_expected = { a287 = C15_0((unbox_unit ())); b287 = #0n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a287 *)
  r.a287 <- next_r.a287;
  let r_expected = { r_expected with a287 = next_r.a287 } in
  mark_test_run 2311;
  let test = eq r r_expected in
  if not test then failwithf "test 2311 failed";
  Gc.compact ();
  (* .b287 *)
  r.b287 <- next_r.b287;
  let r_expected = { r_expected with b287 = next_r.b287 } in
  mark_test_run 2312;
  let test = eq r r_expected in
  if not test then failwithf "test 2312 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a287; b287 } = r in
  let expected_a287 = C15_0((unbox_unit ())) in
  mark_test_run 2313;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a287 a287 in
  if not test then failwithf "test 2313 failed";
  let expected_b287 = #100n in
  mark_test_run 2314;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b287 b287 in
  if not test then failwithf "test 2314 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a287; b287 } = r in
  let expected_a287 = C15_0((unbox_unit ())) in
  mark_test_run 2315;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a287 a287 in
  if not test then failwithf "test 2315 failed";
  let expected_b287 = #100n in
  mark_test_run 2316;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b287 b287 in
  if not test then failwithf "test 2316 failed";

  ()
;;

let () =
  (*************************************)
  (*   t288 = { (| unit_u); unit_u }   *)
  (*************************************)
  let r = { a288 = C15_0((unbox_unit ())); b288 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a288 *)
  let actual = r.a288 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2317;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2317 failed";
  (* Paths of depth 1 *)
  (* .b288 *)
  let actual = r.b288 in
  let expected = (unbox_unit ()) in
  mark_test_run 2318;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2318 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a288 = a2881; b288 = b2881 } { a288 = a2882; b288 = b2882 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2881 a2882 && (fun _ _ -> true) b2881 b2882) in
  let next_r = { a288 = C15_0((unbox_unit ())); b288 = (unbox_unit ()) } in
  let r_expected = { a288 = C15_0((unbox_unit ())); b288 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a288 *)
  r.a288 <- next_r.a288;
  let r_expected = { r_expected with a288 = next_r.a288 } in
  mark_test_run 2319;
  let test = eq r r_expected in
  if not test then failwithf "test 2319 failed";
  Gc.compact ();
  (* .b288 *)
  r.b288 <- next_r.b288;
  let r_expected = { r_expected with b288 = next_r.b288 } in
  mark_test_run 2320;
  let test = eq r r_expected in
  if not test then failwithf "test 2320 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a288; b288 } = r in
  let expected_a288 = C15_0((unbox_unit ())) in
  mark_test_run 2321;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a288 a288 in
  if not test then failwithf "test 2321 failed";
  let expected_b288 = (unbox_unit ()) in
  mark_test_run 2322;
  let test = (fun _ _ -> true) expected_b288 b288 in
  if not test then failwithf "test 2322 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a288; b288 } = r in
  let expected_a288 = C15_0((unbox_unit ())) in
  mark_test_run 2323;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a288 a288 in
  if not test then failwithf "test 2323 failed";
  let expected_b288 = (unbox_unit ()) in
  mark_test_run 2324;
  let test = (fun _ _ -> true) expected_b288 b288 in
  if not test then failwithf "test 2324 failed";

  ()
;;

let () =
  (************************************)
  (*   t289 = { (| unit_u); float }   *)
  (************************************)
  let r = { a289 = C15_0((unbox_unit ())); b289 = 0. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a289 *)
  let actual = r.a289 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2325;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2325 failed";
  (* Paths of depth 1 *)
  (* .b289 *)
  let actual = r.b289 in
  let expected = 0. in
  mark_test_run 2326;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2326 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a289 = a2891; b289 = b2891 } { a289 = a2892; b289 = b2892 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2891 a2892 && (fun a b -> Float.equal (globalize a) (globalize b)) b2891 b2892) in
  let next_r = { a289 = C15_0((unbox_unit ())); b289 = 100. } in
  let r_expected = { a289 = C15_0((unbox_unit ())); b289 = 0. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a289 *)
  r.a289 <- next_r.a289;
  let r_expected = { r_expected with a289 = next_r.a289 } in
  mark_test_run 2327;
  let test = eq r r_expected in
  if not test then failwithf "test 2327 failed";
  Gc.compact ();
  (* .b289 *)
  r.b289 <- next_r.b289;
  let r_expected = { r_expected with b289 = next_r.b289 } in
  mark_test_run 2328;
  let test = eq r r_expected in
  if not test then failwithf "test 2328 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a289; b289 } = r in
  let expected_a289 = C15_0((unbox_unit ())) in
  mark_test_run 2329;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a289 a289 in
  if not test then failwithf "test 2329 failed";
  let expected_b289 = 100. in
  mark_test_run 2330;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b289 b289 in
  if not test then failwithf "test 2330 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a289; b289 } = r in
  let expected_a289 = C15_0((unbox_unit ())) in
  mark_test_run 2331;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a289 a289 in
  if not test then failwithf "test 2331 failed";
  let expected_b289 = 100. in
  mark_test_run 2332;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b289 b289 in
  if not test then failwithf "test 2332 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t290 = { (| unit_u); (| unit_u) }   *)
  (*****************************************)
  let r = { a290 = C15_0((unbox_unit ())); b290 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a290 *)
  let actual = r.a290 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2333;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2333 failed";
  (* Paths of depth 1 *)
  (* .b290 *)
  let actual = r.b290 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2334;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2334 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a290 = a2901; b290 = b2901 } { a290 = a2902; b290 = b2902 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2901 a2902 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b2901 b2902) in
  let next_r = { a290 = C15_0((unbox_unit ())); b290 = C15_0((unbox_unit ())) } in
  let r_expected = { a290 = C15_0((unbox_unit ())); b290 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a290 *)
  r.a290 <- next_r.a290;
  let r_expected = { r_expected with a290 = next_r.a290 } in
  mark_test_run 2335;
  let test = eq r r_expected in
  if not test then failwithf "test 2335 failed";
  Gc.compact ();
  (* .b290 *)
  r.b290 <- next_r.b290;
  let r_expected = { r_expected with b290 = next_r.b290 } in
  mark_test_run 2336;
  let test = eq r r_expected in
  if not test then failwithf "test 2336 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a290; b290 } = r in
  let expected_a290 = C15_0((unbox_unit ())) in
  mark_test_run 2337;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a290 a290 in
  if not test then failwithf "test 2337 failed";
  let expected_b290 = C15_0((unbox_unit ())) in
  mark_test_run 2338;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b290 b290 in
  if not test then failwithf "test 2338 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a290; b290 } = r in
  let expected_a290 = C15_0((unbox_unit ())) in
  mark_test_run 2339;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a290 a290 in
  if not test then failwithf "test 2339 failed";
  let expected_b290 = C15_0((unbox_unit ())) in
  mark_test_run 2340;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b290 b290 in
  if not test then failwithf "test 2340 failed";

  ()
;;

let () =
  (*******************************************************************************)
  (*   t291 = { (| unit_u); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (*******************************************************************************)
  let r = { a291 = C15_0((unbox_unit ())); b291 = C17_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a291 *)
  let actual = r.a291 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2341;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2341 failed";
  (* Paths of depth 1 *)
  (* .b291 *)
  let actual = r.b291 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2342;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2342 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a291 = a2911; b291 = b2911 } { a291 = a2912; b291 = b2912 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2911 a2912 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b2911 b2912) in
  let next_r = { a291 = C15_0((unbox_unit ())); b291 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a291 = C15_0((unbox_unit ())); b291 = C17_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a291 *)
  r.a291 <- next_r.a291;
  let r_expected = { r_expected with a291 = next_r.a291 } in
  mark_test_run 2343;
  let test = eq r r_expected in
  if not test then failwithf "test 2343 failed";
  Gc.compact ();
  (* .b291 *)
  r.b291 <- next_r.b291;
  let r_expected = { r_expected with b291 = next_r.b291 } in
  mark_test_run 2344;
  let test = eq r r_expected in
  if not test then failwithf "test 2344 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a291; b291 } = r in
  let expected_a291 = C15_0((unbox_unit ())) in
  mark_test_run 2345;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a291 a291 in
  if not test then failwithf "test 2345 failed";
  let expected_b291 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2346;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b291 b291 in
  if not test then failwithf "test 2346 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a291; b291 } = r in
  let expected_a291 = C15_0((unbox_unit ())) in
  mark_test_run 2347;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a291 a291 in
  if not test then failwithf "test 2347 failed";
  let expected_b291 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2348;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b291 b291 in
  if not test then failwithf "test 2348 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t292 = { (| unit_u); #(unit_u, int) }   *)
  (*********************************************)
  let r = { a292 = C15_0((unbox_unit ())); b292 = #((unbox_unit ()), 0) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a292 *)
  let actual = r.a292 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2349;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2349 failed";
  (* Paths of depth 1 *)
  (* .b292 *)
  let actual = r.b292 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2350;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2350 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a292 = a2921; b292 = b2921 } { a292 = a2922; b292 = b2922 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2921 a2922 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b2921 b2922) in
  let next_r = { a292 = C15_0((unbox_unit ())); b292 = #((unbox_unit ()), 100) } in
  let r_expected = { a292 = C15_0((unbox_unit ())); b292 = #((unbox_unit ()), 0) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a292 *)
  r.a292 <- next_r.a292;
  let r_expected = { r_expected with a292 = next_r.a292 } in
  mark_test_run 2351;
  let test = eq r r_expected in
  if not test then failwithf "test 2351 failed";
  Gc.compact ();
  (* .b292 *)
  r.b292 <- next_r.b292;
  let r_expected = { r_expected with b292 = next_r.b292 } in
  mark_test_run 2352;
  let test = eq r r_expected in
  if not test then failwithf "test 2352 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a292; b292 } = r in
  let expected_a292 = C15_0((unbox_unit ())) in
  mark_test_run 2353;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a292 a292 in
  if not test then failwithf "test 2353 failed";
  let expected_b292 = #((unbox_unit ()), 100) in
  mark_test_run 2354;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b292 b292 in
  if not test then failwithf "test 2354 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a292; b292 } = r in
  let expected_a292 = C15_0((unbox_unit ())) in
  mark_test_run 2355;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a292 a292 in
  if not test then failwithf "test 2355 failed";
  let expected_b292 = #((unbox_unit ()), 100) in
  mark_test_run 2356;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b292 b292 in
  if not test then failwithf "test 2356 failed";

  ()
;;

let () =
  (************************************************)
  (*   t293 = { (| unit_u); #(unit_u, int64#) }   *)
  (************************************************)
  let r = { a293 = C15_0((unbox_unit ())); b293 = #((unbox_unit ()), #0L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a293 *)
  let actual = r.a293 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2357;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2357 failed";
  (* Paths of depth 1 *)
  (* .b293 *)
  let actual = r.b293 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2358;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2358 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a293 = a2931; b293 = b2931 } { a293 = a2932; b293 = b2932 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2931 a2932 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b2931 b2932) in
  let next_r = { a293 = C15_0((unbox_unit ())); b293 = #((unbox_unit ()), #100L) } in
  let r_expected = { a293 = C15_0((unbox_unit ())); b293 = #((unbox_unit ()), #0L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a293 *)
  r.a293 <- next_r.a293;
  let r_expected = { r_expected with a293 = next_r.a293 } in
  mark_test_run 2359;
  let test = eq r r_expected in
  if not test then failwithf "test 2359 failed";
  Gc.compact ();
  (* .b293 *)
  r.b293 <- next_r.b293;
  let r_expected = { r_expected with b293 = next_r.b293 } in
  mark_test_run 2360;
  let test = eq r r_expected in
  if not test then failwithf "test 2360 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a293; b293 } = r in
  let expected_a293 = C15_0((unbox_unit ())) in
  mark_test_run 2361;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a293 a293 in
  if not test then failwithf "test 2361 failed";
  let expected_b293 = #((unbox_unit ()), #100L) in
  mark_test_run 2362;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b293 b293 in
  if not test then failwithf "test 2362 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a293; b293 } = r in
  let expected_a293 = C15_0((unbox_unit ())) in
  mark_test_run 2363;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a293 a293 in
  if not test then failwithf "test 2363 failed";
  let expected_b293 = #((unbox_unit ()), #100L) in
  mark_test_run 2364;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b293 b293 in
  if not test then failwithf "test 2364 failed";

  ()
;;

let () =
  (************************************************)
  (*   t294 = { (| unit_u); #(unit_u, unit_u) }   *)
  (************************************************)
  let r = { a294 = C15_0((unbox_unit ())); b294 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a294 *)
  let actual = r.a294 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2365;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2365 failed";
  (* Paths of depth 1 *)
  (* .b294 *)
  let actual = r.b294 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2366;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2366 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a294 = a2941; b294 = b2941 } { a294 = a2942; b294 = b2942 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2941 a2942 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b2941 b2942) in
  let next_r = { a294 = C15_0((unbox_unit ())); b294 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a294 = C15_0((unbox_unit ())); b294 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a294 *)
  r.a294 <- next_r.a294;
  let r_expected = { r_expected with a294 = next_r.a294 } in
  mark_test_run 2367;
  let test = eq r r_expected in
  if not test then failwithf "test 2367 failed";
  Gc.compact ();
  (* .b294 *)
  r.b294 <- next_r.b294;
  let r_expected = { r_expected with b294 = next_r.b294 } in
  mark_test_run 2368;
  let test = eq r r_expected in
  if not test then failwithf "test 2368 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a294; b294 } = r in
  let expected_a294 = C15_0((unbox_unit ())) in
  mark_test_run 2369;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a294 a294 in
  if not test then failwithf "test 2369 failed";
  let expected_b294 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2370;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b294 b294 in
  if not test then failwithf "test 2370 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a294; b294 } = r in
  let expected_a294 = C15_0((unbox_unit ())) in
  mark_test_run 2371;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a294 a294 in
  if not test then failwithf "test 2371 failed";
  let expected_b294 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2372;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b294 b294 in
  if not test then failwithf "test 2372 failed";

  ()
;;

let () =
  (************************************************)
  (*   t295 = { (| unit_u); #(unit_u, string) }   *)
  (************************************************)
  let r = { a295 = C15_0((unbox_unit ())); b295 = #((unbox_unit ()), "0") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a295 *)
  let actual = r.a295 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2373;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2373 failed";
  (* Paths of depth 1 *)
  (* .b295 *)
  let actual = r.b295 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2374;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2374 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a295 = a2951; b295 = b2951 } { a295 = a2952; b295 = b2952 } -> (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) a2951 a2952 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b2951 b2952) in
  let next_r = { a295 = C15_0((unbox_unit ())); b295 = #((unbox_unit ()), "100") } in
  let r_expected = { a295 = C15_0((unbox_unit ())); b295 = #((unbox_unit ()), "0") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a295 *)
  r.a295 <- next_r.a295;
  let r_expected = { r_expected with a295 = next_r.a295 } in
  mark_test_run 2375;
  let test = eq r r_expected in
  if not test then failwithf "test 2375 failed";
  Gc.compact ();
  (* .b295 *)
  r.b295 <- next_r.b295;
  let r_expected = { r_expected with b295 = next_r.b295 } in
  mark_test_run 2376;
  let test = eq r r_expected in
  if not test then failwithf "test 2376 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a295; b295 } = r in
  let expected_a295 = C15_0((unbox_unit ())) in
  mark_test_run 2377;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a295 a295 in
  if not test then failwithf "test 2377 failed";
  let expected_b295 = #((unbox_unit ()), "100") in
  mark_test_run 2378;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b295 b295 in
  if not test then failwithf "test 2378 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a295; b295 } = r in
  let expected_a295 = C15_0((unbox_unit ())) in
  mark_test_run 2379;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_a295 a295 in
  if not test then failwithf "test 2379 failed";
  let expected_b295 = #((unbox_unit ()), "100") in
  mark_test_run 2380;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b295 b295 in
  if not test then failwithf "test 2380 failed";

  ()
;;

let () =
  (*******************************************************************)
  (*   t296 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (*******************************************************************)
  let r = { a296 = C17_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a296 *)
  let actual = r.a296 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2381;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2381 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a296 = a2961 } { a296 = a2962 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a2961 a2962) in
  let next_r = { a296 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a296 = C17_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a296 *)
  r.a296 <- next_r.a296;
  let r_expected = { r_expected with a296 = next_r.a296 } in
  mark_test_run 2382;
  let test = eq r r_expected in
  if not test then failwithf "test 2382 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a296 } = r in
  let expected_a296 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2383;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a296 a296 in
  if not test then failwithf "test 2383 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a296 } = r in
  let expected_a296 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2384;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a296 a296 in
  if not test then failwithf "test 2384 failed";

  ()
;;

let () =
  (************************************************************************)
  (*   t297 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); int }   *)
  (************************************************************************)
  let r = { a297 = C17_0((unbox_unit ())); b297 = 0 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a297 *)
  let actual = r.a297 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2385;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2385 failed";
  (* Paths of depth 1 *)
  (* .b297 *)
  let actual = r.b297 in
  let expected = 0 in
  mark_test_run 2386;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2386 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a297 = a2971; b297 = b2971 } { a297 = a2972; b297 = b2972 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a2971 a2972 && (fun a b -> Int.equal a b) b2971 b2972) in
  let next_r = { a297 = C17_1((unbox_unit ()), (unbox_unit ())); b297 = 100 } in
  let r_expected = { a297 = C17_0((unbox_unit ())); b297 = 0 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a297 *)
  r.a297 <- next_r.a297;
  let r_expected = { r_expected with a297 = next_r.a297 } in
  mark_test_run 2387;
  let test = eq r r_expected in
  if not test then failwithf "test 2387 failed";
  Gc.compact ();
  (* .b297 *)
  r.b297 <- next_r.b297;
  let r_expected = { r_expected with b297 = next_r.b297 } in
  mark_test_run 2388;
  let test = eq r r_expected in
  if not test then failwithf "test 2388 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a297; b297 } = r in
  let expected_a297 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2389;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a297 a297 in
  if not test then failwithf "test 2389 failed";
  let expected_b297 = 100 in
  mark_test_run 2390;
  let test = (fun a b -> Int.equal a b) expected_b297 b297 in
  if not test then failwithf "test 2390 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a297; b297 } = r in
  let expected_a297 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2391;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a297 a297 in
  if not test then failwithf "test 2391 failed";
  let expected_b297 = 100 in
  mark_test_run 2392;
  let test = (fun a b -> Int.equal a b) expected_b297 b297 in
  if not test then failwithf "test 2392 failed";

  ()
;;

let () =
  (**************************************************************************)
  (*   t298 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); int64 }   *)
  (**************************************************************************)
  let r = { a298 = C17_0((unbox_unit ())); b298 = 0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a298 *)
  let actual = r.a298 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2393;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2393 failed";
  (* Paths of depth 1 *)
  (* .b298 *)
  let actual = r.b298 in
  let expected = 0L in
  mark_test_run 2394;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2394 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a298 = a2981; b298 = b2981 } { a298 = a2982; b298 = b2982 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a2981 a2982 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2981 b2982) in
  let next_r = { a298 = C17_1((unbox_unit ()), (unbox_unit ())); b298 = 100L } in
  let r_expected = { a298 = C17_0((unbox_unit ())); b298 = 0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a298 *)
  r.a298 <- next_r.a298;
  let r_expected = { r_expected with a298 = next_r.a298 } in
  mark_test_run 2395;
  let test = eq r r_expected in
  if not test then failwithf "test 2395 failed";
  Gc.compact ();
  (* .b298 *)
  r.b298 <- next_r.b298;
  let r_expected = { r_expected with b298 = next_r.b298 } in
  mark_test_run 2396;
  let test = eq r r_expected in
  if not test then failwithf "test 2396 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a298; b298 } = r in
  let expected_a298 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2397;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a298 a298 in
  if not test then failwithf "test 2397 failed";
  let expected_b298 = 100L in
  mark_test_run 2398;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b298 b298 in
  if not test then failwithf "test 2398 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a298; b298 } = r in
  let expected_a298 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2399;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a298 a298 in
  if not test then failwithf "test 2399 failed";
  let expected_b298 = 100L in
  mark_test_run 2400;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b298 b298 in
  if not test then failwithf "test 2400 failed";

  ()
;;

let () =
  (***************************************************************************)
  (*   t299 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); int64# }   *)
  (***************************************************************************)
  let r = { a299 = C17_0((unbox_unit ())); b299 = #0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a299 *)
  let actual = r.a299 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2401;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2401 failed";
  (* Paths of depth 1 *)
  (* .b299 *)
  let actual = r.b299 in
  let expected = #0L in
  mark_test_run 2402;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 2402 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a299 = a2991; b299 = b2991 } { a299 = a2992; b299 = b2992 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a2991 a2992 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2991 b2992) in
  let next_r = { a299 = C17_1((unbox_unit ()), (unbox_unit ())); b299 = #100L } in
  let r_expected = { a299 = C17_0((unbox_unit ())); b299 = #0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a299 *)
  r.a299 <- next_r.a299;
  let r_expected = { r_expected with a299 = next_r.a299 } in
  mark_test_run 2403;
  let test = eq r r_expected in
  if not test then failwithf "test 2403 failed";
  Gc.compact ();
  (* .b299 *)
  r.b299 <- next_r.b299;
  let r_expected = { r_expected with b299 = next_r.b299 } in
  mark_test_run 2404;
  let test = eq r r_expected in
  if not test then failwithf "test 2404 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a299; b299 } = r in
  let expected_a299 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2405;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a299 a299 in
  if not test then failwithf "test 2405 failed";
  let expected_b299 = #100L in
  mark_test_run 2406;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b299 b299 in
  if not test then failwithf "test 2406 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a299; b299 } = r in
  let expected_a299 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2407;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a299 a299 in
  if not test then failwithf "test 2407 failed";
  let expected_b299 = #100L in
  mark_test_run 2408;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b299 b299 in
  if not test then failwithf "test 2408 failed";

  ()
;;

let () =
  (***************************************************************************)
  (*   t300 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); int32# }   *)
  (***************************************************************************)
  let r = { a300 = C17_0((unbox_unit ())); b300 = #0l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a300 *)
  let actual = r.a300 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2409;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2409 failed";
  (* Paths of depth 1 *)
  (* .b300 *)
  let actual = r.b300 in
  let expected = #0l in
  mark_test_run 2410;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2410 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a300 = a3001; b300 = b3001 } { a300 = a3002; b300 = b3002 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a3001 a3002 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3001 b3002) in
  let next_r = { a300 = C17_1((unbox_unit ()), (unbox_unit ())); b300 = #100l } in
  let r_expected = { a300 = C17_0((unbox_unit ())); b300 = #0l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a300 *)
  r.a300 <- next_r.a300;
  let r_expected = { r_expected with a300 = next_r.a300 } in
  mark_test_run 2411;
  let test = eq r r_expected in
  if not test then failwithf "test 2411 failed";
  Gc.compact ();
  (* .b300 *)
  r.b300 <- next_r.b300;
  let r_expected = { r_expected with b300 = next_r.b300 } in
  mark_test_run 2412;
  let test = eq r r_expected in
  if not test then failwithf "test 2412 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a300; b300 } = r in
  let expected_a300 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2413;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a300 a300 in
  if not test then failwithf "test 2413 failed";
  let expected_b300 = #100l in
  mark_test_run 2414;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b300 b300 in
  if not test then failwithf "test 2414 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a300; b300 } = r in
  let expected_a300 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2415;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a300 a300 in
  if not test then failwithf "test 2415 failed";
  let expected_b300 = #100l in
  mark_test_run 2416;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b300 b300 in
  if not test then failwithf "test 2416 failed";

  ()
;;

let () =
  (*******************************************************************************)
  (*   t301 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); nativeint# }   *)
  (*******************************************************************************)
  let r = { a301 = C17_0((unbox_unit ())); b301 = #0n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a301 *)
  let actual = r.a301 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2417;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2417 failed";
  (* Paths of depth 1 *)
  (* .b301 *)
  let actual = r.b301 in
  let expected = #0n in
  mark_test_run 2418;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 2418 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a301 = a3011; b301 = b3011 } { a301 = a3012; b301 = b3012 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a3011 a3012 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b3011 b3012) in
  let next_r = { a301 = C17_1((unbox_unit ()), (unbox_unit ())); b301 = #100n } in
  let r_expected = { a301 = C17_0((unbox_unit ())); b301 = #0n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a301 *)
  r.a301 <- next_r.a301;
  let r_expected = { r_expected with a301 = next_r.a301 } in
  mark_test_run 2419;
  let test = eq r r_expected in
  if not test then failwithf "test 2419 failed";
  Gc.compact ();
  (* .b301 *)
  r.b301 <- next_r.b301;
  let r_expected = { r_expected with b301 = next_r.b301 } in
  mark_test_run 2420;
  let test = eq r r_expected in
  if not test then failwithf "test 2420 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a301; b301 } = r in
  let expected_a301 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2421;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a301 a301 in
  if not test then failwithf "test 2421 failed";
  let expected_b301 = #100n in
  mark_test_run 2422;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b301 b301 in
  if not test then failwithf "test 2422 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a301; b301 } = r in
  let expected_a301 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2423;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a301 a301 in
  if not test then failwithf "test 2423 failed";
  let expected_b301 = #100n in
  mark_test_run 2424;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b301 b301 in
  if not test then failwithf "test 2424 failed";

  ()
;;

let () =
  (***************************************************************************)
  (*   t302 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); unit_u }   *)
  (***************************************************************************)
  let r = { a302 = C17_0((unbox_unit ())); b302 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a302 *)
  let actual = r.a302 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2425;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2425 failed";
  (* Paths of depth 1 *)
  (* .b302 *)
  let actual = r.b302 in
  let expected = (unbox_unit ()) in
  mark_test_run 2426;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2426 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a302 = a3021; b302 = b3021 } { a302 = a3022; b302 = b3022 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a3021 a3022 && (fun _ _ -> true) b3021 b3022) in
  let next_r = { a302 = C17_1((unbox_unit ()), (unbox_unit ())); b302 = (unbox_unit ()) } in
  let r_expected = { a302 = C17_0((unbox_unit ())); b302 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a302 *)
  r.a302 <- next_r.a302;
  let r_expected = { r_expected with a302 = next_r.a302 } in
  mark_test_run 2427;
  let test = eq r r_expected in
  if not test then failwithf "test 2427 failed";
  Gc.compact ();
  (* .b302 *)
  r.b302 <- next_r.b302;
  let r_expected = { r_expected with b302 = next_r.b302 } in
  mark_test_run 2428;
  let test = eq r r_expected in
  if not test then failwithf "test 2428 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a302; b302 } = r in
  let expected_a302 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2429;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a302 a302 in
  if not test then failwithf "test 2429 failed";
  let expected_b302 = (unbox_unit ()) in
  mark_test_run 2430;
  let test = (fun _ _ -> true) expected_b302 b302 in
  if not test then failwithf "test 2430 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a302; b302 } = r in
  let expected_a302 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2431;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a302 a302 in
  if not test then failwithf "test 2431 failed";
  let expected_b302 = (unbox_unit ()) in
  mark_test_run 2432;
  let test = (fun _ _ -> true) expected_b302 b302 in
  if not test then failwithf "test 2432 failed";

  ()
;;

let () =
  (**************************************************************************)
  (*   t303 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); float }   *)
  (**************************************************************************)
  let r = { a303 = C17_0((unbox_unit ())); b303 = 0. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a303 *)
  let actual = r.a303 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2433;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2433 failed";
  (* Paths of depth 1 *)
  (* .b303 *)
  let actual = r.b303 in
  let expected = 0. in
  mark_test_run 2434;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2434 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a303 = a3031; b303 = b3031 } { a303 = a3032; b303 = b3032 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a3031 a3032 && (fun a b -> Float.equal (globalize a) (globalize b)) b3031 b3032) in
  let next_r = { a303 = C17_1((unbox_unit ()), (unbox_unit ())); b303 = 100. } in
  let r_expected = { a303 = C17_0((unbox_unit ())); b303 = 0. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a303 *)
  r.a303 <- next_r.a303;
  let r_expected = { r_expected with a303 = next_r.a303 } in
  mark_test_run 2435;
  let test = eq r r_expected in
  if not test then failwithf "test 2435 failed";
  Gc.compact ();
  (* .b303 *)
  r.b303 <- next_r.b303;
  let r_expected = { r_expected with b303 = next_r.b303 } in
  mark_test_run 2436;
  let test = eq r r_expected in
  if not test then failwithf "test 2436 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a303; b303 } = r in
  let expected_a303 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2437;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a303 a303 in
  if not test then failwithf "test 2437 failed";
  let expected_b303 = 100. in
  mark_test_run 2438;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b303 b303 in
  if not test then failwithf "test 2438 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a303; b303 } = r in
  let expected_a303 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2439;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a303 a303 in
  if not test then failwithf "test 2439 failed";
  let expected_b303 = 100. in
  mark_test_run 2440;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b303 b303 in
  if not test then failwithf "test 2440 failed";

  ()
;;

let () =
  (*******************************************************************************)
  (*   t304 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); (| unit_u) }   *)
  (*******************************************************************************)
  let r = { a304 = C17_0((unbox_unit ())); b304 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a304 *)
  let actual = r.a304 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2441;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2441 failed";
  (* Paths of depth 1 *)
  (* .b304 *)
  let actual = r.b304 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2442;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2442 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a304 = a3041; b304 = b3041 } { a304 = a3042; b304 = b3042 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a3041 a3042 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b3041 b3042) in
  let next_r = { a304 = C17_1((unbox_unit ()), (unbox_unit ())); b304 = C15_0((unbox_unit ())) } in
  let r_expected = { a304 = C17_0((unbox_unit ())); b304 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a304 *)
  r.a304 <- next_r.a304;
  let r_expected = { r_expected with a304 = next_r.a304 } in
  mark_test_run 2443;
  let test = eq r r_expected in
  if not test then failwithf "test 2443 failed";
  Gc.compact ();
  (* .b304 *)
  r.b304 <- next_r.b304;
  let r_expected = { r_expected with b304 = next_r.b304 } in
  mark_test_run 2444;
  let test = eq r r_expected in
  if not test then failwithf "test 2444 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a304; b304 } = r in
  let expected_a304 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2445;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a304 a304 in
  if not test then failwithf "test 2445 failed";
  let expected_b304 = C15_0((unbox_unit ())) in
  mark_test_run 2446;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b304 b304 in
  if not test then failwithf "test 2446 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a304; b304 } = r in
  let expected_a304 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2447;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a304 a304 in
  if not test then failwithf "test 2447 failed";
  let expected_b304 = C15_0((unbox_unit ())) in
  mark_test_run 2448;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b304 b304 in
  if not test then failwithf "test 2448 failed";

  ()
;;

let () =
  (*********************************************************************************************************************)
  (*   t305 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (*********************************************************************************************************************)
  let r = { a305 = C17_0((unbox_unit ())); b305 = C17_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a305 *)
  let actual = r.a305 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2449;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2449 failed";
  (* Paths of depth 1 *)
  (* .b305 *)
  let actual = r.b305 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2450;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2450 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a305 = a3051; b305 = b3051 } { a305 = a3052; b305 = b3052 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a3051 a3052 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b3051 b3052) in
  let next_r = { a305 = C17_1((unbox_unit ()), (unbox_unit ())); b305 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a305 = C17_0((unbox_unit ())); b305 = C17_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a305 *)
  r.a305 <- next_r.a305;
  let r_expected = { r_expected with a305 = next_r.a305 } in
  mark_test_run 2451;
  let test = eq r r_expected in
  if not test then failwithf "test 2451 failed";
  Gc.compact ();
  (* .b305 *)
  r.b305 <- next_r.b305;
  let r_expected = { r_expected with b305 = next_r.b305 } in
  mark_test_run 2452;
  let test = eq r r_expected in
  if not test then failwithf "test 2452 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a305; b305 } = r in
  let expected_a305 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2453;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a305 a305 in
  if not test then failwithf "test 2453 failed";
  let expected_b305 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2454;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b305 b305 in
  if not test then failwithf "test 2454 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a305; b305 } = r in
  let expected_a305 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2455;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a305 a305 in
  if not test then failwithf "test 2455 failed";
  let expected_b305 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2456;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b305 b305 in
  if not test then failwithf "test 2456 failed";

  ()
;;

let () =
  (***********************************************************************************)
  (*   t306 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); #(unit_u, int) }   *)
  (***********************************************************************************)
  let r = { a306 = C17_0((unbox_unit ())); b306 = #((unbox_unit ()), 0) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a306 *)
  let actual = r.a306 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2457;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2457 failed";
  (* Paths of depth 1 *)
  (* .b306 *)
  let actual = r.b306 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2458;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2458 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a306 = a3061; b306 = b3061 } { a306 = a3062; b306 = b3062 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a3061 a3062 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b3061 b3062) in
  let next_r = { a306 = C17_1((unbox_unit ()), (unbox_unit ())); b306 = #((unbox_unit ()), 100) } in
  let r_expected = { a306 = C17_0((unbox_unit ())); b306 = #((unbox_unit ()), 0) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a306 *)
  r.a306 <- next_r.a306;
  let r_expected = { r_expected with a306 = next_r.a306 } in
  mark_test_run 2459;
  let test = eq r r_expected in
  if not test then failwithf "test 2459 failed";
  Gc.compact ();
  (* .b306 *)
  r.b306 <- next_r.b306;
  let r_expected = { r_expected with b306 = next_r.b306 } in
  mark_test_run 2460;
  let test = eq r r_expected in
  if not test then failwithf "test 2460 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a306; b306 } = r in
  let expected_a306 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2461;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a306 a306 in
  if not test then failwithf "test 2461 failed";
  let expected_b306 = #((unbox_unit ()), 100) in
  mark_test_run 2462;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b306 b306 in
  if not test then failwithf "test 2462 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a306; b306 } = r in
  let expected_a306 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2463;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a306 a306 in
  if not test then failwithf "test 2463 failed";
  let expected_b306 = #((unbox_unit ()), 100) in
  mark_test_run 2464;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b306 b306 in
  if not test then failwithf "test 2464 failed";

  ()
;;

let () =
  (**************************************************************************************)
  (*   t307 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); #(unit_u, int64#) }   *)
  (**************************************************************************************)
  let r = { a307 = C17_0((unbox_unit ())); b307 = #((unbox_unit ()), #0L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a307 *)
  let actual = r.a307 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2465;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2465 failed";
  (* Paths of depth 1 *)
  (* .b307 *)
  let actual = r.b307 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2466;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2466 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a307 = a3071; b307 = b3071 } { a307 = a3072; b307 = b3072 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a3071 a3072 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b3071 b3072) in
  let next_r = { a307 = C17_1((unbox_unit ()), (unbox_unit ())); b307 = #((unbox_unit ()), #100L) } in
  let r_expected = { a307 = C17_0((unbox_unit ())); b307 = #((unbox_unit ()), #0L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a307 *)
  r.a307 <- next_r.a307;
  let r_expected = { r_expected with a307 = next_r.a307 } in
  mark_test_run 2467;
  let test = eq r r_expected in
  if not test then failwithf "test 2467 failed";
  Gc.compact ();
  (* .b307 *)
  r.b307 <- next_r.b307;
  let r_expected = { r_expected with b307 = next_r.b307 } in
  mark_test_run 2468;
  let test = eq r r_expected in
  if not test then failwithf "test 2468 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a307; b307 } = r in
  let expected_a307 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2469;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a307 a307 in
  if not test then failwithf "test 2469 failed";
  let expected_b307 = #((unbox_unit ()), #100L) in
  mark_test_run 2470;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b307 b307 in
  if not test then failwithf "test 2470 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a307; b307 } = r in
  let expected_a307 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2471;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a307 a307 in
  if not test then failwithf "test 2471 failed";
  let expected_b307 = #((unbox_unit ()), #100L) in
  mark_test_run 2472;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b307 b307 in
  if not test then failwithf "test 2472 failed";

  ()
;;

let () =
  (**************************************************************************************)
  (*   t308 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); #(unit_u, unit_u) }   *)
  (**************************************************************************************)
  let r = { a308 = C17_0((unbox_unit ())); b308 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a308 *)
  let actual = r.a308 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2473;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2473 failed";
  (* Paths of depth 1 *)
  (* .b308 *)
  let actual = r.b308 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2474;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2474 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a308 = a3081; b308 = b3081 } { a308 = a3082; b308 = b3082 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a3081 a3082 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b3081 b3082) in
  let next_r = { a308 = C17_1((unbox_unit ()), (unbox_unit ())); b308 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a308 = C17_0((unbox_unit ())); b308 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a308 *)
  r.a308 <- next_r.a308;
  let r_expected = { r_expected with a308 = next_r.a308 } in
  mark_test_run 2475;
  let test = eq r r_expected in
  if not test then failwithf "test 2475 failed";
  Gc.compact ();
  (* .b308 *)
  r.b308 <- next_r.b308;
  let r_expected = { r_expected with b308 = next_r.b308 } in
  mark_test_run 2476;
  let test = eq r r_expected in
  if not test then failwithf "test 2476 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a308; b308 } = r in
  let expected_a308 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2477;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a308 a308 in
  if not test then failwithf "test 2477 failed";
  let expected_b308 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2478;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b308 b308 in
  if not test then failwithf "test 2478 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a308; b308 } = r in
  let expected_a308 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2479;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a308 a308 in
  if not test then failwithf "test 2479 failed";
  let expected_b308 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2480;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b308 b308 in
  if not test then failwithf "test 2480 failed";

  ()
;;

let () =
  (**************************************************************************************)
  (*   t309 = { (| unit_u | unit_u * unit_u | #(unit_u, unit_u)); #(unit_u, string) }   *)
  (**************************************************************************************)
  let r = { a309 = C17_0((unbox_unit ())); b309 = #((unbox_unit ()), "0") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a309 *)
  let actual = r.a309 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2481;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2481 failed";
  (* Paths of depth 1 *)
  (* .b309 *)
  let actual = r.b309 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2482;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2482 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a309 = a3091; b309 = b3091 } { a309 = a3092; b309 = b3092 } -> (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) a3091 a3092 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b3091 b3092) in
  let next_r = { a309 = C17_1((unbox_unit ()), (unbox_unit ())); b309 = #((unbox_unit ()), "100") } in
  let r_expected = { a309 = C17_0((unbox_unit ())); b309 = #((unbox_unit ()), "0") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a309 *)
  r.a309 <- next_r.a309;
  let r_expected = { r_expected with a309 = next_r.a309 } in
  mark_test_run 2483;
  let test = eq r r_expected in
  if not test then failwithf "test 2483 failed";
  Gc.compact ();
  (* .b309 *)
  r.b309 <- next_r.b309;
  let r_expected = { r_expected with b309 = next_r.b309 } in
  mark_test_run 2484;
  let test = eq r r_expected in
  if not test then failwithf "test 2484 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a309; b309 } = r in
  let expected_a309 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2485;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a309 a309 in
  if not test then failwithf "test 2485 failed";
  let expected_b309 = #((unbox_unit ()), "100") in
  mark_test_run 2486;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b309 b309 in
  if not test then failwithf "test 2486 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a309; b309 } = r in
  let expected_a309 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2487;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_a309 a309 in
  if not test then failwithf "test 2487 failed";
  let expected_b309 = #((unbox_unit ()), "100") in
  mark_test_run 2488;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b309 b309 in
  if not test then failwithf "test 2488 failed";

  ()
;;

let () =
  (*********************************)
  (*   t310 = { #(unit_u, int) }   *)
  (*********************************)
  let r = { a310 = #((unbox_unit ()), 0) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a310 *)
  let actual = r.a310 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2489;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2489 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a310 = a3101 } { a310 = a3102 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3101 a3102) in
  let next_r = { a310 = #((unbox_unit ()), 100) } in
  let r_expected = { a310 = #((unbox_unit ()), 0) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a310 *)
  r.a310 <- next_r.a310;
  let r_expected = { r_expected with a310 = next_r.a310 } in
  mark_test_run 2490;
  let test = eq r r_expected in
  if not test then failwithf "test 2490 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a310 } = r in
  let expected_a310 = #((unbox_unit ()), 100) in
  mark_test_run 2491;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a310 a310 in
  if not test then failwithf "test 2491 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a310 } = r in
  let expected_a310 = #((unbox_unit ()), 100) in
  mark_test_run 2492;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a310 a310 in
  if not test then failwithf "test 2492 failed";

  ()
;;

let () =
  (**************************************)
  (*   t311 = { #(unit_u, int); int }   *)
  (**************************************)
  let r = { a311 = #((unbox_unit ()), 0); b311 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a311 *)
  let actual = r.a311 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2493;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2493 failed";
  (* Paths of depth 1 *)
  (* .b311 *)
  let actual = r.b311 in
  let expected = 1 in
  mark_test_run 2494;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2494 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a311 = a3111; b311 = b3111 } { a311 = a3112; b311 = b3112 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3111 a3112 && (fun a b -> Int.equal a b) b3111 b3112) in
  let next_r = { a311 = #((unbox_unit ()), 100); b311 = 101 } in
  let r_expected = { a311 = #((unbox_unit ()), 0); b311 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a311 *)
  r.a311 <- next_r.a311;
  let r_expected = { r_expected with a311 = next_r.a311 } in
  mark_test_run 2495;
  let test = eq r r_expected in
  if not test then failwithf "test 2495 failed";
  Gc.compact ();
  (* .b311 *)
  r.b311 <- next_r.b311;
  let r_expected = { r_expected with b311 = next_r.b311 } in
  mark_test_run 2496;
  let test = eq r r_expected in
  if not test then failwithf "test 2496 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a311; b311 } = r in
  let expected_a311 = #((unbox_unit ()), 100) in
  mark_test_run 2497;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a311 a311 in
  if not test then failwithf "test 2497 failed";
  let expected_b311 = 101 in
  mark_test_run 2498;
  let test = (fun a b -> Int.equal a b) expected_b311 b311 in
  if not test then failwithf "test 2498 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a311; b311 } = r in
  let expected_a311 = #((unbox_unit ()), 100) in
  mark_test_run 2499;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a311 a311 in
  if not test then failwithf "test 2499 failed";
  let expected_b311 = 101 in
  mark_test_run 2500;
  let test = (fun a b -> Int.equal a b) expected_b311 b311 in
  if not test then failwithf "test 2500 failed";

  ()
;;

let () =
  (****************************************)
  (*   t312 = { #(unit_u, int); int64 }   *)
  (****************************************)
  let r = { a312 = #((unbox_unit ()), 0); b312 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a312 *)
  let actual = r.a312 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2501;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2501 failed";
  (* Paths of depth 1 *)
  (* .b312 *)
  let actual = r.b312 in
  let expected = 1L in
  mark_test_run 2502;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2502 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a312 = a3121; b312 = b3121 } { a312 = a3122; b312 = b3122 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3121 a3122 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3121 b3122) in
  let next_r = { a312 = #((unbox_unit ()), 100); b312 = 101L } in
  let r_expected = { a312 = #((unbox_unit ()), 0); b312 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a312 *)
  r.a312 <- next_r.a312;
  let r_expected = { r_expected with a312 = next_r.a312 } in
  mark_test_run 2503;
  let test = eq r r_expected in
  if not test then failwithf "test 2503 failed";
  Gc.compact ();
  (* .b312 *)
  r.b312 <- next_r.b312;
  let r_expected = { r_expected with b312 = next_r.b312 } in
  mark_test_run 2504;
  let test = eq r r_expected in
  if not test then failwithf "test 2504 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a312; b312 } = r in
  let expected_a312 = #((unbox_unit ()), 100) in
  mark_test_run 2505;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a312 a312 in
  if not test then failwithf "test 2505 failed";
  let expected_b312 = 101L in
  mark_test_run 2506;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b312 b312 in
  if not test then failwithf "test 2506 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a312; b312 } = r in
  let expected_a312 = #((unbox_unit ()), 100) in
  mark_test_run 2507;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a312 a312 in
  if not test then failwithf "test 2507 failed";
  let expected_b312 = 101L in
  mark_test_run 2508;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b312 b312 in
  if not test then failwithf "test 2508 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t313 = { #(unit_u, int); int64# }   *)
  (*****************************************)
  let r = { a313 = #((unbox_unit ()), 0); b313 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a313 *)
  let actual = r.a313 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2509;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2509 failed";
  (* Paths of depth 1 *)
  (* .b313 *)
  let actual = r.b313 in
  let expected = #1L in
  mark_test_run 2510;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 2510 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a313 = a3131; b313 = b3131 } { a313 = a3132; b313 = b3132 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3131 a3132 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b3131 b3132) in
  let next_r = { a313 = #((unbox_unit ()), 100); b313 = #101L } in
  let r_expected = { a313 = #((unbox_unit ()), 0); b313 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a313 *)
  r.a313 <- next_r.a313;
  let r_expected = { r_expected with a313 = next_r.a313 } in
  mark_test_run 2511;
  let test = eq r r_expected in
  if not test then failwithf "test 2511 failed";
  Gc.compact ();
  (* .b313 *)
  r.b313 <- next_r.b313;
  let r_expected = { r_expected with b313 = next_r.b313 } in
  mark_test_run 2512;
  let test = eq r r_expected in
  if not test then failwithf "test 2512 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a313; b313 } = r in
  let expected_a313 = #((unbox_unit ()), 100) in
  mark_test_run 2513;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a313 a313 in
  if not test then failwithf "test 2513 failed";
  let expected_b313 = #101L in
  mark_test_run 2514;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b313 b313 in
  if not test then failwithf "test 2514 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a313; b313 } = r in
  let expected_a313 = #((unbox_unit ()), 100) in
  mark_test_run 2515;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a313 a313 in
  if not test then failwithf "test 2515 failed";
  let expected_b313 = #101L in
  mark_test_run 2516;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b313 b313 in
  if not test then failwithf "test 2516 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t314 = { #(unit_u, int); int32# }   *)
  (*****************************************)
  let r = { a314 = #((unbox_unit ()), 0); b314 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a314 *)
  let actual = r.a314 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2517;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2517 failed";
  (* Paths of depth 1 *)
  (* .b314 *)
  let actual = r.b314 in
  let expected = #1l in
  mark_test_run 2518;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2518 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a314 = a3141; b314 = b3141 } { a314 = a3142; b314 = b3142 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3141 a3142 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3141 b3142) in
  let next_r = { a314 = #((unbox_unit ()), 100); b314 = #101l } in
  let r_expected = { a314 = #((unbox_unit ()), 0); b314 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a314 *)
  r.a314 <- next_r.a314;
  let r_expected = { r_expected with a314 = next_r.a314 } in
  mark_test_run 2519;
  let test = eq r r_expected in
  if not test then failwithf "test 2519 failed";
  Gc.compact ();
  (* .b314 *)
  r.b314 <- next_r.b314;
  let r_expected = { r_expected with b314 = next_r.b314 } in
  mark_test_run 2520;
  let test = eq r r_expected in
  if not test then failwithf "test 2520 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a314; b314 } = r in
  let expected_a314 = #((unbox_unit ()), 100) in
  mark_test_run 2521;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a314 a314 in
  if not test then failwithf "test 2521 failed";
  let expected_b314 = #101l in
  mark_test_run 2522;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b314 b314 in
  if not test then failwithf "test 2522 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a314; b314 } = r in
  let expected_a314 = #((unbox_unit ()), 100) in
  mark_test_run 2523;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a314 a314 in
  if not test then failwithf "test 2523 failed";
  let expected_b314 = #101l in
  mark_test_run 2524;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b314 b314 in
  if not test then failwithf "test 2524 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t315 = { #(unit_u, int); nativeint# }   *)
  (*********************************************)
  let r = { a315 = #((unbox_unit ()), 0); b315 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a315 *)
  let actual = r.a315 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2525;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2525 failed";
  (* Paths of depth 1 *)
  (* .b315 *)
  let actual = r.b315 in
  let expected = #1n in
  mark_test_run 2526;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 2526 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a315 = a3151; b315 = b3151 } { a315 = a3152; b315 = b3152 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3151 a3152 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b3151 b3152) in
  let next_r = { a315 = #((unbox_unit ()), 100); b315 = #101n } in
  let r_expected = { a315 = #((unbox_unit ()), 0); b315 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a315 *)
  r.a315 <- next_r.a315;
  let r_expected = { r_expected with a315 = next_r.a315 } in
  mark_test_run 2527;
  let test = eq r r_expected in
  if not test then failwithf "test 2527 failed";
  Gc.compact ();
  (* .b315 *)
  r.b315 <- next_r.b315;
  let r_expected = { r_expected with b315 = next_r.b315 } in
  mark_test_run 2528;
  let test = eq r r_expected in
  if not test then failwithf "test 2528 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a315; b315 } = r in
  let expected_a315 = #((unbox_unit ()), 100) in
  mark_test_run 2529;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a315 a315 in
  if not test then failwithf "test 2529 failed";
  let expected_b315 = #101n in
  mark_test_run 2530;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b315 b315 in
  if not test then failwithf "test 2530 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a315; b315 } = r in
  let expected_a315 = #((unbox_unit ()), 100) in
  mark_test_run 2531;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a315 a315 in
  if not test then failwithf "test 2531 failed";
  let expected_b315 = #101n in
  mark_test_run 2532;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b315 b315 in
  if not test then failwithf "test 2532 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t316 = { #(unit_u, int); unit_u }   *)
  (*****************************************)
  let r = { a316 = #((unbox_unit ()), 0); b316 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a316 *)
  let actual = r.a316 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2533;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2533 failed";
  (* Paths of depth 1 *)
  (* .b316 *)
  let actual = r.b316 in
  let expected = (unbox_unit ()) in
  mark_test_run 2534;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2534 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a316 = a3161; b316 = b3161 } { a316 = a3162; b316 = b3162 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3161 a3162 && (fun _ _ -> true) b3161 b3162) in
  let next_r = { a316 = #((unbox_unit ()), 100); b316 = (unbox_unit ()) } in
  let r_expected = { a316 = #((unbox_unit ()), 0); b316 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a316 *)
  r.a316 <- next_r.a316;
  let r_expected = { r_expected with a316 = next_r.a316 } in
  mark_test_run 2535;
  let test = eq r r_expected in
  if not test then failwithf "test 2535 failed";
  Gc.compact ();
  (* .b316 *)
  r.b316 <- next_r.b316;
  let r_expected = { r_expected with b316 = next_r.b316 } in
  mark_test_run 2536;
  let test = eq r r_expected in
  if not test then failwithf "test 2536 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a316; b316 } = r in
  let expected_a316 = #((unbox_unit ()), 100) in
  mark_test_run 2537;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a316 a316 in
  if not test then failwithf "test 2537 failed";
  let expected_b316 = (unbox_unit ()) in
  mark_test_run 2538;
  let test = (fun _ _ -> true) expected_b316 b316 in
  if not test then failwithf "test 2538 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a316; b316 } = r in
  let expected_a316 = #((unbox_unit ()), 100) in
  mark_test_run 2539;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a316 a316 in
  if not test then failwithf "test 2539 failed";
  let expected_b316 = (unbox_unit ()) in
  mark_test_run 2540;
  let test = (fun _ _ -> true) expected_b316 b316 in
  if not test then failwithf "test 2540 failed";

  ()
;;

let () =
  (****************************************)
  (*   t317 = { #(unit_u, int); float }   *)
  (****************************************)
  let r = { a317 = #((unbox_unit ()), 0); b317 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a317 *)
  let actual = r.a317 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2541;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2541 failed";
  (* Paths of depth 1 *)
  (* .b317 *)
  let actual = r.b317 in
  let expected = 1. in
  mark_test_run 2542;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2542 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a317 = a3171; b317 = b3171 } { a317 = a3172; b317 = b3172 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3171 a3172 && (fun a b -> Float.equal (globalize a) (globalize b)) b3171 b3172) in
  let next_r = { a317 = #((unbox_unit ()), 100); b317 = 101. } in
  let r_expected = { a317 = #((unbox_unit ()), 0); b317 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a317 *)
  r.a317 <- next_r.a317;
  let r_expected = { r_expected with a317 = next_r.a317 } in
  mark_test_run 2543;
  let test = eq r r_expected in
  if not test then failwithf "test 2543 failed";
  Gc.compact ();
  (* .b317 *)
  r.b317 <- next_r.b317;
  let r_expected = { r_expected with b317 = next_r.b317 } in
  mark_test_run 2544;
  let test = eq r r_expected in
  if not test then failwithf "test 2544 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a317; b317 } = r in
  let expected_a317 = #((unbox_unit ()), 100) in
  mark_test_run 2545;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a317 a317 in
  if not test then failwithf "test 2545 failed";
  let expected_b317 = 101. in
  mark_test_run 2546;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b317 b317 in
  if not test then failwithf "test 2546 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a317; b317 } = r in
  let expected_a317 = #((unbox_unit ()), 100) in
  mark_test_run 2547;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a317 a317 in
  if not test then failwithf "test 2547 failed";
  let expected_b317 = 101. in
  mark_test_run 2548;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b317 b317 in
  if not test then failwithf "test 2548 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t318 = { #(unit_u, int); (| unit_u) }   *)
  (*********************************************)
  let r = { a318 = #((unbox_unit ()), 0); b318 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a318 *)
  let actual = r.a318 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2549;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2549 failed";
  (* Paths of depth 1 *)
  (* .b318 *)
  let actual = r.b318 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2550;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2550 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a318 = a3181; b318 = b3181 } { a318 = a3182; b318 = b3182 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3181 a3182 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b3181 b3182) in
  let next_r = { a318 = #((unbox_unit ()), 100); b318 = C15_0((unbox_unit ())) } in
  let r_expected = { a318 = #((unbox_unit ()), 0); b318 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a318 *)
  r.a318 <- next_r.a318;
  let r_expected = { r_expected with a318 = next_r.a318 } in
  mark_test_run 2551;
  let test = eq r r_expected in
  if not test then failwithf "test 2551 failed";
  Gc.compact ();
  (* .b318 *)
  r.b318 <- next_r.b318;
  let r_expected = { r_expected with b318 = next_r.b318 } in
  mark_test_run 2552;
  let test = eq r r_expected in
  if not test then failwithf "test 2552 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a318; b318 } = r in
  let expected_a318 = #((unbox_unit ()), 100) in
  mark_test_run 2553;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a318 a318 in
  if not test then failwithf "test 2553 failed";
  let expected_b318 = C15_0((unbox_unit ())) in
  mark_test_run 2554;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b318 b318 in
  if not test then failwithf "test 2554 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a318; b318 } = r in
  let expected_a318 = #((unbox_unit ()), 100) in
  mark_test_run 2555;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a318 a318 in
  if not test then failwithf "test 2555 failed";
  let expected_b318 = C15_0((unbox_unit ())) in
  mark_test_run 2556;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b318 b318 in
  if not test then failwithf "test 2556 failed";

  ()
;;

let () =
  (***********************************************************************************)
  (*   t319 = { #(unit_u, int); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (***********************************************************************************)
  let r = { a319 = #((unbox_unit ()), 0); b319 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a319 *)
  let actual = r.a319 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2557;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2557 failed";
  (* Paths of depth 1 *)
  (* .b319 *)
  let actual = r.b319 in
  let expected = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2558;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2558 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a319 = a3191; b319 = b3191 } { a319 = a3192; b319 = b3192 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3191 a3192 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b3191 b3192) in
  let next_r = { a319 = #((unbox_unit ()), 100); b319 = C17_2(#((unbox_unit ()), (unbox_unit ()))) } in
  let r_expected = { a319 = #((unbox_unit ()), 0); b319 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a319 *)
  r.a319 <- next_r.a319;
  let r_expected = { r_expected with a319 = next_r.a319 } in
  mark_test_run 2559;
  let test = eq r r_expected in
  if not test then failwithf "test 2559 failed";
  Gc.compact ();
  (* .b319 *)
  r.b319 <- next_r.b319;
  let r_expected = { r_expected with b319 = next_r.b319 } in
  mark_test_run 2560;
  let test = eq r r_expected in
  if not test then failwithf "test 2560 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a319; b319 } = r in
  let expected_a319 = #((unbox_unit ()), 100) in
  mark_test_run 2561;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a319 a319 in
  if not test then failwithf "test 2561 failed";
  let expected_b319 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 2562;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b319 b319 in
  if not test then failwithf "test 2562 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a319; b319 } = r in
  let expected_a319 = #((unbox_unit ()), 100) in
  mark_test_run 2563;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a319 a319 in
  if not test then failwithf "test 2563 failed";
  let expected_b319 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 2564;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b319 b319 in
  if not test then failwithf "test 2564 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t320 = { #(unit_u, int); #(unit_u, int) }   *)
  (*************************************************)
  let r = { a320 = #((unbox_unit ()), 0); b320 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a320 *)
  let actual = r.a320 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2565;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2565 failed";
  (* Paths of depth 1 *)
  (* .b320 *)
  let actual = r.b320 in
  let expected = #((unbox_unit ()), 1) in
  mark_test_run 2566;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2566 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a320 = a3201; b320 = b3201 } { a320 = a3202; b320 = b3202 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3201 a3202 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b3201 b3202) in
  let next_r = { a320 = #((unbox_unit ()), 100); b320 = #((unbox_unit ()), 101) } in
  let r_expected = { a320 = #((unbox_unit ()), 0); b320 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a320 *)
  r.a320 <- next_r.a320;
  let r_expected = { r_expected with a320 = next_r.a320 } in
  mark_test_run 2567;
  let test = eq r r_expected in
  if not test then failwithf "test 2567 failed";
  Gc.compact ();
  (* .b320 *)
  r.b320 <- next_r.b320;
  let r_expected = { r_expected with b320 = next_r.b320 } in
  mark_test_run 2568;
  let test = eq r r_expected in
  if not test then failwithf "test 2568 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a320; b320 } = r in
  let expected_a320 = #((unbox_unit ()), 100) in
  mark_test_run 2569;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a320 a320 in
  if not test then failwithf "test 2569 failed";
  let expected_b320 = #((unbox_unit ()), 101) in
  mark_test_run 2570;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b320 b320 in
  if not test then failwithf "test 2570 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a320; b320 } = r in
  let expected_a320 = #((unbox_unit ()), 100) in
  mark_test_run 2571;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a320 a320 in
  if not test then failwithf "test 2571 failed";
  let expected_b320 = #((unbox_unit ()), 101) in
  mark_test_run 2572;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b320 b320 in
  if not test then failwithf "test 2572 failed";

  ()
;;

let () =
  (****************************************************)
  (*   t321 = { #(unit_u, int); #(unit_u, int64#) }   *)
  (****************************************************)
  let r = { a321 = #((unbox_unit ()), 0); b321 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a321 *)
  let actual = r.a321 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2573;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2573 failed";
  (* Paths of depth 1 *)
  (* .b321 *)
  let actual = r.b321 in
  let expected = #((unbox_unit ()), #1L) in
  mark_test_run 2574;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2574 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a321 = a3211; b321 = b3211 } { a321 = a3212; b321 = b3212 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3211 a3212 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b3211 b3212) in
  let next_r = { a321 = #((unbox_unit ()), 100); b321 = #((unbox_unit ()), #101L) } in
  let r_expected = { a321 = #((unbox_unit ()), 0); b321 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a321 *)
  r.a321 <- next_r.a321;
  let r_expected = { r_expected with a321 = next_r.a321 } in
  mark_test_run 2575;
  let test = eq r r_expected in
  if not test then failwithf "test 2575 failed";
  Gc.compact ();
  (* .b321 *)
  r.b321 <- next_r.b321;
  let r_expected = { r_expected with b321 = next_r.b321 } in
  mark_test_run 2576;
  let test = eq r r_expected in
  if not test then failwithf "test 2576 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a321; b321 } = r in
  let expected_a321 = #((unbox_unit ()), 100) in
  mark_test_run 2577;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a321 a321 in
  if not test then failwithf "test 2577 failed";
  let expected_b321 = #((unbox_unit ()), #101L) in
  mark_test_run 2578;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b321 b321 in
  if not test then failwithf "test 2578 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a321; b321 } = r in
  let expected_a321 = #((unbox_unit ()), 100) in
  mark_test_run 2579;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a321 a321 in
  if not test then failwithf "test 2579 failed";
  let expected_b321 = #((unbox_unit ()), #101L) in
  mark_test_run 2580;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b321 b321 in
  if not test then failwithf "test 2580 failed";

  ()
;;

let () =
  (****************************************************)
  (*   t322 = { #(unit_u, int); #(unit_u, unit_u) }   *)
  (****************************************************)
  let r = { a322 = #((unbox_unit ()), 0); b322 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a322 *)
  let actual = r.a322 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2581;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2581 failed";
  (* Paths of depth 1 *)
  (* .b322 *)
  let actual = r.b322 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2582;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2582 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a322 = a3221; b322 = b3221 } { a322 = a3222; b322 = b3222 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3221 a3222 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b3221 b3222) in
  let next_r = { a322 = #((unbox_unit ()), 100); b322 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a322 = #((unbox_unit ()), 0); b322 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a322 *)
  r.a322 <- next_r.a322;
  let r_expected = { r_expected with a322 = next_r.a322 } in
  mark_test_run 2583;
  let test = eq r r_expected in
  if not test then failwithf "test 2583 failed";
  Gc.compact ();
  (* .b322 *)
  r.b322 <- next_r.b322;
  let r_expected = { r_expected with b322 = next_r.b322 } in
  mark_test_run 2584;
  let test = eq r r_expected in
  if not test then failwithf "test 2584 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a322; b322 } = r in
  let expected_a322 = #((unbox_unit ()), 100) in
  mark_test_run 2585;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a322 a322 in
  if not test then failwithf "test 2585 failed";
  let expected_b322 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2586;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b322 b322 in
  if not test then failwithf "test 2586 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a322; b322 } = r in
  let expected_a322 = #((unbox_unit ()), 100) in
  mark_test_run 2587;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a322 a322 in
  if not test then failwithf "test 2587 failed";
  let expected_b322 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2588;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b322 b322 in
  if not test then failwithf "test 2588 failed";

  ()
;;

let () =
  (****************************************************)
  (*   t323 = { #(unit_u, int); #(unit_u, string) }   *)
  (****************************************************)
  let r = { a323 = #((unbox_unit ()), 0); b323 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a323 *)
  let actual = r.a323 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2589;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2589 failed";
  (* Paths of depth 1 *)
  (* .b323 *)
  let actual = r.b323 in
  let expected = #((unbox_unit ()), "1") in
  mark_test_run 2590;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2590 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a323 = a3231; b323 = b3231 } { a323 = a3232; b323 = b3232 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) a3231 a3232 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b3231 b3232) in
  let next_r = { a323 = #((unbox_unit ()), 100); b323 = #((unbox_unit ()), "101") } in
  let r_expected = { a323 = #((unbox_unit ()), 0); b323 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a323 *)
  r.a323 <- next_r.a323;
  let r_expected = { r_expected with a323 = next_r.a323 } in
  mark_test_run 2591;
  let test = eq r r_expected in
  if not test then failwithf "test 2591 failed";
  Gc.compact ();
  (* .b323 *)
  r.b323 <- next_r.b323;
  let r_expected = { r_expected with b323 = next_r.b323 } in
  mark_test_run 2592;
  let test = eq r r_expected in
  if not test then failwithf "test 2592 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a323; b323 } = r in
  let expected_a323 = #((unbox_unit ()), 100) in
  mark_test_run 2593;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a323 a323 in
  if not test then failwithf "test 2593 failed";
  let expected_b323 = #((unbox_unit ()), "101") in
  mark_test_run 2594;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b323 b323 in
  if not test then failwithf "test 2594 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a323; b323 } = r in
  let expected_a323 = #((unbox_unit ()), 100) in
  mark_test_run 2595;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_a323 a323 in
  if not test then failwithf "test 2595 failed";
  let expected_b323 = #((unbox_unit ()), "101") in
  mark_test_run 2596;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b323 b323 in
  if not test then failwithf "test 2596 failed";

  ()
;;

let () =
  (************************************)
  (*   t324 = { #(unit_u, int64#) }   *)
  (************************************)
  let r = { a324 = #((unbox_unit ()), #0L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a324 *)
  let actual = r.a324 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2597;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2597 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a324 = a3241 } { a324 = a3242 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3241 a3242) in
  let next_r = { a324 = #((unbox_unit ()), #100L) } in
  let r_expected = { a324 = #((unbox_unit ()), #0L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a324 *)
  r.a324 <- next_r.a324;
  let r_expected = { r_expected with a324 = next_r.a324 } in
  mark_test_run 2598;
  let test = eq r r_expected in
  if not test then failwithf "test 2598 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a324 } = r in
  let expected_a324 = #((unbox_unit ()), #100L) in
  mark_test_run 2599;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a324 a324 in
  if not test then failwithf "test 2599 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a324 } = r in
  let expected_a324 = #((unbox_unit ()), #100L) in
  mark_test_run 2600;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a324 a324 in
  if not test then failwithf "test 2600 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t325 = { #(unit_u, int64#); int }   *)
  (*****************************************)
  let r = { a325 = #((unbox_unit ()), #0L); b325 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a325 *)
  let actual = r.a325 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2601;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2601 failed";
  (* Paths of depth 1 *)
  (* .b325 *)
  let actual = r.b325 in
  let expected = 1 in
  mark_test_run 2602;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2602 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a325 = a3251; b325 = b3251 } { a325 = a3252; b325 = b3252 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3251 a3252 && (fun a b -> Int.equal a b) b3251 b3252) in
  let next_r = { a325 = #((unbox_unit ()), #100L); b325 = 101 } in
  let r_expected = { a325 = #((unbox_unit ()), #0L); b325 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a325 *)
  r.a325 <- next_r.a325;
  let r_expected = { r_expected with a325 = next_r.a325 } in
  mark_test_run 2603;
  let test = eq r r_expected in
  if not test then failwithf "test 2603 failed";
  Gc.compact ();
  (* .b325 *)
  r.b325 <- next_r.b325;
  let r_expected = { r_expected with b325 = next_r.b325 } in
  mark_test_run 2604;
  let test = eq r r_expected in
  if not test then failwithf "test 2604 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a325; b325 } = r in
  let expected_a325 = #((unbox_unit ()), #100L) in
  mark_test_run 2605;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a325 a325 in
  if not test then failwithf "test 2605 failed";
  let expected_b325 = 101 in
  mark_test_run 2606;
  let test = (fun a b -> Int.equal a b) expected_b325 b325 in
  if not test then failwithf "test 2606 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a325; b325 } = r in
  let expected_a325 = #((unbox_unit ()), #100L) in
  mark_test_run 2607;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a325 a325 in
  if not test then failwithf "test 2607 failed";
  let expected_b325 = 101 in
  mark_test_run 2608;
  let test = (fun a b -> Int.equal a b) expected_b325 b325 in
  if not test then failwithf "test 2608 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t326 = { #(unit_u, int64#); int64 }   *)
  (*******************************************)
  let r = { a326 = #((unbox_unit ()), #0L); b326 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a326 *)
  let actual = r.a326 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2609;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2609 failed";
  (* Paths of depth 1 *)
  (* .b326 *)
  let actual = r.b326 in
  let expected = 1L in
  mark_test_run 2610;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2610 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a326 = a3261; b326 = b3261 } { a326 = a3262; b326 = b3262 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3261 a3262 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3261 b3262) in
  let next_r = { a326 = #((unbox_unit ()), #100L); b326 = 101L } in
  let r_expected = { a326 = #((unbox_unit ()), #0L); b326 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a326 *)
  r.a326 <- next_r.a326;
  let r_expected = { r_expected with a326 = next_r.a326 } in
  mark_test_run 2611;
  let test = eq r r_expected in
  if not test then failwithf "test 2611 failed";
  Gc.compact ();
  (* .b326 *)
  r.b326 <- next_r.b326;
  let r_expected = { r_expected with b326 = next_r.b326 } in
  mark_test_run 2612;
  let test = eq r r_expected in
  if not test then failwithf "test 2612 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a326; b326 } = r in
  let expected_a326 = #((unbox_unit ()), #100L) in
  mark_test_run 2613;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a326 a326 in
  if not test then failwithf "test 2613 failed";
  let expected_b326 = 101L in
  mark_test_run 2614;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b326 b326 in
  if not test then failwithf "test 2614 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a326; b326 } = r in
  let expected_a326 = #((unbox_unit ()), #100L) in
  mark_test_run 2615;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a326 a326 in
  if not test then failwithf "test 2615 failed";
  let expected_b326 = 101L in
  mark_test_run 2616;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b326 b326 in
  if not test then failwithf "test 2616 failed";

  ()
;;

let () =
  (********************************************)
  (*   t327 = { #(unit_u, int64#); int64# }   *)
  (********************************************)
  let r = { a327 = #((unbox_unit ()), #0L); b327 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a327 *)
  let actual = r.a327 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2617;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2617 failed";
  (* Paths of depth 1 *)
  (* .b327 *)
  let actual = r.b327 in
  let expected = #1L in
  mark_test_run 2618;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 2618 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a327 = a3271; b327 = b3271 } { a327 = a3272; b327 = b3272 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3271 a3272 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b3271 b3272) in
  let next_r = { a327 = #((unbox_unit ()), #100L); b327 = #101L } in
  let r_expected = { a327 = #((unbox_unit ()), #0L); b327 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a327 *)
  r.a327 <- next_r.a327;
  let r_expected = { r_expected with a327 = next_r.a327 } in
  mark_test_run 2619;
  let test = eq r r_expected in
  if not test then failwithf "test 2619 failed";
  Gc.compact ();
  (* .b327 *)
  r.b327 <- next_r.b327;
  let r_expected = { r_expected with b327 = next_r.b327 } in
  mark_test_run 2620;
  let test = eq r r_expected in
  if not test then failwithf "test 2620 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a327; b327 } = r in
  let expected_a327 = #((unbox_unit ()), #100L) in
  mark_test_run 2621;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a327 a327 in
  if not test then failwithf "test 2621 failed";
  let expected_b327 = #101L in
  mark_test_run 2622;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b327 b327 in
  if not test then failwithf "test 2622 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a327; b327 } = r in
  let expected_a327 = #((unbox_unit ()), #100L) in
  mark_test_run 2623;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a327 a327 in
  if not test then failwithf "test 2623 failed";
  let expected_b327 = #101L in
  mark_test_run 2624;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b327 b327 in
  if not test then failwithf "test 2624 failed";

  ()
;;

let () =
  (********************************************)
  (*   t328 = { #(unit_u, int64#); int32# }   *)
  (********************************************)
  let r = { a328 = #((unbox_unit ()), #0L); b328 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a328 *)
  let actual = r.a328 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2625;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2625 failed";
  (* Paths of depth 1 *)
  (* .b328 *)
  let actual = r.b328 in
  let expected = #1l in
  mark_test_run 2626;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2626 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a328 = a3281; b328 = b3281 } { a328 = a3282; b328 = b3282 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3281 a3282 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3281 b3282) in
  let next_r = { a328 = #((unbox_unit ()), #100L); b328 = #101l } in
  let r_expected = { a328 = #((unbox_unit ()), #0L); b328 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a328 *)
  r.a328 <- next_r.a328;
  let r_expected = { r_expected with a328 = next_r.a328 } in
  mark_test_run 2627;
  let test = eq r r_expected in
  if not test then failwithf "test 2627 failed";
  Gc.compact ();
  (* .b328 *)
  r.b328 <- next_r.b328;
  let r_expected = { r_expected with b328 = next_r.b328 } in
  mark_test_run 2628;
  let test = eq r r_expected in
  if not test then failwithf "test 2628 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a328; b328 } = r in
  let expected_a328 = #((unbox_unit ()), #100L) in
  mark_test_run 2629;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a328 a328 in
  if not test then failwithf "test 2629 failed";
  let expected_b328 = #101l in
  mark_test_run 2630;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b328 b328 in
  if not test then failwithf "test 2630 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a328; b328 } = r in
  let expected_a328 = #((unbox_unit ()), #100L) in
  mark_test_run 2631;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a328 a328 in
  if not test then failwithf "test 2631 failed";
  let expected_b328 = #101l in
  mark_test_run 2632;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b328 b328 in
  if not test then failwithf "test 2632 failed";

  ()
;;

let () =
  (************************************************)
  (*   t329 = { #(unit_u, int64#); nativeint# }   *)
  (************************************************)
  let r = { a329 = #((unbox_unit ()), #0L); b329 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a329 *)
  let actual = r.a329 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2633;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2633 failed";
  (* Paths of depth 1 *)
  (* .b329 *)
  let actual = r.b329 in
  let expected = #1n in
  mark_test_run 2634;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 2634 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a329 = a3291; b329 = b3291 } { a329 = a3292; b329 = b3292 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3291 a3292 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b3291 b3292) in
  let next_r = { a329 = #((unbox_unit ()), #100L); b329 = #101n } in
  let r_expected = { a329 = #((unbox_unit ()), #0L); b329 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a329 *)
  r.a329 <- next_r.a329;
  let r_expected = { r_expected with a329 = next_r.a329 } in
  mark_test_run 2635;
  let test = eq r r_expected in
  if not test then failwithf "test 2635 failed";
  Gc.compact ();
  (* .b329 *)
  r.b329 <- next_r.b329;
  let r_expected = { r_expected with b329 = next_r.b329 } in
  mark_test_run 2636;
  let test = eq r r_expected in
  if not test then failwithf "test 2636 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a329; b329 } = r in
  let expected_a329 = #((unbox_unit ()), #100L) in
  mark_test_run 2637;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a329 a329 in
  if not test then failwithf "test 2637 failed";
  let expected_b329 = #101n in
  mark_test_run 2638;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b329 b329 in
  if not test then failwithf "test 2638 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a329; b329 } = r in
  let expected_a329 = #((unbox_unit ()), #100L) in
  mark_test_run 2639;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a329 a329 in
  if not test then failwithf "test 2639 failed";
  let expected_b329 = #101n in
  mark_test_run 2640;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b329 b329 in
  if not test then failwithf "test 2640 failed";

  ()
;;

let () =
  (********************************************)
  (*   t330 = { #(unit_u, int64#); unit_u }   *)
  (********************************************)
  let r = { a330 = #((unbox_unit ()), #0L); b330 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a330 *)
  let actual = r.a330 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2641;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2641 failed";
  (* Paths of depth 1 *)
  (* .b330 *)
  let actual = r.b330 in
  let expected = (unbox_unit ()) in
  mark_test_run 2642;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2642 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a330 = a3301; b330 = b3301 } { a330 = a3302; b330 = b3302 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3301 a3302 && (fun _ _ -> true) b3301 b3302) in
  let next_r = { a330 = #((unbox_unit ()), #100L); b330 = (unbox_unit ()) } in
  let r_expected = { a330 = #((unbox_unit ()), #0L); b330 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a330 *)
  r.a330 <- next_r.a330;
  let r_expected = { r_expected with a330 = next_r.a330 } in
  mark_test_run 2643;
  let test = eq r r_expected in
  if not test then failwithf "test 2643 failed";
  Gc.compact ();
  (* .b330 *)
  r.b330 <- next_r.b330;
  let r_expected = { r_expected with b330 = next_r.b330 } in
  mark_test_run 2644;
  let test = eq r r_expected in
  if not test then failwithf "test 2644 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a330; b330 } = r in
  let expected_a330 = #((unbox_unit ()), #100L) in
  mark_test_run 2645;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a330 a330 in
  if not test then failwithf "test 2645 failed";
  let expected_b330 = (unbox_unit ()) in
  mark_test_run 2646;
  let test = (fun _ _ -> true) expected_b330 b330 in
  if not test then failwithf "test 2646 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a330; b330 } = r in
  let expected_a330 = #((unbox_unit ()), #100L) in
  mark_test_run 2647;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a330 a330 in
  if not test then failwithf "test 2647 failed";
  let expected_b330 = (unbox_unit ()) in
  mark_test_run 2648;
  let test = (fun _ _ -> true) expected_b330 b330 in
  if not test then failwithf "test 2648 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t331 = { #(unit_u, int64#); float }   *)
  (*******************************************)
  let r = { a331 = #((unbox_unit ()), #0L); b331 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a331 *)
  let actual = r.a331 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2649;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2649 failed";
  (* Paths of depth 1 *)
  (* .b331 *)
  let actual = r.b331 in
  let expected = 1. in
  mark_test_run 2650;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2650 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a331 = a3311; b331 = b3311 } { a331 = a3312; b331 = b3312 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3311 a3312 && (fun a b -> Float.equal (globalize a) (globalize b)) b3311 b3312) in
  let next_r = { a331 = #((unbox_unit ()), #100L); b331 = 101. } in
  let r_expected = { a331 = #((unbox_unit ()), #0L); b331 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a331 *)
  r.a331 <- next_r.a331;
  let r_expected = { r_expected with a331 = next_r.a331 } in
  mark_test_run 2651;
  let test = eq r r_expected in
  if not test then failwithf "test 2651 failed";
  Gc.compact ();
  (* .b331 *)
  r.b331 <- next_r.b331;
  let r_expected = { r_expected with b331 = next_r.b331 } in
  mark_test_run 2652;
  let test = eq r r_expected in
  if not test then failwithf "test 2652 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a331; b331 } = r in
  let expected_a331 = #((unbox_unit ()), #100L) in
  mark_test_run 2653;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a331 a331 in
  if not test then failwithf "test 2653 failed";
  let expected_b331 = 101. in
  mark_test_run 2654;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b331 b331 in
  if not test then failwithf "test 2654 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a331; b331 } = r in
  let expected_a331 = #((unbox_unit ()), #100L) in
  mark_test_run 2655;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a331 a331 in
  if not test then failwithf "test 2655 failed";
  let expected_b331 = 101. in
  mark_test_run 2656;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b331 b331 in
  if not test then failwithf "test 2656 failed";

  ()
;;

let () =
  (************************************************)
  (*   t332 = { #(unit_u, int64#); (| unit_u) }   *)
  (************************************************)
  let r = { a332 = #((unbox_unit ()), #0L); b332 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a332 *)
  let actual = r.a332 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2657;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2657 failed";
  (* Paths of depth 1 *)
  (* .b332 *)
  let actual = r.b332 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2658;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2658 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a332 = a3321; b332 = b3321 } { a332 = a3322; b332 = b3322 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3321 a3322 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b3321 b3322) in
  let next_r = { a332 = #((unbox_unit ()), #100L); b332 = C15_0((unbox_unit ())) } in
  let r_expected = { a332 = #((unbox_unit ()), #0L); b332 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a332 *)
  r.a332 <- next_r.a332;
  let r_expected = { r_expected with a332 = next_r.a332 } in
  mark_test_run 2659;
  let test = eq r r_expected in
  if not test then failwithf "test 2659 failed";
  Gc.compact ();
  (* .b332 *)
  r.b332 <- next_r.b332;
  let r_expected = { r_expected with b332 = next_r.b332 } in
  mark_test_run 2660;
  let test = eq r r_expected in
  if not test then failwithf "test 2660 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a332; b332 } = r in
  let expected_a332 = #((unbox_unit ()), #100L) in
  mark_test_run 2661;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a332 a332 in
  if not test then failwithf "test 2661 failed";
  let expected_b332 = C15_0((unbox_unit ())) in
  mark_test_run 2662;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b332 b332 in
  if not test then failwithf "test 2662 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a332; b332 } = r in
  let expected_a332 = #((unbox_unit ()), #100L) in
  mark_test_run 2663;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a332 a332 in
  if not test then failwithf "test 2663 failed";
  let expected_b332 = C15_0((unbox_unit ())) in
  mark_test_run 2664;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b332 b332 in
  if not test then failwithf "test 2664 failed";

  ()
;;

let () =
  (**************************************************************************************)
  (*   t333 = { #(unit_u, int64#); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (**************************************************************************************)
  let r = { a333 = #((unbox_unit ()), #0L); b333 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a333 *)
  let actual = r.a333 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2665;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2665 failed";
  (* Paths of depth 1 *)
  (* .b333 *)
  let actual = r.b333 in
  let expected = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2666;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2666 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a333 = a3331; b333 = b3331 } { a333 = a3332; b333 = b3332 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3331 a3332 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b3331 b3332) in
  let next_r = { a333 = #((unbox_unit ()), #100L); b333 = C17_2(#((unbox_unit ()), (unbox_unit ()))) } in
  let r_expected = { a333 = #((unbox_unit ()), #0L); b333 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a333 *)
  r.a333 <- next_r.a333;
  let r_expected = { r_expected with a333 = next_r.a333 } in
  mark_test_run 2667;
  let test = eq r r_expected in
  if not test then failwithf "test 2667 failed";
  Gc.compact ();
  (* .b333 *)
  r.b333 <- next_r.b333;
  let r_expected = { r_expected with b333 = next_r.b333 } in
  mark_test_run 2668;
  let test = eq r r_expected in
  if not test then failwithf "test 2668 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a333; b333 } = r in
  let expected_a333 = #((unbox_unit ()), #100L) in
  mark_test_run 2669;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a333 a333 in
  if not test then failwithf "test 2669 failed";
  let expected_b333 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 2670;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b333 b333 in
  if not test then failwithf "test 2670 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a333; b333 } = r in
  let expected_a333 = #((unbox_unit ()), #100L) in
  mark_test_run 2671;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a333 a333 in
  if not test then failwithf "test 2671 failed";
  let expected_b333 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 2672;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b333 b333 in
  if not test then failwithf "test 2672 failed";

  ()
;;

let () =
  (****************************************************)
  (*   t334 = { #(unit_u, int64#); #(unit_u, int) }   *)
  (****************************************************)
  let r = { a334 = #((unbox_unit ()), #0L); b334 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a334 *)
  let actual = r.a334 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2673;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2673 failed";
  (* Paths of depth 1 *)
  (* .b334 *)
  let actual = r.b334 in
  let expected = #((unbox_unit ()), 1) in
  mark_test_run 2674;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2674 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a334 = a3341; b334 = b3341 } { a334 = a3342; b334 = b3342 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3341 a3342 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b3341 b3342) in
  let next_r = { a334 = #((unbox_unit ()), #100L); b334 = #((unbox_unit ()), 101) } in
  let r_expected = { a334 = #((unbox_unit ()), #0L); b334 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a334 *)
  r.a334 <- next_r.a334;
  let r_expected = { r_expected with a334 = next_r.a334 } in
  mark_test_run 2675;
  let test = eq r r_expected in
  if not test then failwithf "test 2675 failed";
  Gc.compact ();
  (* .b334 *)
  r.b334 <- next_r.b334;
  let r_expected = { r_expected with b334 = next_r.b334 } in
  mark_test_run 2676;
  let test = eq r r_expected in
  if not test then failwithf "test 2676 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a334; b334 } = r in
  let expected_a334 = #((unbox_unit ()), #100L) in
  mark_test_run 2677;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a334 a334 in
  if not test then failwithf "test 2677 failed";
  let expected_b334 = #((unbox_unit ()), 101) in
  mark_test_run 2678;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b334 b334 in
  if not test then failwithf "test 2678 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a334; b334 } = r in
  let expected_a334 = #((unbox_unit ()), #100L) in
  mark_test_run 2679;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a334 a334 in
  if not test then failwithf "test 2679 failed";
  let expected_b334 = #((unbox_unit ()), 101) in
  mark_test_run 2680;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b334 b334 in
  if not test then failwithf "test 2680 failed";

  ()
;;

let () =
  (*******************************************************)
  (*   t335 = { #(unit_u, int64#); #(unit_u, int64#) }   *)
  (*******************************************************)
  let r = { a335 = #((unbox_unit ()), #0L); b335 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a335 *)
  let actual = r.a335 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2681;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2681 failed";
  (* Paths of depth 1 *)
  (* .b335 *)
  let actual = r.b335 in
  let expected = #((unbox_unit ()), #1L) in
  mark_test_run 2682;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2682 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a335 = a3351; b335 = b3351 } { a335 = a3352; b335 = b3352 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3351 a3352 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b3351 b3352) in
  let next_r = { a335 = #((unbox_unit ()), #100L); b335 = #((unbox_unit ()), #101L) } in
  let r_expected = { a335 = #((unbox_unit ()), #0L); b335 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a335 *)
  r.a335 <- next_r.a335;
  let r_expected = { r_expected with a335 = next_r.a335 } in
  mark_test_run 2683;
  let test = eq r r_expected in
  if not test then failwithf "test 2683 failed";
  Gc.compact ();
  (* .b335 *)
  r.b335 <- next_r.b335;
  let r_expected = { r_expected with b335 = next_r.b335 } in
  mark_test_run 2684;
  let test = eq r r_expected in
  if not test then failwithf "test 2684 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a335; b335 } = r in
  let expected_a335 = #((unbox_unit ()), #100L) in
  mark_test_run 2685;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a335 a335 in
  if not test then failwithf "test 2685 failed";
  let expected_b335 = #((unbox_unit ()), #101L) in
  mark_test_run 2686;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b335 b335 in
  if not test then failwithf "test 2686 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a335; b335 } = r in
  let expected_a335 = #((unbox_unit ()), #100L) in
  mark_test_run 2687;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a335 a335 in
  if not test then failwithf "test 2687 failed";
  let expected_b335 = #((unbox_unit ()), #101L) in
  mark_test_run 2688;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b335 b335 in
  if not test then failwithf "test 2688 failed";

  ()
;;

let () =
  (*******************************************************)
  (*   t336 = { #(unit_u, int64#); #(unit_u, unit_u) }   *)
  (*******************************************************)
  let r = { a336 = #((unbox_unit ()), #0L); b336 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a336 *)
  let actual = r.a336 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2689;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2689 failed";
  (* Paths of depth 1 *)
  (* .b336 *)
  let actual = r.b336 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2690;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2690 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a336 = a3361; b336 = b3361 } { a336 = a3362; b336 = b3362 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3361 a3362 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b3361 b3362) in
  let next_r = { a336 = #((unbox_unit ()), #100L); b336 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a336 = #((unbox_unit ()), #0L); b336 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a336 *)
  r.a336 <- next_r.a336;
  let r_expected = { r_expected with a336 = next_r.a336 } in
  mark_test_run 2691;
  let test = eq r r_expected in
  if not test then failwithf "test 2691 failed";
  Gc.compact ();
  (* .b336 *)
  r.b336 <- next_r.b336;
  let r_expected = { r_expected with b336 = next_r.b336 } in
  mark_test_run 2692;
  let test = eq r r_expected in
  if not test then failwithf "test 2692 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a336; b336 } = r in
  let expected_a336 = #((unbox_unit ()), #100L) in
  mark_test_run 2693;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a336 a336 in
  if not test then failwithf "test 2693 failed";
  let expected_b336 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2694;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b336 b336 in
  if not test then failwithf "test 2694 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a336; b336 } = r in
  let expected_a336 = #((unbox_unit ()), #100L) in
  mark_test_run 2695;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a336 a336 in
  if not test then failwithf "test 2695 failed";
  let expected_b336 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2696;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b336 b336 in
  if not test then failwithf "test 2696 failed";

  ()
;;

let () =
  (*******************************************************)
  (*   t337 = { #(unit_u, int64#); #(unit_u, string) }   *)
  (*******************************************************)
  let r = { a337 = #((unbox_unit ()), #0L); b337 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a337 *)
  let actual = r.a337 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2697;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2697 failed";
  (* Paths of depth 1 *)
  (* .b337 *)
  let actual = r.b337 in
  let expected = #((unbox_unit ()), "1") in
  mark_test_run 2698;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2698 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a337 = a3371; b337 = b3371 } { a337 = a3372; b337 = b3372 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) a3371 a3372 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b3371 b3372) in
  let next_r = { a337 = #((unbox_unit ()), #100L); b337 = #((unbox_unit ()), "101") } in
  let r_expected = { a337 = #((unbox_unit ()), #0L); b337 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a337 *)
  r.a337 <- next_r.a337;
  let r_expected = { r_expected with a337 = next_r.a337 } in
  mark_test_run 2699;
  let test = eq r r_expected in
  if not test then failwithf "test 2699 failed";
  Gc.compact ();
  (* .b337 *)
  r.b337 <- next_r.b337;
  let r_expected = { r_expected with b337 = next_r.b337 } in
  mark_test_run 2700;
  let test = eq r r_expected in
  if not test then failwithf "test 2700 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a337; b337 } = r in
  let expected_a337 = #((unbox_unit ()), #100L) in
  mark_test_run 2701;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a337 a337 in
  if not test then failwithf "test 2701 failed";
  let expected_b337 = #((unbox_unit ()), "101") in
  mark_test_run 2702;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b337 b337 in
  if not test then failwithf "test 2702 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a337; b337 } = r in
  let expected_a337 = #((unbox_unit ()), #100L) in
  mark_test_run 2703;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_a337 a337 in
  if not test then failwithf "test 2703 failed";
  let expected_b337 = #((unbox_unit ()), "101") in
  mark_test_run 2704;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b337 b337 in
  if not test then failwithf "test 2704 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t338 = { #(unit_u, unit_u); int }   *)
  (*****************************************)
  let r = { a338 = #((unbox_unit ()), (unbox_unit ())); b338 = 0 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a338 *)
  let actual = r.a338 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2705;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2705 failed";
  (* Paths of depth 1 *)
  (* .b338 *)
  let actual = r.b338 in
  let expected = 0 in
  mark_test_run 2706;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2706 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a338 = a3381; b338 = b3381 } { a338 = a3382; b338 = b3382 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3381 a3382 && (fun a b -> Int.equal a b) b3381 b3382) in
  let next_r = { a338 = #((unbox_unit ()), (unbox_unit ())); b338 = 100 } in
  let r_expected = { a338 = #((unbox_unit ()), (unbox_unit ())); b338 = 0 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a338 *)
  r.a338 <- next_r.a338;
  let r_expected = { r_expected with a338 = next_r.a338 } in
  mark_test_run 2707;
  let test = eq r r_expected in
  if not test then failwithf "test 2707 failed";
  Gc.compact ();
  (* .b338 *)
  r.b338 <- next_r.b338;
  let r_expected = { r_expected with b338 = next_r.b338 } in
  mark_test_run 2708;
  let test = eq r r_expected in
  if not test then failwithf "test 2708 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a338; b338 } = r in
  let expected_a338 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2709;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a338 a338 in
  if not test then failwithf "test 2709 failed";
  let expected_b338 = 100 in
  mark_test_run 2710;
  let test = (fun a b -> Int.equal a b) expected_b338 b338 in
  if not test then failwithf "test 2710 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a338; b338 } = r in
  let expected_a338 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2711;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a338 a338 in
  if not test then failwithf "test 2711 failed";
  let expected_b338 = 100 in
  mark_test_run 2712;
  let test = (fun a b -> Int.equal a b) expected_b338 b338 in
  if not test then failwithf "test 2712 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t339 = { #(unit_u, unit_u); int64 }   *)
  (*******************************************)
  let r = { a339 = #((unbox_unit ()), (unbox_unit ())); b339 = 0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a339 *)
  let actual = r.a339 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2713;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2713 failed";
  (* Paths of depth 1 *)
  (* .b339 *)
  let actual = r.b339 in
  let expected = 0L in
  mark_test_run 2714;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2714 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a339 = a3391; b339 = b3391 } { a339 = a3392; b339 = b3392 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3391 a3392 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3391 b3392) in
  let next_r = { a339 = #((unbox_unit ()), (unbox_unit ())); b339 = 100L } in
  let r_expected = { a339 = #((unbox_unit ()), (unbox_unit ())); b339 = 0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a339 *)
  r.a339 <- next_r.a339;
  let r_expected = { r_expected with a339 = next_r.a339 } in
  mark_test_run 2715;
  let test = eq r r_expected in
  if not test then failwithf "test 2715 failed";
  Gc.compact ();
  (* .b339 *)
  r.b339 <- next_r.b339;
  let r_expected = { r_expected with b339 = next_r.b339 } in
  mark_test_run 2716;
  let test = eq r r_expected in
  if not test then failwithf "test 2716 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a339; b339 } = r in
  let expected_a339 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2717;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a339 a339 in
  if not test then failwithf "test 2717 failed";
  let expected_b339 = 100L in
  mark_test_run 2718;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b339 b339 in
  if not test then failwithf "test 2718 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a339; b339 } = r in
  let expected_a339 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2719;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a339 a339 in
  if not test then failwithf "test 2719 failed";
  let expected_b339 = 100L in
  mark_test_run 2720;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b339 b339 in
  if not test then failwithf "test 2720 failed";

  ()
;;

let () =
  (********************************************)
  (*   t340 = { #(unit_u, unit_u); int64# }   *)
  (********************************************)
  let r = { a340 = #((unbox_unit ()), (unbox_unit ())); b340 = #0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a340 *)
  let actual = r.a340 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2721;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2721 failed";
  (* Paths of depth 1 *)
  (* .b340 *)
  let actual = r.b340 in
  let expected = #0L in
  mark_test_run 2722;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 2722 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a340 = a3401; b340 = b3401 } { a340 = a3402; b340 = b3402 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3401 a3402 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b3401 b3402) in
  let next_r = { a340 = #((unbox_unit ()), (unbox_unit ())); b340 = #100L } in
  let r_expected = { a340 = #((unbox_unit ()), (unbox_unit ())); b340 = #0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a340 *)
  r.a340 <- next_r.a340;
  let r_expected = { r_expected with a340 = next_r.a340 } in
  mark_test_run 2723;
  let test = eq r r_expected in
  if not test then failwithf "test 2723 failed";
  Gc.compact ();
  (* .b340 *)
  r.b340 <- next_r.b340;
  let r_expected = { r_expected with b340 = next_r.b340 } in
  mark_test_run 2724;
  let test = eq r r_expected in
  if not test then failwithf "test 2724 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a340; b340 } = r in
  let expected_a340 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2725;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a340 a340 in
  if not test then failwithf "test 2725 failed";
  let expected_b340 = #100L in
  mark_test_run 2726;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b340 b340 in
  if not test then failwithf "test 2726 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a340; b340 } = r in
  let expected_a340 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2727;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a340 a340 in
  if not test then failwithf "test 2727 failed";
  let expected_b340 = #100L in
  mark_test_run 2728;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b340 b340 in
  if not test then failwithf "test 2728 failed";

  ()
;;

let () =
  (********************************************)
  (*   t341 = { #(unit_u, unit_u); int32# }   *)
  (********************************************)
  let r = { a341 = #((unbox_unit ()), (unbox_unit ())); b341 = #0l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a341 *)
  let actual = r.a341 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2729;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2729 failed";
  (* Paths of depth 1 *)
  (* .b341 *)
  let actual = r.b341 in
  let expected = #0l in
  mark_test_run 2730;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2730 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a341 = a3411; b341 = b3411 } { a341 = a3412; b341 = b3412 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3411 a3412 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3411 b3412) in
  let next_r = { a341 = #((unbox_unit ()), (unbox_unit ())); b341 = #100l } in
  let r_expected = { a341 = #((unbox_unit ()), (unbox_unit ())); b341 = #0l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a341 *)
  r.a341 <- next_r.a341;
  let r_expected = { r_expected with a341 = next_r.a341 } in
  mark_test_run 2731;
  let test = eq r r_expected in
  if not test then failwithf "test 2731 failed";
  Gc.compact ();
  (* .b341 *)
  r.b341 <- next_r.b341;
  let r_expected = { r_expected with b341 = next_r.b341 } in
  mark_test_run 2732;
  let test = eq r r_expected in
  if not test then failwithf "test 2732 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a341; b341 } = r in
  let expected_a341 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2733;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a341 a341 in
  if not test then failwithf "test 2733 failed";
  let expected_b341 = #100l in
  mark_test_run 2734;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b341 b341 in
  if not test then failwithf "test 2734 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a341; b341 } = r in
  let expected_a341 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2735;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a341 a341 in
  if not test then failwithf "test 2735 failed";
  let expected_b341 = #100l in
  mark_test_run 2736;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b341 b341 in
  if not test then failwithf "test 2736 failed";

  ()
;;

let () =
  (************************************************)
  (*   t342 = { #(unit_u, unit_u); nativeint# }   *)
  (************************************************)
  let r = { a342 = #((unbox_unit ()), (unbox_unit ())); b342 = #0n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a342 *)
  let actual = r.a342 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2737;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2737 failed";
  (* Paths of depth 1 *)
  (* .b342 *)
  let actual = r.b342 in
  let expected = #0n in
  mark_test_run 2738;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 2738 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a342 = a3421; b342 = b3421 } { a342 = a3422; b342 = b3422 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3421 a3422 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b3421 b3422) in
  let next_r = { a342 = #((unbox_unit ()), (unbox_unit ())); b342 = #100n } in
  let r_expected = { a342 = #((unbox_unit ()), (unbox_unit ())); b342 = #0n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a342 *)
  r.a342 <- next_r.a342;
  let r_expected = { r_expected with a342 = next_r.a342 } in
  mark_test_run 2739;
  let test = eq r r_expected in
  if not test then failwithf "test 2739 failed";
  Gc.compact ();
  (* .b342 *)
  r.b342 <- next_r.b342;
  let r_expected = { r_expected with b342 = next_r.b342 } in
  mark_test_run 2740;
  let test = eq r r_expected in
  if not test then failwithf "test 2740 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a342; b342 } = r in
  let expected_a342 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2741;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a342 a342 in
  if not test then failwithf "test 2741 failed";
  let expected_b342 = #100n in
  mark_test_run 2742;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b342 b342 in
  if not test then failwithf "test 2742 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a342; b342 } = r in
  let expected_a342 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2743;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a342 a342 in
  if not test then failwithf "test 2743 failed";
  let expected_b342 = #100n in
  mark_test_run 2744;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b342 b342 in
  if not test then failwithf "test 2744 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t343 = { #(unit_u, unit_u); float }   *)
  (*******************************************)
  let r = { a343 = #((unbox_unit ()), (unbox_unit ())); b343 = 0. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a343 *)
  let actual = r.a343 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2745;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2745 failed";
  (* Paths of depth 1 *)
  (* .b343 *)
  let actual = r.b343 in
  let expected = 0. in
  mark_test_run 2746;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2746 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a343 = a3431; b343 = b3431 } { a343 = a3432; b343 = b3432 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3431 a3432 && (fun a b -> Float.equal (globalize a) (globalize b)) b3431 b3432) in
  let next_r = { a343 = #((unbox_unit ()), (unbox_unit ())); b343 = 100. } in
  let r_expected = { a343 = #((unbox_unit ()), (unbox_unit ())); b343 = 0. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a343 *)
  r.a343 <- next_r.a343;
  let r_expected = { r_expected with a343 = next_r.a343 } in
  mark_test_run 2747;
  let test = eq r r_expected in
  if not test then failwithf "test 2747 failed";
  Gc.compact ();
  (* .b343 *)
  r.b343 <- next_r.b343;
  let r_expected = { r_expected with b343 = next_r.b343 } in
  mark_test_run 2748;
  let test = eq r r_expected in
  if not test then failwithf "test 2748 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a343; b343 } = r in
  let expected_a343 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2749;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a343 a343 in
  if not test then failwithf "test 2749 failed";
  let expected_b343 = 100. in
  mark_test_run 2750;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b343 b343 in
  if not test then failwithf "test 2750 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a343; b343 } = r in
  let expected_a343 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2751;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a343 a343 in
  if not test then failwithf "test 2751 failed";
  let expected_b343 = 100. in
  mark_test_run 2752;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b343 b343 in
  if not test then failwithf "test 2752 failed";

  ()
;;

let () =
  (************************************************)
  (*   t344 = { #(unit_u, unit_u); (| unit_u) }   *)
  (************************************************)
  let r = { a344 = #((unbox_unit ()), (unbox_unit ())); b344 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a344 *)
  let actual = r.a344 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2753;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2753 failed";
  (* Paths of depth 1 *)
  (* .b344 *)
  let actual = r.b344 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2754;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2754 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a344 = a3441; b344 = b3441 } { a344 = a3442; b344 = b3442 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3441 a3442 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b3441 b3442) in
  let next_r = { a344 = #((unbox_unit ()), (unbox_unit ())); b344 = C15_0((unbox_unit ())) } in
  let r_expected = { a344 = #((unbox_unit ()), (unbox_unit ())); b344 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a344 *)
  r.a344 <- next_r.a344;
  let r_expected = { r_expected with a344 = next_r.a344 } in
  mark_test_run 2755;
  let test = eq r r_expected in
  if not test then failwithf "test 2755 failed";
  Gc.compact ();
  (* .b344 *)
  r.b344 <- next_r.b344;
  let r_expected = { r_expected with b344 = next_r.b344 } in
  mark_test_run 2756;
  let test = eq r r_expected in
  if not test then failwithf "test 2756 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a344; b344 } = r in
  let expected_a344 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2757;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a344 a344 in
  if not test then failwithf "test 2757 failed";
  let expected_b344 = C15_0((unbox_unit ())) in
  mark_test_run 2758;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b344 b344 in
  if not test then failwithf "test 2758 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a344; b344 } = r in
  let expected_a344 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2759;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a344 a344 in
  if not test then failwithf "test 2759 failed";
  let expected_b344 = C15_0((unbox_unit ())) in
  mark_test_run 2760;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b344 b344 in
  if not test then failwithf "test 2760 failed";

  ()
;;

let () =
  (**************************************************************************************)
  (*   t345 = { #(unit_u, unit_u); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (**************************************************************************************)
  let r = { a345 = #((unbox_unit ()), (unbox_unit ())); b345 = C17_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a345 *)
  let actual = r.a345 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2761;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2761 failed";
  (* Paths of depth 1 *)
  (* .b345 *)
  let actual = r.b345 in
  let expected = C17_0((unbox_unit ())) in
  mark_test_run 2762;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2762 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a345 = a3451; b345 = b3451 } { a345 = a3452; b345 = b3452 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3451 a3452 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b3451 b3452) in
  let next_r = { a345 = #((unbox_unit ()), (unbox_unit ())); b345 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a345 = #((unbox_unit ()), (unbox_unit ())); b345 = C17_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a345 *)
  r.a345 <- next_r.a345;
  let r_expected = { r_expected with a345 = next_r.a345 } in
  mark_test_run 2763;
  let test = eq r r_expected in
  if not test then failwithf "test 2763 failed";
  Gc.compact ();
  (* .b345 *)
  r.b345 <- next_r.b345;
  let r_expected = { r_expected with b345 = next_r.b345 } in
  mark_test_run 2764;
  let test = eq r r_expected in
  if not test then failwithf "test 2764 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a345; b345 } = r in
  let expected_a345 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2765;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a345 a345 in
  if not test then failwithf "test 2765 failed";
  let expected_b345 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2766;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b345 b345 in
  if not test then failwithf "test 2766 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a345; b345 } = r in
  let expected_a345 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2767;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a345 a345 in
  if not test then failwithf "test 2767 failed";
  let expected_b345 = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2768;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b345 b345 in
  if not test then failwithf "test 2768 failed";

  ()
;;

let () =
  (****************************************************)
  (*   t346 = { #(unit_u, unit_u); #(unit_u, int) }   *)
  (****************************************************)
  let r = { a346 = #((unbox_unit ()), (unbox_unit ())); b346 = #((unbox_unit ()), 0) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a346 *)
  let actual = r.a346 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2769;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2769 failed";
  (* Paths of depth 1 *)
  (* .b346 *)
  let actual = r.b346 in
  let expected = #((unbox_unit ()), 0) in
  mark_test_run 2770;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2770 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a346 = a3461; b346 = b3461 } { a346 = a3462; b346 = b3462 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3461 a3462 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b3461 b3462) in
  let next_r = { a346 = #((unbox_unit ()), (unbox_unit ())); b346 = #((unbox_unit ()), 100) } in
  let r_expected = { a346 = #((unbox_unit ()), (unbox_unit ())); b346 = #((unbox_unit ()), 0) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a346 *)
  r.a346 <- next_r.a346;
  let r_expected = { r_expected with a346 = next_r.a346 } in
  mark_test_run 2771;
  let test = eq r r_expected in
  if not test then failwithf "test 2771 failed";
  Gc.compact ();
  (* .b346 *)
  r.b346 <- next_r.b346;
  let r_expected = { r_expected with b346 = next_r.b346 } in
  mark_test_run 2772;
  let test = eq r r_expected in
  if not test then failwithf "test 2772 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a346; b346 } = r in
  let expected_a346 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2773;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a346 a346 in
  if not test then failwithf "test 2773 failed";
  let expected_b346 = #((unbox_unit ()), 100) in
  mark_test_run 2774;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b346 b346 in
  if not test then failwithf "test 2774 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a346; b346 } = r in
  let expected_a346 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2775;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a346 a346 in
  if not test then failwithf "test 2775 failed";
  let expected_b346 = #((unbox_unit ()), 100) in
  mark_test_run 2776;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b346 b346 in
  if not test then failwithf "test 2776 failed";

  ()
;;

let () =
  (*******************************************************)
  (*   t347 = { #(unit_u, unit_u); #(unit_u, int64#) }   *)
  (*******************************************************)
  let r = { a347 = #((unbox_unit ()), (unbox_unit ())); b347 = #((unbox_unit ()), #0L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a347 *)
  let actual = r.a347 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2777;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2777 failed";
  (* Paths of depth 1 *)
  (* .b347 *)
  let actual = r.b347 in
  let expected = #((unbox_unit ()), #0L) in
  mark_test_run 2778;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2778 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a347 = a3471; b347 = b3471 } { a347 = a3472; b347 = b3472 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3471 a3472 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b3471 b3472) in
  let next_r = { a347 = #((unbox_unit ()), (unbox_unit ())); b347 = #((unbox_unit ()), #100L) } in
  let r_expected = { a347 = #((unbox_unit ()), (unbox_unit ())); b347 = #((unbox_unit ()), #0L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a347 *)
  r.a347 <- next_r.a347;
  let r_expected = { r_expected with a347 = next_r.a347 } in
  mark_test_run 2779;
  let test = eq r r_expected in
  if not test then failwithf "test 2779 failed";
  Gc.compact ();
  (* .b347 *)
  r.b347 <- next_r.b347;
  let r_expected = { r_expected with b347 = next_r.b347 } in
  mark_test_run 2780;
  let test = eq r r_expected in
  if not test then failwithf "test 2780 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a347; b347 } = r in
  let expected_a347 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2781;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a347 a347 in
  if not test then failwithf "test 2781 failed";
  let expected_b347 = #((unbox_unit ()), #100L) in
  mark_test_run 2782;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b347 b347 in
  if not test then failwithf "test 2782 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a347; b347 } = r in
  let expected_a347 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2783;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a347 a347 in
  if not test then failwithf "test 2783 failed";
  let expected_b347 = #((unbox_unit ()), #100L) in
  mark_test_run 2784;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b347 b347 in
  if not test then failwithf "test 2784 failed";

  ()
;;

let () =
  (*******************************************************)
  (*   t348 = { #(unit_u, unit_u); #(unit_u, string) }   *)
  (*******************************************************)
  let r = { a348 = #((unbox_unit ()), (unbox_unit ())); b348 = #((unbox_unit ()), "0") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a348 *)
  let actual = r.a348 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2785;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2785 failed";
  (* Paths of depth 1 *)
  (* .b348 *)
  let actual = r.b348 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2786;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2786 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a348 = a3481; b348 = b3481 } { a348 = a3482; b348 = b3482 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a3481 a3482 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b3481 b3482) in
  let next_r = { a348 = #((unbox_unit ()), (unbox_unit ())); b348 = #((unbox_unit ()), "100") } in
  let r_expected = { a348 = #((unbox_unit ()), (unbox_unit ())); b348 = #((unbox_unit ()), "0") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a348 *)
  r.a348 <- next_r.a348;
  let r_expected = { r_expected with a348 = next_r.a348 } in
  mark_test_run 2787;
  let test = eq r r_expected in
  if not test then failwithf "test 2787 failed";
  Gc.compact ();
  (* .b348 *)
  r.b348 <- next_r.b348;
  let r_expected = { r_expected with b348 = next_r.b348 } in
  mark_test_run 2788;
  let test = eq r r_expected in
  if not test then failwithf "test 2788 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a348; b348 } = r in
  let expected_a348 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2789;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a348 a348 in
  if not test then failwithf "test 2789 failed";
  let expected_b348 = #((unbox_unit ()), "100") in
  mark_test_run 2790;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b348 b348 in
  if not test then failwithf "test 2790 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a348; b348 } = r in
  let expected_a348 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2791;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_a348 a348 in
  if not test then failwithf "test 2791 failed";
  let expected_b348 = #((unbox_unit ()), "100") in
  mark_test_run 2792;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b348 b348 in
  if not test then failwithf "test 2792 failed";

  ()
;;

let () =
  (************************************)
  (*   t349 = { #(unit_u, string) }   *)
  (************************************)
  let r = { a349 = #((unbox_unit ()), "0") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a349 *)
  let actual = r.a349 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2793;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2793 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a349 = a3491 } { a349 = a3492 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3491 a3492) in
  let next_r = { a349 = #((unbox_unit ()), "100") } in
  let r_expected = { a349 = #((unbox_unit ()), "0") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a349 *)
  r.a349 <- next_r.a349;
  let r_expected = { r_expected with a349 = next_r.a349 } in
  mark_test_run 2794;
  let test = eq r r_expected in
  if not test then failwithf "test 2794 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a349 } = r in
  let expected_a349 = #((unbox_unit ()), "100") in
  mark_test_run 2795;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a349 a349 in
  if not test then failwithf "test 2795 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a349 } = r in
  let expected_a349 = #((unbox_unit ()), "100") in
  mark_test_run 2796;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a349 a349 in
  if not test then failwithf "test 2796 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t350 = { #(unit_u, string); int }   *)
  (*****************************************)
  let r = { a350 = #((unbox_unit ()), "0"); b350 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a350 *)
  let actual = r.a350 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2797;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2797 failed";
  (* Paths of depth 1 *)
  (* .b350 *)
  let actual = r.b350 in
  let expected = 1 in
  mark_test_run 2798;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2798 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a350 = a3501; b350 = b3501 } { a350 = a3502; b350 = b3502 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3501 a3502 && (fun a b -> Int.equal a b) b3501 b3502) in
  let next_r = { a350 = #((unbox_unit ()), "100"); b350 = 101 } in
  let r_expected = { a350 = #((unbox_unit ()), "0"); b350 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a350 *)
  r.a350 <- next_r.a350;
  let r_expected = { r_expected with a350 = next_r.a350 } in
  mark_test_run 2799;
  let test = eq r r_expected in
  if not test then failwithf "test 2799 failed";
  Gc.compact ();
  (* .b350 *)
  r.b350 <- next_r.b350;
  let r_expected = { r_expected with b350 = next_r.b350 } in
  mark_test_run 2800;
  let test = eq r r_expected in
  if not test then failwithf "test 2800 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a350; b350 } = r in
  let expected_a350 = #((unbox_unit ()), "100") in
  mark_test_run 2801;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a350 a350 in
  if not test then failwithf "test 2801 failed";
  let expected_b350 = 101 in
  mark_test_run 2802;
  let test = (fun a b -> Int.equal a b) expected_b350 b350 in
  if not test then failwithf "test 2802 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a350; b350 } = r in
  let expected_a350 = #((unbox_unit ()), "100") in
  mark_test_run 2803;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a350 a350 in
  if not test then failwithf "test 2803 failed";
  let expected_b350 = 101 in
  mark_test_run 2804;
  let test = (fun a b -> Int.equal a b) expected_b350 b350 in
  if not test then failwithf "test 2804 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t351 = { #(unit_u, string); int64 }   *)
  (*******************************************)
  let r = { a351 = #((unbox_unit ()), "0"); b351 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a351 *)
  let actual = r.a351 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2805;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2805 failed";
  (* Paths of depth 1 *)
  (* .b351 *)
  let actual = r.b351 in
  let expected = 1L in
  mark_test_run 2806;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2806 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a351 = a3511; b351 = b3511 } { a351 = a3512; b351 = b3512 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3511 a3512 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3511 b3512) in
  let next_r = { a351 = #((unbox_unit ()), "100"); b351 = 101L } in
  let r_expected = { a351 = #((unbox_unit ()), "0"); b351 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a351 *)
  r.a351 <- next_r.a351;
  let r_expected = { r_expected with a351 = next_r.a351 } in
  mark_test_run 2807;
  let test = eq r r_expected in
  if not test then failwithf "test 2807 failed";
  Gc.compact ();
  (* .b351 *)
  r.b351 <- next_r.b351;
  let r_expected = { r_expected with b351 = next_r.b351 } in
  mark_test_run 2808;
  let test = eq r r_expected in
  if not test then failwithf "test 2808 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a351; b351 } = r in
  let expected_a351 = #((unbox_unit ()), "100") in
  mark_test_run 2809;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a351 a351 in
  if not test then failwithf "test 2809 failed";
  let expected_b351 = 101L in
  mark_test_run 2810;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b351 b351 in
  if not test then failwithf "test 2810 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a351; b351 } = r in
  let expected_a351 = #((unbox_unit ()), "100") in
  mark_test_run 2811;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a351 a351 in
  if not test then failwithf "test 2811 failed";
  let expected_b351 = 101L in
  mark_test_run 2812;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b351 b351 in
  if not test then failwithf "test 2812 failed";

  ()
;;

let () =
  (********************************************)
  (*   t352 = { #(unit_u, string); int64# }   *)
  (********************************************)
  let r = { a352 = #((unbox_unit ()), "0"); b352 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a352 *)
  let actual = r.a352 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2813;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2813 failed";
  (* Paths of depth 1 *)
  (* .b352 *)
  let actual = r.b352 in
  let expected = #1L in
  mark_test_run 2814;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 2814 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a352 = a3521; b352 = b3521 } { a352 = a3522; b352 = b3522 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3521 a3522 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b3521 b3522) in
  let next_r = { a352 = #((unbox_unit ()), "100"); b352 = #101L } in
  let r_expected = { a352 = #((unbox_unit ()), "0"); b352 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a352 *)
  r.a352 <- next_r.a352;
  let r_expected = { r_expected with a352 = next_r.a352 } in
  mark_test_run 2815;
  let test = eq r r_expected in
  if not test then failwithf "test 2815 failed";
  Gc.compact ();
  (* .b352 *)
  r.b352 <- next_r.b352;
  let r_expected = { r_expected with b352 = next_r.b352 } in
  mark_test_run 2816;
  let test = eq r r_expected in
  if not test then failwithf "test 2816 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a352; b352 } = r in
  let expected_a352 = #((unbox_unit ()), "100") in
  mark_test_run 2817;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a352 a352 in
  if not test then failwithf "test 2817 failed";
  let expected_b352 = #101L in
  mark_test_run 2818;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b352 b352 in
  if not test then failwithf "test 2818 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a352; b352 } = r in
  let expected_a352 = #((unbox_unit ()), "100") in
  mark_test_run 2819;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a352 a352 in
  if not test then failwithf "test 2819 failed";
  let expected_b352 = #101L in
  mark_test_run 2820;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b352 b352 in
  if not test then failwithf "test 2820 failed";

  ()
;;

let () =
  (********************************************)
  (*   t353 = { #(unit_u, string); int32# }   *)
  (********************************************)
  let r = { a353 = #((unbox_unit ()), "0"); b353 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a353 *)
  let actual = r.a353 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2821;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2821 failed";
  (* Paths of depth 1 *)
  (* .b353 *)
  let actual = r.b353 in
  let expected = #1l in
  mark_test_run 2822;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2822 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a353 = a3531; b353 = b3531 } { a353 = a3532; b353 = b3532 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3531 a3532 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3531 b3532) in
  let next_r = { a353 = #((unbox_unit ()), "100"); b353 = #101l } in
  let r_expected = { a353 = #((unbox_unit ()), "0"); b353 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a353 *)
  r.a353 <- next_r.a353;
  let r_expected = { r_expected with a353 = next_r.a353 } in
  mark_test_run 2823;
  let test = eq r r_expected in
  if not test then failwithf "test 2823 failed";
  Gc.compact ();
  (* .b353 *)
  r.b353 <- next_r.b353;
  let r_expected = { r_expected with b353 = next_r.b353 } in
  mark_test_run 2824;
  let test = eq r r_expected in
  if not test then failwithf "test 2824 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a353; b353 } = r in
  let expected_a353 = #((unbox_unit ()), "100") in
  mark_test_run 2825;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a353 a353 in
  if not test then failwithf "test 2825 failed";
  let expected_b353 = #101l in
  mark_test_run 2826;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b353 b353 in
  if not test then failwithf "test 2826 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a353; b353 } = r in
  let expected_a353 = #((unbox_unit ()), "100") in
  mark_test_run 2827;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a353 a353 in
  if not test then failwithf "test 2827 failed";
  let expected_b353 = #101l in
  mark_test_run 2828;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b353 b353 in
  if not test then failwithf "test 2828 failed";

  ()
;;

let () =
  (************************************************)
  (*   t354 = { #(unit_u, string); nativeint# }   *)
  (************************************************)
  let r = { a354 = #((unbox_unit ()), "0"); b354 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a354 *)
  let actual = r.a354 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2829;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2829 failed";
  (* Paths of depth 1 *)
  (* .b354 *)
  let actual = r.b354 in
  let expected = #1n in
  mark_test_run 2830;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 2830 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a354 = a3541; b354 = b3541 } { a354 = a3542; b354 = b3542 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3541 a3542 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b3541 b3542) in
  let next_r = { a354 = #((unbox_unit ()), "100"); b354 = #101n } in
  let r_expected = { a354 = #((unbox_unit ()), "0"); b354 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a354 *)
  r.a354 <- next_r.a354;
  let r_expected = { r_expected with a354 = next_r.a354 } in
  mark_test_run 2831;
  let test = eq r r_expected in
  if not test then failwithf "test 2831 failed";
  Gc.compact ();
  (* .b354 *)
  r.b354 <- next_r.b354;
  let r_expected = { r_expected with b354 = next_r.b354 } in
  mark_test_run 2832;
  let test = eq r r_expected in
  if not test then failwithf "test 2832 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a354; b354 } = r in
  let expected_a354 = #((unbox_unit ()), "100") in
  mark_test_run 2833;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a354 a354 in
  if not test then failwithf "test 2833 failed";
  let expected_b354 = #101n in
  mark_test_run 2834;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b354 b354 in
  if not test then failwithf "test 2834 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a354; b354 } = r in
  let expected_a354 = #((unbox_unit ()), "100") in
  mark_test_run 2835;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a354 a354 in
  if not test then failwithf "test 2835 failed";
  let expected_b354 = #101n in
  mark_test_run 2836;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b354 b354 in
  if not test then failwithf "test 2836 failed";

  ()
;;

let () =
  (********************************************)
  (*   t355 = { #(unit_u, string); unit_u }   *)
  (********************************************)
  let r = { a355 = #((unbox_unit ()), "0"); b355 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a355 *)
  let actual = r.a355 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2837;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2837 failed";
  (* Paths of depth 1 *)
  (* .b355 *)
  let actual = r.b355 in
  let expected = (unbox_unit ()) in
  mark_test_run 2838;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 2838 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a355 = a3551; b355 = b3551 } { a355 = a3552; b355 = b3552 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3551 a3552 && (fun _ _ -> true) b3551 b3552) in
  let next_r = { a355 = #((unbox_unit ()), "100"); b355 = (unbox_unit ()) } in
  let r_expected = { a355 = #((unbox_unit ()), "0"); b355 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a355 *)
  r.a355 <- next_r.a355;
  let r_expected = { r_expected with a355 = next_r.a355 } in
  mark_test_run 2839;
  let test = eq r r_expected in
  if not test then failwithf "test 2839 failed";
  Gc.compact ();
  (* .b355 *)
  r.b355 <- next_r.b355;
  let r_expected = { r_expected with b355 = next_r.b355 } in
  mark_test_run 2840;
  let test = eq r r_expected in
  if not test then failwithf "test 2840 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a355; b355 } = r in
  let expected_a355 = #((unbox_unit ()), "100") in
  mark_test_run 2841;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a355 a355 in
  if not test then failwithf "test 2841 failed";
  let expected_b355 = (unbox_unit ()) in
  mark_test_run 2842;
  let test = (fun _ _ -> true) expected_b355 b355 in
  if not test then failwithf "test 2842 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a355; b355 } = r in
  let expected_a355 = #((unbox_unit ()), "100") in
  mark_test_run 2843;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a355 a355 in
  if not test then failwithf "test 2843 failed";
  let expected_b355 = (unbox_unit ()) in
  mark_test_run 2844;
  let test = (fun _ _ -> true) expected_b355 b355 in
  if not test then failwithf "test 2844 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t356 = { #(unit_u, string); float }   *)
  (*******************************************)
  let r = { a356 = #((unbox_unit ()), "0"); b356 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a356 *)
  let actual = r.a356 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2845;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2845 failed";
  (* Paths of depth 1 *)
  (* .b356 *)
  let actual = r.b356 in
  let expected = 1. in
  mark_test_run 2846;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2846 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a356 = a3561; b356 = b3561 } { a356 = a3562; b356 = b3562 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3561 a3562 && (fun a b -> Float.equal (globalize a) (globalize b)) b3561 b3562) in
  let next_r = { a356 = #((unbox_unit ()), "100"); b356 = 101. } in
  let r_expected = { a356 = #((unbox_unit ()), "0"); b356 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a356 *)
  r.a356 <- next_r.a356;
  let r_expected = { r_expected with a356 = next_r.a356 } in
  mark_test_run 2847;
  let test = eq r r_expected in
  if not test then failwithf "test 2847 failed";
  Gc.compact ();
  (* .b356 *)
  r.b356 <- next_r.b356;
  let r_expected = { r_expected with b356 = next_r.b356 } in
  mark_test_run 2848;
  let test = eq r r_expected in
  if not test then failwithf "test 2848 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a356; b356 } = r in
  let expected_a356 = #((unbox_unit ()), "100") in
  mark_test_run 2849;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a356 a356 in
  if not test then failwithf "test 2849 failed";
  let expected_b356 = 101. in
  mark_test_run 2850;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b356 b356 in
  if not test then failwithf "test 2850 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a356; b356 } = r in
  let expected_a356 = #((unbox_unit ()), "100") in
  mark_test_run 2851;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a356 a356 in
  if not test then failwithf "test 2851 failed";
  let expected_b356 = 101. in
  mark_test_run 2852;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b356 b356 in
  if not test then failwithf "test 2852 failed";

  ()
;;

let () =
  (************************************************)
  (*   t357 = { #(unit_u, string); (| unit_u) }   *)
  (************************************************)
  let r = { a357 = #((unbox_unit ()), "0"); b357 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a357 *)
  let actual = r.a357 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2853;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2853 failed";
  (* Paths of depth 1 *)
  (* .b357 *)
  let actual = r.b357 in
  let expected = C15_0((unbox_unit ())) in
  mark_test_run 2854;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) actual expected in
  if not test then failwithf "test 2854 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a357 = a3571; b357 = b3571 } { a357 = a3572; b357 = b3572 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3571 a3572 && (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) b3571 b3572) in
  let next_r = { a357 = #((unbox_unit ()), "100"); b357 = C15_0((unbox_unit ())) } in
  let r_expected = { a357 = #((unbox_unit ()), "0"); b357 = C15_0((unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a357 *)
  r.a357 <- next_r.a357;
  let r_expected = { r_expected with a357 = next_r.a357 } in
  mark_test_run 2855;
  let test = eq r r_expected in
  if not test then failwithf "test 2855 failed";
  Gc.compact ();
  (* .b357 *)
  r.b357 <- next_r.b357;
  let r_expected = { r_expected with b357 = next_r.b357 } in
  mark_test_run 2856;
  let test = eq r r_expected in
  if not test then failwithf "test 2856 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a357; b357 } = r in
  let expected_a357 = #((unbox_unit ()), "100") in
  mark_test_run 2857;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a357 a357 in
  if not test then failwithf "test 2857 failed";
  let expected_b357 = C15_0((unbox_unit ())) in
  mark_test_run 2858;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b357 b357 in
  if not test then failwithf "test 2858 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a357; b357 } = r in
  let expected_a357 = #((unbox_unit ()), "100") in
  mark_test_run 2859;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a357 a357 in
  if not test then failwithf "test 2859 failed";
  let expected_b357 = C15_0((unbox_unit ())) in
  mark_test_run 2860;
  let test = (fun a b -> match a, b with C15_0(a0), C15_0(b0) -> (fun _ _ -> true) a0 b0) expected_b357 b357 in
  if not test then failwithf "test 2860 failed";

  ()
;;

let () =
  (**************************************************************************************)
  (*   t358 = { #(unit_u, string); (| unit_u | unit_u * unit_u | #(unit_u, unit_u)) }   *)
  (**************************************************************************************)
  let r = { a358 = #((unbox_unit ()), "0"); b358 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a358 *)
  let actual = r.a358 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2861;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2861 failed";
  (* Paths of depth 1 *)
  (* .b358 *)
  let actual = r.b358 in
  let expected = C17_1((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2862;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) actual expected in
  if not test then failwithf "test 2862 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a358 = a3581; b358 = b3581 } { a358 = a3582; b358 = b3582 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3581 a3582 && (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) b3581 b3582) in
  let next_r = { a358 = #((unbox_unit ()), "100"); b358 = C17_2(#((unbox_unit ()), (unbox_unit ()))) } in
  let r_expected = { a358 = #((unbox_unit ()), "0"); b358 = C17_1((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a358 *)
  r.a358 <- next_r.a358;
  let r_expected = { r_expected with a358 = next_r.a358 } in
  mark_test_run 2863;
  let test = eq r r_expected in
  if not test then failwithf "test 2863 failed";
  Gc.compact ();
  (* .b358 *)
  r.b358 <- next_r.b358;
  let r_expected = { r_expected with b358 = next_r.b358 } in
  mark_test_run 2864;
  let test = eq r r_expected in
  if not test then failwithf "test 2864 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a358; b358 } = r in
  let expected_a358 = #((unbox_unit ()), "100") in
  mark_test_run 2865;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a358 a358 in
  if not test then failwithf "test 2865 failed";
  let expected_b358 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 2866;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b358 b358 in
  if not test then failwithf "test 2866 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a358; b358 } = r in
  let expected_a358 = #((unbox_unit ()), "100") in
  mark_test_run 2867;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a358 a358 in
  if not test then failwithf "test 2867 failed";
  let expected_b358 = C17_2(#((unbox_unit ()), (unbox_unit ()))) in
  mark_test_run 2868;
  let test = (fun a b -> match a, b with C17_0(a0), C17_0(b0) -> (fun _ _ -> true) a0 b0 | C17_1(a0, a1), C17_1(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1 | C17_2(a0), C17_2(b0) -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) a0 b0 | _, _ -> false) expected_b358 b358 in
  if not test then failwithf "test 2868 failed";

  ()
;;

let () =
  (****************************************************)
  (*   t359 = { #(unit_u, string); #(unit_u, int) }   *)
  (****************************************************)
  let r = { a359 = #((unbox_unit ()), "0"); b359 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a359 *)
  let actual = r.a359 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2869;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2869 failed";
  (* Paths of depth 1 *)
  (* .b359 *)
  let actual = r.b359 in
  let expected = #((unbox_unit ()), 1) in
  mark_test_run 2870;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) actual expected in
  if not test then failwithf "test 2870 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a359 = a3591; b359 = b3591 } { a359 = a3592; b359 = b3592 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3591 a3592 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) b3591 b3592) in
  let next_r = { a359 = #((unbox_unit ()), "100"); b359 = #((unbox_unit ()), 101) } in
  let r_expected = { a359 = #((unbox_unit ()), "0"); b359 = #((unbox_unit ()), 1) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a359 *)
  r.a359 <- next_r.a359;
  let r_expected = { r_expected with a359 = next_r.a359 } in
  mark_test_run 2871;
  let test = eq r r_expected in
  if not test then failwithf "test 2871 failed";
  Gc.compact ();
  (* .b359 *)
  r.b359 <- next_r.b359;
  let r_expected = { r_expected with b359 = next_r.b359 } in
  mark_test_run 2872;
  let test = eq r r_expected in
  if not test then failwithf "test 2872 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a359; b359 } = r in
  let expected_a359 = #((unbox_unit ()), "100") in
  mark_test_run 2873;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a359 a359 in
  if not test then failwithf "test 2873 failed";
  let expected_b359 = #((unbox_unit ()), 101) in
  mark_test_run 2874;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b359 b359 in
  if not test then failwithf "test 2874 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a359; b359 } = r in
  let expected_a359 = #((unbox_unit ()), "100") in
  mark_test_run 2875;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a359 a359 in
  if not test then failwithf "test 2875 failed";
  let expected_b359 = #((unbox_unit ()), 101) in
  mark_test_run 2876;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int.equal a b) a1 b1) expected_b359 b359 in
  if not test then failwithf "test 2876 failed";

  ()
;;

let () =
  (*******************************************************)
  (*   t360 = { #(unit_u, string); #(unit_u, int64#) }   *)
  (*******************************************************)
  let r = { a360 = #((unbox_unit ()), "0"); b360 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a360 *)
  let actual = r.a360 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2877;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2877 failed";
  (* Paths of depth 1 *)
  (* .b360 *)
  let actual = r.b360 in
  let expected = #((unbox_unit ()), #1L) in
  mark_test_run 2878;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) actual expected in
  if not test then failwithf "test 2878 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a360 = a3601; b360 = b3601 } { a360 = a3602; b360 = b3602 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3601 a3602 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) b3601 b3602) in
  let next_r = { a360 = #((unbox_unit ()), "100"); b360 = #((unbox_unit ()), #101L) } in
  let r_expected = { a360 = #((unbox_unit ()), "0"); b360 = #((unbox_unit ()), #1L) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a360 *)
  r.a360 <- next_r.a360;
  let r_expected = { r_expected with a360 = next_r.a360 } in
  mark_test_run 2879;
  let test = eq r r_expected in
  if not test then failwithf "test 2879 failed";
  Gc.compact ();
  (* .b360 *)
  r.b360 <- next_r.b360;
  let r_expected = { r_expected with b360 = next_r.b360 } in
  mark_test_run 2880;
  let test = eq r r_expected in
  if not test then failwithf "test 2880 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a360; b360 } = r in
  let expected_a360 = #((unbox_unit ()), "100") in
  mark_test_run 2881;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a360 a360 in
  if not test then failwithf "test 2881 failed";
  let expected_b360 = #((unbox_unit ()), #101L) in
  mark_test_run 2882;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b360 b360 in
  if not test then failwithf "test 2882 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a360; b360 } = r in
  let expected_a360 = #((unbox_unit ()), "100") in
  mark_test_run 2883;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a360 a360 in
  if not test then failwithf "test 2883 failed";
  let expected_b360 = #((unbox_unit ()), #101L) in
  mark_test_run 2884;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1 b1) expected_b360 b360 in
  if not test then failwithf "test 2884 failed";

  ()
;;

let () =
  (*******************************************************)
  (*   t361 = { #(unit_u, string); #(unit_u, unit_u) }   *)
  (*******************************************************)
  let r = { a361 = #((unbox_unit ()), "0"); b361 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a361 *)
  let actual = r.a361 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2885;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2885 failed";
  (* Paths of depth 1 *)
  (* .b361 *)
  let actual = r.b361 in
  let expected = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2886;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) actual expected in
  if not test then failwithf "test 2886 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a361 = a3611; b361 = b3611 } { a361 = a3612; b361 = b3612 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3611 a3612 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) b3611 b3612) in
  let next_r = { a361 = #((unbox_unit ()), "100"); b361 = #((unbox_unit ()), (unbox_unit ())) } in
  let r_expected = { a361 = #((unbox_unit ()), "0"); b361 = #((unbox_unit ()), (unbox_unit ())) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a361 *)
  r.a361 <- next_r.a361;
  let r_expected = { r_expected with a361 = next_r.a361 } in
  mark_test_run 2887;
  let test = eq r r_expected in
  if not test then failwithf "test 2887 failed";
  Gc.compact ();
  (* .b361 *)
  r.b361 <- next_r.b361;
  let r_expected = { r_expected with b361 = next_r.b361 } in
  mark_test_run 2888;
  let test = eq r r_expected in
  if not test then failwithf "test 2888 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a361; b361 } = r in
  let expected_a361 = #((unbox_unit ()), "100") in
  mark_test_run 2889;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a361 a361 in
  if not test then failwithf "test 2889 failed";
  let expected_b361 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2890;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b361 b361 in
  if not test then failwithf "test 2890 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a361; b361 } = r in
  let expected_a361 = #((unbox_unit ()), "100") in
  mark_test_run 2891;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a361 a361 in
  if not test then failwithf "test 2891 failed";
  let expected_b361 = #((unbox_unit ()), (unbox_unit ())) in
  mark_test_run 2892;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun _ _ -> true) a1 b1) expected_b361 b361 in
  if not test then failwithf "test 2892 failed";

  ()
;;

let () =
  (*******************************************************)
  (*   t362 = { #(unit_u, string); #(unit_u, string) }   *)
  (*******************************************************)
  let r = { a362 = #((unbox_unit ()), "0"); b362 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a362 *)
  let actual = r.a362 in
  let expected = #((unbox_unit ()), "0") in
  mark_test_run 2893;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2893 failed";
  (* Paths of depth 1 *)
  (* .b362 *)
  let actual = r.b362 in
  let expected = #((unbox_unit ()), "1") in
  mark_test_run 2894;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) actual expected in
  if not test then failwithf "test 2894 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a362 = a3621; b362 = b3621 } { a362 = a3622; b362 = b3622 } -> (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) a3621 a3622 && (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) b3621 b3622) in
  let next_r = { a362 = #((unbox_unit ()), "100"); b362 = #((unbox_unit ()), "101") } in
  let r_expected = { a362 = #((unbox_unit ()), "0"); b362 = #((unbox_unit ()), "1") } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a362 *)
  r.a362 <- next_r.a362;
  let r_expected = { r_expected with a362 = next_r.a362 } in
  mark_test_run 2895;
  let test = eq r r_expected in
  if not test then failwithf "test 2895 failed";
  Gc.compact ();
  (* .b362 *)
  r.b362 <- next_r.b362;
  let r_expected = { r_expected with b362 = next_r.b362 } in
  mark_test_run 2896;
  let test = eq r r_expected in
  if not test then failwithf "test 2896 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a362; b362 } = r in
  let expected_a362 = #((unbox_unit ()), "100") in
  mark_test_run 2897;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a362 a362 in
  if not test then failwithf "test 2897 failed";
  let expected_b362 = #((unbox_unit ()), "101") in
  mark_test_run 2898;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b362 b362 in
  if not test then failwithf "test 2898 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a362; b362 } = r in
  let expected_a362 = #((unbox_unit ()), "100") in
  mark_test_run 2899;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_a362 a362 in
  if not test then failwithf "test 2899 failed";
  let expected_b362 = #((unbox_unit ()), "101") in
  mark_test_run 2900;
  let test = (fun #(a0, a1) #(b0, b1) -> (fun _ _ -> true) a0 b0 && (fun a b -> String.equal (globalize a) (globalize b)) a1 b1) expected_b362 b362 in
  if not test then failwithf "test 2900 failed";

  ()
;;

let () =
  (***************************)
  (*   t363 = { #{ int } }   *)
  (***************************)
  let r = { a363 = #{ a23 = 0 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a363 *)
  let actual = r.a363 in
  let expected = #{ a23 = 0 } in
  mark_test_run 2901;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 2901 failed";
  (* Paths of depth 2 *)
  (* .a363.#a23 *)
  let actual = r.a363.#a23 in
  let expected = 0 in
  mark_test_run 2902;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2902 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a363 = a3631 } { a363 = a3632 } -> (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) a3631 a3632) in
  let next_r = { a363 = #{ a23 = 100 } } in
  let r_expected = { a363 = #{ a23 = 0 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a363 *)
  r.a363 <- next_r.a363;
  let r_expected = { r_expected with a363 = next_r.a363 } in
  mark_test_run 2903;
  let test = eq r r_expected in
  if not test then failwithf "test 2903 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a363 = #{ a23 } } = r in
  let expected_a23 = 100 in
  mark_test_run 2904;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 2904 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a363 } = r in
  let expected_a363 = #{ a23 = 100 } in
  mark_test_run 2905;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) expected_a363 a363 in
  if not test then failwithf "test 2905 failed";

  ()
;;

let () =
  (********************************)
  (*   t364 = { #{ int }; int }   *)
  (********************************)
  let r = { a364 = #{ a23 = 0 }; b364 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a364 *)
  let actual = r.a364 in
  let expected = #{ a23 = 0 } in
  mark_test_run 2906;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 2906 failed";
  (* Paths of depth 2 *)
  (* .a364.#a23 *)
  let actual = r.a364.#a23 in
  let expected = 0 in
  mark_test_run 2907;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2907 failed";
  (* Paths of depth 1 *)
  (* .b364 *)
  let actual = r.b364 in
  let expected = 1 in
  mark_test_run 2908;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2908 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a364 = a3641; b364 = b3641 } { a364 = a3642; b364 = b3642 } -> (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) a3641 a3642 && (fun a b -> Int.equal a b) b3641 b3642) in
  let next_r = { a364 = #{ a23 = 100 }; b364 = 101 } in
  let r_expected = { a364 = #{ a23 = 0 }; b364 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a364 *)
  r.a364 <- next_r.a364;
  let r_expected = { r_expected with a364 = next_r.a364 } in
  mark_test_run 2909;
  let test = eq r r_expected in
  if not test then failwithf "test 2909 failed";
  Gc.compact ();
  (* .b364 *)
  r.b364 <- next_r.b364;
  let r_expected = { r_expected with b364 = next_r.b364 } in
  mark_test_run 2910;
  let test = eq r r_expected in
  if not test then failwithf "test 2910 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a364 = #{ a23 }; b364 } = r in
  let expected_a23 = 100 in
  mark_test_run 2911;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 2911 failed";
  let expected_b364 = 101 in
  mark_test_run 2912;
  let test = (fun a b -> Int.equal a b) expected_b364 b364 in
  if not test then failwithf "test 2912 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a364; b364 } = r in
  let expected_a364 = #{ a23 = 100 } in
  mark_test_run 2913;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) expected_a364 a364 in
  if not test then failwithf "test 2913 failed";
  let expected_b364 = 101 in
  mark_test_run 2914;
  let test = (fun a b -> Int.equal a b) expected_b364 b364 in
  if not test then failwithf "test 2914 failed";

  ()
;;

let () =
  (***********************************)
  (*   t365 = { #{ int }; int32# }   *)
  (***********************************)
  let r = { a365 = #{ a23 = 0 }; b365 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a365 *)
  let actual = r.a365 in
  let expected = #{ a23 = 0 } in
  mark_test_run 2915;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 2915 failed";
  (* Paths of depth 2 *)
  (* .a365.#a23 *)
  let actual = r.a365.#a23 in
  let expected = 0 in
  mark_test_run 2916;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2916 failed";
  (* Paths of depth 1 *)
  (* .b365 *)
  let actual = r.b365 in
  let expected = #1l in
  mark_test_run 2917;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2917 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a365 = a3651; b365 = b3651 } { a365 = a3652; b365 = b3652 } -> (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) a3651 a3652 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3651 b3652) in
  let next_r = { a365 = #{ a23 = 100 }; b365 = #101l } in
  let r_expected = { a365 = #{ a23 = 0 }; b365 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a365 *)
  r.a365 <- next_r.a365;
  let r_expected = { r_expected with a365 = next_r.a365 } in
  mark_test_run 2918;
  let test = eq r r_expected in
  if not test then failwithf "test 2918 failed";
  Gc.compact ();
  (* .b365 *)
  r.b365 <- next_r.b365;
  let r_expected = { r_expected with b365 = next_r.b365 } in
  mark_test_run 2919;
  let test = eq r r_expected in
  if not test then failwithf "test 2919 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a365 = #{ a23 }; b365 } = r in
  let expected_a23 = 100 in
  mark_test_run 2920;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 2920 failed";
  let expected_b365 = #101l in
  mark_test_run 2921;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b365 b365 in
  if not test then failwithf "test 2921 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a365; b365 } = r in
  let expected_a365 = #{ a23 = 100 } in
  mark_test_run 2922;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) expected_a365 a365 in
  if not test then failwithf "test 2922 failed";
  let expected_b365 = #101l in
  mark_test_run 2923;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b365 b365 in
  if not test then failwithf "test 2923 failed";

  ()
;;

let () =
  (**********************************)
  (*   t366 = { #{ int }; float }   *)
  (**********************************)
  let r = { a366 = #{ a23 = 0 }; b366 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a366 *)
  let actual = r.a366 in
  let expected = #{ a23 = 0 } in
  mark_test_run 2924;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) actual expected in
  if not test then failwithf "test 2924 failed";
  (* Paths of depth 2 *)
  (* .a366.#a23 *)
  let actual = r.a366.#a23 in
  let expected = 0 in
  mark_test_run 2925;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2925 failed";
  (* Paths of depth 1 *)
  (* .b366 *)
  let actual = r.b366 in
  let expected = 1. in
  mark_test_run 2926;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2926 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a366 = a3661; b366 = b3661 } { a366 = a3662; b366 = b3662 } -> (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) a3661 a3662 && (fun a b -> Float.equal (globalize a) (globalize b)) b3661 b3662) in
  let next_r = { a366 = #{ a23 = 100 }; b366 = 101. } in
  let r_expected = { a366 = #{ a23 = 0 }; b366 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a366 *)
  r.a366 <- next_r.a366;
  let r_expected = { r_expected with a366 = next_r.a366 } in
  mark_test_run 2927;
  let test = eq r r_expected in
  if not test then failwithf "test 2927 failed";
  Gc.compact ();
  (* .b366 *)
  r.b366 <- next_r.b366;
  let r_expected = { r_expected with b366 = next_r.b366 } in
  mark_test_run 2928;
  let test = eq r r_expected in
  if not test then failwithf "test 2928 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a366 = #{ a23 }; b366 } = r in
  let expected_a23 = 100 in
  mark_test_run 2929;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 2929 failed";
  let expected_b366 = 101. in
  mark_test_run 2930;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b366 b366 in
  if not test then failwithf "test 2930 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a366; b366 } = r in
  let expected_a366 = #{ a23 = 100 } in
  mark_test_run 2931;
  let test = (fun #{ a23 = a231 } #{ a23 = a232 } -> (fun a b -> Int.equal a b) a231 a232) expected_a366 a366 in
  if not test then failwithf "test 2931 failed";
  let expected_b366 = 101. in
  mark_test_run 2932;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b366 b366 in
  if not test then failwithf "test 2932 failed";

  ()
;;

let () =
  (********************************)
  (*   t367 = { #{ int; int } }   *)
  (********************************)
  let r = { a367 = #{ a25 = 0; b25 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a367 *)
  let actual = r.a367 in
  let expected = #{ a25 = 0; b25 = 1 } in
  mark_test_run 2933;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 2933 failed";
  (* Paths of depth 2 *)
  (* .a367.#a25 *)
  let actual = r.a367.#a25 in
  let expected = 0 in
  mark_test_run 2934;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2934 failed";
  (* .a367.#b25 *)
  let actual = r.a367.#b25 in
  let expected = 1 in
  mark_test_run 2935;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2935 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a367 = a3671 } { a367 = a3672 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a3671 a3672) in
  let next_r = { a367 = #{ a25 = 100; b25 = 101 } } in
  let r_expected = { a367 = #{ a25 = 0; b25 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a367 *)
  r.a367 <- next_r.a367;
  let r_expected = { r_expected with a367 = next_r.a367 } in
  mark_test_run 2936;
  let test = eq r r_expected in
  if not test then failwithf "test 2936 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a367 = #{ a25; b25 } } = r in
  let expected_a25 = 100 in
  mark_test_run 2937;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 2937 failed";
  let expected_b25 = 101 in
  mark_test_run 2938;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 2938 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a367 } = r in
  let expected_a367 = #{ a25 = 100; b25 = 101 } in
  mark_test_run 2939;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) expected_a367 a367 in
  if not test then failwithf "test 2939 failed";

  ()
;;

let () =
  (*************************************)
  (*   t368 = { #{ int; int }; int }   *)
  (*************************************)
  let r = { a368 = #{ a25 = 0; b25 = 1 }; b368 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a368 *)
  let actual = r.a368 in
  let expected = #{ a25 = 0; b25 = 1 } in
  mark_test_run 2940;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 2940 failed";
  (* Paths of depth 2 *)
  (* .a368.#a25 *)
  let actual = r.a368.#a25 in
  let expected = 0 in
  mark_test_run 2941;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2941 failed";
  (* .a368.#b25 *)
  let actual = r.a368.#b25 in
  let expected = 1 in
  mark_test_run 2942;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2942 failed";
  (* Paths of depth 1 *)
  (* .b368 *)
  let actual = r.b368 in
  let expected = 2 in
  mark_test_run 2943;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2943 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a368 = a3681; b368 = b3681 } { a368 = a3682; b368 = b3682 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a3681 a3682 && (fun a b -> Int.equal a b) b3681 b3682) in
  let next_r = { a368 = #{ a25 = 100; b25 = 101 }; b368 = 102 } in
  let r_expected = { a368 = #{ a25 = 0; b25 = 1 }; b368 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a368 *)
  r.a368 <- next_r.a368;
  let r_expected = { r_expected with a368 = next_r.a368 } in
  mark_test_run 2944;
  let test = eq r r_expected in
  if not test then failwithf "test 2944 failed";
  Gc.compact ();
  (* .b368 *)
  r.b368 <- next_r.b368;
  let r_expected = { r_expected with b368 = next_r.b368 } in
  mark_test_run 2945;
  let test = eq r r_expected in
  if not test then failwithf "test 2945 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a368 = #{ a25; b25 }; b368 } = r in
  let expected_a25 = 100 in
  mark_test_run 2946;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 2946 failed";
  let expected_b25 = 101 in
  mark_test_run 2947;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 2947 failed";
  let expected_b368 = 102 in
  mark_test_run 2948;
  let test = (fun a b -> Int.equal a b) expected_b368 b368 in
  if not test then failwithf "test 2948 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a368; b368 } = r in
  let expected_a368 = #{ a25 = 100; b25 = 101 } in
  mark_test_run 2949;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) expected_a368 a368 in
  if not test then failwithf "test 2949 failed";
  let expected_b368 = 102 in
  mark_test_run 2950;
  let test = (fun a b -> Int.equal a b) expected_b368 b368 in
  if not test then failwithf "test 2950 failed";

  ()
;;

let () =
  (****************************************)
  (*   t369 = { #{ int; int }; int32# }   *)
  (****************************************)
  let r = { a369 = #{ a25 = 0; b25 = 1 }; b369 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a369 *)
  let actual = r.a369 in
  let expected = #{ a25 = 0; b25 = 1 } in
  mark_test_run 2951;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 2951 failed";
  (* Paths of depth 2 *)
  (* .a369.#a25 *)
  let actual = r.a369.#a25 in
  let expected = 0 in
  mark_test_run 2952;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2952 failed";
  (* .a369.#b25 *)
  let actual = r.a369.#b25 in
  let expected = 1 in
  mark_test_run 2953;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2953 failed";
  (* Paths of depth 1 *)
  (* .b369 *)
  let actual = r.b369 in
  let expected = #2l in
  mark_test_run 2954;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2954 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a369 = a3691; b369 = b3691 } { a369 = a3692; b369 = b3692 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a3691 a3692 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3691 b3692) in
  let next_r = { a369 = #{ a25 = 100; b25 = 101 }; b369 = #102l } in
  let r_expected = { a369 = #{ a25 = 0; b25 = 1 }; b369 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a369 *)
  r.a369 <- next_r.a369;
  let r_expected = { r_expected with a369 = next_r.a369 } in
  mark_test_run 2955;
  let test = eq r r_expected in
  if not test then failwithf "test 2955 failed";
  Gc.compact ();
  (* .b369 *)
  r.b369 <- next_r.b369;
  let r_expected = { r_expected with b369 = next_r.b369 } in
  mark_test_run 2956;
  let test = eq r r_expected in
  if not test then failwithf "test 2956 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a369 = #{ a25; b25 }; b369 } = r in
  let expected_a25 = 100 in
  mark_test_run 2957;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 2957 failed";
  let expected_b25 = 101 in
  mark_test_run 2958;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 2958 failed";
  let expected_b369 = #102l in
  mark_test_run 2959;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b369 b369 in
  if not test then failwithf "test 2959 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a369; b369 } = r in
  let expected_a369 = #{ a25 = 100; b25 = 101 } in
  mark_test_run 2960;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) expected_a369 a369 in
  if not test then failwithf "test 2960 failed";
  let expected_b369 = #102l in
  mark_test_run 2961;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b369 b369 in
  if not test then failwithf "test 2961 failed";

  ()
;;

let () =
  (***************************************)
  (*   t370 = { #{ int; int }; float }   *)
  (***************************************)
  let r = { a370 = #{ a25 = 0; b25 = 1 }; b370 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a370 *)
  let actual = r.a370 in
  let expected = #{ a25 = 0; b25 = 1 } in
  mark_test_run 2962;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 2962 failed";
  (* Paths of depth 2 *)
  (* .a370.#a25 *)
  let actual = r.a370.#a25 in
  let expected = 0 in
  mark_test_run 2963;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2963 failed";
  (* .a370.#b25 *)
  let actual = r.a370.#b25 in
  let expected = 1 in
  mark_test_run 2964;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2964 failed";
  (* Paths of depth 1 *)
  (* .b370 *)
  let actual = r.b370 in
  let expected = 2. in
  mark_test_run 2965;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2965 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a370 = a3701; b370 = b3701 } { a370 = a3702; b370 = b3702 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a3701 a3702 && (fun a b -> Float.equal (globalize a) (globalize b)) b3701 b3702) in
  let next_r = { a370 = #{ a25 = 100; b25 = 101 }; b370 = 102. } in
  let r_expected = { a370 = #{ a25 = 0; b25 = 1 }; b370 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a370 *)
  r.a370 <- next_r.a370;
  let r_expected = { r_expected with a370 = next_r.a370 } in
  mark_test_run 2966;
  let test = eq r r_expected in
  if not test then failwithf "test 2966 failed";
  Gc.compact ();
  (* .b370 *)
  r.b370 <- next_r.b370;
  let r_expected = { r_expected with b370 = next_r.b370 } in
  mark_test_run 2967;
  let test = eq r r_expected in
  if not test then failwithf "test 2967 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a370 = #{ a25; b25 }; b370 } = r in
  let expected_a25 = 100 in
  mark_test_run 2968;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 2968 failed";
  let expected_b25 = 101 in
  mark_test_run 2969;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 2969 failed";
  let expected_b370 = 102. in
  mark_test_run 2970;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b370 b370 in
  if not test then failwithf "test 2970 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a370; b370 } = r in
  let expected_a370 = #{ a25 = 100; b25 = 101 } in
  mark_test_run 2971;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) expected_a370 a370 in
  if not test then failwithf "test 2971 failed";
  let expected_b370 = 102. in
  mark_test_run 2972;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b370 b370 in
  if not test then failwithf "test 2972 failed";

  ()
;;

let () =
  (***********************************)
  (*   t371 = { #{ int; int32# } }   *)
  (***********************************)
  let r = { a371 = #{ a27 = 0; b27 = #1l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a371 *)
  let actual = r.a371 in
  let expected = #{ a27 = 0; b27 = #1l } in
  mark_test_run 2973;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 2973 failed";
  (* Paths of depth 2 *)
  (* .a371.#a27 *)
  let actual = r.a371.#a27 in
  let expected = 0 in
  mark_test_run 2974;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2974 failed";
  (* .a371.#b27 *)
  let actual = r.a371.#b27 in
  let expected = #1l in
  mark_test_run 2975;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2975 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a371 = a3711 } { a371 = a3712 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a3711 a3712) in
  let next_r = { a371 = #{ a27 = 100; b27 = #101l } } in
  let r_expected = { a371 = #{ a27 = 0; b27 = #1l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a371 *)
  r.a371 <- next_r.a371;
  let r_expected = { r_expected with a371 = next_r.a371 } in
  mark_test_run 2976;
  let test = eq r r_expected in
  if not test then failwithf "test 2976 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a371 = #{ a27; b27 } } = r in
  let expected_a27 = 100 in
  mark_test_run 2977;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 2977 failed";
  let expected_b27 = #101l in
  mark_test_run 2978;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 2978 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a371 } = r in
  let expected_a371 = #{ a27 = 100; b27 = #101l } in
  mark_test_run 2979;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) expected_a371 a371 in
  if not test then failwithf "test 2979 failed";

  ()
;;

let () =
  (****************************************)
  (*   t372 = { #{ int; int32# }; int }   *)
  (****************************************)
  let r = { a372 = #{ a27 = 0; b27 = #1l }; b372 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a372 *)
  let actual = r.a372 in
  let expected = #{ a27 = 0; b27 = #1l } in
  mark_test_run 2980;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 2980 failed";
  (* Paths of depth 2 *)
  (* .a372.#a27 *)
  let actual = r.a372.#a27 in
  let expected = 0 in
  mark_test_run 2981;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2981 failed";
  (* .a372.#b27 *)
  let actual = r.a372.#b27 in
  let expected = #1l in
  mark_test_run 2982;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2982 failed";
  (* Paths of depth 1 *)
  (* .b372 *)
  let actual = r.b372 in
  let expected = 2 in
  mark_test_run 2983;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2983 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a372 = a3721; b372 = b3721 } { a372 = a3722; b372 = b3722 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a3721 a3722 && (fun a b -> Int.equal a b) b3721 b3722) in
  let next_r = { a372 = #{ a27 = 100; b27 = #101l }; b372 = 102 } in
  let r_expected = { a372 = #{ a27 = 0; b27 = #1l }; b372 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a372 *)
  r.a372 <- next_r.a372;
  let r_expected = { r_expected with a372 = next_r.a372 } in
  mark_test_run 2984;
  let test = eq r r_expected in
  if not test then failwithf "test 2984 failed";
  Gc.compact ();
  (* .b372 *)
  r.b372 <- next_r.b372;
  let r_expected = { r_expected with b372 = next_r.b372 } in
  mark_test_run 2985;
  let test = eq r r_expected in
  if not test then failwithf "test 2985 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a372 = #{ a27; b27 }; b372 } = r in
  let expected_a27 = 100 in
  mark_test_run 2986;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 2986 failed";
  let expected_b27 = #101l in
  mark_test_run 2987;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 2987 failed";
  let expected_b372 = 102 in
  mark_test_run 2988;
  let test = (fun a b -> Int.equal a b) expected_b372 b372 in
  if not test then failwithf "test 2988 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a372; b372 } = r in
  let expected_a372 = #{ a27 = 100; b27 = #101l } in
  mark_test_run 2989;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) expected_a372 a372 in
  if not test then failwithf "test 2989 failed";
  let expected_b372 = 102 in
  mark_test_run 2990;
  let test = (fun a b -> Int.equal a b) expected_b372 b372 in
  if not test then failwithf "test 2990 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t373 = { #{ int; int32# }; int32# }   *)
  (*******************************************)
  let r = { a373 = #{ a27 = 0; b27 = #1l }; b373 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a373 *)
  let actual = r.a373 in
  let expected = #{ a27 = 0; b27 = #1l } in
  mark_test_run 2991;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 2991 failed";
  (* Paths of depth 2 *)
  (* .a373.#a27 *)
  let actual = r.a373.#a27 in
  let expected = 0 in
  mark_test_run 2992;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2992 failed";
  (* .a373.#b27 *)
  let actual = r.a373.#b27 in
  let expected = #1l in
  mark_test_run 2993;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2993 failed";
  (* Paths of depth 1 *)
  (* .b373 *)
  let actual = r.b373 in
  let expected = #2l in
  mark_test_run 2994;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2994 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a373 = a3731; b373 = b3731 } { a373 = a3732; b373 = b3732 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a3731 a3732 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3731 b3732) in
  let next_r = { a373 = #{ a27 = 100; b27 = #101l }; b373 = #102l } in
  let r_expected = { a373 = #{ a27 = 0; b27 = #1l }; b373 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a373 *)
  r.a373 <- next_r.a373;
  let r_expected = { r_expected with a373 = next_r.a373 } in
  mark_test_run 2995;
  let test = eq r r_expected in
  if not test then failwithf "test 2995 failed";
  Gc.compact ();
  (* .b373 *)
  r.b373 <- next_r.b373;
  let r_expected = { r_expected with b373 = next_r.b373 } in
  mark_test_run 2996;
  let test = eq r r_expected in
  if not test then failwithf "test 2996 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a373 = #{ a27; b27 }; b373 } = r in
  let expected_a27 = 100 in
  mark_test_run 2997;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 2997 failed";
  let expected_b27 = #101l in
  mark_test_run 2998;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 2998 failed";
  let expected_b373 = #102l in
  mark_test_run 2999;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b373 b373 in
  if not test then failwithf "test 2999 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a373; b373 } = r in
  let expected_a373 = #{ a27 = 100; b27 = #101l } in
  mark_test_run 3000;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) expected_a373 a373 in
  if not test then failwithf "test 3000 failed";
  let expected_b373 = #102l in
  mark_test_run 3001;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b373 b373 in
  if not test then failwithf "test 3001 failed";

  ()
;;

let () =
  (**********************************)
  (*   t374 = { #{ int; float } }   *)
  (**********************************)
  let r = { a374 = #{ a29 = 0; b29 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a374 *)
  let actual = r.a374 in
  let expected = #{ a29 = 0; b29 = 1. } in
  mark_test_run 3002;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 3002 failed";
  (* Paths of depth 2 *)
  (* .a374.#a29 *)
  let actual = r.a374.#a29 in
  let expected = 0 in
  mark_test_run 3003;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3003 failed";
  (* .a374.#b29 *)
  let actual = r.a374.#b29 in
  let expected = 1. in
  mark_test_run 3004;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3004 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a374 = a3741 } { a374 = a3742 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a3741 a3742) in
  let next_r = { a374 = #{ a29 = 100; b29 = 101. } } in
  let r_expected = { a374 = #{ a29 = 0; b29 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a374 *)
  r.a374 <- next_r.a374;
  let r_expected = { r_expected with a374 = next_r.a374 } in
  mark_test_run 3005;
  let test = eq r r_expected in
  if not test then failwithf "test 3005 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a374 = #{ a29; b29 } } = r in
  let expected_a29 = 100 in
  mark_test_run 3006;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 3006 failed";
  let expected_b29 = 101. in
  mark_test_run 3007;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 3007 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a374 } = r in
  let expected_a374 = #{ a29 = 100; b29 = 101. } in
  mark_test_run 3008;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) expected_a374 a374 in
  if not test then failwithf "test 3008 failed";

  ()
;;

let () =
  (***************************************)
  (*   t375 = { #{ int; float }; int }   *)
  (***************************************)
  let r = { a375 = #{ a29 = 0; b29 = 1. }; b375 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a375 *)
  let actual = r.a375 in
  let expected = #{ a29 = 0; b29 = 1. } in
  mark_test_run 3009;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 3009 failed";
  (* Paths of depth 2 *)
  (* .a375.#a29 *)
  let actual = r.a375.#a29 in
  let expected = 0 in
  mark_test_run 3010;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3010 failed";
  (* .a375.#b29 *)
  let actual = r.a375.#b29 in
  let expected = 1. in
  mark_test_run 3011;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3011 failed";
  (* Paths of depth 1 *)
  (* .b375 *)
  let actual = r.b375 in
  let expected = 2 in
  mark_test_run 3012;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3012 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a375 = a3751; b375 = b3751 } { a375 = a3752; b375 = b3752 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a3751 a3752 && (fun a b -> Int.equal a b) b3751 b3752) in
  let next_r = { a375 = #{ a29 = 100; b29 = 101. }; b375 = 102 } in
  let r_expected = { a375 = #{ a29 = 0; b29 = 1. }; b375 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a375 *)
  r.a375 <- next_r.a375;
  let r_expected = { r_expected with a375 = next_r.a375 } in
  mark_test_run 3013;
  let test = eq r r_expected in
  if not test then failwithf "test 3013 failed";
  Gc.compact ();
  (* .b375 *)
  r.b375 <- next_r.b375;
  let r_expected = { r_expected with b375 = next_r.b375 } in
  mark_test_run 3014;
  let test = eq r r_expected in
  if not test then failwithf "test 3014 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a375 = #{ a29; b29 }; b375 } = r in
  let expected_a29 = 100 in
  mark_test_run 3015;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 3015 failed";
  let expected_b29 = 101. in
  mark_test_run 3016;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 3016 failed";
  let expected_b375 = 102 in
  mark_test_run 3017;
  let test = (fun a b -> Int.equal a b) expected_b375 b375 in
  if not test then failwithf "test 3017 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a375; b375 } = r in
  let expected_a375 = #{ a29 = 100; b29 = 101. } in
  mark_test_run 3018;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) expected_a375 a375 in
  if not test then failwithf "test 3018 failed";
  let expected_b375 = 102 in
  mark_test_run 3019;
  let test = (fun a b -> Int.equal a b) expected_b375 b375 in
  if not test then failwithf "test 3019 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t376 = { #{ int; float }; float }   *)
  (*****************************************)
  let r = { a376 = #{ a29 = 0; b29 = 1. }; b376 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a376 *)
  let actual = r.a376 in
  let expected = #{ a29 = 0; b29 = 1. } in
  mark_test_run 3020;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 3020 failed";
  (* Paths of depth 2 *)
  (* .a376.#a29 *)
  let actual = r.a376.#a29 in
  let expected = 0 in
  mark_test_run 3021;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3021 failed";
  (* .a376.#b29 *)
  let actual = r.a376.#b29 in
  let expected = 1. in
  mark_test_run 3022;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3022 failed";
  (* Paths of depth 1 *)
  (* .b376 *)
  let actual = r.b376 in
  let expected = 2. in
  mark_test_run 3023;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3023 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a376 = a3761; b376 = b3761 } { a376 = a3762; b376 = b3762 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a3761 a3762 && (fun a b -> Float.equal (globalize a) (globalize b)) b3761 b3762) in
  let next_r = { a376 = #{ a29 = 100; b29 = 101. }; b376 = 102. } in
  let r_expected = { a376 = #{ a29 = 0; b29 = 1. }; b376 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a376 *)
  r.a376 <- next_r.a376;
  let r_expected = { r_expected with a376 = next_r.a376 } in
  mark_test_run 3024;
  let test = eq r r_expected in
  if not test then failwithf "test 3024 failed";
  Gc.compact ();
  (* .b376 *)
  r.b376 <- next_r.b376;
  let r_expected = { r_expected with b376 = next_r.b376 } in
  mark_test_run 3025;
  let test = eq r r_expected in
  if not test then failwithf "test 3025 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a376 = #{ a29; b29 }; b376 } = r in
  let expected_a29 = 100 in
  mark_test_run 3026;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 3026 failed";
  let expected_b29 = 101. in
  mark_test_run 3027;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 3027 failed";
  let expected_b376 = 102. in
  mark_test_run 3028;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b376 b376 in
  if not test then failwithf "test 3028 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a376; b376 } = r in
  let expected_a376 = #{ a29 = 100; b29 = 101. } in
  mark_test_run 3029;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) expected_a376 a376 in
  if not test then failwithf "test 3029 failed";
  let expected_b376 = 102. in
  mark_test_run 3030;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b376 b376 in
  if not test then failwithf "test 3030 failed";

  ()
;;

let () =
  (******************************************)
  (*   t378 = { #{ int; #{ int; int } } }   *)
  (******************************************)
  let r = { a378 = #{ a377 = 0; b377 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a378 *)
  let actual = r.a378 in
  let expected = #{ a377 = 0; b377 = #{ a25 = 1; b25 = 2 } } in
  mark_test_run 3031;
  let test = (fun #{ a377 = a3771; b377 = b3771 } #{ a377 = a3772; b377 = b3772 } -> (fun a b -> Int.equal a b) a3771 a3772 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b3771 b3772) actual expected in
  if not test then failwithf "test 3031 failed";
  (* Paths of depth 2 *)
  (* .a378.#a377 *)
  let actual = r.a378.#a377 in
  let expected = 0 in
  mark_test_run 3032;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3032 failed";
  (* .a378.#b377 *)
  let actual = r.a378.#b377 in
  let expected = #{ a25 = 1; b25 = 2 } in
  mark_test_run 3033;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 3033 failed";
  (* Paths of depth 3 *)
  (* .a378.#b377.#a25 *)
  let actual = r.a378.#b377.#a25 in
  let expected = 1 in
  mark_test_run 3034;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3034 failed";
  (* .a378.#b377.#b25 *)
  let actual = r.a378.#b377.#b25 in
  let expected = 2 in
  mark_test_run 3035;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3035 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a378 = a3781 } { a378 = a3782 } -> (fun #{ a377 = a3771; b377 = b3771 } #{ a377 = a3772; b377 = b3772 } -> (fun a b -> Int.equal a b) a3771 a3772 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b3771 b3772) a3781 a3782) in
  let next_r = { a378 = #{ a377 = 100; b377 = #{ a25 = 101; b25 = 102 } } } in
  let r_expected = { a378 = #{ a377 = 0; b377 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a378 *)
  r.a378 <- next_r.a378;
  let r_expected = { r_expected with a378 = next_r.a378 } in
  mark_test_run 3036;
  let test = eq r r_expected in
  if not test then failwithf "test 3036 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a378 = #{ a377; b377 = #{ a25; b25 } } } = r in
  let expected_a377 = 100 in
  mark_test_run 3037;
  let test = (fun a b -> Int.equal a b) expected_a377 a377 in
  if not test then failwithf "test 3037 failed";
  let expected_a25 = 101 in
  mark_test_run 3038;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 3038 failed";
  let expected_b25 = 102 in
  mark_test_run 3039;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 3039 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a378 } = r in
  let expected_a378 = #{ a377 = 100; b377 = #{ a25 = 101; b25 = 102 } } in
  mark_test_run 3040;
  let test = (fun #{ a377 = a3771; b377 = b3771 } #{ a377 = a3772; b377 = b3772 } -> (fun a b -> Int.equal a b) a3771 a3772 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b3771 b3772) expected_a378 a378 in
  if not test then failwithf "test 3040 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t380 = { #{ int; #{ int; int32# } } }   *)
  (*********************************************)
  let r = { a380 = #{ a379 = 0; b379 = #{ a27 = 1; b27 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a380 *)
  let actual = r.a380 in
  let expected = #{ a379 = 0; b379 = #{ a27 = 1; b27 = #2l } } in
  mark_test_run 3041;
  let test = (fun #{ a379 = a3791; b379 = b3791 } #{ a379 = a3792; b379 = b3792 } -> (fun a b -> Int.equal a b) a3791 a3792 && (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) b3791 b3792) actual expected in
  if not test then failwithf "test 3041 failed";
  (* Paths of depth 2 *)
  (* .a380.#a379 *)
  let actual = r.a380.#a379 in
  let expected = 0 in
  mark_test_run 3042;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3042 failed";
  (* .a380.#b379 *)
  let actual = r.a380.#b379 in
  let expected = #{ a27 = 1; b27 = #2l } in
  mark_test_run 3043;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 3043 failed";
  (* Paths of depth 3 *)
  (* .a380.#b379.#a27 *)
  let actual = r.a380.#b379.#a27 in
  let expected = 1 in
  mark_test_run 3044;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3044 failed";
  (* .a380.#b379.#b27 *)
  let actual = r.a380.#b379.#b27 in
  let expected = #2l in
  mark_test_run 3045;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3045 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a380 = a3801 } { a380 = a3802 } -> (fun #{ a379 = a3791; b379 = b3791 } #{ a379 = a3792; b379 = b3792 } -> (fun a b -> Int.equal a b) a3791 a3792 && (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) b3791 b3792) a3801 a3802) in
  let next_r = { a380 = #{ a379 = 100; b379 = #{ a27 = 101; b27 = #102l } } } in
  let r_expected = { a380 = #{ a379 = 0; b379 = #{ a27 = 1; b27 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a380 *)
  r.a380 <- next_r.a380;
  let r_expected = { r_expected with a380 = next_r.a380 } in
  mark_test_run 3046;
  let test = eq r r_expected in
  if not test then failwithf "test 3046 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a380 = #{ a379; b379 = #{ a27; b27 } } } = r in
  let expected_a379 = 100 in
  mark_test_run 3047;
  let test = (fun a b -> Int.equal a b) expected_a379 a379 in
  if not test then failwithf "test 3047 failed";
  let expected_a27 = 101 in
  mark_test_run 3048;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 3048 failed";
  let expected_b27 = #102l in
  mark_test_run 3049;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 3049 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a380 } = r in
  let expected_a380 = #{ a379 = 100; b379 = #{ a27 = 101; b27 = #102l } } in
  mark_test_run 3050;
  let test = (fun #{ a379 = a3791; b379 = b3791 } #{ a379 = a3792; b379 = b3792 } -> (fun a b -> Int.equal a b) a3791 a3792 && (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) b3791 b3792) expected_a380 a380 in
  if not test then failwithf "test 3050 failed";

  ()
;;

let () =
  (********************************************)
  (*   t382 = { #{ int; #{ int; float } } }   *)
  (********************************************)
  let r = { a382 = #{ a381 = 0; b381 = #{ a29 = 1; b29 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a382 *)
  let actual = r.a382 in
  let expected = #{ a381 = 0; b381 = #{ a29 = 1; b29 = 2. } } in
  mark_test_run 3051;
  let test = (fun #{ a381 = a3811; b381 = b3811 } #{ a381 = a3812; b381 = b3812 } -> (fun a b -> Int.equal a b) a3811 a3812 && (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) b3811 b3812) actual expected in
  if not test then failwithf "test 3051 failed";
  (* Paths of depth 2 *)
  (* .a382.#a381 *)
  let actual = r.a382.#a381 in
  let expected = 0 in
  mark_test_run 3052;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3052 failed";
  (* .a382.#b381 *)
  let actual = r.a382.#b381 in
  let expected = #{ a29 = 1; b29 = 2. } in
  mark_test_run 3053;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 3053 failed";
  (* Paths of depth 3 *)
  (* .a382.#b381.#a29 *)
  let actual = r.a382.#b381.#a29 in
  let expected = 1 in
  mark_test_run 3054;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3054 failed";
  (* .a382.#b381.#b29 *)
  let actual = r.a382.#b381.#b29 in
  let expected = 2. in
  mark_test_run 3055;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3055 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a382 = a3821 } { a382 = a3822 } -> (fun #{ a381 = a3811; b381 = b3811 } #{ a381 = a3812; b381 = b3812 } -> (fun a b -> Int.equal a b) a3811 a3812 && (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) b3811 b3812) a3821 a3822) in
  let next_r = { a382 = #{ a381 = 100; b381 = #{ a29 = 101; b29 = 102. } } } in
  let r_expected = { a382 = #{ a381 = 0; b381 = #{ a29 = 1; b29 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a382 *)
  r.a382 <- next_r.a382;
  let r_expected = { r_expected with a382 = next_r.a382 } in
  mark_test_run 3056;
  let test = eq r r_expected in
  if not test then failwithf "test 3056 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a382 = #{ a381; b381 = #{ a29; b29 } } } = r in
  let expected_a381 = 100 in
  mark_test_run 3057;
  let test = (fun a b -> Int.equal a b) expected_a381 a381 in
  if not test then failwithf "test 3057 failed";
  let expected_a29 = 101 in
  mark_test_run 3058;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 3058 failed";
  let expected_b29 = 102. in
  mark_test_run 3059;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 3059 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a382 } = r in
  let expected_a382 = #{ a381 = 100; b381 = #{ a29 = 101; b29 = 102. } } in
  mark_test_run 3060;
  let test = (fun #{ a381 = a3811; b381 = b3811 } #{ a381 = a3812; b381 = b3812 } -> (fun a b -> Int.equal a b) a3811 a3812 && (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) b3811 b3812) expected_a382 a382 in
  if not test then failwithf "test 3060 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t384 = { #{ int; #{ int32#; int } } }   *)
  (*********************************************)
  let r = { a384 = #{ a383 = 0; b383 = #{ a40 = #1l; b40 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a384 *)
  let actual = r.a384 in
  let expected = #{ a383 = 0; b383 = #{ a40 = #1l; b40 = 2 } } in
  mark_test_run 3061;
  let test = (fun #{ a383 = a3831; b383 = b3831 } #{ a383 = a3832; b383 = b3832 } -> (fun a b -> Int.equal a b) a3831 a3832 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b3831 b3832) actual expected in
  if not test then failwithf "test 3061 failed";
  (* Paths of depth 2 *)
  (* .a384.#a383 *)
  let actual = r.a384.#a383 in
  let expected = 0 in
  mark_test_run 3062;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3062 failed";
  (* .a384.#b383 *)
  let actual = r.a384.#b383 in
  let expected = #{ a40 = #1l; b40 = 2 } in
  mark_test_run 3063;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 3063 failed";
  (* Paths of depth 3 *)
  (* .a384.#b383.#a40 *)
  let actual = r.a384.#b383.#a40 in
  let expected = #1l in
  mark_test_run 3064;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3064 failed";
  (* .a384.#b383.#b40 *)
  let actual = r.a384.#b383.#b40 in
  let expected = 2 in
  mark_test_run 3065;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3065 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a384 = a3841 } { a384 = a3842 } -> (fun #{ a383 = a3831; b383 = b3831 } #{ a383 = a3832; b383 = b3832 } -> (fun a b -> Int.equal a b) a3831 a3832 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b3831 b3832) a3841 a3842) in
  let next_r = { a384 = #{ a383 = 100; b383 = #{ a40 = #101l; b40 = 102 } } } in
  let r_expected = { a384 = #{ a383 = 0; b383 = #{ a40 = #1l; b40 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a384 *)
  r.a384 <- next_r.a384;
  let r_expected = { r_expected with a384 = next_r.a384 } in
  mark_test_run 3066;
  let test = eq r r_expected in
  if not test then failwithf "test 3066 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a384 = #{ a383; b383 = #{ a40; b40 } } } = r in
  let expected_a383 = 100 in
  mark_test_run 3067;
  let test = (fun a b -> Int.equal a b) expected_a383 a383 in
  if not test then failwithf "test 3067 failed";
  let expected_a40 = #101l in
  mark_test_run 3068;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 3068 failed";
  let expected_b40 = 102 in
  mark_test_run 3069;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 3069 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a384 } = r in
  let expected_a384 = #{ a383 = 100; b383 = #{ a40 = #101l; b40 = 102 } } in
  mark_test_run 3070;
  let test = (fun #{ a383 = a3831; b383 = b3831 } #{ a383 = a3832; b383 = b3832 } -> (fun a b -> Int.equal a b) a3831 a3832 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b3831 b3832) expected_a384 a384 in
  if not test then failwithf "test 3070 failed";

  ()
;;

let () =
  (************************************************)
  (*   t386 = { #{ int; #{ int32#; int32# } } }   *)
  (************************************************)
  let r = { a386 = #{ a385 = 0; b385 = #{ a42 = #1l; b42 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a386 *)
  let actual = r.a386 in
  let expected = #{ a385 = 0; b385 = #{ a42 = #1l; b42 = #2l } } in
  mark_test_run 3071;
  let test = (fun #{ a385 = a3851; b385 = b3851 } #{ a385 = a3852; b385 = b3852 } -> (fun a b -> Int.equal a b) a3851 a3852 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) b3851 b3852) actual expected in
  if not test then failwithf "test 3071 failed";
  (* Paths of depth 2 *)
  (* .a386.#a385 *)
  let actual = r.a386.#a385 in
  let expected = 0 in
  mark_test_run 3072;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3072 failed";
  (* .a386.#b385 *)
  let actual = r.a386.#b385 in
  let expected = #{ a42 = #1l; b42 = #2l } in
  mark_test_run 3073;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 3073 failed";
  (* Paths of depth 3 *)
  (* .a386.#b385.#a42 *)
  let actual = r.a386.#b385.#a42 in
  let expected = #1l in
  mark_test_run 3074;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3074 failed";
  (* .a386.#b385.#b42 *)
  let actual = r.a386.#b385.#b42 in
  let expected = #2l in
  mark_test_run 3075;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3075 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a386 = a3861 } { a386 = a3862 } -> (fun #{ a385 = a3851; b385 = b3851 } #{ a385 = a3852; b385 = b3852 } -> (fun a b -> Int.equal a b) a3851 a3852 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) b3851 b3852) a3861 a3862) in
  let next_r = { a386 = #{ a385 = 100; b385 = #{ a42 = #101l; b42 = #102l } } } in
  let r_expected = { a386 = #{ a385 = 0; b385 = #{ a42 = #1l; b42 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a386 *)
  r.a386 <- next_r.a386;
  let r_expected = { r_expected with a386 = next_r.a386 } in
  mark_test_run 3076;
  let test = eq r r_expected in
  if not test then failwithf "test 3076 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a386 = #{ a385; b385 = #{ a42; b42 } } } = r in
  let expected_a385 = 100 in
  mark_test_run 3077;
  let test = (fun a b -> Int.equal a b) expected_a385 a385 in
  if not test then failwithf "test 3077 failed";
  let expected_a42 = #101l in
  mark_test_run 3078;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 3078 failed";
  let expected_b42 = #102l in
  mark_test_run 3079;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 3079 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a386 } = r in
  let expected_a386 = #{ a385 = 100; b385 = #{ a42 = #101l; b42 = #102l } } in
  mark_test_run 3080;
  let test = (fun #{ a385 = a3851; b385 = b3851 } #{ a385 = a3852; b385 = b3852 } -> (fun a b -> Int.equal a b) a3851 a3852 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) b3851 b3852) expected_a386 a386 in
  if not test then failwithf "test 3080 failed";

  ()
;;

let () =
  (********************************************)
  (*   t388 = { #{ int; #{ float; int } } }   *)
  (********************************************)
  let r = { a388 = #{ a387 = 0; b387 = #{ a49 = 1.; b49 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a388 *)
  let actual = r.a388 in
  let expected = #{ a387 = 0; b387 = #{ a49 = 1.; b49 = 2 } } in
  mark_test_run 3081;
  let test = (fun #{ a387 = a3871; b387 = b3871 } #{ a387 = a3872; b387 = b3872 } -> (fun a b -> Int.equal a b) a3871 a3872 && (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) b3871 b3872) actual expected in
  if not test then failwithf "test 3081 failed";
  (* Paths of depth 2 *)
  (* .a388.#a387 *)
  let actual = r.a388.#a387 in
  let expected = 0 in
  mark_test_run 3082;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3082 failed";
  (* .a388.#b387 *)
  let actual = r.a388.#b387 in
  let expected = #{ a49 = 1.; b49 = 2 } in
  mark_test_run 3083;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 3083 failed";
  (* Paths of depth 3 *)
  (* .a388.#b387.#a49 *)
  let actual = r.a388.#b387.#a49 in
  let expected = 1. in
  mark_test_run 3084;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3084 failed";
  (* .a388.#b387.#b49 *)
  let actual = r.a388.#b387.#b49 in
  let expected = 2 in
  mark_test_run 3085;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3085 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a388 = a3881 } { a388 = a3882 } -> (fun #{ a387 = a3871; b387 = b3871 } #{ a387 = a3872; b387 = b3872 } -> (fun a b -> Int.equal a b) a3871 a3872 && (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) b3871 b3872) a3881 a3882) in
  let next_r = { a388 = #{ a387 = 100; b387 = #{ a49 = 101.; b49 = 102 } } } in
  let r_expected = { a388 = #{ a387 = 0; b387 = #{ a49 = 1.; b49 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a388 *)
  r.a388 <- next_r.a388;
  let r_expected = { r_expected with a388 = next_r.a388 } in
  mark_test_run 3086;
  let test = eq r r_expected in
  if not test then failwithf "test 3086 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a388 = #{ a387; b387 = #{ a49; b49 } } } = r in
  let expected_a387 = 100 in
  mark_test_run 3087;
  let test = (fun a b -> Int.equal a b) expected_a387 a387 in
  if not test then failwithf "test 3087 failed";
  let expected_a49 = 101. in
  mark_test_run 3088;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 3088 failed";
  let expected_b49 = 102 in
  mark_test_run 3089;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 3089 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a388 } = r in
  let expected_a388 = #{ a387 = 100; b387 = #{ a49 = 101.; b49 = 102 } } in
  mark_test_run 3090;
  let test = (fun #{ a387 = a3871; b387 = b3871 } #{ a387 = a3872; b387 = b3872 } -> (fun a b -> Int.equal a b) a3871 a3872 && (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) b3871 b3872) expected_a388 a388 in
  if not test then failwithf "test 3090 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t390 = { #{ int; #{ float; float } } }   *)
  (**********************************************)
  let r = { a390 = #{ a389 = 0; b389 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a390 *)
  let actual = r.a390 in
  let expected = #{ a389 = 0; b389 = #{ a51 = 1.; b51 = 2. } } in
  mark_test_run 3091;
  let test = (fun #{ a389 = a3891; b389 = b3891 } #{ a389 = a3892; b389 = b3892 } -> (fun a b -> Int.equal a b) a3891 a3892 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b3891 b3892) actual expected in
  if not test then failwithf "test 3091 failed";
  (* Paths of depth 2 *)
  (* .a390.#a389 *)
  let actual = r.a390.#a389 in
  let expected = 0 in
  mark_test_run 3092;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3092 failed";
  (* .a390.#b389 *)
  let actual = r.a390.#b389 in
  let expected = #{ a51 = 1.; b51 = 2. } in
  mark_test_run 3093;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 3093 failed";
  (* Paths of depth 3 *)
  (* .a390.#b389.#a51 *)
  let actual = r.a390.#b389.#a51 in
  let expected = 1. in
  mark_test_run 3094;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3094 failed";
  (* .a390.#b389.#b51 *)
  let actual = r.a390.#b389.#b51 in
  let expected = 2. in
  mark_test_run 3095;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3095 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a390 = a3901 } { a390 = a3902 } -> (fun #{ a389 = a3891; b389 = b3891 } #{ a389 = a3892; b389 = b3892 } -> (fun a b -> Int.equal a b) a3891 a3892 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b3891 b3892) a3901 a3902) in
  let next_r = { a390 = #{ a389 = 100; b389 = #{ a51 = 101.; b51 = 102. } } } in
  let r_expected = { a390 = #{ a389 = 0; b389 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a390 *)
  r.a390 <- next_r.a390;
  let r_expected = { r_expected with a390 = next_r.a390 } in
  mark_test_run 3096;
  let test = eq r r_expected in
  if not test then failwithf "test 3096 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a390 = #{ a389; b389 = #{ a51; b51 } } } = r in
  let expected_a389 = 100 in
  mark_test_run 3097;
  let test = (fun a b -> Int.equal a b) expected_a389 a389 in
  if not test then failwithf "test 3097 failed";
  let expected_a51 = 101. in
  mark_test_run 3098;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 3098 failed";
  let expected_b51 = 102. in
  mark_test_run 3099;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 3099 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a390 } = r in
  let expected_a390 = #{ a389 = 100; b389 = #{ a51 = 101.; b51 = 102. } } in
  mark_test_run 3100;
  let test = (fun #{ a389 = a3891; b389 = b3891 } #{ a389 = a3892; b389 = b3892 } -> (fun a b -> Int.equal a b) a3891 a3892 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b3891 b3892) expected_a390 a390 in
  if not test then failwithf "test 3100 failed";

  ()
;;

let () =
  (**********************************************************)
  (*   t393 = { #{ int64; int64# }; #{ int64#; float# } }   *)
  (**********************************************************)
  let r = { a393 = #{ a391 = 0L; b391 = #1L }; b393 = #{ a392 = #2L; b392 = #3. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a393 *)
  let actual = r.a393 in
  let expected = #{ a391 = 0L; b391 = #1L } in
  mark_test_run 3101;
  let test = (fun #{ a391 = a3911; b391 = b3911 } #{ a391 = a3912; b391 = b3912 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a3911 a3912 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b3911 b3912) actual expected in
  if not test then failwithf "test 3101 failed";
  (* Paths of depth 2 *)
  (* .a393.#a391 *)
  let actual = r.a393.#a391 in
  let expected = 0L in
  mark_test_run 3102;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3102 failed";
  (* .a393.#b391 *)
  let actual = r.a393.#b391 in
  let expected = #1L in
  mark_test_run 3103;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 3103 failed";
  (* Paths of depth 1 *)
  (* .b393 *)
  let actual = r.b393 in
  let expected = #{ a392 = #2L; b392 = #3. } in
  mark_test_run 3104;
  let test = (fun #{ a392 = a3921; b392 = b3921 } #{ a392 = a3922; b392 = b3922 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3921 a3922 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3921 b3922) actual expected in
  if not test then failwithf "test 3104 failed";
  (* Paths of depth 2 *)
  (* .b393.#a392 *)
  let actual = r.b393.#a392 in
  let expected = #2L in
  mark_test_run 3105;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 3105 failed";
  (* .b393.#b392 *)
  let actual = r.b393.#b392 in
  let expected = #3. in
  mark_test_run 3106;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3106 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a393 = a3931; b393 = b3931 } { a393 = a3932; b393 = b3932 } -> (fun #{ a391 = a3911; b391 = b3911 } #{ a391 = a3912; b391 = b3912 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a3911 a3912 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b3911 b3912) a3931 a3932 && (fun #{ a392 = a3921; b392 = b3921 } #{ a392 = a3922; b392 = b3922 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3921 a3922 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3921 b3922) b3931 b3932) in
  let next_r = { a393 = #{ a391 = 100L; b391 = #101L }; b393 = #{ a392 = #102L; b392 = #103. } } in
  let r_expected = { a393 = #{ a391 = 0L; b391 = #1L }; b393 = #{ a392 = #2L; b392 = #3. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a393 *)
  r.a393 <- next_r.a393;
  let r_expected = { r_expected with a393 = next_r.a393 } in
  mark_test_run 3107;
  let test = eq r r_expected in
  if not test then failwithf "test 3107 failed";
  Gc.compact ();
  (* .b393 *)
  r.b393 <- next_r.b393;
  let r_expected = { r_expected with b393 = next_r.b393 } in
  mark_test_run 3108;
  let test = eq r r_expected in
  if not test then failwithf "test 3108 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a393 = #{ a391; b391 }; b393 = #{ a392; b392 } } = r in
  let expected_a391 = 100L in
  mark_test_run 3109;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a391 a391 in
  if not test then failwithf "test 3109 failed";
  let expected_b391 = #101L in
  mark_test_run 3110;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b391 b391 in
  if not test then failwithf "test 3110 failed";
  let expected_a392 = #102L in
  mark_test_run 3111;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a392 a392 in
  if not test then failwithf "test 3111 failed";
  let expected_b392 = #103. in
  mark_test_run 3112;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b392 b392 in
  if not test then failwithf "test 3112 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a393; b393 } = r in
  let expected_a393 = #{ a391 = 100L; b391 = #101L } in
  mark_test_run 3113;
  let test = (fun #{ a391 = a3911; b391 = b3911 } #{ a391 = a3912; b391 = b3912 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a3911 a3912 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b3911 b3912) expected_a393 a393 in
  if not test then failwithf "test 3113 failed";
  let expected_b393 = #{ a392 = #102L; b392 = #103. } in
  mark_test_run 3114;
  let test = (fun #{ a392 = a3921; b392 = b3921 } #{ a392 = a3922; b392 = b3922 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3921 a3922 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3921 b3922) expected_b393 b393 in
  if not test then failwithf "test 3114 failed";

  ()
;;

let () =
  (**********************************************************)
  (*   t396 = { #{ int64; string }; #{ int64#; string } }   *)
  (**********************************************************)
  let r = { a396 = #{ a394 = 0L; b394 = "1" }; b396 = #{ a395 = #2L; b395 = "3" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a396 *)
  let actual = r.a396 in
  let expected = #{ a394 = 0L; b394 = "1" } in
  mark_test_run 3115;
  let test = (fun #{ a394 = a3941; b394 = b3941 } #{ a394 = a3942; b394 = b3942 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a3941 a3942 && (fun a b -> String.equal (globalize a) (globalize b)) b3941 b3942) actual expected in
  if not test then failwithf "test 3115 failed";
  (* Paths of depth 2 *)
  (* .a396.#a394 *)
  let actual = r.a396.#a394 in
  let expected = 0L in
  mark_test_run 3116;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3116 failed";
  (* .a396.#b394 *)
  let actual = r.a396.#b394 in
  let expected = "1" in
  mark_test_run 3117;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3117 failed";
  (* Paths of depth 1 *)
  (* .b396 *)
  let actual = r.b396 in
  let expected = #{ a395 = #2L; b395 = "3" } in
  mark_test_run 3118;
  let test = (fun #{ a395 = a3951; b395 = b3951 } #{ a395 = a3952; b395 = b3952 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3951 a3952 && (fun a b -> String.equal (globalize a) (globalize b)) b3951 b3952) actual expected in
  if not test then failwithf "test 3118 failed";
  (* Paths of depth 2 *)
  (* .b396.#a395 *)
  let actual = r.b396.#a395 in
  let expected = #2L in
  mark_test_run 3119;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 3119 failed";
  (* .b396.#b395 *)
  let actual = r.b396.#b395 in
  let expected = "3" in
  mark_test_run 3120;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3120 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a396 = a3961; b396 = b3961 } { a396 = a3962; b396 = b3962 } -> (fun #{ a394 = a3941; b394 = b3941 } #{ a394 = a3942; b394 = b3942 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a3941 a3942 && (fun a b -> String.equal (globalize a) (globalize b)) b3941 b3942) a3961 a3962 && (fun #{ a395 = a3951; b395 = b3951 } #{ a395 = a3952; b395 = b3952 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3951 a3952 && (fun a b -> String.equal (globalize a) (globalize b)) b3951 b3952) b3961 b3962) in
  let next_r = { a396 = #{ a394 = 100L; b394 = "101" }; b396 = #{ a395 = #102L; b395 = "103" } } in
  let r_expected = { a396 = #{ a394 = 0L; b394 = "1" }; b396 = #{ a395 = #2L; b395 = "3" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a396 *)
  r.a396 <- next_r.a396;
  let r_expected = { r_expected with a396 = next_r.a396 } in
  mark_test_run 3121;
  let test = eq r r_expected in
  if not test then failwithf "test 3121 failed";
  Gc.compact ();
  (* .b396 *)
  r.b396 <- next_r.b396;
  let r_expected = { r_expected with b396 = next_r.b396 } in
  mark_test_run 3122;
  let test = eq r r_expected in
  if not test then failwithf "test 3122 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a396 = #{ a394; b394 }; b396 = #{ a395; b395 } } = r in
  let expected_a394 = 100L in
  mark_test_run 3123;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a394 a394 in
  if not test then failwithf "test 3123 failed";
  let expected_b394 = "101" in
  mark_test_run 3124;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b394 b394 in
  if not test then failwithf "test 3124 failed";
  let expected_a395 = #102L in
  mark_test_run 3125;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a395 a395 in
  if not test then failwithf "test 3125 failed";
  let expected_b395 = "103" in
  mark_test_run 3126;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b395 b395 in
  if not test then failwithf "test 3126 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a396; b396 } = r in
  let expected_a396 = #{ a394 = 100L; b394 = "101" } in
  mark_test_run 3127;
  let test = (fun #{ a394 = a3941; b394 = b3941 } #{ a394 = a3942; b394 = b3942 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a3941 a3942 && (fun a b -> String.equal (globalize a) (globalize b)) b3941 b3942) expected_a396 a396 in
  if not test then failwithf "test 3127 failed";
  let expected_b396 = #{ a395 = #102L; b395 = "103" } in
  mark_test_run 3128;
  let test = (fun #{ a395 = a3951; b395 = b3951 } #{ a395 = a3952; b395 = b3952 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3951 a3952 && (fun a b -> String.equal (globalize a) (globalize b)) b3951 b3952) expected_b396 b396 in
  if not test then failwithf "test 3128 failed";

  ()
;;

let () =
  (********************************************************)
  (*   t399 = { #{ int64#; int64 }; #{ int64; int64 } }   *)
  (********************************************************)
  let r = { a399 = #{ a397 = #0L; b397 = 1L }; b399 = #{ a398 = 2L; b398 = 3L } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a399 *)
  let actual = r.a399 in
  let expected = #{ a397 = #0L; b397 = 1L } in
  mark_test_run 3129;
  let test = (fun #{ a397 = a3971; b397 = b3971 } #{ a397 = a3972; b397 = b3972 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3971 a3972 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3971 b3972) actual expected in
  if not test then failwithf "test 3129 failed";
  (* Paths of depth 2 *)
  (* .a399.#a397 *)
  let actual = r.a399.#a397 in
  let expected = #0L in
  mark_test_run 3130;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 3130 failed";
  (* .a399.#b397 *)
  let actual = r.a399.#b397 in
  let expected = 1L in
  mark_test_run 3131;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3131 failed";
  (* Paths of depth 1 *)
  (* .b399 *)
  let actual = r.b399 in
  let expected = #{ a398 = 2L; b398 = 3L } in
  mark_test_run 3132;
  let test = (fun #{ a398 = a3981; b398 = b3981 } #{ a398 = a3982; b398 = b3982 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a3981 a3982 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3981 b3982) actual expected in
  if not test then failwithf "test 3132 failed";
  (* Paths of depth 2 *)
  (* .b399.#a398 *)
  let actual = r.b399.#a398 in
  let expected = 2L in
  mark_test_run 3133;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3133 failed";
  (* .b399.#b398 *)
  let actual = r.b399.#b398 in
  let expected = 3L in
  mark_test_run 3134;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3134 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a399 = a3991; b399 = b3991 } { a399 = a3992; b399 = b3992 } -> (fun #{ a397 = a3971; b397 = b3971 } #{ a397 = a3972; b397 = b3972 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3971 a3972 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3971 b3972) a3991 a3992 && (fun #{ a398 = a3981; b398 = b3981 } #{ a398 = a3982; b398 = b3982 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a3981 a3982 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3981 b3982) b3991 b3992) in
  let next_r = { a399 = #{ a397 = #100L; b397 = 101L }; b399 = #{ a398 = 102L; b398 = 103L } } in
  let r_expected = { a399 = #{ a397 = #0L; b397 = 1L }; b399 = #{ a398 = 2L; b398 = 3L } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a399 *)
  r.a399 <- next_r.a399;
  let r_expected = { r_expected with a399 = next_r.a399 } in
  mark_test_run 3135;
  let test = eq r r_expected in
  if not test then failwithf "test 3135 failed";
  Gc.compact ();
  (* .b399 *)
  r.b399 <- next_r.b399;
  let r_expected = { r_expected with b399 = next_r.b399 } in
  mark_test_run 3136;
  let test = eq r r_expected in
  if not test then failwithf "test 3136 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a399 = #{ a397; b397 }; b399 = #{ a398; b398 } } = r in
  let expected_a397 = #100L in
  mark_test_run 3137;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a397 a397 in
  if not test then failwithf "test 3137 failed";
  let expected_b397 = 101L in
  mark_test_run 3138;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b397 b397 in
  if not test then failwithf "test 3138 failed";
  let expected_a398 = 102L in
  mark_test_run 3139;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a398 a398 in
  if not test then failwithf "test 3139 failed";
  let expected_b398 = 103L in
  mark_test_run 3140;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b398 b398 in
  if not test then failwithf "test 3140 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a399; b399 } = r in
  let expected_a399 = #{ a397 = #100L; b397 = 101L } in
  mark_test_run 3141;
  let test = (fun #{ a397 = a3971; b397 = b3971 } #{ a397 = a3972; b397 = b3972 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3971 a3972 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3971 b3972) expected_a399 a399 in
  if not test then failwithf "test 3141 failed";
  let expected_b399 = #{ a398 = 102L; b398 = 103L } in
  mark_test_run 3142;
  let test = (fun #{ a398 = a3981; b398 = b3981 } #{ a398 = a3982; b398 = b3982 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a3981 a3982 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3981 b3982) expected_b399 b399 in
  if not test then failwithf "test 3142 failed";

  ()
;;

let () =
  (***********************************************************)
  (*   t401 = { #{ int64#; int64 }; #{ float32#; float } }   *)
  (***********************************************************)
  let r = { a401 = #{ a397 = #0L; b397 = 1L }; b401 = #{ a400 = #2.s; b400 = 3. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a401 *)
  let actual = r.a401 in
  let expected = #{ a397 = #0L; b397 = 1L } in
  mark_test_run 3143;
  let test = (fun #{ a397 = a3971; b397 = b3971 } #{ a397 = a3972; b397 = b3972 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3971 a3972 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3971 b3972) actual expected in
  if not test then failwithf "test 3143 failed";
  (* Paths of depth 2 *)
  (* .a401.#a397 *)
  let actual = r.a401.#a397 in
  let expected = #0L in
  mark_test_run 3144;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 3144 failed";
  (* .a401.#b397 *)
  let actual = r.a401.#b397 in
  let expected = 1L in
  mark_test_run 3145;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3145 failed";
  (* Paths of depth 1 *)
  (* .b401 *)
  let actual = r.b401 in
  let expected = #{ a400 = #2.s; b400 = 3. } in
  mark_test_run 3146;
  let test = (fun #{ a400 = a4001; b400 = b4001 } #{ a400 = a4002; b400 = b4002 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a4001 a4002 && (fun a b -> Float.equal (globalize a) (globalize b)) b4001 b4002) actual expected in
  if not test then failwithf "test 3146 failed";
  (* Paths of depth 2 *)
  (* .b401.#a400 *)
  let actual = r.b401.#a400 in
  let expected = #2.s in
  mark_test_run 3147;
  let test = (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) actual expected in
  if not test then failwithf "test 3147 failed";
  (* .b401.#b400 *)
  let actual = r.b401.#b400 in
  let expected = 3. in
  mark_test_run 3148;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3148 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a401 = a4011; b401 = b4011 } { a401 = a4012; b401 = b4012 } -> (fun #{ a397 = a3971; b397 = b3971 } #{ a397 = a3972; b397 = b3972 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3971 a3972 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3971 b3972) a4011 a4012 && (fun #{ a400 = a4001; b400 = b4001 } #{ a400 = a4002; b400 = b4002 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a4001 a4002 && (fun a b -> Float.equal (globalize a) (globalize b)) b4001 b4002) b4011 b4012) in
  let next_r = { a401 = #{ a397 = #100L; b397 = 101L }; b401 = #{ a400 = #102.s; b400 = 103. } } in
  let r_expected = { a401 = #{ a397 = #0L; b397 = 1L }; b401 = #{ a400 = #2.s; b400 = 3. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a401 *)
  r.a401 <- next_r.a401;
  let r_expected = { r_expected with a401 = next_r.a401 } in
  mark_test_run 3149;
  let test = eq r r_expected in
  if not test then failwithf "test 3149 failed";
  Gc.compact ();
  (* .b401 *)
  r.b401 <- next_r.b401;
  let r_expected = { r_expected with b401 = next_r.b401 } in
  mark_test_run 3150;
  let test = eq r r_expected in
  if not test then failwithf "test 3150 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a401 = #{ a397; b397 }; b401 = #{ a400; b400 } } = r in
  let expected_a397 = #100L in
  mark_test_run 3151;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a397 a397 in
  if not test then failwithf "test 3151 failed";
  let expected_b397 = 101L in
  mark_test_run 3152;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b397 b397 in
  if not test then failwithf "test 3152 failed";
  let expected_a400 = #102.s in
  mark_test_run 3153;
  let test = (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) expected_a400 a400 in
  if not test then failwithf "test 3153 failed";
  let expected_b400 = 103. in
  mark_test_run 3154;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b400 b400 in
  if not test then failwithf "test 3154 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a401; b401 } = r in
  let expected_a401 = #{ a397 = #100L; b397 = 101L } in
  mark_test_run 3155;
  let test = (fun #{ a397 = a3971; b397 = b3971 } #{ a397 = a3972; b397 = b3972 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a3971 a3972 && (fun a b -> Int64.equal (globalize a) (globalize b)) b3971 b3972) expected_a401 a401 in
  if not test then failwithf "test 3155 failed";
  let expected_b401 = #{ a400 = #102.s; b400 = 103. } in
  mark_test_run 3156;
  let test = (fun #{ a400 = a4001; b400 = b4001 } #{ a400 = a4002; b400 = b4002 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a4001 a4002 && (fun a b -> Float.equal (globalize a) (globalize b)) b4001 b4002) expected_b401 b401 in
  if not test then failwithf "test 3156 failed";

  ()
;;

let () =
  (******************************)
  (*   t402 = { #{ int32# } }   *)
  (******************************)
  let r = { a402 = #{ a33 = #0l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a402 *)
  let actual = r.a402 in
  let expected = #{ a33 = #0l } in
  mark_test_run 3157;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) actual expected in
  if not test then failwithf "test 3157 failed";
  (* Paths of depth 2 *)
  (* .a402.#a33 *)
  let actual = r.a402.#a33 in
  let expected = #0l in
  mark_test_run 3158;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3158 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a402 = a4021 } { a402 = a4022 } -> (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) a4021 a4022) in
  let next_r = { a402 = #{ a33 = #100l } } in
  let r_expected = { a402 = #{ a33 = #0l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a402 *)
  r.a402 <- next_r.a402;
  let r_expected = { r_expected with a402 = next_r.a402 } in
  mark_test_run 3159;
  let test = eq r r_expected in
  if not test then failwithf "test 3159 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a402 = #{ a33 } } = r in
  let expected_a33 = #100l in
  mark_test_run 3160;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 3160 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a402 } = r in
  let expected_a402 = #{ a33 = #100l } in
  mark_test_run 3161;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) expected_a402 a402 in
  if not test then failwithf "test 3161 failed";

  ()
;;

let () =
  (***********************************)
  (*   t403 = { #{ int32# }; int }   *)
  (***********************************)
  let r = { a403 = #{ a33 = #0l }; b403 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a403 *)
  let actual = r.a403 in
  let expected = #{ a33 = #0l } in
  mark_test_run 3162;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) actual expected in
  if not test then failwithf "test 3162 failed";
  (* Paths of depth 2 *)
  (* .a403.#a33 *)
  let actual = r.a403.#a33 in
  let expected = #0l in
  mark_test_run 3163;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3163 failed";
  (* Paths of depth 1 *)
  (* .b403 *)
  let actual = r.b403 in
  let expected = 1 in
  mark_test_run 3164;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3164 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a403 = a4031; b403 = b4031 } { a403 = a4032; b403 = b4032 } -> (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) a4031 a4032 && (fun a b -> Int.equal a b) b4031 b4032) in
  let next_r = { a403 = #{ a33 = #100l }; b403 = 101 } in
  let r_expected = { a403 = #{ a33 = #0l }; b403 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a403 *)
  r.a403 <- next_r.a403;
  let r_expected = { r_expected with a403 = next_r.a403 } in
  mark_test_run 3165;
  let test = eq r r_expected in
  if not test then failwithf "test 3165 failed";
  Gc.compact ();
  (* .b403 *)
  r.b403 <- next_r.b403;
  let r_expected = { r_expected with b403 = next_r.b403 } in
  mark_test_run 3166;
  let test = eq r r_expected in
  if not test then failwithf "test 3166 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a403 = #{ a33 }; b403 } = r in
  let expected_a33 = #100l in
  mark_test_run 3167;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 3167 failed";
  let expected_b403 = 101 in
  mark_test_run 3168;
  let test = (fun a b -> Int.equal a b) expected_b403 b403 in
  if not test then failwithf "test 3168 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a403; b403 } = r in
  let expected_a403 = #{ a33 = #100l } in
  mark_test_run 3169;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) expected_a403 a403 in
  if not test then failwithf "test 3169 failed";
  let expected_b403 = 101 in
  mark_test_run 3170;
  let test = (fun a b -> Int.equal a b) expected_b403 b403 in
  if not test then failwithf "test 3170 failed";

  ()
;;

let () =
  (**************************************)
  (*   t404 = { #{ int32# }; int32# }   *)
  (**************************************)
  let r = { a404 = #{ a33 = #0l }; b404 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a404 *)
  let actual = r.a404 in
  let expected = #{ a33 = #0l } in
  mark_test_run 3171;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) actual expected in
  if not test then failwithf "test 3171 failed";
  (* Paths of depth 2 *)
  (* .a404.#a33 *)
  let actual = r.a404.#a33 in
  let expected = #0l in
  mark_test_run 3172;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3172 failed";
  (* Paths of depth 1 *)
  (* .b404 *)
  let actual = r.b404 in
  let expected = #1l in
  mark_test_run 3173;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3173 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a404 = a4041; b404 = b4041 } { a404 = a4042; b404 = b4042 } -> (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) a4041 a4042 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b4041 b4042) in
  let next_r = { a404 = #{ a33 = #100l }; b404 = #101l } in
  let r_expected = { a404 = #{ a33 = #0l }; b404 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a404 *)
  r.a404 <- next_r.a404;
  let r_expected = { r_expected with a404 = next_r.a404 } in
  mark_test_run 3174;
  let test = eq r r_expected in
  if not test then failwithf "test 3174 failed";
  Gc.compact ();
  (* .b404 *)
  r.b404 <- next_r.b404;
  let r_expected = { r_expected with b404 = next_r.b404 } in
  mark_test_run 3175;
  let test = eq r r_expected in
  if not test then failwithf "test 3175 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a404 = #{ a33 }; b404 } = r in
  let expected_a33 = #100l in
  mark_test_run 3176;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 3176 failed";
  let expected_b404 = #101l in
  mark_test_run 3177;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b404 b404 in
  if not test then failwithf "test 3177 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a404; b404 } = r in
  let expected_a404 = #{ a33 = #100l } in
  mark_test_run 3178;
  let test = (fun #{ a33 = a331 } #{ a33 = a332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332) expected_a404 a404 in
  if not test then failwithf "test 3178 failed";
  let expected_b404 = #101l in
  mark_test_run 3179;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b404 b404 in
  if not test then failwithf "test 3179 failed";

  ()
;;

let () =
  (***********************************)
  (*   t405 = { #{ int32#; int } }   *)
  (***********************************)
  let r = { a405 = #{ a40 = #0l; b40 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a405 *)
  let actual = r.a405 in
  let expected = #{ a40 = #0l; b40 = 1 } in
  mark_test_run 3180;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 3180 failed";
  (* Paths of depth 2 *)
  (* .a405.#a40 *)
  let actual = r.a405.#a40 in
  let expected = #0l in
  mark_test_run 3181;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3181 failed";
  (* .a405.#b40 *)
  let actual = r.a405.#b40 in
  let expected = 1 in
  mark_test_run 3182;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3182 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a405 = a4051 } { a405 = a4052 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a4051 a4052) in
  let next_r = { a405 = #{ a40 = #100l; b40 = 101 } } in
  let r_expected = { a405 = #{ a40 = #0l; b40 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a405 *)
  r.a405 <- next_r.a405;
  let r_expected = { r_expected with a405 = next_r.a405 } in
  mark_test_run 3183;
  let test = eq r r_expected in
  if not test then failwithf "test 3183 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a405 = #{ a40; b40 } } = r in
  let expected_a40 = #100l in
  mark_test_run 3184;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 3184 failed";
  let expected_b40 = 101 in
  mark_test_run 3185;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 3185 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a405 } = r in
  let expected_a405 = #{ a40 = #100l; b40 = 101 } in
  mark_test_run 3186;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) expected_a405 a405 in
  if not test then failwithf "test 3186 failed";

  ()
;;

let () =
  (****************************************)
  (*   t406 = { #{ int32#; int }; int }   *)
  (****************************************)
  let r = { a406 = #{ a40 = #0l; b40 = 1 }; b406 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a406 *)
  let actual = r.a406 in
  let expected = #{ a40 = #0l; b40 = 1 } in
  mark_test_run 3187;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 3187 failed";
  (* Paths of depth 2 *)
  (* .a406.#a40 *)
  let actual = r.a406.#a40 in
  let expected = #0l in
  mark_test_run 3188;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3188 failed";
  (* .a406.#b40 *)
  let actual = r.a406.#b40 in
  let expected = 1 in
  mark_test_run 3189;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3189 failed";
  (* Paths of depth 1 *)
  (* .b406 *)
  let actual = r.b406 in
  let expected = 2 in
  mark_test_run 3190;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3190 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a406 = a4061; b406 = b4061 } { a406 = a4062; b406 = b4062 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a4061 a4062 && (fun a b -> Int.equal a b) b4061 b4062) in
  let next_r = { a406 = #{ a40 = #100l; b40 = 101 }; b406 = 102 } in
  let r_expected = { a406 = #{ a40 = #0l; b40 = 1 }; b406 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a406 *)
  r.a406 <- next_r.a406;
  let r_expected = { r_expected with a406 = next_r.a406 } in
  mark_test_run 3191;
  let test = eq r r_expected in
  if not test then failwithf "test 3191 failed";
  Gc.compact ();
  (* .b406 *)
  r.b406 <- next_r.b406;
  let r_expected = { r_expected with b406 = next_r.b406 } in
  mark_test_run 3192;
  let test = eq r r_expected in
  if not test then failwithf "test 3192 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a406 = #{ a40; b40 }; b406 } = r in
  let expected_a40 = #100l in
  mark_test_run 3193;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 3193 failed";
  let expected_b40 = 101 in
  mark_test_run 3194;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 3194 failed";
  let expected_b406 = 102 in
  mark_test_run 3195;
  let test = (fun a b -> Int.equal a b) expected_b406 b406 in
  if not test then failwithf "test 3195 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a406; b406 } = r in
  let expected_a406 = #{ a40 = #100l; b40 = 101 } in
  mark_test_run 3196;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) expected_a406 a406 in
  if not test then failwithf "test 3196 failed";
  let expected_b406 = 102 in
  mark_test_run 3197;
  let test = (fun a b -> Int.equal a b) expected_b406 b406 in
  if not test then failwithf "test 3197 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t407 = { #{ int32#; int }; int32# }   *)
  (*******************************************)
  let r = { a407 = #{ a40 = #0l; b40 = 1 }; b407 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a407 *)
  let actual = r.a407 in
  let expected = #{ a40 = #0l; b40 = 1 } in
  mark_test_run 3198;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 3198 failed";
  (* Paths of depth 2 *)
  (* .a407.#a40 *)
  let actual = r.a407.#a40 in
  let expected = #0l in
  mark_test_run 3199;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3199 failed";
  (* .a407.#b40 *)
  let actual = r.a407.#b40 in
  let expected = 1 in
  mark_test_run 3200;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3200 failed";
  (* Paths of depth 1 *)
  (* .b407 *)
  let actual = r.b407 in
  let expected = #2l in
  mark_test_run 3201;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3201 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a407 = a4071; b407 = b4071 } { a407 = a4072; b407 = b4072 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a4071 a4072 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b4071 b4072) in
  let next_r = { a407 = #{ a40 = #100l; b40 = 101 }; b407 = #102l } in
  let r_expected = { a407 = #{ a40 = #0l; b40 = 1 }; b407 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a407 *)
  r.a407 <- next_r.a407;
  let r_expected = { r_expected with a407 = next_r.a407 } in
  mark_test_run 3202;
  let test = eq r r_expected in
  if not test then failwithf "test 3202 failed";
  Gc.compact ();
  (* .b407 *)
  r.b407 <- next_r.b407;
  let r_expected = { r_expected with b407 = next_r.b407 } in
  mark_test_run 3203;
  let test = eq r r_expected in
  if not test then failwithf "test 3203 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a407 = #{ a40; b40 }; b407 } = r in
  let expected_a40 = #100l in
  mark_test_run 3204;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 3204 failed";
  let expected_b40 = 101 in
  mark_test_run 3205;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 3205 failed";
  let expected_b407 = #102l in
  mark_test_run 3206;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b407 b407 in
  if not test then failwithf "test 3206 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a407; b407 } = r in
  let expected_a407 = #{ a40 = #100l; b40 = 101 } in
  mark_test_run 3207;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) expected_a407 a407 in
  if not test then failwithf "test 3207 failed";
  let expected_b407 = #102l in
  mark_test_run 3208;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b407 b407 in
  if not test then failwithf "test 3208 failed";

  ()
;;

let () =
  (**************************************)
  (*   t408 = { #{ int32#; int32# } }   *)
  (**************************************)
  let r = { a408 = #{ a42 = #0l; b42 = #1l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a408 *)
  let actual = r.a408 in
  let expected = #{ a42 = #0l; b42 = #1l } in
  mark_test_run 3209;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 3209 failed";
  (* Paths of depth 2 *)
  (* .a408.#a42 *)
  let actual = r.a408.#a42 in
  let expected = #0l in
  mark_test_run 3210;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3210 failed";
  (* .a408.#b42 *)
  let actual = r.a408.#b42 in
  let expected = #1l in
  mark_test_run 3211;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3211 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a408 = a4081 } { a408 = a4082 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a4081 a4082) in
  let next_r = { a408 = #{ a42 = #100l; b42 = #101l } } in
  let r_expected = { a408 = #{ a42 = #0l; b42 = #1l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a408 *)
  r.a408 <- next_r.a408;
  let r_expected = { r_expected with a408 = next_r.a408 } in
  mark_test_run 3212;
  let test = eq r r_expected in
  if not test then failwithf "test 3212 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a408 = #{ a42; b42 } } = r in
  let expected_a42 = #100l in
  mark_test_run 3213;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 3213 failed";
  let expected_b42 = #101l in
  mark_test_run 3214;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 3214 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a408 } = r in
  let expected_a408 = #{ a42 = #100l; b42 = #101l } in
  mark_test_run 3215;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) expected_a408 a408 in
  if not test then failwithf "test 3215 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t409 = { #{ int32#; int32# }; int }   *)
  (*******************************************)
  let r = { a409 = #{ a42 = #0l; b42 = #1l }; b409 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a409 *)
  let actual = r.a409 in
  let expected = #{ a42 = #0l; b42 = #1l } in
  mark_test_run 3216;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 3216 failed";
  (* Paths of depth 2 *)
  (* .a409.#a42 *)
  let actual = r.a409.#a42 in
  let expected = #0l in
  mark_test_run 3217;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3217 failed";
  (* .a409.#b42 *)
  let actual = r.a409.#b42 in
  let expected = #1l in
  mark_test_run 3218;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3218 failed";
  (* Paths of depth 1 *)
  (* .b409 *)
  let actual = r.b409 in
  let expected = 2 in
  mark_test_run 3219;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3219 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a409 = a4091; b409 = b4091 } { a409 = a4092; b409 = b4092 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a4091 a4092 && (fun a b -> Int.equal a b) b4091 b4092) in
  let next_r = { a409 = #{ a42 = #100l; b42 = #101l }; b409 = 102 } in
  let r_expected = { a409 = #{ a42 = #0l; b42 = #1l }; b409 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a409 *)
  r.a409 <- next_r.a409;
  let r_expected = { r_expected with a409 = next_r.a409 } in
  mark_test_run 3220;
  let test = eq r r_expected in
  if not test then failwithf "test 3220 failed";
  Gc.compact ();
  (* .b409 *)
  r.b409 <- next_r.b409;
  let r_expected = { r_expected with b409 = next_r.b409 } in
  mark_test_run 3221;
  let test = eq r r_expected in
  if not test then failwithf "test 3221 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a409 = #{ a42; b42 }; b409 } = r in
  let expected_a42 = #100l in
  mark_test_run 3222;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 3222 failed";
  let expected_b42 = #101l in
  mark_test_run 3223;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 3223 failed";
  let expected_b409 = 102 in
  mark_test_run 3224;
  let test = (fun a b -> Int.equal a b) expected_b409 b409 in
  if not test then failwithf "test 3224 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a409; b409 } = r in
  let expected_a409 = #{ a42 = #100l; b42 = #101l } in
  mark_test_run 3225;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) expected_a409 a409 in
  if not test then failwithf "test 3225 failed";
  let expected_b409 = 102 in
  mark_test_run 3226;
  let test = (fun a b -> Int.equal a b) expected_b409 b409 in
  if not test then failwithf "test 3226 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t410 = { #{ int32#; int32# }; int32# }   *)
  (**********************************************)
  let r = { a410 = #{ a42 = #0l; b42 = #1l }; b410 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a410 *)
  let actual = r.a410 in
  let expected = #{ a42 = #0l; b42 = #1l } in
  mark_test_run 3227;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 3227 failed";
  (* Paths of depth 2 *)
  (* .a410.#a42 *)
  let actual = r.a410.#a42 in
  let expected = #0l in
  mark_test_run 3228;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3228 failed";
  (* .a410.#b42 *)
  let actual = r.a410.#b42 in
  let expected = #1l in
  mark_test_run 3229;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3229 failed";
  (* Paths of depth 1 *)
  (* .b410 *)
  let actual = r.b410 in
  let expected = #2l in
  mark_test_run 3230;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3230 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a410 = a4101; b410 = b4101 } { a410 = a4102; b410 = b4102 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a4101 a4102 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b4101 b4102) in
  let next_r = { a410 = #{ a42 = #100l; b42 = #101l }; b410 = #102l } in
  let r_expected = { a410 = #{ a42 = #0l; b42 = #1l }; b410 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a410 *)
  r.a410 <- next_r.a410;
  let r_expected = { r_expected with a410 = next_r.a410 } in
  mark_test_run 3231;
  let test = eq r r_expected in
  if not test then failwithf "test 3231 failed";
  Gc.compact ();
  (* .b410 *)
  r.b410 <- next_r.b410;
  let r_expected = { r_expected with b410 = next_r.b410 } in
  mark_test_run 3232;
  let test = eq r r_expected in
  if not test then failwithf "test 3232 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a410 = #{ a42; b42 }; b410 } = r in
  let expected_a42 = #100l in
  mark_test_run 3233;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 3233 failed";
  let expected_b42 = #101l in
  mark_test_run 3234;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 3234 failed";
  let expected_b410 = #102l in
  mark_test_run 3235;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b410 b410 in
  if not test then failwithf "test 3235 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a410; b410 } = r in
  let expected_a410 = #{ a42 = #100l; b42 = #101l } in
  mark_test_run 3236;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) expected_a410 a410 in
  if not test then failwithf "test 3236 failed";
  let expected_b410 = #102l in
  mark_test_run 3237;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b410 b410 in
  if not test then failwithf "test 3237 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t412 = { #{ int32#; #{ int; int } } }   *)
  (*********************************************)
  let r = { a412 = #{ a411 = #0l; b411 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a412 *)
  let actual = r.a412 in
  let expected = #{ a411 = #0l; b411 = #{ a25 = 1; b25 = 2 } } in
  mark_test_run 3238;
  let test = (fun #{ a411 = a4111; b411 = b4111 } #{ a411 = a4112; b411 = b4112 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4111 a4112 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b4111 b4112) actual expected in
  if not test then failwithf "test 3238 failed";
  (* Paths of depth 2 *)
  (* .a412.#a411 *)
  let actual = r.a412.#a411 in
  let expected = #0l in
  mark_test_run 3239;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3239 failed";
  (* .a412.#b411 *)
  let actual = r.a412.#b411 in
  let expected = #{ a25 = 1; b25 = 2 } in
  mark_test_run 3240;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 3240 failed";
  (* Paths of depth 3 *)
  (* .a412.#b411.#a25 *)
  let actual = r.a412.#b411.#a25 in
  let expected = 1 in
  mark_test_run 3241;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3241 failed";
  (* .a412.#b411.#b25 *)
  let actual = r.a412.#b411.#b25 in
  let expected = 2 in
  mark_test_run 3242;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3242 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a412 = a4121 } { a412 = a4122 } -> (fun #{ a411 = a4111; b411 = b4111 } #{ a411 = a4112; b411 = b4112 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4111 a4112 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b4111 b4112) a4121 a4122) in
  let next_r = { a412 = #{ a411 = #100l; b411 = #{ a25 = 101; b25 = 102 } } } in
  let r_expected = { a412 = #{ a411 = #0l; b411 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a412 *)
  r.a412 <- next_r.a412;
  let r_expected = { r_expected with a412 = next_r.a412 } in
  mark_test_run 3243;
  let test = eq r r_expected in
  if not test then failwithf "test 3243 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a412 = #{ a411; b411 = #{ a25; b25 } } } = r in
  let expected_a411 = #100l in
  mark_test_run 3244;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a411 a411 in
  if not test then failwithf "test 3244 failed";
  let expected_a25 = 101 in
  mark_test_run 3245;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 3245 failed";
  let expected_b25 = 102 in
  mark_test_run 3246;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 3246 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a412 } = r in
  let expected_a412 = #{ a411 = #100l; b411 = #{ a25 = 101; b25 = 102 } } in
  mark_test_run 3247;
  let test = (fun #{ a411 = a4111; b411 = b4111 } #{ a411 = a4112; b411 = b4112 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4111 a4112 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b4111 b4112) expected_a412 a412 in
  if not test then failwithf "test 3247 failed";

  ()
;;

let () =
  (************************************************)
  (*   t414 = { #{ int32#; #{ int; int32# } } }   *)
  (************************************************)
  let r = { a414 = #{ a413 = #0l; b413 = #{ a27 = 1; b27 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a414 *)
  let actual = r.a414 in
  let expected = #{ a413 = #0l; b413 = #{ a27 = 1; b27 = #2l } } in
  mark_test_run 3248;
  let test = (fun #{ a413 = a4131; b413 = b4131 } #{ a413 = a4132; b413 = b4132 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4131 a4132 && (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) b4131 b4132) actual expected in
  if not test then failwithf "test 3248 failed";
  (* Paths of depth 2 *)
  (* .a414.#a413 *)
  let actual = r.a414.#a413 in
  let expected = #0l in
  mark_test_run 3249;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3249 failed";
  (* .a414.#b413 *)
  let actual = r.a414.#b413 in
  let expected = #{ a27 = 1; b27 = #2l } in
  mark_test_run 3250;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 3250 failed";
  (* Paths of depth 3 *)
  (* .a414.#b413.#a27 *)
  let actual = r.a414.#b413.#a27 in
  let expected = 1 in
  mark_test_run 3251;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3251 failed";
  (* .a414.#b413.#b27 *)
  let actual = r.a414.#b413.#b27 in
  let expected = #2l in
  mark_test_run 3252;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3252 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a414 = a4141 } { a414 = a4142 } -> (fun #{ a413 = a4131; b413 = b4131 } #{ a413 = a4132; b413 = b4132 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4131 a4132 && (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) b4131 b4132) a4141 a4142) in
  let next_r = { a414 = #{ a413 = #100l; b413 = #{ a27 = 101; b27 = #102l } } } in
  let r_expected = { a414 = #{ a413 = #0l; b413 = #{ a27 = 1; b27 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a414 *)
  r.a414 <- next_r.a414;
  let r_expected = { r_expected with a414 = next_r.a414 } in
  mark_test_run 3253;
  let test = eq r r_expected in
  if not test then failwithf "test 3253 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a414 = #{ a413; b413 = #{ a27; b27 } } } = r in
  let expected_a413 = #100l in
  mark_test_run 3254;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a413 a413 in
  if not test then failwithf "test 3254 failed";
  let expected_a27 = 101 in
  mark_test_run 3255;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 3255 failed";
  let expected_b27 = #102l in
  mark_test_run 3256;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 3256 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a414 } = r in
  let expected_a414 = #{ a413 = #100l; b413 = #{ a27 = 101; b27 = #102l } } in
  mark_test_run 3257;
  let test = (fun #{ a413 = a4131; b413 = b4131 } #{ a413 = a4132; b413 = b4132 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4131 a4132 && (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) b4131 b4132) expected_a414 a414 in
  if not test then failwithf "test 3257 failed";

  ()
;;

let () =
  (************************************************)
  (*   t416 = { #{ int32#; #{ int32#; int } } }   *)
  (************************************************)
  let r = { a416 = #{ a415 = #0l; b415 = #{ a40 = #1l; b40 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a416 *)
  let actual = r.a416 in
  let expected = #{ a415 = #0l; b415 = #{ a40 = #1l; b40 = 2 } } in
  mark_test_run 3258;
  let test = (fun #{ a415 = a4151; b415 = b4151 } #{ a415 = a4152; b415 = b4152 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4151 a4152 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b4151 b4152) actual expected in
  if not test then failwithf "test 3258 failed";
  (* Paths of depth 2 *)
  (* .a416.#a415 *)
  let actual = r.a416.#a415 in
  let expected = #0l in
  mark_test_run 3259;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3259 failed";
  (* .a416.#b415 *)
  let actual = r.a416.#b415 in
  let expected = #{ a40 = #1l; b40 = 2 } in
  mark_test_run 3260;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 3260 failed";
  (* Paths of depth 3 *)
  (* .a416.#b415.#a40 *)
  let actual = r.a416.#b415.#a40 in
  let expected = #1l in
  mark_test_run 3261;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3261 failed";
  (* .a416.#b415.#b40 *)
  let actual = r.a416.#b415.#b40 in
  let expected = 2 in
  mark_test_run 3262;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3262 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a416 = a4161 } { a416 = a4162 } -> (fun #{ a415 = a4151; b415 = b4151 } #{ a415 = a4152; b415 = b4152 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4151 a4152 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b4151 b4152) a4161 a4162) in
  let next_r = { a416 = #{ a415 = #100l; b415 = #{ a40 = #101l; b40 = 102 } } } in
  let r_expected = { a416 = #{ a415 = #0l; b415 = #{ a40 = #1l; b40 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a416 *)
  r.a416 <- next_r.a416;
  let r_expected = { r_expected with a416 = next_r.a416 } in
  mark_test_run 3263;
  let test = eq r r_expected in
  if not test then failwithf "test 3263 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a416 = #{ a415; b415 = #{ a40; b40 } } } = r in
  let expected_a415 = #100l in
  mark_test_run 3264;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a415 a415 in
  if not test then failwithf "test 3264 failed";
  let expected_a40 = #101l in
  mark_test_run 3265;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 3265 failed";
  let expected_b40 = 102 in
  mark_test_run 3266;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 3266 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a416 } = r in
  let expected_a416 = #{ a415 = #100l; b415 = #{ a40 = #101l; b40 = 102 } } in
  mark_test_run 3267;
  let test = (fun #{ a415 = a4151; b415 = b4151 } #{ a415 = a4152; b415 = b4152 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4151 a4152 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b4151 b4152) expected_a416 a416 in
  if not test then failwithf "test 3267 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t418 = { #{ int32#; #{ int32#; int32# } } }   *)
  (***************************************************)
  let r = { a418 = #{ a417 = #0l; b417 = #{ a42 = #1l; b42 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a418 *)
  let actual = r.a418 in
  let expected = #{ a417 = #0l; b417 = #{ a42 = #1l; b42 = #2l } } in
  mark_test_run 3268;
  let test = (fun #{ a417 = a4171; b417 = b4171 } #{ a417 = a4172; b417 = b4172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4171 a4172 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) b4171 b4172) actual expected in
  if not test then failwithf "test 3268 failed";
  (* Paths of depth 2 *)
  (* .a418.#a417 *)
  let actual = r.a418.#a417 in
  let expected = #0l in
  mark_test_run 3269;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3269 failed";
  (* .a418.#b417 *)
  let actual = r.a418.#b417 in
  let expected = #{ a42 = #1l; b42 = #2l } in
  mark_test_run 3270;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 3270 failed";
  (* Paths of depth 3 *)
  (* .a418.#b417.#a42 *)
  let actual = r.a418.#b417.#a42 in
  let expected = #1l in
  mark_test_run 3271;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3271 failed";
  (* .a418.#b417.#b42 *)
  let actual = r.a418.#b417.#b42 in
  let expected = #2l in
  mark_test_run 3272;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3272 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a418 = a4181 } { a418 = a4182 } -> (fun #{ a417 = a4171; b417 = b4171 } #{ a417 = a4172; b417 = b4172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4171 a4172 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) b4171 b4172) a4181 a4182) in
  let next_r = { a418 = #{ a417 = #100l; b417 = #{ a42 = #101l; b42 = #102l } } } in
  let r_expected = { a418 = #{ a417 = #0l; b417 = #{ a42 = #1l; b42 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a418 *)
  r.a418 <- next_r.a418;
  let r_expected = { r_expected with a418 = next_r.a418 } in
  mark_test_run 3273;
  let test = eq r r_expected in
  if not test then failwithf "test 3273 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a418 = #{ a417; b417 = #{ a42; b42 } } } = r in
  let expected_a417 = #100l in
  mark_test_run 3274;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a417 a417 in
  if not test then failwithf "test 3274 failed";
  let expected_a42 = #101l in
  mark_test_run 3275;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 3275 failed";
  let expected_b42 = #102l in
  mark_test_run 3276;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 3276 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a418 } = r in
  let expected_a418 = #{ a417 = #100l; b417 = #{ a42 = #101l; b42 = #102l } } in
  mark_test_run 3277;
  let test = (fun #{ a417 = a4171; b417 = b4171 } #{ a417 = a4172; b417 = b4172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a4171 a4172 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) b4171 b4172) expected_a418 a418 in
  if not test then failwithf "test 3277 failed";

  ()
;;

let () =
  (**************************************)
  (*   t419 = { #{ unit_u }; string }   *)
  (**************************************)
  let r = { a419 = #{ a170 = (unbox_unit ()) }; b419 = "0" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a419 *)
  let actual = r.a419 in
  let expected = #{ a170 = (unbox_unit ()) } in
  mark_test_run 3278;
  let test = (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) actual expected in
  if not test then failwithf "test 3278 failed";
  (* Paths of depth 2 *)
  (* .a419.#a170 *)
  let actual = r.a419.#a170 in
  let expected = (unbox_unit ()) in
  mark_test_run 3279;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3279 failed";
  (* Paths of depth 1 *)
  (* .b419 *)
  let actual = r.b419 in
  let expected = "0" in
  mark_test_run 3280;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3280 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a419 = a4191; b419 = b4191 } { a419 = a4192; b419 = b4192 } -> (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) a4191 a4192 && (fun a b -> String.equal (globalize a) (globalize b)) b4191 b4192) in
  let next_r = { a419 = #{ a170 = (unbox_unit ()) }; b419 = "100" } in
  let r_expected = { a419 = #{ a170 = (unbox_unit ()) }; b419 = "0" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a419 *)
  r.a419 <- next_r.a419;
  let r_expected = { r_expected with a419 = next_r.a419 } in
  mark_test_run 3281;
  let test = eq r r_expected in
  if not test then failwithf "test 3281 failed";
  Gc.compact ();
  (* .b419 *)
  r.b419 <- next_r.b419;
  let r_expected = { r_expected with b419 = next_r.b419 } in
  mark_test_run 3282;
  let test = eq r r_expected in
  if not test then failwithf "test 3282 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a419 = #{ a170 }; b419 } = r in
  let expected_a170 = (unbox_unit ()) in
  mark_test_run 3283;
  let test = (fun _ _ -> true) expected_a170 a170 in
  if not test then failwithf "test 3283 failed";
  let expected_b419 = "100" in
  mark_test_run 3284;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b419 b419 in
  if not test then failwithf "test 3284 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a419; b419 } = r in
  let expected_a419 = #{ a170 = (unbox_unit ()) } in
  mark_test_run 3285;
  let test = (fun #{ a170 = a1701 } #{ a170 = a1702 } -> (fun _ _ -> true) a1701 a1702) expected_a419 a419 in
  if not test then failwithf "test 3285 failed";
  let expected_b419 = "100" in
  mark_test_run 3286;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b419 b419 in
  if not test then failwithf "test 3286 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t420 = { #{ unit_u; unit_u }; string }   *)
  (**********************************************)
  let r = { a420 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) }; b420 = "0" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a420 *)
  let actual = r.a420 in
  let expected = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } in
  mark_test_run 3287;
  let test = (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) actual expected in
  if not test then failwithf "test 3287 failed";
  (* Paths of depth 2 *)
  (* .a420.#a266 *)
  let actual = r.a420.#a266 in
  let expected = (unbox_unit ()) in
  mark_test_run 3288;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3288 failed";
  (* .a420.#b266 *)
  let actual = r.a420.#b266 in
  let expected = (unbox_unit ()) in
  mark_test_run 3289;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3289 failed";
  (* Paths of depth 1 *)
  (* .b420 *)
  let actual = r.b420 in
  let expected = "0" in
  mark_test_run 3290;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3290 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a420 = a4201; b420 = b4201 } { a420 = a4202; b420 = b4202 } -> (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) a4201 a4202 && (fun a b -> String.equal (globalize a) (globalize b)) b4201 b4202) in
  let next_r = { a420 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) }; b420 = "100" } in
  let r_expected = { a420 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) }; b420 = "0" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a420 *)
  r.a420 <- next_r.a420;
  let r_expected = { r_expected with a420 = next_r.a420 } in
  mark_test_run 3291;
  let test = eq r r_expected in
  if not test then failwithf "test 3291 failed";
  Gc.compact ();
  (* .b420 *)
  r.b420 <- next_r.b420;
  let r_expected = { r_expected with b420 = next_r.b420 } in
  mark_test_run 3292;
  let test = eq r r_expected in
  if not test then failwithf "test 3292 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a420 = #{ a266; b266 }; b420 } = r in
  let expected_a266 = (unbox_unit ()) in
  mark_test_run 3293;
  let test = (fun _ _ -> true) expected_a266 a266 in
  if not test then failwithf "test 3293 failed";
  let expected_b266 = (unbox_unit ()) in
  mark_test_run 3294;
  let test = (fun _ _ -> true) expected_b266 b266 in
  if not test then failwithf "test 3294 failed";
  let expected_b420 = "100" in
  mark_test_run 3295;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b420 b420 in
  if not test then failwithf "test 3295 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a420; b420 } = r in
  let expected_a420 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } in
  mark_test_run 3296;
  let test = (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) expected_a420 a420 in
  if not test then failwithf "test 3296 failed";
  let expected_b420 = "100" in
  mark_test_run 3297;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b420 b420 in
  if not test then failwithf "test 3297 failed";

  ()
;;

let () =
  (**************************************)
  (*   t421 = { #{ unit_u; string } }   *)
  (**************************************)
  let r = { a421 = #{ a160 = (unbox_unit ()); b160 = "0" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a421 *)
  let actual = r.a421 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "0" } in
  mark_test_run 3298;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 3298 failed";
  (* Paths of depth 2 *)
  (* .a421.#a160 *)
  let actual = r.a421.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 3299;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3299 failed";
  (* .a421.#b160 *)
  let actual = r.a421.#b160 in
  let expected = "0" in
  mark_test_run 3300;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3300 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a421 = a4211 } { a421 = a4212 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a4211 a4212) in
  let next_r = { a421 = #{ a160 = (unbox_unit ()); b160 = "100" } } in
  let r_expected = { a421 = #{ a160 = (unbox_unit ()); b160 = "0" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a421 *)
  r.a421 <- next_r.a421;
  let r_expected = { r_expected with a421 = next_r.a421 } in
  mark_test_run 3301;
  let test = eq r r_expected in
  if not test then failwithf "test 3301 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a421 = #{ a160; b160 } } = r in
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 3302;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 3302 failed";
  let expected_b160 = "100" in
  mark_test_run 3303;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 3303 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a421 } = r in
  let expected_a421 = #{ a160 = (unbox_unit ()); b160 = "100" } in
  mark_test_run 3304;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) expected_a421 a421 in
  if not test then failwithf "test 3304 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t422 = { #{ unit_u; string }; unit_u }   *)
  (**********************************************)
  let r = { a422 = #{ a160 = (unbox_unit ()); b160 = "0" }; b422 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a422 *)
  let actual = r.a422 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "0" } in
  mark_test_run 3305;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 3305 failed";
  (* Paths of depth 2 *)
  (* .a422.#a160 *)
  let actual = r.a422.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 3306;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3306 failed";
  (* .a422.#b160 *)
  let actual = r.a422.#b160 in
  let expected = "0" in
  mark_test_run 3307;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3307 failed";
  (* Paths of depth 1 *)
  (* .b422 *)
  let actual = r.b422 in
  let expected = (unbox_unit ()) in
  mark_test_run 3308;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3308 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a422 = a4221; b422 = b4221 } { a422 = a4222; b422 = b4222 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a4221 a4222 && (fun _ _ -> true) b4221 b4222) in
  let next_r = { a422 = #{ a160 = (unbox_unit ()); b160 = "100" }; b422 = (unbox_unit ()) } in
  let r_expected = { a422 = #{ a160 = (unbox_unit ()); b160 = "0" }; b422 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a422 *)
  r.a422 <- next_r.a422;
  let r_expected = { r_expected with a422 = next_r.a422 } in
  mark_test_run 3309;
  let test = eq r r_expected in
  if not test then failwithf "test 3309 failed";
  Gc.compact ();
  (* .b422 *)
  r.b422 <- next_r.b422;
  let r_expected = { r_expected with b422 = next_r.b422 } in
  mark_test_run 3310;
  let test = eq r r_expected in
  if not test then failwithf "test 3310 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a422 = #{ a160; b160 }; b422 } = r in
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 3311;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 3311 failed";
  let expected_b160 = "100" in
  mark_test_run 3312;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 3312 failed";
  let expected_b422 = (unbox_unit ()) in
  mark_test_run 3313;
  let test = (fun _ _ -> true) expected_b422 b422 in
  if not test then failwithf "test 3313 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a422; b422 } = r in
  let expected_a422 = #{ a160 = (unbox_unit ()); b160 = "100" } in
  mark_test_run 3314;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) expected_a422 a422 in
  if not test then failwithf "test 3314 failed";
  let expected_b422 = (unbox_unit ()) in
  mark_test_run 3315;
  let test = (fun _ _ -> true) expected_b422 b422 in
  if not test then failwithf "test 3315 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t423 = { #{ unit_u; string }; string }   *)
  (**********************************************)
  let r = { a423 = #{ a160 = (unbox_unit ()); b160 = "0" }; b423 = "1" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a423 *)
  let actual = r.a423 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "0" } in
  mark_test_run 3316;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 3316 failed";
  (* Paths of depth 2 *)
  (* .a423.#a160 *)
  let actual = r.a423.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 3317;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3317 failed";
  (* .a423.#b160 *)
  let actual = r.a423.#b160 in
  let expected = "0" in
  mark_test_run 3318;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3318 failed";
  (* Paths of depth 1 *)
  (* .b423 *)
  let actual = r.b423 in
  let expected = "1" in
  mark_test_run 3319;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3319 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a423 = a4231; b423 = b4231 } { a423 = a4232; b423 = b4232 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a4231 a4232 && (fun a b -> String.equal (globalize a) (globalize b)) b4231 b4232) in
  let next_r = { a423 = #{ a160 = (unbox_unit ()); b160 = "100" }; b423 = "101" } in
  let r_expected = { a423 = #{ a160 = (unbox_unit ()); b160 = "0" }; b423 = "1" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a423 *)
  r.a423 <- next_r.a423;
  let r_expected = { r_expected with a423 = next_r.a423 } in
  mark_test_run 3320;
  let test = eq r r_expected in
  if not test then failwithf "test 3320 failed";
  Gc.compact ();
  (* .b423 *)
  r.b423 <- next_r.b423;
  let r_expected = { r_expected with b423 = next_r.b423 } in
  mark_test_run 3321;
  let test = eq r r_expected in
  if not test then failwithf "test 3321 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a423 = #{ a160; b160 }; b423 } = r in
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 3322;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 3322 failed";
  let expected_b160 = "100" in
  mark_test_run 3323;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 3323 failed";
  let expected_b423 = "101" in
  mark_test_run 3324;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b423 b423 in
  if not test then failwithf "test 3324 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a423; b423 } = r in
  let expected_a423 = #{ a160 = (unbox_unit ()); b160 = "100" } in
  mark_test_run 3325;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) expected_a423 a423 in
  if not test then failwithf "test 3325 failed";
  let expected_b423 = "101" in
  mark_test_run 3326;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b423 b423 in
  if not test then failwithf "test 3326 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t425 = { #{ unit_u; #{ unit_u; string } } }   *)
  (***************************************************)
  let r = { a425 = #{ a424 = (unbox_unit ()); b424 = #{ a160 = (unbox_unit ()); b160 = "0" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a425 *)
  let actual = r.a425 in
  let expected = #{ a424 = (unbox_unit ()); b424 = #{ a160 = (unbox_unit ()); b160 = "0" } } in
  mark_test_run 3327;
  let test = (fun #{ a424 = a4241; b424 = b4241 } #{ a424 = a4242; b424 = b4242 } -> (fun _ _ -> true) a4241 a4242 && (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) b4241 b4242) actual expected in
  if not test then failwithf "test 3327 failed";
  (* Paths of depth 2 *)
  (* .a425.#a424 *)
  let actual = r.a425.#a424 in
  let expected = (unbox_unit ()) in
  mark_test_run 3328;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3328 failed";
  (* .a425.#b424 *)
  let actual = r.a425.#b424 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "0" } in
  mark_test_run 3329;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 3329 failed";
  (* Paths of depth 3 *)
  (* .a425.#b424.#a160 *)
  let actual = r.a425.#b424.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 3330;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3330 failed";
  (* .a425.#b424.#b160 *)
  let actual = r.a425.#b424.#b160 in
  let expected = "0" in
  mark_test_run 3331;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3331 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a425 = a4251 } { a425 = a4252 } -> (fun #{ a424 = a4241; b424 = b4241 } #{ a424 = a4242; b424 = b4242 } -> (fun _ _ -> true) a4241 a4242 && (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) b4241 b4242) a4251 a4252) in
  let next_r = { a425 = #{ a424 = (unbox_unit ()); b424 = #{ a160 = (unbox_unit ()); b160 = "100" } } } in
  let r_expected = { a425 = #{ a424 = (unbox_unit ()); b424 = #{ a160 = (unbox_unit ()); b160 = "0" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a425 *)
  r.a425 <- next_r.a425;
  let r_expected = { r_expected with a425 = next_r.a425 } in
  mark_test_run 3332;
  let test = eq r r_expected in
  if not test then failwithf "test 3332 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a425 = #{ a424; b424 = #{ a160; b160 } } } = r in
  let expected_a424 = (unbox_unit ()) in
  mark_test_run 3333;
  let test = (fun _ _ -> true) expected_a424 a424 in
  if not test then failwithf "test 3333 failed";
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 3334;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 3334 failed";
  let expected_b160 = "100" in
  mark_test_run 3335;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 3335 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a425 } = r in
  let expected_a425 = #{ a424 = (unbox_unit ()); b424 = #{ a160 = (unbox_unit ()); b160 = "100" } } in
  mark_test_run 3336;
  let test = (fun #{ a424 = a4241; b424 = b4241 } #{ a424 = a4242; b424 = b4242 } -> (fun _ _ -> true) a4241 a4242 && (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) b4241 b4242) expected_a425 a425 in
  if not test then failwithf "test 3336 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t427 = { #{ unit_u; #{ string; unit_u } } }   *)
  (***************************************************)
  let r = { a427 = #{ a426 = (unbox_unit ()); b426 = #{ a166 = "0"; b166 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a427 *)
  let actual = r.a427 in
  let expected = #{ a426 = (unbox_unit ()); b426 = #{ a166 = "0"; b166 = (unbox_unit ()) } } in
  mark_test_run 3337;
  let test = (fun #{ a426 = a4261; b426 = b4261 } #{ a426 = a4262; b426 = b4262 } -> (fun _ _ -> true) a4261 a4262 && (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) b4261 b4262) actual expected in
  if not test then failwithf "test 3337 failed";
  (* Paths of depth 2 *)
  (* .a427.#a426 *)
  let actual = r.a427.#a426 in
  let expected = (unbox_unit ()) in
  mark_test_run 3338;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3338 failed";
  (* .a427.#b426 *)
  let actual = r.a427.#b426 in
  let expected = #{ a166 = "0"; b166 = (unbox_unit ()) } in
  mark_test_run 3339;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 3339 failed";
  (* Paths of depth 3 *)
  (* .a427.#b426.#a166 *)
  let actual = r.a427.#b426.#a166 in
  let expected = "0" in
  mark_test_run 3340;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3340 failed";
  (* .a427.#b426.#b166 *)
  let actual = r.a427.#b426.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 3341;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3341 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a427 = a4271 } { a427 = a4272 } -> (fun #{ a426 = a4261; b426 = b4261 } #{ a426 = a4262; b426 = b4262 } -> (fun _ _ -> true) a4261 a4262 && (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) b4261 b4262) a4271 a4272) in
  let next_r = { a427 = #{ a426 = (unbox_unit ()); b426 = #{ a166 = "100"; b166 = (unbox_unit ()) } } } in
  let r_expected = { a427 = #{ a426 = (unbox_unit ()); b426 = #{ a166 = "0"; b166 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a427 *)
  r.a427 <- next_r.a427;
  let r_expected = { r_expected with a427 = next_r.a427 } in
  mark_test_run 3342;
  let test = eq r r_expected in
  if not test then failwithf "test 3342 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a427 = #{ a426; b426 = #{ a166; b166 } } } = r in
  let expected_a426 = (unbox_unit ()) in
  mark_test_run 3343;
  let test = (fun _ _ -> true) expected_a426 a426 in
  if not test then failwithf "test 3343 failed";
  let expected_a166 = "100" in
  mark_test_run 3344;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 3344 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 3345;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 3345 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a427 } = r in
  let expected_a427 = #{ a426 = (unbox_unit ()); b426 = #{ a166 = "100"; b166 = (unbox_unit ()) } } in
  mark_test_run 3346;
  let test = (fun #{ a426 = a4261; b426 = b4261 } #{ a426 = a4262; b426 = b4262 } -> (fun _ _ -> true) a4261 a4262 && (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) b4261 b4262) expected_a427 a427 in
  if not test then failwithf "test 3346 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t429 = { #{ unit_u; #{ string; string } } }   *)
  (***************************************************)
  let r = { a429 = #{ a428 = (unbox_unit ()); b428 = #{ a168 = "0"; b168 = "1" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a429 *)
  let actual = r.a429 in
  let expected = #{ a428 = (unbox_unit ()); b428 = #{ a168 = "0"; b168 = "1" } } in
  mark_test_run 3347;
  let test = (fun #{ a428 = a4281; b428 = b4281 } #{ a428 = a4282; b428 = b4282 } -> (fun _ _ -> true) a4281 a4282 && (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) b4281 b4282) actual expected in
  if not test then failwithf "test 3347 failed";
  (* Paths of depth 2 *)
  (* .a429.#a428 *)
  let actual = r.a429.#a428 in
  let expected = (unbox_unit ()) in
  mark_test_run 3348;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3348 failed";
  (* .a429.#b428 *)
  let actual = r.a429.#b428 in
  let expected = #{ a168 = "0"; b168 = "1" } in
  mark_test_run 3349;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 3349 failed";
  (* Paths of depth 3 *)
  (* .a429.#b428.#a168 *)
  let actual = r.a429.#b428.#a168 in
  let expected = "0" in
  mark_test_run 3350;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3350 failed";
  (* .a429.#b428.#b168 *)
  let actual = r.a429.#b428.#b168 in
  let expected = "1" in
  mark_test_run 3351;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3351 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a429 = a4291 } { a429 = a4292 } -> (fun #{ a428 = a4281; b428 = b4281 } #{ a428 = a4282; b428 = b4282 } -> (fun _ _ -> true) a4281 a4282 && (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) b4281 b4282) a4291 a4292) in
  let next_r = { a429 = #{ a428 = (unbox_unit ()); b428 = #{ a168 = "100"; b168 = "101" } } } in
  let r_expected = { a429 = #{ a428 = (unbox_unit ()); b428 = #{ a168 = "0"; b168 = "1" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a429 *)
  r.a429 <- next_r.a429;
  let r_expected = { r_expected with a429 = next_r.a429 } in
  mark_test_run 3352;
  let test = eq r r_expected in
  if not test then failwithf "test 3352 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a429 = #{ a428; b428 = #{ a168; b168 } } } = r in
  let expected_a428 = (unbox_unit ()) in
  mark_test_run 3353;
  let test = (fun _ _ -> true) expected_a428 a428 in
  if not test then failwithf "test 3353 failed";
  let expected_a168 = "100" in
  mark_test_run 3354;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 3354 failed";
  let expected_b168 = "101" in
  mark_test_run 3355;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 3355 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a429 } = r in
  let expected_a429 = #{ a428 = (unbox_unit ()); b428 = #{ a168 = "100"; b168 = "101" } } in
  mark_test_run 3356;
  let test = (fun #{ a428 = a4281; b428 = b4281 } #{ a428 = a4282; b428 = b4282 } -> (fun _ _ -> true) a4281 a4282 && (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) b4281 b4282) expected_a429 a429 in
  if not test then failwithf "test 3356 failed";

  ()
;;

let () =
  (*****************************)
  (*   t430 = { #{ float } }   *)
  (*****************************)
  let r = { a430 = #{ a36 = 0. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a430 *)
  let actual = r.a430 in
  let expected = #{ a36 = 0. } in
  mark_test_run 3357;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 3357 failed";
  (* Paths of depth 2 *)
  (* .a430.#a36 *)
  let actual = r.a430.#a36 in
  let expected = 0. in
  mark_test_run 3358;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3358 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a430 = a4301 } { a430 = a4302 } -> (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) a4301 a4302) in
  let next_r = { a430 = #{ a36 = 100. } } in
  let r_expected = { a430 = #{ a36 = 0. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a430 *)
  r.a430 <- next_r.a430;
  let r_expected = { r_expected with a430 = next_r.a430 } in
  mark_test_run 3359;
  let test = eq r r_expected in
  if not test then failwithf "test 3359 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a430 = #{ a36 } } = r in
  let expected_a36 = 100. in
  mark_test_run 3360;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 3360 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a430 } = r in
  let expected_a430 = #{ a36 = 100. } in
  mark_test_run 3361;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) expected_a430 a430 in
  if not test then failwithf "test 3361 failed";

  ()
;;

let () =
  (**********************************)
  (*   t431 = { #{ float }; int }   *)
  (**********************************)
  let r = { a431 = #{ a36 = 0. }; b431 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a431 *)
  let actual = r.a431 in
  let expected = #{ a36 = 0. } in
  mark_test_run 3362;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 3362 failed";
  (* Paths of depth 2 *)
  (* .a431.#a36 *)
  let actual = r.a431.#a36 in
  let expected = 0. in
  mark_test_run 3363;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3363 failed";
  (* Paths of depth 1 *)
  (* .b431 *)
  let actual = r.b431 in
  let expected = 1 in
  mark_test_run 3364;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3364 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a431 = a4311; b431 = b4311 } { a431 = a4312; b431 = b4312 } -> (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) a4311 a4312 && (fun a b -> Int.equal a b) b4311 b4312) in
  let next_r = { a431 = #{ a36 = 100. }; b431 = 101 } in
  let r_expected = { a431 = #{ a36 = 0. }; b431 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a431 *)
  r.a431 <- next_r.a431;
  let r_expected = { r_expected with a431 = next_r.a431 } in
  mark_test_run 3365;
  let test = eq r r_expected in
  if not test then failwithf "test 3365 failed";
  Gc.compact ();
  (* .b431 *)
  r.b431 <- next_r.b431;
  let r_expected = { r_expected with b431 = next_r.b431 } in
  mark_test_run 3366;
  let test = eq r r_expected in
  if not test then failwithf "test 3366 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a431 = #{ a36 }; b431 } = r in
  let expected_a36 = 100. in
  mark_test_run 3367;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 3367 failed";
  let expected_b431 = 101 in
  mark_test_run 3368;
  let test = (fun a b -> Int.equal a b) expected_b431 b431 in
  if not test then failwithf "test 3368 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a431; b431 } = r in
  let expected_a431 = #{ a36 = 100. } in
  mark_test_run 3369;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) expected_a431 a431 in
  if not test then failwithf "test 3369 failed";
  let expected_b431 = 101 in
  mark_test_run 3370;
  let test = (fun a b -> Int.equal a b) expected_b431 b431 in
  if not test then failwithf "test 3370 failed";

  ()
;;

let () =
  (************************************)
  (*   t432 = { #{ float }; float }   *)
  (************************************)
  let r = { a432 = #{ a36 = 0. }; b432 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a432 *)
  let actual = r.a432 in
  let expected = #{ a36 = 0. } in
  mark_test_run 3371;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 3371 failed";
  (* Paths of depth 2 *)
  (* .a432.#a36 *)
  let actual = r.a432.#a36 in
  let expected = 0. in
  mark_test_run 3372;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3372 failed";
  (* Paths of depth 1 *)
  (* .b432 *)
  let actual = r.b432 in
  let expected = 1. in
  mark_test_run 3373;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3373 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a432 = a4321; b432 = b4321 } { a432 = a4322; b432 = b4322 } -> (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) a4321 a4322 && (fun a b -> Float.equal (globalize a) (globalize b)) b4321 b4322) in
  let next_r = { a432 = #{ a36 = 100. }; b432 = 101. } in
  let r_expected = { a432 = #{ a36 = 0. }; b432 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a432 *)
  r.a432 <- next_r.a432;
  let r_expected = { r_expected with a432 = next_r.a432 } in
  mark_test_run 3374;
  let test = eq r r_expected in
  if not test then failwithf "test 3374 failed";
  Gc.compact ();
  (* .b432 *)
  r.b432 <- next_r.b432;
  let r_expected = { r_expected with b432 = next_r.b432 } in
  mark_test_run 3375;
  let test = eq r r_expected in
  if not test then failwithf "test 3375 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a432 = #{ a36 }; b432 } = r in
  let expected_a36 = 100. in
  mark_test_run 3376;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 3376 failed";
  let expected_b432 = 101. in
  mark_test_run 3377;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b432 b432 in
  if not test then failwithf "test 3377 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a432; b432 } = r in
  let expected_a432 = #{ a36 = 100. } in
  mark_test_run 3378;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) expected_a432 a432 in
  if not test then failwithf "test 3378 failed";
  let expected_b432 = 101. in
  mark_test_run 3379;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b432 b432 in
  if not test then failwithf "test 3379 failed";

  ()
;;

let () =
  (*************************************)
  (*   t433 = { #{ float }; float# }   *)
  (*************************************)
  let r = { a433 = #{ a36 = 0. }; b433 = #1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a433 *)
  let actual = r.a433 in
  let expected = #{ a36 = 0. } in
  mark_test_run 3380;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) actual expected in
  if not test then failwithf "test 3380 failed";
  (* Paths of depth 2 *)
  (* .a433.#a36 *)
  let actual = r.a433.#a36 in
  let expected = 0. in
  mark_test_run 3381;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3381 failed";
  (* Paths of depth 1 *)
  (* .b433 *)
  let actual = r.b433 in
  let expected = #1. in
  mark_test_run 3382;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3382 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a433 = a4331; b433 = b4331 } { a433 = a4332; b433 = b4332 } -> (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) a4331 a4332 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b4331 b4332) in
  let next_r = { a433 = #{ a36 = 100. }; b433 = #101. } in
  let r_expected = { a433 = #{ a36 = 0. }; b433 = #1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a433 *)
  r.a433 <- next_r.a433;
  let r_expected = { r_expected with a433 = next_r.a433 } in
  mark_test_run 3383;
  let test = eq r r_expected in
  if not test then failwithf "test 3383 failed";
  Gc.compact ();
  (* .b433 *)
  r.b433 <- next_r.b433;
  let r_expected = { r_expected with b433 = next_r.b433 } in
  mark_test_run 3384;
  let test = eq r r_expected in
  if not test then failwithf "test 3384 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a433 = #{ a36 }; b433 } = r in
  let expected_a36 = 100. in
  mark_test_run 3385;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a36 a36 in
  if not test then failwithf "test 3385 failed";
  let expected_b433 = #101. in
  mark_test_run 3386;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b433 b433 in
  if not test then failwithf "test 3386 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a433; b433 } = r in
  let expected_a433 = #{ a36 = 100. } in
  mark_test_run 3387;
  let test = (fun #{ a36 = a361 } #{ a36 = a362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a361 a362) expected_a433 a433 in
  if not test then failwithf "test 3387 failed";
  let expected_b433 = #101. in
  mark_test_run 3388;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b433 b433 in
  if not test then failwithf "test 3388 failed";

  ()
;;

let () =
  (**********************************)
  (*   t434 = { #{ float; int } }   *)
  (**********************************)
  let r = { a434 = #{ a49 = 0.; b49 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a434 *)
  let actual = r.a434 in
  let expected = #{ a49 = 0.; b49 = 1 } in
  mark_test_run 3389;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 3389 failed";
  (* Paths of depth 2 *)
  (* .a434.#a49 *)
  let actual = r.a434.#a49 in
  let expected = 0. in
  mark_test_run 3390;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3390 failed";
  (* .a434.#b49 *)
  let actual = r.a434.#b49 in
  let expected = 1 in
  mark_test_run 3391;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3391 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a434 = a4341 } { a434 = a4342 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a4341 a4342) in
  let next_r = { a434 = #{ a49 = 100.; b49 = 101 } } in
  let r_expected = { a434 = #{ a49 = 0.; b49 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a434 *)
  r.a434 <- next_r.a434;
  let r_expected = { r_expected with a434 = next_r.a434 } in
  mark_test_run 3392;
  let test = eq r r_expected in
  if not test then failwithf "test 3392 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a434 = #{ a49; b49 } } = r in
  let expected_a49 = 100. in
  mark_test_run 3393;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 3393 failed";
  let expected_b49 = 101 in
  mark_test_run 3394;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 3394 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a434 } = r in
  let expected_a434 = #{ a49 = 100.; b49 = 101 } in
  mark_test_run 3395;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) expected_a434 a434 in
  if not test then failwithf "test 3395 failed";

  ()
;;

let () =
  (***************************************)
  (*   t435 = { #{ float; int }; int }   *)
  (***************************************)
  let r = { a435 = #{ a49 = 0.; b49 = 1 }; b435 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a435 *)
  let actual = r.a435 in
  let expected = #{ a49 = 0.; b49 = 1 } in
  mark_test_run 3396;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 3396 failed";
  (* Paths of depth 2 *)
  (* .a435.#a49 *)
  let actual = r.a435.#a49 in
  let expected = 0. in
  mark_test_run 3397;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3397 failed";
  (* .a435.#b49 *)
  let actual = r.a435.#b49 in
  let expected = 1 in
  mark_test_run 3398;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3398 failed";
  (* Paths of depth 1 *)
  (* .b435 *)
  let actual = r.b435 in
  let expected = 2 in
  mark_test_run 3399;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3399 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a435 = a4351; b435 = b4351 } { a435 = a4352; b435 = b4352 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a4351 a4352 && (fun a b -> Int.equal a b) b4351 b4352) in
  let next_r = { a435 = #{ a49 = 100.; b49 = 101 }; b435 = 102 } in
  let r_expected = { a435 = #{ a49 = 0.; b49 = 1 }; b435 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a435 *)
  r.a435 <- next_r.a435;
  let r_expected = { r_expected with a435 = next_r.a435 } in
  mark_test_run 3400;
  let test = eq r r_expected in
  if not test then failwithf "test 3400 failed";
  Gc.compact ();
  (* .b435 *)
  r.b435 <- next_r.b435;
  let r_expected = { r_expected with b435 = next_r.b435 } in
  mark_test_run 3401;
  let test = eq r r_expected in
  if not test then failwithf "test 3401 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a435 = #{ a49; b49 }; b435 } = r in
  let expected_a49 = 100. in
  mark_test_run 3402;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 3402 failed";
  let expected_b49 = 101 in
  mark_test_run 3403;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 3403 failed";
  let expected_b435 = 102 in
  mark_test_run 3404;
  let test = (fun a b -> Int.equal a b) expected_b435 b435 in
  if not test then failwithf "test 3404 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a435; b435 } = r in
  let expected_a435 = #{ a49 = 100.; b49 = 101 } in
  mark_test_run 3405;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) expected_a435 a435 in
  if not test then failwithf "test 3405 failed";
  let expected_b435 = 102 in
  mark_test_run 3406;
  let test = (fun a b -> Int.equal a b) expected_b435 b435 in
  if not test then failwithf "test 3406 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t436 = { #{ float; int }; float }   *)
  (*****************************************)
  let r = { a436 = #{ a49 = 0.; b49 = 1 }; b436 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a436 *)
  let actual = r.a436 in
  let expected = #{ a49 = 0.; b49 = 1 } in
  mark_test_run 3407;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 3407 failed";
  (* Paths of depth 2 *)
  (* .a436.#a49 *)
  let actual = r.a436.#a49 in
  let expected = 0. in
  mark_test_run 3408;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3408 failed";
  (* .a436.#b49 *)
  let actual = r.a436.#b49 in
  let expected = 1 in
  mark_test_run 3409;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3409 failed";
  (* Paths of depth 1 *)
  (* .b436 *)
  let actual = r.b436 in
  let expected = 2. in
  mark_test_run 3410;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3410 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a436 = a4361; b436 = b4361 } { a436 = a4362; b436 = b4362 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a4361 a4362 && (fun a b -> Float.equal (globalize a) (globalize b)) b4361 b4362) in
  let next_r = { a436 = #{ a49 = 100.; b49 = 101 }; b436 = 102. } in
  let r_expected = { a436 = #{ a49 = 0.; b49 = 1 }; b436 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a436 *)
  r.a436 <- next_r.a436;
  let r_expected = { r_expected with a436 = next_r.a436 } in
  mark_test_run 3411;
  let test = eq r r_expected in
  if not test then failwithf "test 3411 failed";
  Gc.compact ();
  (* .b436 *)
  r.b436 <- next_r.b436;
  let r_expected = { r_expected with b436 = next_r.b436 } in
  mark_test_run 3412;
  let test = eq r r_expected in
  if not test then failwithf "test 3412 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a436 = #{ a49; b49 }; b436 } = r in
  let expected_a49 = 100. in
  mark_test_run 3413;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 3413 failed";
  let expected_b49 = 101 in
  mark_test_run 3414;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 3414 failed";
  let expected_b436 = 102. in
  mark_test_run 3415;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b436 b436 in
  if not test then failwithf "test 3415 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a436; b436 } = r in
  let expected_a436 = #{ a49 = 100.; b49 = 101 } in
  mark_test_run 3416;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) expected_a436 a436 in
  if not test then failwithf "test 3416 failed";
  let expected_b436 = 102. in
  mark_test_run 3417;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b436 b436 in
  if not test then failwithf "test 3417 failed";

  ()
;;

let () =
  (************************************)
  (*   t437 = { #{ float; float } }   *)
  (************************************)
  let r = { a437 = #{ a51 = 0.; b51 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a437 *)
  let actual = r.a437 in
  let expected = #{ a51 = 0.; b51 = 1. } in
  mark_test_run 3418;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 3418 failed";
  (* Paths of depth 2 *)
  (* .a437.#a51 *)
  let actual = r.a437.#a51 in
  let expected = 0. in
  mark_test_run 3419;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3419 failed";
  (* .a437.#b51 *)
  let actual = r.a437.#b51 in
  let expected = 1. in
  mark_test_run 3420;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3420 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a437 = a4371 } { a437 = a4372 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a4371 a4372) in
  let next_r = { a437 = #{ a51 = 100.; b51 = 101. } } in
  let r_expected = { a437 = #{ a51 = 0.; b51 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a437 *)
  r.a437 <- next_r.a437;
  let r_expected = { r_expected with a437 = next_r.a437 } in
  mark_test_run 3421;
  let test = eq r r_expected in
  if not test then failwithf "test 3421 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a437 = #{ a51; b51 } } = r in
  let expected_a51 = 100. in
  mark_test_run 3422;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 3422 failed";
  let expected_b51 = 101. in
  mark_test_run 3423;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 3423 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a437 } = r in
  let expected_a437 = #{ a51 = 100.; b51 = 101. } in
  mark_test_run 3424;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) expected_a437 a437 in
  if not test then failwithf "test 3424 failed";

  ()
;;

let () =
  (*****************************************)
  (*   t438 = { #{ float; float }; int }   *)
  (*****************************************)
  let r = { a438 = #{ a51 = 0.; b51 = 1. }; b438 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a438 *)
  let actual = r.a438 in
  let expected = #{ a51 = 0.; b51 = 1. } in
  mark_test_run 3425;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 3425 failed";
  (* Paths of depth 2 *)
  (* .a438.#a51 *)
  let actual = r.a438.#a51 in
  let expected = 0. in
  mark_test_run 3426;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3426 failed";
  (* .a438.#b51 *)
  let actual = r.a438.#b51 in
  let expected = 1. in
  mark_test_run 3427;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3427 failed";
  (* Paths of depth 1 *)
  (* .b438 *)
  let actual = r.b438 in
  let expected = 2 in
  mark_test_run 3428;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3428 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a438 = a4381; b438 = b4381 } { a438 = a4382; b438 = b4382 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a4381 a4382 && (fun a b -> Int.equal a b) b4381 b4382) in
  let next_r = { a438 = #{ a51 = 100.; b51 = 101. }; b438 = 102 } in
  let r_expected = { a438 = #{ a51 = 0.; b51 = 1. }; b438 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a438 *)
  r.a438 <- next_r.a438;
  let r_expected = { r_expected with a438 = next_r.a438 } in
  mark_test_run 3429;
  let test = eq r r_expected in
  if not test then failwithf "test 3429 failed";
  Gc.compact ();
  (* .b438 *)
  r.b438 <- next_r.b438;
  let r_expected = { r_expected with b438 = next_r.b438 } in
  mark_test_run 3430;
  let test = eq r r_expected in
  if not test then failwithf "test 3430 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a438 = #{ a51; b51 }; b438 } = r in
  let expected_a51 = 100. in
  mark_test_run 3431;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 3431 failed";
  let expected_b51 = 101. in
  mark_test_run 3432;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 3432 failed";
  let expected_b438 = 102 in
  mark_test_run 3433;
  let test = (fun a b -> Int.equal a b) expected_b438 b438 in
  if not test then failwithf "test 3433 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a438; b438 } = r in
  let expected_a438 = #{ a51 = 100.; b51 = 101. } in
  mark_test_run 3434;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) expected_a438 a438 in
  if not test then failwithf "test 3434 failed";
  let expected_b438 = 102 in
  mark_test_run 3435;
  let test = (fun a b -> Int.equal a b) expected_b438 b438 in
  if not test then failwithf "test 3435 failed";

  ()
;;

let () =
  (*******************************************)
  (*   t439 = { #{ float; float }; float }   *)
  (*******************************************)
  let r = { a439 = #{ a51 = 0.; b51 = 1. }; b439 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a439 *)
  let actual = r.a439 in
  let expected = #{ a51 = 0.; b51 = 1. } in
  mark_test_run 3436;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 3436 failed";
  (* Paths of depth 2 *)
  (* .a439.#a51 *)
  let actual = r.a439.#a51 in
  let expected = 0. in
  mark_test_run 3437;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3437 failed";
  (* .a439.#b51 *)
  let actual = r.a439.#b51 in
  let expected = 1. in
  mark_test_run 3438;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3438 failed";
  (* Paths of depth 1 *)
  (* .b439 *)
  let actual = r.b439 in
  let expected = 2. in
  mark_test_run 3439;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3439 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a439 = a4391; b439 = b4391 } { a439 = a4392; b439 = b4392 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a4391 a4392 && (fun a b -> Float.equal (globalize a) (globalize b)) b4391 b4392) in
  let next_r = { a439 = #{ a51 = 100.; b51 = 101. }; b439 = 102. } in
  let r_expected = { a439 = #{ a51 = 0.; b51 = 1. }; b439 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a439 *)
  r.a439 <- next_r.a439;
  let r_expected = { r_expected with a439 = next_r.a439 } in
  mark_test_run 3440;
  let test = eq r r_expected in
  if not test then failwithf "test 3440 failed";
  Gc.compact ();
  (* .b439 *)
  r.b439 <- next_r.b439;
  let r_expected = { r_expected with b439 = next_r.b439 } in
  mark_test_run 3441;
  let test = eq r r_expected in
  if not test then failwithf "test 3441 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a439 = #{ a51; b51 }; b439 } = r in
  let expected_a51 = 100. in
  mark_test_run 3442;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 3442 failed";
  let expected_b51 = 101. in
  mark_test_run 3443;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 3443 failed";
  let expected_b439 = 102. in
  mark_test_run 3444;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b439 b439 in
  if not test then failwithf "test 3444 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a439; b439 } = r in
  let expected_a439 = #{ a51 = 100.; b51 = 101. } in
  mark_test_run 3445;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) expected_a439 a439 in
  if not test then failwithf "test 3445 failed";
  let expected_b439 = 102. in
  mark_test_run 3446;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b439 b439 in
  if not test then failwithf "test 3446 failed";

  ()
;;

let () =
  (********************************************)
  (*   t440 = { #{ float; float }; float# }   *)
  (********************************************)
  let r = { a440 = #{ a51 = 0.; b51 = 1. }; b440 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a440 *)
  let actual = r.a440 in
  let expected = #{ a51 = 0.; b51 = 1. } in
  mark_test_run 3447;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 3447 failed";
  (* Paths of depth 2 *)
  (* .a440.#a51 *)
  let actual = r.a440.#a51 in
  let expected = 0. in
  mark_test_run 3448;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3448 failed";
  (* .a440.#b51 *)
  let actual = r.a440.#b51 in
  let expected = 1. in
  mark_test_run 3449;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3449 failed";
  (* Paths of depth 1 *)
  (* .b440 *)
  let actual = r.b440 in
  let expected = #2. in
  mark_test_run 3450;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3450 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a440 = a4401; b440 = b4401 } { a440 = a4402; b440 = b4402 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a4401 a4402 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b4401 b4402) in
  let next_r = { a440 = #{ a51 = 100.; b51 = 101. }; b440 = #102. } in
  let r_expected = { a440 = #{ a51 = 0.; b51 = 1. }; b440 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a440 *)
  r.a440 <- next_r.a440;
  let r_expected = { r_expected with a440 = next_r.a440 } in
  mark_test_run 3451;
  let test = eq r r_expected in
  if not test then failwithf "test 3451 failed";
  Gc.compact ();
  (* .b440 *)
  r.b440 <- next_r.b440;
  let r_expected = { r_expected with b440 = next_r.b440 } in
  mark_test_run 3452;
  let test = eq r r_expected in
  if not test then failwithf "test 3452 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a440 = #{ a51; b51 }; b440 } = r in
  let expected_a51 = 100. in
  mark_test_run 3453;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 3453 failed";
  let expected_b51 = 101. in
  mark_test_run 3454;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 3454 failed";
  let expected_b440 = #102. in
  mark_test_run 3455;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b440 b440 in
  if not test then failwithf "test 3455 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a440; b440 } = r in
  let expected_a440 = #{ a51 = 100.; b51 = 101. } in
  mark_test_run 3456;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) expected_a440 a440 in
  if not test then failwithf "test 3456 failed";
  let expected_b440 = #102. in
  mark_test_run 3457;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b440 b440 in
  if not test then failwithf "test 3457 failed";

  ()
;;

let () =
  (*************************************)
  (*   t441 = { #{ float; float# } }   *)
  (*************************************)
  let r = { a441 = #{ a211 = 0.; b211 = #1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a441 *)
  let actual = r.a441 in
  let expected = #{ a211 = 0.; b211 = #1. } in
  mark_test_run 3458;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 3458 failed";
  (* Paths of depth 2 *)
  (* .a441.#a211 *)
  let actual = r.a441.#a211 in
  let expected = 0. in
  mark_test_run 3459;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3459 failed";
  (* .a441.#b211 *)
  let actual = r.a441.#b211 in
  let expected = #1. in
  mark_test_run 3460;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3460 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a441 = a4411 } { a441 = a4412 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a4411 a4412) in
  let next_r = { a441 = #{ a211 = 100.; b211 = #101. } } in
  let r_expected = { a441 = #{ a211 = 0.; b211 = #1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a441 *)
  r.a441 <- next_r.a441;
  let r_expected = { r_expected with a441 = next_r.a441 } in
  mark_test_run 3461;
  let test = eq r r_expected in
  if not test then failwithf "test 3461 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a441 = #{ a211; b211 } } = r in
  let expected_a211 = 100. in
  mark_test_run 3462;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 3462 failed";
  let expected_b211 = #101. in
  mark_test_run 3463;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 3463 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a441 } = r in
  let expected_a441 = #{ a211 = 100.; b211 = #101. } in
  mark_test_run 3464;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) expected_a441 a441 in
  if not test then failwithf "test 3464 failed";

  ()
;;

let () =
  (********************************************)
  (*   t442 = { #{ float; float# }; float }   *)
  (********************************************)
  let r = { a442 = #{ a211 = 0.; b211 = #1. }; b442 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a442 *)
  let actual = r.a442 in
  let expected = #{ a211 = 0.; b211 = #1. } in
  mark_test_run 3465;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 3465 failed";
  (* Paths of depth 2 *)
  (* .a442.#a211 *)
  let actual = r.a442.#a211 in
  let expected = 0. in
  mark_test_run 3466;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3466 failed";
  (* .a442.#b211 *)
  let actual = r.a442.#b211 in
  let expected = #1. in
  mark_test_run 3467;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3467 failed";
  (* Paths of depth 1 *)
  (* .b442 *)
  let actual = r.b442 in
  let expected = 2. in
  mark_test_run 3468;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3468 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a442 = a4421; b442 = b4421 } { a442 = a4422; b442 = b4422 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a4421 a4422 && (fun a b -> Float.equal (globalize a) (globalize b)) b4421 b4422) in
  let next_r = { a442 = #{ a211 = 100.; b211 = #101. }; b442 = 102. } in
  let r_expected = { a442 = #{ a211 = 0.; b211 = #1. }; b442 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a442 *)
  r.a442 <- next_r.a442;
  let r_expected = { r_expected with a442 = next_r.a442 } in
  mark_test_run 3469;
  let test = eq r r_expected in
  if not test then failwithf "test 3469 failed";
  Gc.compact ();
  (* .b442 *)
  r.b442 <- next_r.b442;
  let r_expected = { r_expected with b442 = next_r.b442 } in
  mark_test_run 3470;
  let test = eq r r_expected in
  if not test then failwithf "test 3470 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a442 = #{ a211; b211 }; b442 } = r in
  let expected_a211 = 100. in
  mark_test_run 3471;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 3471 failed";
  let expected_b211 = #101. in
  mark_test_run 3472;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 3472 failed";
  let expected_b442 = 102. in
  mark_test_run 3473;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b442 b442 in
  if not test then failwithf "test 3473 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a442; b442 } = r in
  let expected_a442 = #{ a211 = 100.; b211 = #101. } in
  mark_test_run 3474;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) expected_a442 a442 in
  if not test then failwithf "test 3474 failed";
  let expected_b442 = 102. in
  mark_test_run 3475;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b442 b442 in
  if not test then failwithf "test 3475 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t443 = { #{ float; float# }; float# }   *)
  (*********************************************)
  let r = { a443 = #{ a211 = 0.; b211 = #1. }; b443 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a443 *)
  let actual = r.a443 in
  let expected = #{ a211 = 0.; b211 = #1. } in
  mark_test_run 3476;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 3476 failed";
  (* Paths of depth 2 *)
  (* .a443.#a211 *)
  let actual = r.a443.#a211 in
  let expected = 0. in
  mark_test_run 3477;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3477 failed";
  (* .a443.#b211 *)
  let actual = r.a443.#b211 in
  let expected = #1. in
  mark_test_run 3478;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3478 failed";
  (* Paths of depth 1 *)
  (* .b443 *)
  let actual = r.b443 in
  let expected = #2. in
  mark_test_run 3479;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3479 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a443 = a4431; b443 = b4431 } { a443 = a4432; b443 = b4432 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a4431 a4432 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b4431 b4432) in
  let next_r = { a443 = #{ a211 = 100.; b211 = #101. }; b443 = #102. } in
  let r_expected = { a443 = #{ a211 = 0.; b211 = #1. }; b443 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a443 *)
  r.a443 <- next_r.a443;
  let r_expected = { r_expected with a443 = next_r.a443 } in
  mark_test_run 3480;
  let test = eq r r_expected in
  if not test then failwithf "test 3480 failed";
  Gc.compact ();
  (* .b443 *)
  r.b443 <- next_r.b443;
  let r_expected = { r_expected with b443 = next_r.b443 } in
  mark_test_run 3481;
  let test = eq r r_expected in
  if not test then failwithf "test 3481 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a443 = #{ a211; b211 }; b443 } = r in
  let expected_a211 = 100. in
  mark_test_run 3482;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 3482 failed";
  let expected_b211 = #101. in
  mark_test_run 3483;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 3483 failed";
  let expected_b443 = #102. in
  mark_test_run 3484;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b443 b443 in
  if not test then failwithf "test 3484 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a443; b443 } = r in
  let expected_a443 = #{ a211 = 100.; b211 = #101. } in
  mark_test_run 3485;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) expected_a443 a443 in
  if not test then failwithf "test 3485 failed";
  let expected_b443 = #102. in
  mark_test_run 3486;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b443 b443 in
  if not test then failwithf "test 3486 failed";

  ()
;;

let () =
  (********************************************)
  (*   t445 = { #{ float; #{ int; int } } }   *)
  (********************************************)
  let r = { a445 = #{ a444 = 0.; b444 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a445 *)
  let actual = r.a445 in
  let expected = #{ a444 = 0.; b444 = #{ a25 = 1; b25 = 2 } } in
  mark_test_run 3487;
  let test = (fun #{ a444 = a4441; b444 = b4441 } #{ a444 = a4442; b444 = b4442 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4441 a4442 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b4441 b4442) actual expected in
  if not test then failwithf "test 3487 failed";
  (* Paths of depth 2 *)
  (* .a445.#a444 *)
  let actual = r.a445.#a444 in
  let expected = 0. in
  mark_test_run 3488;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3488 failed";
  (* .a445.#b444 *)
  let actual = r.a445.#b444 in
  let expected = #{ a25 = 1; b25 = 2 } in
  mark_test_run 3489;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 3489 failed";
  (* Paths of depth 3 *)
  (* .a445.#b444.#a25 *)
  let actual = r.a445.#b444.#a25 in
  let expected = 1 in
  mark_test_run 3490;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3490 failed";
  (* .a445.#b444.#b25 *)
  let actual = r.a445.#b444.#b25 in
  let expected = 2 in
  mark_test_run 3491;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3491 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a445 = a4451 } { a445 = a4452 } -> (fun #{ a444 = a4441; b444 = b4441 } #{ a444 = a4442; b444 = b4442 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4441 a4442 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b4441 b4442) a4451 a4452) in
  let next_r = { a445 = #{ a444 = 100.; b444 = #{ a25 = 101; b25 = 102 } } } in
  let r_expected = { a445 = #{ a444 = 0.; b444 = #{ a25 = 1; b25 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a445 *)
  r.a445 <- next_r.a445;
  let r_expected = { r_expected with a445 = next_r.a445 } in
  mark_test_run 3492;
  let test = eq r r_expected in
  if not test then failwithf "test 3492 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a445 = #{ a444; b444 = #{ a25; b25 } } } = r in
  let expected_a444 = 100. in
  mark_test_run 3493;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a444 a444 in
  if not test then failwithf "test 3493 failed";
  let expected_a25 = 101 in
  mark_test_run 3494;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 3494 failed";
  let expected_b25 = 102 in
  mark_test_run 3495;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 3495 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a445 } = r in
  let expected_a445 = #{ a444 = 100.; b444 = #{ a25 = 101; b25 = 102 } } in
  mark_test_run 3496;
  let test = (fun #{ a444 = a4441; b444 = b4441 } #{ a444 = a4442; b444 = b4442 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4441 a4442 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) b4441 b4442) expected_a445 a445 in
  if not test then failwithf "test 3496 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t447 = { #{ float; #{ int; float } } }   *)
  (**********************************************)
  let r = { a447 = #{ a446 = 0.; b446 = #{ a29 = 1; b29 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a447 *)
  let actual = r.a447 in
  let expected = #{ a446 = 0.; b446 = #{ a29 = 1; b29 = 2. } } in
  mark_test_run 3497;
  let test = (fun #{ a446 = a4461; b446 = b4461 } #{ a446 = a4462; b446 = b4462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4461 a4462 && (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) b4461 b4462) actual expected in
  if not test then failwithf "test 3497 failed";
  (* Paths of depth 2 *)
  (* .a447.#a446 *)
  let actual = r.a447.#a446 in
  let expected = 0. in
  mark_test_run 3498;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3498 failed";
  (* .a447.#b446 *)
  let actual = r.a447.#b446 in
  let expected = #{ a29 = 1; b29 = 2. } in
  mark_test_run 3499;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 3499 failed";
  (* Paths of depth 3 *)
  (* .a447.#b446.#a29 *)
  let actual = r.a447.#b446.#a29 in
  let expected = 1 in
  mark_test_run 3500;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3500 failed";
  (* .a447.#b446.#b29 *)
  let actual = r.a447.#b446.#b29 in
  let expected = 2. in
  mark_test_run 3501;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3501 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a447 = a4471 } { a447 = a4472 } -> (fun #{ a446 = a4461; b446 = b4461 } #{ a446 = a4462; b446 = b4462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4461 a4462 && (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) b4461 b4462) a4471 a4472) in
  let next_r = { a447 = #{ a446 = 100.; b446 = #{ a29 = 101; b29 = 102. } } } in
  let r_expected = { a447 = #{ a446 = 0.; b446 = #{ a29 = 1; b29 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a447 *)
  r.a447 <- next_r.a447;
  let r_expected = { r_expected with a447 = next_r.a447 } in
  mark_test_run 3502;
  let test = eq r r_expected in
  if not test then failwithf "test 3502 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a447 = #{ a446; b446 = #{ a29; b29 } } } = r in
  let expected_a446 = 100. in
  mark_test_run 3503;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a446 a446 in
  if not test then failwithf "test 3503 failed";
  let expected_a29 = 101 in
  mark_test_run 3504;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 3504 failed";
  let expected_b29 = 102. in
  mark_test_run 3505;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 3505 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a447 } = r in
  let expected_a447 = #{ a446 = 100.; b446 = #{ a29 = 101; b29 = 102. } } in
  mark_test_run 3506;
  let test = (fun #{ a446 = a4461; b446 = b4461 } #{ a446 = a4462; b446 = b4462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4461 a4462 && (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) b4461 b4462) expected_a447 a447 in
  if not test then failwithf "test 3506 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t449 = { #{ float; #{ float; int } } }   *)
  (**********************************************)
  let r = { a449 = #{ a448 = 0.; b448 = #{ a49 = 1.; b49 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a449 *)
  let actual = r.a449 in
  let expected = #{ a448 = 0.; b448 = #{ a49 = 1.; b49 = 2 } } in
  mark_test_run 3507;
  let test = (fun #{ a448 = a4481; b448 = b4481 } #{ a448 = a4482; b448 = b4482 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4481 a4482 && (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) b4481 b4482) actual expected in
  if not test then failwithf "test 3507 failed";
  (* Paths of depth 2 *)
  (* .a449.#a448 *)
  let actual = r.a449.#a448 in
  let expected = 0. in
  mark_test_run 3508;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3508 failed";
  (* .a449.#b448 *)
  let actual = r.a449.#b448 in
  let expected = #{ a49 = 1.; b49 = 2 } in
  mark_test_run 3509;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 3509 failed";
  (* Paths of depth 3 *)
  (* .a449.#b448.#a49 *)
  let actual = r.a449.#b448.#a49 in
  let expected = 1. in
  mark_test_run 3510;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3510 failed";
  (* .a449.#b448.#b49 *)
  let actual = r.a449.#b448.#b49 in
  let expected = 2 in
  mark_test_run 3511;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3511 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a449 = a4491 } { a449 = a4492 } -> (fun #{ a448 = a4481; b448 = b4481 } #{ a448 = a4482; b448 = b4482 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4481 a4482 && (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) b4481 b4482) a4491 a4492) in
  let next_r = { a449 = #{ a448 = 100.; b448 = #{ a49 = 101.; b49 = 102 } } } in
  let r_expected = { a449 = #{ a448 = 0.; b448 = #{ a49 = 1.; b49 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a449 *)
  r.a449 <- next_r.a449;
  let r_expected = { r_expected with a449 = next_r.a449 } in
  mark_test_run 3512;
  let test = eq r r_expected in
  if not test then failwithf "test 3512 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a449 = #{ a448; b448 = #{ a49; b49 } } } = r in
  let expected_a448 = 100. in
  mark_test_run 3513;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a448 a448 in
  if not test then failwithf "test 3513 failed";
  let expected_a49 = 101. in
  mark_test_run 3514;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 3514 failed";
  let expected_b49 = 102 in
  mark_test_run 3515;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 3515 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a449 } = r in
  let expected_a449 = #{ a448 = 100.; b448 = #{ a49 = 101.; b49 = 102 } } in
  mark_test_run 3516;
  let test = (fun #{ a448 = a4481; b448 = b4481 } #{ a448 = a4482; b448 = b4482 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4481 a4482 && (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) b4481 b4482) expected_a449 a449 in
  if not test then failwithf "test 3516 failed";

  ()
;;

let () =
  (************************************************)
  (*   t451 = { #{ float; #{ float; float } } }   *)
  (************************************************)
  let r = { a451 = #{ a450 = 0.; b450 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a451 *)
  let actual = r.a451 in
  let expected = #{ a450 = 0.; b450 = #{ a51 = 1.; b51 = 2. } } in
  mark_test_run 3517;
  let test = (fun #{ a450 = a4501; b450 = b4501 } #{ a450 = a4502; b450 = b4502 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4501 a4502 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b4501 b4502) actual expected in
  if not test then failwithf "test 3517 failed";
  (* Paths of depth 2 *)
  (* .a451.#a450 *)
  let actual = r.a451.#a450 in
  let expected = 0. in
  mark_test_run 3518;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3518 failed";
  (* .a451.#b450 *)
  let actual = r.a451.#b450 in
  let expected = #{ a51 = 1.; b51 = 2. } in
  mark_test_run 3519;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 3519 failed";
  (* Paths of depth 3 *)
  (* .a451.#b450.#a51 *)
  let actual = r.a451.#b450.#a51 in
  let expected = 1. in
  mark_test_run 3520;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3520 failed";
  (* .a451.#b450.#b51 *)
  let actual = r.a451.#b450.#b51 in
  let expected = 2. in
  mark_test_run 3521;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3521 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a451 = a4511 } { a451 = a4512 } -> (fun #{ a450 = a4501; b450 = b4501 } #{ a450 = a4502; b450 = b4502 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4501 a4502 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b4501 b4502) a4511 a4512) in
  let next_r = { a451 = #{ a450 = 100.; b450 = #{ a51 = 101.; b51 = 102. } } } in
  let r_expected = { a451 = #{ a450 = 0.; b450 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a451 *)
  r.a451 <- next_r.a451;
  let r_expected = { r_expected with a451 = next_r.a451 } in
  mark_test_run 3522;
  let test = eq r r_expected in
  if not test then failwithf "test 3522 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a451 = #{ a450; b450 = #{ a51; b51 } } } = r in
  let expected_a450 = 100. in
  mark_test_run 3523;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a450 a450 in
  if not test then failwithf "test 3523 failed";
  let expected_a51 = 101. in
  mark_test_run 3524;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 3524 failed";
  let expected_b51 = 102. in
  mark_test_run 3525;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 3525 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a451 } = r in
  let expected_a451 = #{ a450 = 100.; b450 = #{ a51 = 101.; b51 = 102. } } in
  mark_test_run 3526;
  let test = (fun #{ a450 = a4501; b450 = b4501 } #{ a450 = a4502; b450 = b4502 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4501 a4502 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b4501 b4502) expected_a451 a451 in
  if not test then failwithf "test 3526 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t453 = { #{ float; #{ float; float# } } }   *)
  (*************************************************)
  let r = { a453 = #{ a452 = 0.; b452 = #{ a211 = 1.; b211 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a453 *)
  let actual = r.a453 in
  let expected = #{ a452 = 0.; b452 = #{ a211 = 1.; b211 = #2. } } in
  mark_test_run 3527;
  let test = (fun #{ a452 = a4521; b452 = b4521 } #{ a452 = a4522; b452 = b4522 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4521 a4522 && (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) b4521 b4522) actual expected in
  if not test then failwithf "test 3527 failed";
  (* Paths of depth 2 *)
  (* .a453.#a452 *)
  let actual = r.a453.#a452 in
  let expected = 0. in
  mark_test_run 3528;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3528 failed";
  (* .a453.#b452 *)
  let actual = r.a453.#b452 in
  let expected = #{ a211 = 1.; b211 = #2. } in
  mark_test_run 3529;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 3529 failed";
  (* Paths of depth 3 *)
  (* .a453.#b452.#a211 *)
  let actual = r.a453.#b452.#a211 in
  let expected = 1. in
  mark_test_run 3530;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3530 failed";
  (* .a453.#b452.#b211 *)
  let actual = r.a453.#b452.#b211 in
  let expected = #2. in
  mark_test_run 3531;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3531 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a453 = a4531 } { a453 = a4532 } -> (fun #{ a452 = a4521; b452 = b4521 } #{ a452 = a4522; b452 = b4522 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4521 a4522 && (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) b4521 b4522) a4531 a4532) in
  let next_r = { a453 = #{ a452 = 100.; b452 = #{ a211 = 101.; b211 = #102. } } } in
  let r_expected = { a453 = #{ a452 = 0.; b452 = #{ a211 = 1.; b211 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a453 *)
  r.a453 <- next_r.a453;
  let r_expected = { r_expected with a453 = next_r.a453 } in
  mark_test_run 3532;
  let test = eq r r_expected in
  if not test then failwithf "test 3532 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a453 = #{ a452; b452 = #{ a211; b211 } } } = r in
  let expected_a452 = 100. in
  mark_test_run 3533;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a452 a452 in
  if not test then failwithf "test 3533 failed";
  let expected_a211 = 101. in
  mark_test_run 3534;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 3534 failed";
  let expected_b211 = #102. in
  mark_test_run 3535;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 3535 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a453 } = r in
  let expected_a453 = #{ a452 = 100.; b452 = #{ a211 = 101.; b211 = #102. } } in
  mark_test_run 3536;
  let test = (fun #{ a452 = a4521; b452 = b4521 } #{ a452 = a4522; b452 = b4522 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4521 a4522 && (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) b4521 b4522) expected_a453 a453 in
  if not test then failwithf "test 3536 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t455 = { #{ float; #{ float#; float } } }   *)
  (*************************************************)
  let r = { a455 = #{ a454 = 0.; b454 = #{ a219 = #1.; b219 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a455 *)
  let actual = r.a455 in
  let expected = #{ a454 = 0.; b454 = #{ a219 = #1.; b219 = 2. } } in
  mark_test_run 3537;
  let test = (fun #{ a454 = a4541; b454 = b4541 } #{ a454 = a4542; b454 = b4542 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4541 a4542 && (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) b4541 b4542) actual expected in
  if not test then failwithf "test 3537 failed";
  (* Paths of depth 2 *)
  (* .a455.#a454 *)
  let actual = r.a455.#a454 in
  let expected = 0. in
  mark_test_run 3538;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3538 failed";
  (* .a455.#b454 *)
  let actual = r.a455.#b454 in
  let expected = #{ a219 = #1.; b219 = 2. } in
  mark_test_run 3539;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 3539 failed";
  (* Paths of depth 3 *)
  (* .a455.#b454.#a219 *)
  let actual = r.a455.#b454.#a219 in
  let expected = #1. in
  mark_test_run 3540;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3540 failed";
  (* .a455.#b454.#b219 *)
  let actual = r.a455.#b454.#b219 in
  let expected = 2. in
  mark_test_run 3541;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3541 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a455 = a4551 } { a455 = a4552 } -> (fun #{ a454 = a4541; b454 = b4541 } #{ a454 = a4542; b454 = b4542 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4541 a4542 && (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) b4541 b4542) a4551 a4552) in
  let next_r = { a455 = #{ a454 = 100.; b454 = #{ a219 = #101.; b219 = 102. } } } in
  let r_expected = { a455 = #{ a454 = 0.; b454 = #{ a219 = #1.; b219 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a455 *)
  r.a455 <- next_r.a455;
  let r_expected = { r_expected with a455 = next_r.a455 } in
  mark_test_run 3542;
  let test = eq r r_expected in
  if not test then failwithf "test 3542 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a455 = #{ a454; b454 = #{ a219; b219 } } } = r in
  let expected_a454 = 100. in
  mark_test_run 3543;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a454 a454 in
  if not test then failwithf "test 3543 failed";
  let expected_a219 = #101. in
  mark_test_run 3544;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 3544 failed";
  let expected_b219 = 102. in
  mark_test_run 3545;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 3545 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a455 } = r in
  let expected_a455 = #{ a454 = 100.; b454 = #{ a219 = #101.; b219 = 102. } } in
  mark_test_run 3546;
  let test = (fun #{ a454 = a4541; b454 = b4541 } #{ a454 = a4542; b454 = b4542 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4541 a4542 && (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) b4541 b4542) expected_a455 a455 in
  if not test then failwithf "test 3546 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t457 = { #{ float; #{ float#; float# } } }   *)
  (**************************************************)
  let r = { a457 = #{ a456 = 0.; b456 = #{ a221 = #1.; b221 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a457 *)
  let actual = r.a457 in
  let expected = #{ a456 = 0.; b456 = #{ a221 = #1.; b221 = #2. } } in
  mark_test_run 3547;
  let test = (fun #{ a456 = a4561; b456 = b4561 } #{ a456 = a4562; b456 = b4562 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4561 a4562 && (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) b4561 b4562) actual expected in
  if not test then failwithf "test 3547 failed";
  (* Paths of depth 2 *)
  (* .a457.#a456 *)
  let actual = r.a457.#a456 in
  let expected = 0. in
  mark_test_run 3548;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3548 failed";
  (* .a457.#b456 *)
  let actual = r.a457.#b456 in
  let expected = #{ a221 = #1.; b221 = #2. } in
  mark_test_run 3549;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 3549 failed";
  (* Paths of depth 3 *)
  (* .a457.#b456.#a221 *)
  let actual = r.a457.#b456.#a221 in
  let expected = #1. in
  mark_test_run 3550;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3550 failed";
  (* .a457.#b456.#b221 *)
  let actual = r.a457.#b456.#b221 in
  let expected = #2. in
  mark_test_run 3551;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3551 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a457 = a4571 } { a457 = a4572 } -> (fun #{ a456 = a4561; b456 = b4561 } #{ a456 = a4562; b456 = b4562 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4561 a4562 && (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) b4561 b4562) a4571 a4572) in
  let next_r = { a457 = #{ a456 = 100.; b456 = #{ a221 = #101.; b221 = #102. } } } in
  let r_expected = { a457 = #{ a456 = 0.; b456 = #{ a221 = #1.; b221 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a457 *)
  r.a457 <- next_r.a457;
  let r_expected = { r_expected with a457 = next_r.a457 } in
  mark_test_run 3552;
  let test = eq r r_expected in
  if not test then failwithf "test 3552 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a457 = #{ a456; b456 = #{ a221; b221 } } } = r in
  let expected_a456 = 100. in
  mark_test_run 3553;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a456 a456 in
  if not test then failwithf "test 3553 failed";
  let expected_a221 = #101. in
  mark_test_run 3554;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 3554 failed";
  let expected_b221 = #102. in
  mark_test_run 3555;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 3555 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a457 } = r in
  let expected_a457 = #{ a456 = 100.; b456 = #{ a221 = #101.; b221 = #102. } } in
  mark_test_run 3556;
  let test = (fun #{ a456 = a4561; b456 = b4561 } #{ a456 = a4562; b456 = b4562 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a4561 a4562 && (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) b4561 b4562) expected_a457 a457 in
  if not test then failwithf "test 3556 failed";

  ()
;;

let () =
  (******************************)
  (*   t458 = { #{ float# } }   *)
  (******************************)
  let r = { a458 = #{ a215 = #0. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a458 *)
  let actual = r.a458 in
  let expected = #{ a215 = #0. } in
  mark_test_run 3557;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) actual expected in
  if not test then failwithf "test 3557 failed";
  (* Paths of depth 2 *)
  (* .a458.#a215 *)
  let actual = r.a458.#a215 in
  let expected = #0. in
  mark_test_run 3558;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3558 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a458 = a4581 } { a458 = a4582 } -> (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) a4581 a4582) in
  let next_r = { a458 = #{ a215 = #100. } } in
  let r_expected = { a458 = #{ a215 = #0. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a458 *)
  r.a458 <- next_r.a458;
  let r_expected = { r_expected with a458 = next_r.a458 } in
  mark_test_run 3559;
  let test = eq r r_expected in
  if not test then failwithf "test 3559 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a458 = #{ a215 } } = r in
  let expected_a215 = #100. in
  mark_test_run 3560;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a215 a215 in
  if not test then failwithf "test 3560 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a458 } = r in
  let expected_a458 = #{ a215 = #100. } in
  mark_test_run 3561;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) expected_a458 a458 in
  if not test then failwithf "test 3561 failed";

  ()
;;

let () =
  (*************************************)
  (*   t459 = { #{ float# }; float }   *)
  (*************************************)
  let r = { a459 = #{ a215 = #0. }; b459 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a459 *)
  let actual = r.a459 in
  let expected = #{ a215 = #0. } in
  mark_test_run 3562;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) actual expected in
  if not test then failwithf "test 3562 failed";
  (* Paths of depth 2 *)
  (* .a459.#a215 *)
  let actual = r.a459.#a215 in
  let expected = #0. in
  mark_test_run 3563;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3563 failed";
  (* Paths of depth 1 *)
  (* .b459 *)
  let actual = r.b459 in
  let expected = 1. in
  mark_test_run 3564;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3564 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a459 = a4591; b459 = b4591 } { a459 = a4592; b459 = b4592 } -> (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) a4591 a4592 && (fun a b -> Float.equal (globalize a) (globalize b)) b4591 b4592) in
  let next_r = { a459 = #{ a215 = #100. }; b459 = 101. } in
  let r_expected = { a459 = #{ a215 = #0. }; b459 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a459 *)
  r.a459 <- next_r.a459;
  let r_expected = { r_expected with a459 = next_r.a459 } in
  mark_test_run 3565;
  let test = eq r r_expected in
  if not test then failwithf "test 3565 failed";
  Gc.compact ();
  (* .b459 *)
  r.b459 <- next_r.b459;
  let r_expected = { r_expected with b459 = next_r.b459 } in
  mark_test_run 3566;
  let test = eq r r_expected in
  if not test then failwithf "test 3566 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a459 = #{ a215 }; b459 } = r in
  let expected_a215 = #100. in
  mark_test_run 3567;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a215 a215 in
  if not test then failwithf "test 3567 failed";
  let expected_b459 = 101. in
  mark_test_run 3568;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b459 b459 in
  if not test then failwithf "test 3568 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a459; b459 } = r in
  let expected_a459 = #{ a215 = #100. } in
  mark_test_run 3569;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) expected_a459 a459 in
  if not test then failwithf "test 3569 failed";
  let expected_b459 = 101. in
  mark_test_run 3570;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b459 b459 in
  if not test then failwithf "test 3570 failed";

  ()
;;

let () =
  (**************************************)
  (*   t460 = { #{ float# }; float# }   *)
  (**************************************)
  let r = { a460 = #{ a215 = #0. }; b460 = #1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a460 *)
  let actual = r.a460 in
  let expected = #{ a215 = #0. } in
  mark_test_run 3571;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) actual expected in
  if not test then failwithf "test 3571 failed";
  (* Paths of depth 2 *)
  (* .a460.#a215 *)
  let actual = r.a460.#a215 in
  let expected = #0. in
  mark_test_run 3572;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3572 failed";
  (* Paths of depth 1 *)
  (* .b460 *)
  let actual = r.b460 in
  let expected = #1. in
  mark_test_run 3573;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3573 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a460 = a4601; b460 = b4601 } { a460 = a4602; b460 = b4602 } -> (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) a4601 a4602 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b4601 b4602) in
  let next_r = { a460 = #{ a215 = #100. }; b460 = #101. } in
  let r_expected = { a460 = #{ a215 = #0. }; b460 = #1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a460 *)
  r.a460 <- next_r.a460;
  let r_expected = { r_expected with a460 = next_r.a460 } in
  mark_test_run 3574;
  let test = eq r r_expected in
  if not test then failwithf "test 3574 failed";
  Gc.compact ();
  (* .b460 *)
  r.b460 <- next_r.b460;
  let r_expected = { r_expected with b460 = next_r.b460 } in
  mark_test_run 3575;
  let test = eq r r_expected in
  if not test then failwithf "test 3575 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a460 = #{ a215 }; b460 } = r in
  let expected_a215 = #100. in
  mark_test_run 3576;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a215 a215 in
  if not test then failwithf "test 3576 failed";
  let expected_b460 = #101. in
  mark_test_run 3577;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b460 b460 in
  if not test then failwithf "test 3577 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a460; b460 } = r in
  let expected_a460 = #{ a215 = #100. } in
  mark_test_run 3578;
  let test = (fun #{ a215 = a2151 } #{ a215 = a2152 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2151 a2152) expected_a460 a460 in
  if not test then failwithf "test 3578 failed";
  let expected_b460 = #101. in
  mark_test_run 3579;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b460 b460 in
  if not test then failwithf "test 3579 failed";

  ()
;;

let () =
  (*************************************)
  (*   t461 = { #{ float#; float } }   *)
  (*************************************)
  let r = { a461 = #{ a219 = #0.; b219 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a461 *)
  let actual = r.a461 in
  let expected = #{ a219 = #0.; b219 = 1. } in
  mark_test_run 3580;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 3580 failed";
  (* Paths of depth 2 *)
  (* .a461.#a219 *)
  let actual = r.a461.#a219 in
  let expected = #0. in
  mark_test_run 3581;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3581 failed";
  (* .a461.#b219 *)
  let actual = r.a461.#b219 in
  let expected = 1. in
  mark_test_run 3582;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3582 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a461 = a4611 } { a461 = a4612 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a4611 a4612) in
  let next_r = { a461 = #{ a219 = #100.; b219 = 101. } } in
  let r_expected = { a461 = #{ a219 = #0.; b219 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a461 *)
  r.a461 <- next_r.a461;
  let r_expected = { r_expected with a461 = next_r.a461 } in
  mark_test_run 3583;
  let test = eq r r_expected in
  if not test then failwithf "test 3583 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a461 = #{ a219; b219 } } = r in
  let expected_a219 = #100. in
  mark_test_run 3584;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 3584 failed";
  let expected_b219 = 101. in
  mark_test_run 3585;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 3585 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a461 } = r in
  let expected_a461 = #{ a219 = #100.; b219 = 101. } in
  mark_test_run 3586;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) expected_a461 a461 in
  if not test then failwithf "test 3586 failed";

  ()
;;

let () =
  (********************************************)
  (*   t462 = { #{ float#; float }; float }   *)
  (********************************************)
  let r = { a462 = #{ a219 = #0.; b219 = 1. }; b462 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a462 *)
  let actual = r.a462 in
  let expected = #{ a219 = #0.; b219 = 1. } in
  mark_test_run 3587;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 3587 failed";
  (* Paths of depth 2 *)
  (* .a462.#a219 *)
  let actual = r.a462.#a219 in
  let expected = #0. in
  mark_test_run 3588;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3588 failed";
  (* .a462.#b219 *)
  let actual = r.a462.#b219 in
  let expected = 1. in
  mark_test_run 3589;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3589 failed";
  (* Paths of depth 1 *)
  (* .b462 *)
  let actual = r.b462 in
  let expected = 2. in
  mark_test_run 3590;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3590 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a462 = a4621; b462 = b4621 } { a462 = a4622; b462 = b4622 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a4621 a4622 && (fun a b -> Float.equal (globalize a) (globalize b)) b4621 b4622) in
  let next_r = { a462 = #{ a219 = #100.; b219 = 101. }; b462 = 102. } in
  let r_expected = { a462 = #{ a219 = #0.; b219 = 1. }; b462 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a462 *)
  r.a462 <- next_r.a462;
  let r_expected = { r_expected with a462 = next_r.a462 } in
  mark_test_run 3591;
  let test = eq r r_expected in
  if not test then failwithf "test 3591 failed";
  Gc.compact ();
  (* .b462 *)
  r.b462 <- next_r.b462;
  let r_expected = { r_expected with b462 = next_r.b462 } in
  mark_test_run 3592;
  let test = eq r r_expected in
  if not test then failwithf "test 3592 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a462 = #{ a219; b219 }; b462 } = r in
  let expected_a219 = #100. in
  mark_test_run 3593;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 3593 failed";
  let expected_b219 = 101. in
  mark_test_run 3594;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 3594 failed";
  let expected_b462 = 102. in
  mark_test_run 3595;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b462 b462 in
  if not test then failwithf "test 3595 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a462; b462 } = r in
  let expected_a462 = #{ a219 = #100.; b219 = 101. } in
  mark_test_run 3596;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) expected_a462 a462 in
  if not test then failwithf "test 3596 failed";
  let expected_b462 = 102. in
  mark_test_run 3597;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b462 b462 in
  if not test then failwithf "test 3597 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t463 = { #{ float#; float }; float# }   *)
  (*********************************************)
  let r = { a463 = #{ a219 = #0.; b219 = 1. }; b463 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a463 *)
  let actual = r.a463 in
  let expected = #{ a219 = #0.; b219 = 1. } in
  mark_test_run 3598;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 3598 failed";
  (* Paths of depth 2 *)
  (* .a463.#a219 *)
  let actual = r.a463.#a219 in
  let expected = #0. in
  mark_test_run 3599;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3599 failed";
  (* .a463.#b219 *)
  let actual = r.a463.#b219 in
  let expected = 1. in
  mark_test_run 3600;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3600 failed";
  (* Paths of depth 1 *)
  (* .b463 *)
  let actual = r.b463 in
  let expected = #2. in
  mark_test_run 3601;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3601 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a463 = a4631; b463 = b4631 } { a463 = a4632; b463 = b4632 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a4631 a4632 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b4631 b4632) in
  let next_r = { a463 = #{ a219 = #100.; b219 = 101. }; b463 = #102. } in
  let r_expected = { a463 = #{ a219 = #0.; b219 = 1. }; b463 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a463 *)
  r.a463 <- next_r.a463;
  let r_expected = { r_expected with a463 = next_r.a463 } in
  mark_test_run 3602;
  let test = eq r r_expected in
  if not test then failwithf "test 3602 failed";
  Gc.compact ();
  (* .b463 *)
  r.b463 <- next_r.b463;
  let r_expected = { r_expected with b463 = next_r.b463 } in
  mark_test_run 3603;
  let test = eq r r_expected in
  if not test then failwithf "test 3603 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a463 = #{ a219; b219 }; b463 } = r in
  let expected_a219 = #100. in
  mark_test_run 3604;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 3604 failed";
  let expected_b219 = 101. in
  mark_test_run 3605;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 3605 failed";
  let expected_b463 = #102. in
  mark_test_run 3606;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b463 b463 in
  if not test then failwithf "test 3606 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a463; b463 } = r in
  let expected_a463 = #{ a219 = #100.; b219 = 101. } in
  mark_test_run 3607;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) expected_a463 a463 in
  if not test then failwithf "test 3607 failed";
  let expected_b463 = #102. in
  mark_test_run 3608;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b463 b463 in
  if not test then failwithf "test 3608 failed";

  ()
;;

let () =
  (**************************************)
  (*   t464 = { #{ float#; float# } }   *)
  (**************************************)
  let r = { a464 = #{ a221 = #0.; b221 = #1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a464 *)
  let actual = r.a464 in
  let expected = #{ a221 = #0.; b221 = #1. } in
  mark_test_run 3609;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 3609 failed";
  (* Paths of depth 2 *)
  (* .a464.#a221 *)
  let actual = r.a464.#a221 in
  let expected = #0. in
  mark_test_run 3610;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3610 failed";
  (* .a464.#b221 *)
  let actual = r.a464.#b221 in
  let expected = #1. in
  mark_test_run 3611;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3611 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a464 = a4641 } { a464 = a4642 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a4641 a4642) in
  let next_r = { a464 = #{ a221 = #100.; b221 = #101. } } in
  let r_expected = { a464 = #{ a221 = #0.; b221 = #1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a464 *)
  r.a464 <- next_r.a464;
  let r_expected = { r_expected with a464 = next_r.a464 } in
  mark_test_run 3612;
  let test = eq r r_expected in
  if not test then failwithf "test 3612 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a464 = #{ a221; b221 } } = r in
  let expected_a221 = #100. in
  mark_test_run 3613;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 3613 failed";
  let expected_b221 = #101. in
  mark_test_run 3614;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 3614 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a464 } = r in
  let expected_a464 = #{ a221 = #100.; b221 = #101. } in
  mark_test_run 3615;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) expected_a464 a464 in
  if not test then failwithf "test 3615 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t465 = { #{ float#; float# }; float }   *)
  (*********************************************)
  let r = { a465 = #{ a221 = #0.; b221 = #1. }; b465 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a465 *)
  let actual = r.a465 in
  let expected = #{ a221 = #0.; b221 = #1. } in
  mark_test_run 3616;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 3616 failed";
  (* Paths of depth 2 *)
  (* .a465.#a221 *)
  let actual = r.a465.#a221 in
  let expected = #0. in
  mark_test_run 3617;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3617 failed";
  (* .a465.#b221 *)
  let actual = r.a465.#b221 in
  let expected = #1. in
  mark_test_run 3618;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3618 failed";
  (* Paths of depth 1 *)
  (* .b465 *)
  let actual = r.b465 in
  let expected = 2. in
  mark_test_run 3619;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3619 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a465 = a4651; b465 = b4651 } { a465 = a4652; b465 = b4652 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a4651 a4652 && (fun a b -> Float.equal (globalize a) (globalize b)) b4651 b4652) in
  let next_r = { a465 = #{ a221 = #100.; b221 = #101. }; b465 = 102. } in
  let r_expected = { a465 = #{ a221 = #0.; b221 = #1. }; b465 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a465 *)
  r.a465 <- next_r.a465;
  let r_expected = { r_expected with a465 = next_r.a465 } in
  mark_test_run 3620;
  let test = eq r r_expected in
  if not test then failwithf "test 3620 failed";
  Gc.compact ();
  (* .b465 *)
  r.b465 <- next_r.b465;
  let r_expected = { r_expected with b465 = next_r.b465 } in
  mark_test_run 3621;
  let test = eq r r_expected in
  if not test then failwithf "test 3621 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a465 = #{ a221; b221 }; b465 } = r in
  let expected_a221 = #100. in
  mark_test_run 3622;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 3622 failed";
  let expected_b221 = #101. in
  mark_test_run 3623;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 3623 failed";
  let expected_b465 = 102. in
  mark_test_run 3624;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b465 b465 in
  if not test then failwithf "test 3624 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a465; b465 } = r in
  let expected_a465 = #{ a221 = #100.; b221 = #101. } in
  mark_test_run 3625;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) expected_a465 a465 in
  if not test then failwithf "test 3625 failed";
  let expected_b465 = 102. in
  mark_test_run 3626;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b465 b465 in
  if not test then failwithf "test 3626 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t466 = { #{ float#; float# }; float# }   *)
  (**********************************************)
  let r = { a466 = #{ a221 = #0.; b221 = #1. }; b466 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a466 *)
  let actual = r.a466 in
  let expected = #{ a221 = #0.; b221 = #1. } in
  mark_test_run 3627;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 3627 failed";
  (* Paths of depth 2 *)
  (* .a466.#a221 *)
  let actual = r.a466.#a221 in
  let expected = #0. in
  mark_test_run 3628;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3628 failed";
  (* .a466.#b221 *)
  let actual = r.a466.#b221 in
  let expected = #1. in
  mark_test_run 3629;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3629 failed";
  (* Paths of depth 1 *)
  (* .b466 *)
  let actual = r.b466 in
  let expected = #2. in
  mark_test_run 3630;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3630 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a466 = a4661; b466 = b4661 } { a466 = a4662; b466 = b4662 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a4661 a4662 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b4661 b4662) in
  let next_r = { a466 = #{ a221 = #100.; b221 = #101. }; b466 = #102. } in
  let r_expected = { a466 = #{ a221 = #0.; b221 = #1. }; b466 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a466 *)
  r.a466 <- next_r.a466;
  let r_expected = { r_expected with a466 = next_r.a466 } in
  mark_test_run 3631;
  let test = eq r r_expected in
  if not test then failwithf "test 3631 failed";
  Gc.compact ();
  (* .b466 *)
  r.b466 <- next_r.b466;
  let r_expected = { r_expected with b466 = next_r.b466 } in
  mark_test_run 3632;
  let test = eq r r_expected in
  if not test then failwithf "test 3632 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a466 = #{ a221; b221 }; b466 } = r in
  let expected_a221 = #100. in
  mark_test_run 3633;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 3633 failed";
  let expected_b221 = #101. in
  mark_test_run 3634;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 3634 failed";
  let expected_b466 = #102. in
  mark_test_run 3635;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b466 b466 in
  if not test then failwithf "test 3635 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a466; b466 } = r in
  let expected_a466 = #{ a221 = #100.; b221 = #101. } in
  mark_test_run 3636;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) expected_a466 a466 in
  if not test then failwithf "test 3636 failed";
  let expected_b466 = #102. in
  mark_test_run 3637;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b466 b466 in
  if not test then failwithf "test 3637 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t468 = { #{ float#; #{ float; float } } }   *)
  (*************************************************)
  let r = { a468 = #{ a467 = #0.; b467 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a468 *)
  let actual = r.a468 in
  let expected = #{ a467 = #0.; b467 = #{ a51 = 1.; b51 = 2. } } in
  mark_test_run 3638;
  let test = (fun #{ a467 = a4671; b467 = b4671 } #{ a467 = a4672; b467 = b4672 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4671 a4672 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b4671 b4672) actual expected in
  if not test then failwithf "test 3638 failed";
  (* Paths of depth 2 *)
  (* .a468.#a467 *)
  let actual = r.a468.#a467 in
  let expected = #0. in
  mark_test_run 3639;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3639 failed";
  (* .a468.#b467 *)
  let actual = r.a468.#b467 in
  let expected = #{ a51 = 1.; b51 = 2. } in
  mark_test_run 3640;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 3640 failed";
  (* Paths of depth 3 *)
  (* .a468.#b467.#a51 *)
  let actual = r.a468.#b467.#a51 in
  let expected = 1. in
  mark_test_run 3641;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3641 failed";
  (* .a468.#b467.#b51 *)
  let actual = r.a468.#b467.#b51 in
  let expected = 2. in
  mark_test_run 3642;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3642 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a468 = a4681 } { a468 = a4682 } -> (fun #{ a467 = a4671; b467 = b4671 } #{ a467 = a4672; b467 = b4672 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4671 a4672 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b4671 b4672) a4681 a4682) in
  let next_r = { a468 = #{ a467 = #100.; b467 = #{ a51 = 101.; b51 = 102. } } } in
  let r_expected = { a468 = #{ a467 = #0.; b467 = #{ a51 = 1.; b51 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a468 *)
  r.a468 <- next_r.a468;
  let r_expected = { r_expected with a468 = next_r.a468 } in
  mark_test_run 3643;
  let test = eq r r_expected in
  if not test then failwithf "test 3643 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a468 = #{ a467; b467 = #{ a51; b51 } } } = r in
  let expected_a467 = #100. in
  mark_test_run 3644;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a467 a467 in
  if not test then failwithf "test 3644 failed";
  let expected_a51 = 101. in
  mark_test_run 3645;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 3645 failed";
  let expected_b51 = 102. in
  mark_test_run 3646;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 3646 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a468 } = r in
  let expected_a468 = #{ a467 = #100.; b467 = #{ a51 = 101.; b51 = 102. } } in
  mark_test_run 3647;
  let test = (fun #{ a467 = a4671; b467 = b4671 } #{ a467 = a4672; b467 = b4672 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4671 a4672 && (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) b4671 b4672) expected_a468 a468 in
  if not test then failwithf "test 3647 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t470 = { #{ float#; #{ float; float# } } }   *)
  (**************************************************)
  let r = { a470 = #{ a469 = #0.; b469 = #{ a211 = 1.; b211 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a470 *)
  let actual = r.a470 in
  let expected = #{ a469 = #0.; b469 = #{ a211 = 1.; b211 = #2. } } in
  mark_test_run 3648;
  let test = (fun #{ a469 = a4691; b469 = b4691 } #{ a469 = a4692; b469 = b4692 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4691 a4692 && (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) b4691 b4692) actual expected in
  if not test then failwithf "test 3648 failed";
  (* Paths of depth 2 *)
  (* .a470.#a469 *)
  let actual = r.a470.#a469 in
  let expected = #0. in
  mark_test_run 3649;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3649 failed";
  (* .a470.#b469 *)
  let actual = r.a470.#b469 in
  let expected = #{ a211 = 1.; b211 = #2. } in
  mark_test_run 3650;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 3650 failed";
  (* Paths of depth 3 *)
  (* .a470.#b469.#a211 *)
  let actual = r.a470.#b469.#a211 in
  let expected = 1. in
  mark_test_run 3651;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3651 failed";
  (* .a470.#b469.#b211 *)
  let actual = r.a470.#b469.#b211 in
  let expected = #2. in
  mark_test_run 3652;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3652 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a470 = a4701 } { a470 = a4702 } -> (fun #{ a469 = a4691; b469 = b4691 } #{ a469 = a4692; b469 = b4692 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4691 a4692 && (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) b4691 b4692) a4701 a4702) in
  let next_r = { a470 = #{ a469 = #100.; b469 = #{ a211 = 101.; b211 = #102. } } } in
  let r_expected = { a470 = #{ a469 = #0.; b469 = #{ a211 = 1.; b211 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a470 *)
  r.a470 <- next_r.a470;
  let r_expected = { r_expected with a470 = next_r.a470 } in
  mark_test_run 3653;
  let test = eq r r_expected in
  if not test then failwithf "test 3653 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a470 = #{ a469; b469 = #{ a211; b211 } } } = r in
  let expected_a469 = #100. in
  mark_test_run 3654;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a469 a469 in
  if not test then failwithf "test 3654 failed";
  let expected_a211 = 101. in
  mark_test_run 3655;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 3655 failed";
  let expected_b211 = #102. in
  mark_test_run 3656;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 3656 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a470 } = r in
  let expected_a470 = #{ a469 = #100.; b469 = #{ a211 = 101.; b211 = #102. } } in
  mark_test_run 3657;
  let test = (fun #{ a469 = a4691; b469 = b4691 } #{ a469 = a4692; b469 = b4692 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4691 a4692 && (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) b4691 b4692) expected_a470 a470 in
  if not test then failwithf "test 3657 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t472 = { #{ float#; #{ float#; float } } }   *)
  (**************************************************)
  let r = { a472 = #{ a471 = #0.; b471 = #{ a219 = #1.; b219 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a472 *)
  let actual = r.a472 in
  let expected = #{ a471 = #0.; b471 = #{ a219 = #1.; b219 = 2. } } in
  mark_test_run 3658;
  let test = (fun #{ a471 = a4711; b471 = b4711 } #{ a471 = a4712; b471 = b4712 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4711 a4712 && (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) b4711 b4712) actual expected in
  if not test then failwithf "test 3658 failed";
  (* Paths of depth 2 *)
  (* .a472.#a471 *)
  let actual = r.a472.#a471 in
  let expected = #0. in
  mark_test_run 3659;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3659 failed";
  (* .a472.#b471 *)
  let actual = r.a472.#b471 in
  let expected = #{ a219 = #1.; b219 = 2. } in
  mark_test_run 3660;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 3660 failed";
  (* Paths of depth 3 *)
  (* .a472.#b471.#a219 *)
  let actual = r.a472.#b471.#a219 in
  let expected = #1. in
  mark_test_run 3661;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3661 failed";
  (* .a472.#b471.#b219 *)
  let actual = r.a472.#b471.#b219 in
  let expected = 2. in
  mark_test_run 3662;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3662 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a472 = a4721 } { a472 = a4722 } -> (fun #{ a471 = a4711; b471 = b4711 } #{ a471 = a4712; b471 = b4712 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4711 a4712 && (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) b4711 b4712) a4721 a4722) in
  let next_r = { a472 = #{ a471 = #100.; b471 = #{ a219 = #101.; b219 = 102. } } } in
  let r_expected = { a472 = #{ a471 = #0.; b471 = #{ a219 = #1.; b219 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a472 *)
  r.a472 <- next_r.a472;
  let r_expected = { r_expected with a472 = next_r.a472 } in
  mark_test_run 3663;
  let test = eq r r_expected in
  if not test then failwithf "test 3663 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a472 = #{ a471; b471 = #{ a219; b219 } } } = r in
  let expected_a471 = #100. in
  mark_test_run 3664;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a471 a471 in
  if not test then failwithf "test 3664 failed";
  let expected_a219 = #101. in
  mark_test_run 3665;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 3665 failed";
  let expected_b219 = 102. in
  mark_test_run 3666;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 3666 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a472 } = r in
  let expected_a472 = #{ a471 = #100.; b471 = #{ a219 = #101.; b219 = 102. } } in
  mark_test_run 3667;
  let test = (fun #{ a471 = a4711; b471 = b4711 } #{ a471 = a4712; b471 = b4712 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4711 a4712 && (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) b4711 b4712) expected_a472 a472 in
  if not test then failwithf "test 3667 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t474 = { #{ float#; #{ float#; float# } } }   *)
  (***************************************************)
  let r = { a474 = #{ a473 = #0.; b473 = #{ a221 = #1.; b221 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a474 *)
  let actual = r.a474 in
  let expected = #{ a473 = #0.; b473 = #{ a221 = #1.; b221 = #2. } } in
  mark_test_run 3668;
  let test = (fun #{ a473 = a4731; b473 = b4731 } #{ a473 = a4732; b473 = b4732 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4731 a4732 && (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) b4731 b4732) actual expected in
  if not test then failwithf "test 3668 failed";
  (* Paths of depth 2 *)
  (* .a474.#a473 *)
  let actual = r.a474.#a473 in
  let expected = #0. in
  mark_test_run 3669;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3669 failed";
  (* .a474.#b473 *)
  let actual = r.a474.#b473 in
  let expected = #{ a221 = #1.; b221 = #2. } in
  mark_test_run 3670;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 3670 failed";
  (* Paths of depth 3 *)
  (* .a474.#b473.#a221 *)
  let actual = r.a474.#b473.#a221 in
  let expected = #1. in
  mark_test_run 3671;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3671 failed";
  (* .a474.#b473.#b221 *)
  let actual = r.a474.#b473.#b221 in
  let expected = #2. in
  mark_test_run 3672;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3672 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a474 = a4741 } { a474 = a4742 } -> (fun #{ a473 = a4731; b473 = b4731 } #{ a473 = a4732; b473 = b4732 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4731 a4732 && (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) b4731 b4732) a4741 a4742) in
  let next_r = { a474 = #{ a473 = #100.; b473 = #{ a221 = #101.; b221 = #102. } } } in
  let r_expected = { a474 = #{ a473 = #0.; b473 = #{ a221 = #1.; b221 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a474 *)
  r.a474 <- next_r.a474;
  let r_expected = { r_expected with a474 = next_r.a474 } in
  mark_test_run 3673;
  let test = eq r r_expected in
  if not test then failwithf "test 3673 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a474 = #{ a473; b473 = #{ a221; b221 } } } = r in
  let expected_a473 = #100. in
  mark_test_run 3674;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a473 a473 in
  if not test then failwithf "test 3674 failed";
  let expected_a221 = #101. in
  mark_test_run 3675;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 3675 failed";
  let expected_b221 = #102. in
  mark_test_run 3676;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 3676 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a474 } = r in
  let expected_a474 = #{ a473 = #100.; b473 = #{ a221 = #101.; b221 = #102. } } in
  mark_test_run 3677;
  let test = (fun #{ a473 = a4731; b473 = b4731 } #{ a473 = a4732; b473 = b4732 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a4731 a4732 && (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) b4731 b4732) expected_a474 a474 in
  if not test then failwithf "test 3677 failed";

  ()
;;

let () =
  (*************************************************************)
  (*   t477 = { #{ float32#; int64# }; #{ string; int64# } }   *)
  (*************************************************************)
  let r = { a477 = #{ a475 = #0.s; b475 = #1L }; b477 = #{ a476 = "2"; b476 = #3L } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a477 *)
  let actual = r.a477 in
  let expected = #{ a475 = #0.s; b475 = #1L } in
  mark_test_run 3678;
  let test = (fun #{ a475 = a4751; b475 = b4751 } #{ a475 = a4752; b475 = b4752 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a4751 a4752 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b4751 b4752) actual expected in
  if not test then failwithf "test 3678 failed";
  (* Paths of depth 2 *)
  (* .a477.#a475 *)
  let actual = r.a477.#a475 in
  let expected = #0.s in
  mark_test_run 3679;
  let test = (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) actual expected in
  if not test then failwithf "test 3679 failed";
  (* .a477.#b475 *)
  let actual = r.a477.#b475 in
  let expected = #1L in
  mark_test_run 3680;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 3680 failed";
  (* Paths of depth 1 *)
  (* .b477 *)
  let actual = r.b477 in
  let expected = #{ a476 = "2"; b476 = #3L } in
  mark_test_run 3681;
  let test = (fun #{ a476 = a4761; b476 = b4761 } #{ a476 = a4762; b476 = b4762 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4761 a4762 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b4761 b4762) actual expected in
  if not test then failwithf "test 3681 failed";
  (* Paths of depth 2 *)
  (* .b477.#a476 *)
  let actual = r.b477.#a476 in
  let expected = "2" in
  mark_test_run 3682;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3682 failed";
  (* .b477.#b476 *)
  let actual = r.b477.#b476 in
  let expected = #3L in
  mark_test_run 3683;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 3683 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a477 = a4771; b477 = b4771 } { a477 = a4772; b477 = b4772 } -> (fun #{ a475 = a4751; b475 = b4751 } #{ a475 = a4752; b475 = b4752 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a4751 a4752 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b4751 b4752) a4771 a4772 && (fun #{ a476 = a4761; b476 = b4761 } #{ a476 = a4762; b476 = b4762 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4761 a4762 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b4761 b4762) b4771 b4772) in
  let next_r = { a477 = #{ a475 = #100.s; b475 = #101L }; b477 = #{ a476 = "102"; b476 = #103L } } in
  let r_expected = { a477 = #{ a475 = #0.s; b475 = #1L }; b477 = #{ a476 = "2"; b476 = #3L } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a477 *)
  r.a477 <- next_r.a477;
  let r_expected = { r_expected with a477 = next_r.a477 } in
  mark_test_run 3684;
  let test = eq r r_expected in
  if not test then failwithf "test 3684 failed";
  Gc.compact ();
  (* .b477 *)
  r.b477 <- next_r.b477;
  let r_expected = { r_expected with b477 = next_r.b477 } in
  mark_test_run 3685;
  let test = eq r r_expected in
  if not test then failwithf "test 3685 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a477 = #{ a475; b475 }; b477 = #{ a476; b476 } } = r in
  let expected_a475 = #100.s in
  mark_test_run 3686;
  let test = (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) expected_a475 a475 in
  if not test then failwithf "test 3686 failed";
  let expected_b475 = #101L in
  mark_test_run 3687;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b475 b475 in
  if not test then failwithf "test 3687 failed";
  let expected_a476 = "102" in
  mark_test_run 3688;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a476 a476 in
  if not test then failwithf "test 3688 failed";
  let expected_b476 = #103L in
  mark_test_run 3689;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b476 b476 in
  if not test then failwithf "test 3689 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a477; b477 } = r in
  let expected_a477 = #{ a475 = #100.s; b475 = #101L } in
  mark_test_run 3690;
  let test = (fun #{ a475 = a4751; b475 = b4751 } #{ a475 = a4752; b475 = b4752 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a4751 a4752 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b4751 b4752) expected_a477 a477 in
  if not test then failwithf "test 3690 failed";
  let expected_b477 = #{ a476 = "102"; b476 = #103L } in
  mark_test_run 3691;
  let test = (fun #{ a476 = a4761; b476 = b4761 } #{ a476 = a4762; b476 = b4762 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4761 a4762 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b4761 b4762) expected_b477 b477 in
  if not test then failwithf "test 3691 failed";

  ()
;;

let () =
  (******************************)
  (*   t478 = { #{ string } }   *)
  (******************************)
  let r = { a478 = #{ a162 = "0" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a478 *)
  let actual = r.a478 in
  let expected = #{ a162 = "0" } in
  mark_test_run 3692;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) actual expected in
  if not test then failwithf "test 3692 failed";
  (* Paths of depth 2 *)
  (* .a478.#a162 *)
  let actual = r.a478.#a162 in
  let expected = "0" in
  mark_test_run 3693;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3693 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a478 = a4781 } { a478 = a4782 } -> (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) a4781 a4782) in
  let next_r = { a478 = #{ a162 = "100" } } in
  let r_expected = { a478 = #{ a162 = "0" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a478 *)
  r.a478 <- next_r.a478;
  let r_expected = { r_expected with a478 = next_r.a478 } in
  mark_test_run 3694;
  let test = eq r r_expected in
  if not test then failwithf "test 3694 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a478 = #{ a162 } } = r in
  let expected_a162 = "100" in
  mark_test_run 3695;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a162 a162 in
  if not test then failwithf "test 3695 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a478 } = r in
  let expected_a478 = #{ a162 = "100" } in
  mark_test_run 3696;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) expected_a478 a478 in
  if not test then failwithf "test 3696 failed";

  ()
;;

let () =
  (**************************************)
  (*   t479 = { #{ string }; unit_u }   *)
  (**************************************)
  let r = { a479 = #{ a162 = "0" }; b479 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a479 *)
  let actual = r.a479 in
  let expected = #{ a162 = "0" } in
  mark_test_run 3697;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) actual expected in
  if not test then failwithf "test 3697 failed";
  (* Paths of depth 2 *)
  (* .a479.#a162 *)
  let actual = r.a479.#a162 in
  let expected = "0" in
  mark_test_run 3698;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3698 failed";
  (* Paths of depth 1 *)
  (* .b479 *)
  let actual = r.b479 in
  let expected = (unbox_unit ()) in
  mark_test_run 3699;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3699 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a479 = a4791; b479 = b4791 } { a479 = a4792; b479 = b4792 } -> (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) a4791 a4792 && (fun _ _ -> true) b4791 b4792) in
  let next_r = { a479 = #{ a162 = "100" }; b479 = (unbox_unit ()) } in
  let r_expected = { a479 = #{ a162 = "0" }; b479 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a479 *)
  r.a479 <- next_r.a479;
  let r_expected = { r_expected with a479 = next_r.a479 } in
  mark_test_run 3700;
  let test = eq r r_expected in
  if not test then failwithf "test 3700 failed";
  Gc.compact ();
  (* .b479 *)
  r.b479 <- next_r.b479;
  let r_expected = { r_expected with b479 = next_r.b479 } in
  mark_test_run 3701;
  let test = eq r r_expected in
  if not test then failwithf "test 3701 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a479 = #{ a162 }; b479 } = r in
  let expected_a162 = "100" in
  mark_test_run 3702;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a162 a162 in
  if not test then failwithf "test 3702 failed";
  let expected_b479 = (unbox_unit ()) in
  mark_test_run 3703;
  let test = (fun _ _ -> true) expected_b479 b479 in
  if not test then failwithf "test 3703 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a479; b479 } = r in
  let expected_a479 = #{ a162 = "100" } in
  mark_test_run 3704;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) expected_a479 a479 in
  if not test then failwithf "test 3704 failed";
  let expected_b479 = (unbox_unit ()) in
  mark_test_run 3705;
  let test = (fun _ _ -> true) expected_b479 b479 in
  if not test then failwithf "test 3705 failed";

  ()
;;

let () =
  (**************************************)
  (*   t480 = { #{ string }; string }   *)
  (**************************************)
  let r = { a480 = #{ a162 = "0" }; b480 = "1" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a480 *)
  let actual = r.a480 in
  let expected = #{ a162 = "0" } in
  mark_test_run 3706;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) actual expected in
  if not test then failwithf "test 3706 failed";
  (* Paths of depth 2 *)
  (* .a480.#a162 *)
  let actual = r.a480.#a162 in
  let expected = "0" in
  mark_test_run 3707;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3707 failed";
  (* Paths of depth 1 *)
  (* .b480 *)
  let actual = r.b480 in
  let expected = "1" in
  mark_test_run 3708;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3708 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a480 = a4801; b480 = b4801 } { a480 = a4802; b480 = b4802 } -> (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) a4801 a4802 && (fun a b -> String.equal (globalize a) (globalize b)) b4801 b4802) in
  let next_r = { a480 = #{ a162 = "100" }; b480 = "101" } in
  let r_expected = { a480 = #{ a162 = "0" }; b480 = "1" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a480 *)
  r.a480 <- next_r.a480;
  let r_expected = { r_expected with a480 = next_r.a480 } in
  mark_test_run 3709;
  let test = eq r r_expected in
  if not test then failwithf "test 3709 failed";
  Gc.compact ();
  (* .b480 *)
  r.b480 <- next_r.b480;
  let r_expected = { r_expected with b480 = next_r.b480 } in
  mark_test_run 3710;
  let test = eq r r_expected in
  if not test then failwithf "test 3710 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a480 = #{ a162 }; b480 } = r in
  let expected_a162 = "100" in
  mark_test_run 3711;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a162 a162 in
  if not test then failwithf "test 3711 failed";
  let expected_b480 = "101" in
  mark_test_run 3712;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b480 b480 in
  if not test then failwithf "test 3712 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a480; b480 } = r in
  let expected_a480 = #{ a162 = "100" } in
  mark_test_run 3713;
  let test = (fun #{ a162 = a1621 } #{ a162 = a1622 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1621 a1622) expected_a480 a480 in
  if not test then failwithf "test 3713 failed";
  let expected_b480 = "101" in
  mark_test_run 3714;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b480 b480 in
  if not test then failwithf "test 3714 failed";

  ()
;;

let () =
  (**************************************)
  (*   t481 = { #{ string; unit_u } }   *)
  (**************************************)
  let r = { a481 = #{ a166 = "0"; b166 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a481 *)
  let actual = r.a481 in
  let expected = #{ a166 = "0"; b166 = (unbox_unit ()) } in
  mark_test_run 3715;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 3715 failed";
  (* Paths of depth 2 *)
  (* .a481.#a166 *)
  let actual = r.a481.#a166 in
  let expected = "0" in
  mark_test_run 3716;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3716 failed";
  (* .a481.#b166 *)
  let actual = r.a481.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 3717;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3717 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a481 = a4811 } { a481 = a4812 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a4811 a4812) in
  let next_r = { a481 = #{ a166 = "100"; b166 = (unbox_unit ()) } } in
  let r_expected = { a481 = #{ a166 = "0"; b166 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a481 *)
  r.a481 <- next_r.a481;
  let r_expected = { r_expected with a481 = next_r.a481 } in
  mark_test_run 3718;
  let test = eq r r_expected in
  if not test then failwithf "test 3718 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a481 = #{ a166; b166 } } = r in
  let expected_a166 = "100" in
  mark_test_run 3719;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 3719 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 3720;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 3720 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a481 } = r in
  let expected_a481 = #{ a166 = "100"; b166 = (unbox_unit ()) } in
  mark_test_run 3721;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) expected_a481 a481 in
  if not test then failwithf "test 3721 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t482 = { #{ string; unit_u }; unit_u }   *)
  (**********************************************)
  let r = { a482 = #{ a166 = "0"; b166 = (unbox_unit ()) }; b482 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a482 *)
  let actual = r.a482 in
  let expected = #{ a166 = "0"; b166 = (unbox_unit ()) } in
  mark_test_run 3722;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 3722 failed";
  (* Paths of depth 2 *)
  (* .a482.#a166 *)
  let actual = r.a482.#a166 in
  let expected = "0" in
  mark_test_run 3723;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3723 failed";
  (* .a482.#b166 *)
  let actual = r.a482.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 3724;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3724 failed";
  (* Paths of depth 1 *)
  (* .b482 *)
  let actual = r.b482 in
  let expected = (unbox_unit ()) in
  mark_test_run 3725;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3725 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a482 = a4821; b482 = b4821 } { a482 = a4822; b482 = b4822 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a4821 a4822 && (fun _ _ -> true) b4821 b4822) in
  let next_r = { a482 = #{ a166 = "100"; b166 = (unbox_unit ()) }; b482 = (unbox_unit ()) } in
  let r_expected = { a482 = #{ a166 = "0"; b166 = (unbox_unit ()) }; b482 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a482 *)
  r.a482 <- next_r.a482;
  let r_expected = { r_expected with a482 = next_r.a482 } in
  mark_test_run 3726;
  let test = eq r r_expected in
  if not test then failwithf "test 3726 failed";
  Gc.compact ();
  (* .b482 *)
  r.b482 <- next_r.b482;
  let r_expected = { r_expected with b482 = next_r.b482 } in
  mark_test_run 3727;
  let test = eq r r_expected in
  if not test then failwithf "test 3727 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a482 = #{ a166; b166 }; b482 } = r in
  let expected_a166 = "100" in
  mark_test_run 3728;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 3728 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 3729;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 3729 failed";
  let expected_b482 = (unbox_unit ()) in
  mark_test_run 3730;
  let test = (fun _ _ -> true) expected_b482 b482 in
  if not test then failwithf "test 3730 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a482; b482 } = r in
  let expected_a482 = #{ a166 = "100"; b166 = (unbox_unit ()) } in
  mark_test_run 3731;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) expected_a482 a482 in
  if not test then failwithf "test 3731 failed";
  let expected_b482 = (unbox_unit ()) in
  mark_test_run 3732;
  let test = (fun _ _ -> true) expected_b482 b482 in
  if not test then failwithf "test 3732 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t483 = { #{ string; unit_u }; string }   *)
  (**********************************************)
  let r = { a483 = #{ a166 = "0"; b166 = (unbox_unit ()) }; b483 = "1" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a483 *)
  let actual = r.a483 in
  let expected = #{ a166 = "0"; b166 = (unbox_unit ()) } in
  mark_test_run 3733;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 3733 failed";
  (* Paths of depth 2 *)
  (* .a483.#a166 *)
  let actual = r.a483.#a166 in
  let expected = "0" in
  mark_test_run 3734;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3734 failed";
  (* .a483.#b166 *)
  let actual = r.a483.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 3735;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3735 failed";
  (* Paths of depth 1 *)
  (* .b483 *)
  let actual = r.b483 in
  let expected = "1" in
  mark_test_run 3736;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3736 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a483 = a4831; b483 = b4831 } { a483 = a4832; b483 = b4832 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a4831 a4832 && (fun a b -> String.equal (globalize a) (globalize b)) b4831 b4832) in
  let next_r = { a483 = #{ a166 = "100"; b166 = (unbox_unit ()) }; b483 = "101" } in
  let r_expected = { a483 = #{ a166 = "0"; b166 = (unbox_unit ()) }; b483 = "1" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a483 *)
  r.a483 <- next_r.a483;
  let r_expected = { r_expected with a483 = next_r.a483 } in
  mark_test_run 3737;
  let test = eq r r_expected in
  if not test then failwithf "test 3737 failed";
  Gc.compact ();
  (* .b483 *)
  r.b483 <- next_r.b483;
  let r_expected = { r_expected with b483 = next_r.b483 } in
  mark_test_run 3738;
  let test = eq r r_expected in
  if not test then failwithf "test 3738 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a483 = #{ a166; b166 }; b483 } = r in
  let expected_a166 = "100" in
  mark_test_run 3739;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 3739 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 3740;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 3740 failed";
  let expected_b483 = "101" in
  mark_test_run 3741;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b483 b483 in
  if not test then failwithf "test 3741 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a483; b483 } = r in
  let expected_a483 = #{ a166 = "100"; b166 = (unbox_unit ()) } in
  mark_test_run 3742;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) expected_a483 a483 in
  if not test then failwithf "test 3742 failed";
  let expected_b483 = "101" in
  mark_test_run 3743;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b483 b483 in
  if not test then failwithf "test 3743 failed";

  ()
;;

let () =
  (**************************************)
  (*   t484 = { #{ string; string } }   *)
  (**************************************)
  let r = { a484 = #{ a168 = "0"; b168 = "1" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a484 *)
  let actual = r.a484 in
  let expected = #{ a168 = "0"; b168 = "1" } in
  mark_test_run 3744;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 3744 failed";
  (* Paths of depth 2 *)
  (* .a484.#a168 *)
  let actual = r.a484.#a168 in
  let expected = "0" in
  mark_test_run 3745;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3745 failed";
  (* .a484.#b168 *)
  let actual = r.a484.#b168 in
  let expected = "1" in
  mark_test_run 3746;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3746 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a484 = a4841 } { a484 = a4842 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a4841 a4842) in
  let next_r = { a484 = #{ a168 = "100"; b168 = "101" } } in
  let r_expected = { a484 = #{ a168 = "0"; b168 = "1" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a484 *)
  r.a484 <- next_r.a484;
  let r_expected = { r_expected with a484 = next_r.a484 } in
  mark_test_run 3747;
  let test = eq r r_expected in
  if not test then failwithf "test 3747 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a484 = #{ a168; b168 } } = r in
  let expected_a168 = "100" in
  mark_test_run 3748;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 3748 failed";
  let expected_b168 = "101" in
  mark_test_run 3749;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 3749 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a484 } = r in
  let expected_a484 = #{ a168 = "100"; b168 = "101" } in
  mark_test_run 3750;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) expected_a484 a484 in
  if not test then failwithf "test 3750 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t485 = { #{ string; string }; unit_u }   *)
  (**********************************************)
  let r = { a485 = #{ a168 = "0"; b168 = "1" }; b485 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a485 *)
  let actual = r.a485 in
  let expected = #{ a168 = "0"; b168 = "1" } in
  mark_test_run 3751;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 3751 failed";
  (* Paths of depth 2 *)
  (* .a485.#a168 *)
  let actual = r.a485.#a168 in
  let expected = "0" in
  mark_test_run 3752;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3752 failed";
  (* .a485.#b168 *)
  let actual = r.a485.#b168 in
  let expected = "1" in
  mark_test_run 3753;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3753 failed";
  (* Paths of depth 1 *)
  (* .b485 *)
  let actual = r.b485 in
  let expected = (unbox_unit ()) in
  mark_test_run 3754;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3754 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a485 = a4851; b485 = b4851 } { a485 = a4852; b485 = b4852 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a4851 a4852 && (fun _ _ -> true) b4851 b4852) in
  let next_r = { a485 = #{ a168 = "100"; b168 = "101" }; b485 = (unbox_unit ()) } in
  let r_expected = { a485 = #{ a168 = "0"; b168 = "1" }; b485 = (unbox_unit ()) } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a485 *)
  r.a485 <- next_r.a485;
  let r_expected = { r_expected with a485 = next_r.a485 } in
  mark_test_run 3755;
  let test = eq r r_expected in
  if not test then failwithf "test 3755 failed";
  Gc.compact ();
  (* .b485 *)
  r.b485 <- next_r.b485;
  let r_expected = { r_expected with b485 = next_r.b485 } in
  mark_test_run 3756;
  let test = eq r r_expected in
  if not test then failwithf "test 3756 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a485 = #{ a168; b168 }; b485 } = r in
  let expected_a168 = "100" in
  mark_test_run 3757;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 3757 failed";
  let expected_b168 = "101" in
  mark_test_run 3758;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 3758 failed";
  let expected_b485 = (unbox_unit ()) in
  mark_test_run 3759;
  let test = (fun _ _ -> true) expected_b485 b485 in
  if not test then failwithf "test 3759 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a485; b485 } = r in
  let expected_a485 = #{ a168 = "100"; b168 = "101" } in
  mark_test_run 3760;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) expected_a485 a485 in
  if not test then failwithf "test 3760 failed";
  let expected_b485 = (unbox_unit ()) in
  mark_test_run 3761;
  let test = (fun _ _ -> true) expected_b485 b485 in
  if not test then failwithf "test 3761 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t486 = { #{ string; string }; string }   *)
  (**********************************************)
  let r = { a486 = #{ a168 = "0"; b168 = "1" }; b486 = "2" } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a486 *)
  let actual = r.a486 in
  let expected = #{ a168 = "0"; b168 = "1" } in
  mark_test_run 3762;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 3762 failed";
  (* Paths of depth 2 *)
  (* .a486.#a168 *)
  let actual = r.a486.#a168 in
  let expected = "0" in
  mark_test_run 3763;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3763 failed";
  (* .a486.#b168 *)
  let actual = r.a486.#b168 in
  let expected = "1" in
  mark_test_run 3764;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3764 failed";
  (* Paths of depth 1 *)
  (* .b486 *)
  let actual = r.b486 in
  let expected = "2" in
  mark_test_run 3765;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3765 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a486 = a4861; b486 = b4861 } { a486 = a4862; b486 = b4862 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a4861 a4862 && (fun a b -> String.equal (globalize a) (globalize b)) b4861 b4862) in
  let next_r = { a486 = #{ a168 = "100"; b168 = "101" }; b486 = "102" } in
  let r_expected = { a486 = #{ a168 = "0"; b168 = "1" }; b486 = "2" } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a486 *)
  r.a486 <- next_r.a486;
  let r_expected = { r_expected with a486 = next_r.a486 } in
  mark_test_run 3766;
  let test = eq r r_expected in
  if not test then failwithf "test 3766 failed";
  Gc.compact ();
  (* .b486 *)
  r.b486 <- next_r.b486;
  let r_expected = { r_expected with b486 = next_r.b486 } in
  mark_test_run 3767;
  let test = eq r r_expected in
  if not test then failwithf "test 3767 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a486 = #{ a168; b168 }; b486 } = r in
  let expected_a168 = "100" in
  mark_test_run 3768;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 3768 failed";
  let expected_b168 = "101" in
  mark_test_run 3769;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 3769 failed";
  let expected_b486 = "102" in
  mark_test_run 3770;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b486 b486 in
  if not test then failwithf "test 3770 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a486; b486 } = r in
  let expected_a486 = #{ a168 = "100"; b168 = "101" } in
  mark_test_run 3771;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) expected_a486 a486 in
  if not test then failwithf "test 3771 failed";
  let expected_b486 = "102" in
  mark_test_run 3772;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b486 b486 in
  if not test then failwithf "test 3772 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t488 = { #{ string; #{ unit_u; unit_u } } }   *)
  (***************************************************)
  let r = { a488 = #{ a487 = "0"; b487 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a488 *)
  let actual = r.a488 in
  let expected = #{ a487 = "0"; b487 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } in
  mark_test_run 3773;
  let test = (fun #{ a487 = a4871; b487 = b4871 } #{ a487 = a4872; b487 = b4872 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4871 a4872 && (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) b4871 b4872) actual expected in
  if not test then failwithf "test 3773 failed";
  (* Paths of depth 2 *)
  (* .a488.#a487 *)
  let actual = r.a488.#a487 in
  let expected = "0" in
  mark_test_run 3774;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3774 failed";
  (* .a488.#b487 *)
  let actual = r.a488.#b487 in
  let expected = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } in
  mark_test_run 3775;
  let test = (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) actual expected in
  if not test then failwithf "test 3775 failed";
  (* Paths of depth 3 *)
  (* .a488.#b487.#a266 *)
  let actual = r.a488.#b487.#a266 in
  let expected = (unbox_unit ()) in
  mark_test_run 3776;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3776 failed";
  (* .a488.#b487.#b266 *)
  let actual = r.a488.#b487.#b266 in
  let expected = (unbox_unit ()) in
  mark_test_run 3777;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3777 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a488 = a4881 } { a488 = a4882 } -> (fun #{ a487 = a4871; b487 = b4871 } #{ a487 = a4872; b487 = b4872 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4871 a4872 && (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) b4871 b4872) a4881 a4882) in
  let next_r = { a488 = #{ a487 = "100"; b487 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } } in
  let r_expected = { a488 = #{ a487 = "0"; b487 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a488 *)
  r.a488 <- next_r.a488;
  let r_expected = { r_expected with a488 = next_r.a488 } in
  mark_test_run 3778;
  let test = eq r r_expected in
  if not test then failwithf "test 3778 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a488 = #{ a487; b487 = #{ a266; b266 } } } = r in
  let expected_a487 = "100" in
  mark_test_run 3779;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a487 a487 in
  if not test then failwithf "test 3779 failed";
  let expected_a266 = (unbox_unit ()) in
  mark_test_run 3780;
  let test = (fun _ _ -> true) expected_a266 a266 in
  if not test then failwithf "test 3780 failed";
  let expected_b266 = (unbox_unit ()) in
  mark_test_run 3781;
  let test = (fun _ _ -> true) expected_b266 b266 in
  if not test then failwithf "test 3781 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a488 } = r in
  let expected_a488 = #{ a487 = "100"; b487 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } } in
  mark_test_run 3782;
  let test = (fun #{ a487 = a4871; b487 = b4871 } #{ a487 = a4872; b487 = b4872 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4871 a4872 && (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) b4871 b4872) expected_a488 a488 in
  if not test then failwithf "test 3782 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t490 = { #{ string; #{ unit_u; string } } }   *)
  (***************************************************)
  let r = { a490 = #{ a489 = "0"; b489 = #{ a160 = (unbox_unit ()); b160 = "1" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a490 *)
  let actual = r.a490 in
  let expected = #{ a489 = "0"; b489 = #{ a160 = (unbox_unit ()); b160 = "1" } } in
  mark_test_run 3783;
  let test = (fun #{ a489 = a4891; b489 = b4891 } #{ a489 = a4892; b489 = b4892 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4891 a4892 && (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) b4891 b4892) actual expected in
  if not test then failwithf "test 3783 failed";
  (* Paths of depth 2 *)
  (* .a490.#a489 *)
  let actual = r.a490.#a489 in
  let expected = "0" in
  mark_test_run 3784;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3784 failed";
  (* .a490.#b489 *)
  let actual = r.a490.#b489 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "1" } in
  mark_test_run 3785;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 3785 failed";
  (* Paths of depth 3 *)
  (* .a490.#b489.#a160 *)
  let actual = r.a490.#b489.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 3786;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3786 failed";
  (* .a490.#b489.#b160 *)
  let actual = r.a490.#b489.#b160 in
  let expected = "1" in
  mark_test_run 3787;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3787 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a490 = a4901 } { a490 = a4902 } -> (fun #{ a489 = a4891; b489 = b4891 } #{ a489 = a4892; b489 = b4892 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4891 a4892 && (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) b4891 b4892) a4901 a4902) in
  let next_r = { a490 = #{ a489 = "100"; b489 = #{ a160 = (unbox_unit ()); b160 = "101" } } } in
  let r_expected = { a490 = #{ a489 = "0"; b489 = #{ a160 = (unbox_unit ()); b160 = "1" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a490 *)
  r.a490 <- next_r.a490;
  let r_expected = { r_expected with a490 = next_r.a490 } in
  mark_test_run 3788;
  let test = eq r r_expected in
  if not test then failwithf "test 3788 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a490 = #{ a489; b489 = #{ a160; b160 } } } = r in
  let expected_a489 = "100" in
  mark_test_run 3789;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a489 a489 in
  if not test then failwithf "test 3789 failed";
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 3790;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 3790 failed";
  let expected_b160 = "101" in
  mark_test_run 3791;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 3791 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a490 } = r in
  let expected_a490 = #{ a489 = "100"; b489 = #{ a160 = (unbox_unit ()); b160 = "101" } } in
  mark_test_run 3792;
  let test = (fun #{ a489 = a4891; b489 = b4891 } #{ a489 = a4892; b489 = b4892 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4891 a4892 && (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) b4891 b4892) expected_a490 a490 in
  if not test then failwithf "test 3792 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t492 = { #{ string; #{ string; unit_u } } }   *)
  (***************************************************)
  let r = { a492 = #{ a491 = "0"; b491 = #{ a166 = "1"; b166 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a492 *)
  let actual = r.a492 in
  let expected = #{ a491 = "0"; b491 = #{ a166 = "1"; b166 = (unbox_unit ()) } } in
  mark_test_run 3793;
  let test = (fun #{ a491 = a4911; b491 = b4911 } #{ a491 = a4912; b491 = b4912 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4911 a4912 && (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) b4911 b4912) actual expected in
  if not test then failwithf "test 3793 failed";
  (* Paths of depth 2 *)
  (* .a492.#a491 *)
  let actual = r.a492.#a491 in
  let expected = "0" in
  mark_test_run 3794;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3794 failed";
  (* .a492.#b491 *)
  let actual = r.a492.#b491 in
  let expected = #{ a166 = "1"; b166 = (unbox_unit ()) } in
  mark_test_run 3795;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 3795 failed";
  (* Paths of depth 3 *)
  (* .a492.#b491.#a166 *)
  let actual = r.a492.#b491.#a166 in
  let expected = "1" in
  mark_test_run 3796;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3796 failed";
  (* .a492.#b491.#b166 *)
  let actual = r.a492.#b491.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 3797;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3797 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a492 = a4921 } { a492 = a4922 } -> (fun #{ a491 = a4911; b491 = b4911 } #{ a491 = a4912; b491 = b4912 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4911 a4912 && (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) b4911 b4912) a4921 a4922) in
  let next_r = { a492 = #{ a491 = "100"; b491 = #{ a166 = "101"; b166 = (unbox_unit ()) } } } in
  let r_expected = { a492 = #{ a491 = "0"; b491 = #{ a166 = "1"; b166 = (unbox_unit ()) } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a492 *)
  r.a492 <- next_r.a492;
  let r_expected = { r_expected with a492 = next_r.a492 } in
  mark_test_run 3798;
  let test = eq r r_expected in
  if not test then failwithf "test 3798 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a492 = #{ a491; b491 = #{ a166; b166 } } } = r in
  let expected_a491 = "100" in
  mark_test_run 3799;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a491 a491 in
  if not test then failwithf "test 3799 failed";
  let expected_a166 = "101" in
  mark_test_run 3800;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 3800 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 3801;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 3801 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a492 } = r in
  let expected_a492 = #{ a491 = "100"; b491 = #{ a166 = "101"; b166 = (unbox_unit ()) } } in
  mark_test_run 3802;
  let test = (fun #{ a491 = a4911; b491 = b4911 } #{ a491 = a4912; b491 = b4912 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4911 a4912 && (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) b4911 b4912) expected_a492 a492 in
  if not test then failwithf "test 3802 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t494 = { #{ string; #{ string; string } } }   *)
  (***************************************************)
  let r = { a494 = #{ a493 = "0"; b493 = #{ a168 = "1"; b168 = "2" } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a494 *)
  let actual = r.a494 in
  let expected = #{ a493 = "0"; b493 = #{ a168 = "1"; b168 = "2" } } in
  mark_test_run 3803;
  let test = (fun #{ a493 = a4931; b493 = b4931 } #{ a493 = a4932; b493 = b4932 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4931 a4932 && (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) b4931 b4932) actual expected in
  if not test then failwithf "test 3803 failed";
  (* Paths of depth 2 *)
  (* .a494.#a493 *)
  let actual = r.a494.#a493 in
  let expected = "0" in
  mark_test_run 3804;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3804 failed";
  (* .a494.#b493 *)
  let actual = r.a494.#b493 in
  let expected = #{ a168 = "1"; b168 = "2" } in
  mark_test_run 3805;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 3805 failed";
  (* Paths of depth 3 *)
  (* .a494.#b493.#a168 *)
  let actual = r.a494.#b493.#a168 in
  let expected = "1" in
  mark_test_run 3806;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3806 failed";
  (* .a494.#b493.#b168 *)
  let actual = r.a494.#b493.#b168 in
  let expected = "2" in
  mark_test_run 3807;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3807 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a494 = a4941 } { a494 = a4942 } -> (fun #{ a493 = a4931; b493 = b4931 } #{ a493 = a4932; b493 = b4932 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4931 a4932 && (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) b4931 b4932) a4941 a4942) in
  let next_r = { a494 = #{ a493 = "100"; b493 = #{ a168 = "101"; b168 = "102" } } } in
  let r_expected = { a494 = #{ a493 = "0"; b493 = #{ a168 = "1"; b168 = "2" } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a494 *)
  r.a494 <- next_r.a494;
  let r_expected = { r_expected with a494 = next_r.a494 } in
  mark_test_run 3808;
  let test = eq r r_expected in
  if not test then failwithf "test 3808 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a494 = #{ a493; b493 = #{ a168; b168 } } } = r in
  let expected_a493 = "100" in
  mark_test_run 3809;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a493 a493 in
  if not test then failwithf "test 3809 failed";
  let expected_a168 = "101" in
  mark_test_run 3810;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 3810 failed";
  let expected_b168 = "102" in
  mark_test_run 3811;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 3811 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a494 } = r in
  let expected_a494 = #{ a493 = "100"; b493 = #{ a168 = "101"; b168 = "102" } } in
  mark_test_run 3812;
  let test = (fun #{ a493 = a4931; b493 = b4931 } #{ a493 = a4932; b493 = b4932 } -> (fun a b -> String.equal (globalize a) (globalize b)) a4931 a4932 && (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) b4931 b4932) expected_a494 a494 in
  if not test then failwithf "test 3812 failed";

  ()
;;

let () =
  (******************************************)
  (*   t496 = { #{ #{ int; int }; int } }   *)
  (******************************************)
  let r = { a496 = #{ a495 = #{ a25 = 0; b25 = 1 }; b495 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a496 *)
  let actual = r.a496 in
  let expected = #{ a495 = #{ a25 = 0; b25 = 1 }; b495 = 2 } in
  mark_test_run 3813;
  let test = (fun #{ a495 = a4951; b495 = b4951 } #{ a495 = a4952; b495 = b4952 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a4951 a4952 && (fun a b -> Int.equal a b) b4951 b4952) actual expected in
  if not test then failwithf "test 3813 failed";
  (* Paths of depth 2 *)
  (* .a496.#a495 *)
  let actual = r.a496.#a495 in
  let expected = #{ a25 = 0; b25 = 1 } in
  mark_test_run 3814;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 3814 failed";
  (* .a496.#b495 *)
  let actual = r.a496.#b495 in
  let expected = 2 in
  mark_test_run 3815;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3815 failed";
  (* Paths of depth 3 *)
  (* .a496.#a495.#a25 *)
  let actual = r.a496.#a495.#a25 in
  let expected = 0 in
  mark_test_run 3816;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3816 failed";
  (* .a496.#a495.#b25 *)
  let actual = r.a496.#a495.#b25 in
  let expected = 1 in
  mark_test_run 3817;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3817 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a496 = a4961 } { a496 = a4962 } -> (fun #{ a495 = a4951; b495 = b4951 } #{ a495 = a4952; b495 = b4952 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a4951 a4952 && (fun a b -> Int.equal a b) b4951 b4952) a4961 a4962) in
  let next_r = { a496 = #{ a495 = #{ a25 = 100; b25 = 101 }; b495 = 102 } } in
  let r_expected = { a496 = #{ a495 = #{ a25 = 0; b25 = 1 }; b495 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a496 *)
  r.a496 <- next_r.a496;
  let r_expected = { r_expected with a496 = next_r.a496 } in
  mark_test_run 3818;
  let test = eq r r_expected in
  if not test then failwithf "test 3818 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a496 = #{ a495 = #{ a25; b25 }; b495 } } = r in
  let expected_b495 = 102 in
  mark_test_run 3819;
  let test = (fun a b -> Int.equal a b) expected_b495 b495 in
  if not test then failwithf "test 3819 failed";
  let expected_a25 = 100 in
  mark_test_run 3820;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 3820 failed";
  let expected_b25 = 101 in
  mark_test_run 3821;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 3821 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a496 } = r in
  let expected_a496 = #{ a495 = #{ a25 = 100; b25 = 101 }; b495 = 102 } in
  mark_test_run 3822;
  let test = (fun #{ a495 = a4951; b495 = b4951 } #{ a495 = a4952; b495 = b4952 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a4951 a4952 && (fun a b -> Int.equal a b) b4951 b4952) expected_a496 a496 in
  if not test then failwithf "test 3822 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t498 = { #{ #{ int; int }; int32# } }   *)
  (*********************************************)
  let r = { a498 = #{ a497 = #{ a25 = 0; b25 = 1 }; b497 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a498 *)
  let actual = r.a498 in
  let expected = #{ a497 = #{ a25 = 0; b25 = 1 }; b497 = #2l } in
  mark_test_run 3823;
  let test = (fun #{ a497 = a4971; b497 = b4971 } #{ a497 = a4972; b497 = b4972 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a4971 a4972 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b4971 b4972) actual expected in
  if not test then failwithf "test 3823 failed";
  (* Paths of depth 2 *)
  (* .a498.#a497 *)
  let actual = r.a498.#a497 in
  let expected = #{ a25 = 0; b25 = 1 } in
  mark_test_run 3824;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 3824 failed";
  (* .a498.#b497 *)
  let actual = r.a498.#b497 in
  let expected = #2l in
  mark_test_run 3825;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3825 failed";
  (* Paths of depth 3 *)
  (* .a498.#a497.#a25 *)
  let actual = r.a498.#a497.#a25 in
  let expected = 0 in
  mark_test_run 3826;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3826 failed";
  (* .a498.#a497.#b25 *)
  let actual = r.a498.#a497.#b25 in
  let expected = 1 in
  mark_test_run 3827;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3827 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a498 = a4981 } { a498 = a4982 } -> (fun #{ a497 = a4971; b497 = b4971 } #{ a497 = a4972; b497 = b4972 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a4971 a4972 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b4971 b4972) a4981 a4982) in
  let next_r = { a498 = #{ a497 = #{ a25 = 100; b25 = 101 }; b497 = #102l } } in
  let r_expected = { a498 = #{ a497 = #{ a25 = 0; b25 = 1 }; b497 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a498 *)
  r.a498 <- next_r.a498;
  let r_expected = { r_expected with a498 = next_r.a498 } in
  mark_test_run 3828;
  let test = eq r r_expected in
  if not test then failwithf "test 3828 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a498 = #{ a497 = #{ a25; b25 }; b497 } } = r in
  let expected_b497 = #102l in
  mark_test_run 3829;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b497 b497 in
  if not test then failwithf "test 3829 failed";
  let expected_a25 = 100 in
  mark_test_run 3830;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 3830 failed";
  let expected_b25 = 101 in
  mark_test_run 3831;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 3831 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a498 } = r in
  let expected_a498 = #{ a497 = #{ a25 = 100; b25 = 101 }; b497 = #102l } in
  mark_test_run 3832;
  let test = (fun #{ a497 = a4971; b497 = b4971 } #{ a497 = a4972; b497 = b4972 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a4971 a4972 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b4971 b4972) expected_a498 a498 in
  if not test then failwithf "test 3832 failed";

  ()
;;

let () =
  (********************************************)
  (*   t500 = { #{ #{ int; int }; float } }   *)
  (********************************************)
  let r = { a500 = #{ a499 = #{ a25 = 0; b25 = 1 }; b499 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a500 *)
  let actual = r.a500 in
  let expected = #{ a499 = #{ a25 = 0; b25 = 1 }; b499 = 2. } in
  mark_test_run 3833;
  let test = (fun #{ a499 = a4991; b499 = b4991 } #{ a499 = a4992; b499 = b4992 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a4991 a4992 && (fun a b -> Float.equal (globalize a) (globalize b)) b4991 b4992) actual expected in
  if not test then failwithf "test 3833 failed";
  (* Paths of depth 2 *)
  (* .a500.#a499 *)
  let actual = r.a500.#a499 in
  let expected = #{ a25 = 0; b25 = 1 } in
  mark_test_run 3834;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) actual expected in
  if not test then failwithf "test 3834 failed";
  (* .a500.#b499 *)
  let actual = r.a500.#b499 in
  let expected = 2. in
  mark_test_run 3835;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3835 failed";
  (* Paths of depth 3 *)
  (* .a500.#a499.#a25 *)
  let actual = r.a500.#a499.#a25 in
  let expected = 0 in
  mark_test_run 3836;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3836 failed";
  (* .a500.#a499.#b25 *)
  let actual = r.a500.#a499.#b25 in
  let expected = 1 in
  mark_test_run 3837;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3837 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a500 = a5001 } { a500 = a5002 } -> (fun #{ a499 = a4991; b499 = b4991 } #{ a499 = a4992; b499 = b4992 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a4991 a4992 && (fun a b -> Float.equal (globalize a) (globalize b)) b4991 b4992) a5001 a5002) in
  let next_r = { a500 = #{ a499 = #{ a25 = 100; b25 = 101 }; b499 = 102. } } in
  let r_expected = { a500 = #{ a499 = #{ a25 = 0; b25 = 1 }; b499 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a500 *)
  r.a500 <- next_r.a500;
  let r_expected = { r_expected with a500 = next_r.a500 } in
  mark_test_run 3838;
  let test = eq r r_expected in
  if not test then failwithf "test 3838 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a500 = #{ a499 = #{ a25; b25 }; b499 } } = r in
  let expected_b499 = 102. in
  mark_test_run 3839;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b499 b499 in
  if not test then failwithf "test 3839 failed";
  let expected_a25 = 100 in
  mark_test_run 3840;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 3840 failed";
  let expected_b25 = 101 in
  mark_test_run 3841;
  let test = (fun a b -> Int.equal a b) expected_b25 b25 in
  if not test then failwithf "test 3841 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a500 } = r in
  let expected_a500 = #{ a499 = #{ a25 = 100; b25 = 101 }; b499 = 102. } in
  mark_test_run 3842;
  let test = (fun #{ a499 = a4991; b499 = b4991 } #{ a499 = a4992; b499 = b4992 } -> (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252) a4991 a4992 && (fun a b -> Float.equal (globalize a) (globalize b)) b4991 b4992) expected_a500 a500 in
  if not test then failwithf "test 3842 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t502 = { #{ #{ int; int32# }; int } }   *)
  (*********************************************)
  let r = { a502 = #{ a501 = #{ a27 = 0; b27 = #1l }; b501 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a502 *)
  let actual = r.a502 in
  let expected = #{ a501 = #{ a27 = 0; b27 = #1l }; b501 = 2 } in
  mark_test_run 3843;
  let test = (fun #{ a501 = a5011; b501 = b5011 } #{ a501 = a5012; b501 = b5012 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a5011 a5012 && (fun a b -> Int.equal a b) b5011 b5012) actual expected in
  if not test then failwithf "test 3843 failed";
  (* Paths of depth 2 *)
  (* .a502.#a501 *)
  let actual = r.a502.#a501 in
  let expected = #{ a27 = 0; b27 = #1l } in
  mark_test_run 3844;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 3844 failed";
  (* .a502.#b501 *)
  let actual = r.a502.#b501 in
  let expected = 2 in
  mark_test_run 3845;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3845 failed";
  (* Paths of depth 3 *)
  (* .a502.#a501.#a27 *)
  let actual = r.a502.#a501.#a27 in
  let expected = 0 in
  mark_test_run 3846;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3846 failed";
  (* .a502.#a501.#b27 *)
  let actual = r.a502.#a501.#b27 in
  let expected = #1l in
  mark_test_run 3847;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3847 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a502 = a5021 } { a502 = a5022 } -> (fun #{ a501 = a5011; b501 = b5011 } #{ a501 = a5012; b501 = b5012 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a5011 a5012 && (fun a b -> Int.equal a b) b5011 b5012) a5021 a5022) in
  let next_r = { a502 = #{ a501 = #{ a27 = 100; b27 = #101l }; b501 = 102 } } in
  let r_expected = { a502 = #{ a501 = #{ a27 = 0; b27 = #1l }; b501 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a502 *)
  r.a502 <- next_r.a502;
  let r_expected = { r_expected with a502 = next_r.a502 } in
  mark_test_run 3848;
  let test = eq r r_expected in
  if not test then failwithf "test 3848 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a502 = #{ a501 = #{ a27; b27 }; b501 } } = r in
  let expected_b501 = 102 in
  mark_test_run 3849;
  let test = (fun a b -> Int.equal a b) expected_b501 b501 in
  if not test then failwithf "test 3849 failed";
  let expected_a27 = 100 in
  mark_test_run 3850;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 3850 failed";
  let expected_b27 = #101l in
  mark_test_run 3851;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 3851 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a502 } = r in
  let expected_a502 = #{ a501 = #{ a27 = 100; b27 = #101l }; b501 = 102 } in
  mark_test_run 3852;
  let test = (fun #{ a501 = a5011; b501 = b5011 } #{ a501 = a5012; b501 = b5012 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a5011 a5012 && (fun a b -> Int.equal a b) b5011 b5012) expected_a502 a502 in
  if not test then failwithf "test 3852 failed";

  ()
;;

let () =
  (************************************************)
  (*   t504 = { #{ #{ int; int32# }; int32# } }   *)
  (************************************************)
  let r = { a504 = #{ a503 = #{ a27 = 0; b27 = #1l }; b503 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a504 *)
  let actual = r.a504 in
  let expected = #{ a503 = #{ a27 = 0; b27 = #1l }; b503 = #2l } in
  mark_test_run 3853;
  let test = (fun #{ a503 = a5031; b503 = b5031 } #{ a503 = a5032; b503 = b5032 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a5031 a5032 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b5031 b5032) actual expected in
  if not test then failwithf "test 3853 failed";
  (* Paths of depth 2 *)
  (* .a504.#a503 *)
  let actual = r.a504.#a503 in
  let expected = #{ a27 = 0; b27 = #1l } in
  mark_test_run 3854;
  let test = (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) actual expected in
  if not test then failwithf "test 3854 failed";
  (* .a504.#b503 *)
  let actual = r.a504.#b503 in
  let expected = #2l in
  mark_test_run 3855;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3855 failed";
  (* Paths of depth 3 *)
  (* .a504.#a503.#a27 *)
  let actual = r.a504.#a503.#a27 in
  let expected = 0 in
  mark_test_run 3856;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3856 failed";
  (* .a504.#a503.#b27 *)
  let actual = r.a504.#a503.#b27 in
  let expected = #1l in
  mark_test_run 3857;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3857 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a504 = a5041 } { a504 = a5042 } -> (fun #{ a503 = a5031; b503 = b5031 } #{ a503 = a5032; b503 = b5032 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a5031 a5032 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b5031 b5032) a5041 a5042) in
  let next_r = { a504 = #{ a503 = #{ a27 = 100; b27 = #101l }; b503 = #102l } } in
  let r_expected = { a504 = #{ a503 = #{ a27 = 0; b27 = #1l }; b503 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a504 *)
  r.a504 <- next_r.a504;
  let r_expected = { r_expected with a504 = next_r.a504 } in
  mark_test_run 3858;
  let test = eq r r_expected in
  if not test then failwithf "test 3858 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a504 = #{ a503 = #{ a27; b27 }; b503 } } = r in
  let expected_b503 = #102l in
  mark_test_run 3859;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b503 b503 in
  if not test then failwithf "test 3859 failed";
  let expected_a27 = 100 in
  mark_test_run 3860;
  let test = (fun a b -> Int.equal a b) expected_a27 a27 in
  if not test then failwithf "test 3860 failed";
  let expected_b27 = #101l in
  mark_test_run 3861;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b27 b27 in
  if not test then failwithf "test 3861 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a504 } = r in
  let expected_a504 = #{ a503 = #{ a27 = 100; b27 = #101l }; b503 = #102l } in
  mark_test_run 3862;
  let test = (fun #{ a503 = a5031; b503 = b5031 } #{ a503 = a5032; b503 = b5032 } -> (fun #{ a27 = a271; b27 = b271 } #{ a27 = a272; b27 = b272 } -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b271 b272) a5031 a5032 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b5031 b5032) expected_a504 a504 in
  if not test then failwithf "test 3862 failed";

  ()
;;

let () =
  (********************************************)
  (*   t506 = { #{ #{ int; float }; int } }   *)
  (********************************************)
  let r = { a506 = #{ a505 = #{ a29 = 0; b29 = 1. }; b505 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a506 *)
  let actual = r.a506 in
  let expected = #{ a505 = #{ a29 = 0; b29 = 1. }; b505 = 2 } in
  mark_test_run 3863;
  let test = (fun #{ a505 = a5051; b505 = b5051 } #{ a505 = a5052; b505 = b5052 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a5051 a5052 && (fun a b -> Int.equal a b) b5051 b5052) actual expected in
  if not test then failwithf "test 3863 failed";
  (* Paths of depth 2 *)
  (* .a506.#a505 *)
  let actual = r.a506.#a505 in
  let expected = #{ a29 = 0; b29 = 1. } in
  mark_test_run 3864;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 3864 failed";
  (* .a506.#b505 *)
  let actual = r.a506.#b505 in
  let expected = 2 in
  mark_test_run 3865;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3865 failed";
  (* Paths of depth 3 *)
  (* .a506.#a505.#a29 *)
  let actual = r.a506.#a505.#a29 in
  let expected = 0 in
  mark_test_run 3866;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3866 failed";
  (* .a506.#a505.#b29 *)
  let actual = r.a506.#a505.#b29 in
  let expected = 1. in
  mark_test_run 3867;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3867 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a506 = a5061 } { a506 = a5062 } -> (fun #{ a505 = a5051; b505 = b5051 } #{ a505 = a5052; b505 = b5052 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a5051 a5052 && (fun a b -> Int.equal a b) b5051 b5052) a5061 a5062) in
  let next_r = { a506 = #{ a505 = #{ a29 = 100; b29 = 101. }; b505 = 102 } } in
  let r_expected = { a506 = #{ a505 = #{ a29 = 0; b29 = 1. }; b505 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a506 *)
  r.a506 <- next_r.a506;
  let r_expected = { r_expected with a506 = next_r.a506 } in
  mark_test_run 3868;
  let test = eq r r_expected in
  if not test then failwithf "test 3868 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a506 = #{ a505 = #{ a29; b29 }; b505 } } = r in
  let expected_b505 = 102 in
  mark_test_run 3869;
  let test = (fun a b -> Int.equal a b) expected_b505 b505 in
  if not test then failwithf "test 3869 failed";
  let expected_a29 = 100 in
  mark_test_run 3870;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 3870 failed";
  let expected_b29 = 101. in
  mark_test_run 3871;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 3871 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a506 } = r in
  let expected_a506 = #{ a505 = #{ a29 = 100; b29 = 101. }; b505 = 102 } in
  mark_test_run 3872;
  let test = (fun #{ a505 = a5051; b505 = b5051 } #{ a505 = a5052; b505 = b5052 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a5051 a5052 && (fun a b -> Int.equal a b) b5051 b5052) expected_a506 a506 in
  if not test then failwithf "test 3872 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t508 = { #{ #{ int; float }; float } }   *)
  (**********************************************)
  let r = { a508 = #{ a507 = #{ a29 = 0; b29 = 1. }; b507 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a508 *)
  let actual = r.a508 in
  let expected = #{ a507 = #{ a29 = 0; b29 = 1. }; b507 = 2. } in
  mark_test_run 3873;
  let test = (fun #{ a507 = a5071; b507 = b5071 } #{ a507 = a5072; b507 = b5072 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a5071 a5072 && (fun a b -> Float.equal (globalize a) (globalize b)) b5071 b5072) actual expected in
  if not test then failwithf "test 3873 failed";
  (* Paths of depth 2 *)
  (* .a508.#a507 *)
  let actual = r.a508.#a507 in
  let expected = #{ a29 = 0; b29 = 1. } in
  mark_test_run 3874;
  let test = (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) actual expected in
  if not test then failwithf "test 3874 failed";
  (* .a508.#b507 *)
  let actual = r.a508.#b507 in
  let expected = 2. in
  mark_test_run 3875;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3875 failed";
  (* Paths of depth 3 *)
  (* .a508.#a507.#a29 *)
  let actual = r.a508.#a507.#a29 in
  let expected = 0 in
  mark_test_run 3876;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3876 failed";
  (* .a508.#a507.#b29 *)
  let actual = r.a508.#a507.#b29 in
  let expected = 1. in
  mark_test_run 3877;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3877 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a508 = a5081 } { a508 = a5082 } -> (fun #{ a507 = a5071; b507 = b5071 } #{ a507 = a5072; b507 = b5072 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a5071 a5072 && (fun a b -> Float.equal (globalize a) (globalize b)) b5071 b5072) a5081 a5082) in
  let next_r = { a508 = #{ a507 = #{ a29 = 100; b29 = 101. }; b507 = 102. } } in
  let r_expected = { a508 = #{ a507 = #{ a29 = 0; b29 = 1. }; b507 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a508 *)
  r.a508 <- next_r.a508;
  let r_expected = { r_expected with a508 = next_r.a508 } in
  mark_test_run 3878;
  let test = eq r r_expected in
  if not test then failwithf "test 3878 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a508 = #{ a507 = #{ a29; b29 }; b507 } } = r in
  let expected_b507 = 102. in
  mark_test_run 3879;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b507 b507 in
  if not test then failwithf "test 3879 failed";
  let expected_a29 = 100 in
  mark_test_run 3880;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 3880 failed";
  let expected_b29 = 101. in
  mark_test_run 3881;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b29 b29 in
  if not test then failwithf "test 3881 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a508 } = r in
  let expected_a508 = #{ a507 = #{ a29 = 100; b29 = 101. }; b507 = 102. } in
  mark_test_run 3882;
  let test = (fun #{ a507 = a5071; b507 = b5071 } #{ a507 = a5072; b507 = b5072 } -> (fun #{ a29 = a291; b29 = b291 } #{ a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292) a5071 a5072 && (fun a b -> Float.equal (globalize a) (globalize b)) b5071 b5072) expected_a508 a508 in
  if not test then failwithf "test 3882 failed";

  ()
;;

let () =
  (*********************************************)
  (*   t510 = { #{ #{ int32#; int }; int } }   *)
  (*********************************************)
  let r = { a510 = #{ a509 = #{ a40 = #0l; b40 = 1 }; b509 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a510 *)
  let actual = r.a510 in
  let expected = #{ a509 = #{ a40 = #0l; b40 = 1 }; b509 = 2 } in
  mark_test_run 3883;
  let test = (fun #{ a509 = a5091; b509 = b5091 } #{ a509 = a5092; b509 = b5092 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a5091 a5092 && (fun a b -> Int.equal a b) b5091 b5092) actual expected in
  if not test then failwithf "test 3883 failed";
  (* Paths of depth 2 *)
  (* .a510.#a509 *)
  let actual = r.a510.#a509 in
  let expected = #{ a40 = #0l; b40 = 1 } in
  mark_test_run 3884;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 3884 failed";
  (* .a510.#b509 *)
  let actual = r.a510.#b509 in
  let expected = 2 in
  mark_test_run 3885;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3885 failed";
  (* Paths of depth 3 *)
  (* .a510.#a509.#a40 *)
  let actual = r.a510.#a509.#a40 in
  let expected = #0l in
  mark_test_run 3886;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3886 failed";
  (* .a510.#a509.#b40 *)
  let actual = r.a510.#a509.#b40 in
  let expected = 1 in
  mark_test_run 3887;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3887 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a510 = a5101 } { a510 = a5102 } -> (fun #{ a509 = a5091; b509 = b5091 } #{ a509 = a5092; b509 = b5092 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a5091 a5092 && (fun a b -> Int.equal a b) b5091 b5092) a5101 a5102) in
  let next_r = { a510 = #{ a509 = #{ a40 = #100l; b40 = 101 }; b509 = 102 } } in
  let r_expected = { a510 = #{ a509 = #{ a40 = #0l; b40 = 1 }; b509 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a510 *)
  r.a510 <- next_r.a510;
  let r_expected = { r_expected with a510 = next_r.a510 } in
  mark_test_run 3888;
  let test = eq r r_expected in
  if not test then failwithf "test 3888 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a510 = #{ a509 = #{ a40; b40 }; b509 } } = r in
  let expected_b509 = 102 in
  mark_test_run 3889;
  let test = (fun a b -> Int.equal a b) expected_b509 b509 in
  if not test then failwithf "test 3889 failed";
  let expected_a40 = #100l in
  mark_test_run 3890;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 3890 failed";
  let expected_b40 = 101 in
  mark_test_run 3891;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 3891 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a510 } = r in
  let expected_a510 = #{ a509 = #{ a40 = #100l; b40 = 101 }; b509 = 102 } in
  mark_test_run 3892;
  let test = (fun #{ a509 = a5091; b509 = b5091 } #{ a509 = a5092; b509 = b5092 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a5091 a5092 && (fun a b -> Int.equal a b) b5091 b5092) expected_a510 a510 in
  if not test then failwithf "test 3892 failed";

  ()
;;

let () =
  (************************************************)
  (*   t512 = { #{ #{ int32#; int }; int32# } }   *)
  (************************************************)
  let r = { a512 = #{ a511 = #{ a40 = #0l; b40 = 1 }; b511 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a512 *)
  let actual = r.a512 in
  let expected = #{ a511 = #{ a40 = #0l; b40 = 1 }; b511 = #2l } in
  mark_test_run 3893;
  let test = (fun #{ a511 = a5111; b511 = b5111 } #{ a511 = a5112; b511 = b5112 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a5111 a5112 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b5111 b5112) actual expected in
  if not test then failwithf "test 3893 failed";
  (* Paths of depth 2 *)
  (* .a512.#a511 *)
  let actual = r.a512.#a511 in
  let expected = #{ a40 = #0l; b40 = 1 } in
  mark_test_run 3894;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 3894 failed";
  (* .a512.#b511 *)
  let actual = r.a512.#b511 in
  let expected = #2l in
  mark_test_run 3895;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3895 failed";
  (* Paths of depth 3 *)
  (* .a512.#a511.#a40 *)
  let actual = r.a512.#a511.#a40 in
  let expected = #0l in
  mark_test_run 3896;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3896 failed";
  (* .a512.#a511.#b40 *)
  let actual = r.a512.#a511.#b40 in
  let expected = 1 in
  mark_test_run 3897;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3897 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a512 = a5121 } { a512 = a5122 } -> (fun #{ a511 = a5111; b511 = b5111 } #{ a511 = a5112; b511 = b5112 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a5111 a5112 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b5111 b5112) a5121 a5122) in
  let next_r = { a512 = #{ a511 = #{ a40 = #100l; b40 = 101 }; b511 = #102l } } in
  let r_expected = { a512 = #{ a511 = #{ a40 = #0l; b40 = 1 }; b511 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a512 *)
  r.a512 <- next_r.a512;
  let r_expected = { r_expected with a512 = next_r.a512 } in
  mark_test_run 3898;
  let test = eq r r_expected in
  if not test then failwithf "test 3898 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a512 = #{ a511 = #{ a40; b40 }; b511 } } = r in
  let expected_b511 = #102l in
  mark_test_run 3899;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b511 b511 in
  if not test then failwithf "test 3899 failed";
  let expected_a40 = #100l in
  mark_test_run 3900;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a40 a40 in
  if not test then failwithf "test 3900 failed";
  let expected_b40 = 101 in
  mark_test_run 3901;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 3901 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a512 } = r in
  let expected_a512 = #{ a511 = #{ a40 = #100l; b40 = 101 }; b511 = #102l } in
  mark_test_run 3902;
  let test = (fun #{ a511 = a5111; b511 = b5111 } #{ a511 = a5112; b511 = b5112 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a5111 a5112 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b5111 b5112) expected_a512 a512 in
  if not test then failwithf "test 3902 failed";

  ()
;;

let () =
  (************************************************)
  (*   t514 = { #{ #{ int32#; int32# }; int } }   *)
  (************************************************)
  let r = { a514 = #{ a513 = #{ a42 = #0l; b42 = #1l }; b513 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a514 *)
  let actual = r.a514 in
  let expected = #{ a513 = #{ a42 = #0l; b42 = #1l }; b513 = 2 } in
  mark_test_run 3903;
  let test = (fun #{ a513 = a5131; b513 = b5131 } #{ a513 = a5132; b513 = b5132 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a5131 a5132 && (fun a b -> Int.equal a b) b5131 b5132) actual expected in
  if not test then failwithf "test 3903 failed";
  (* Paths of depth 2 *)
  (* .a514.#a513 *)
  let actual = r.a514.#a513 in
  let expected = #{ a42 = #0l; b42 = #1l } in
  mark_test_run 3904;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 3904 failed";
  (* .a514.#b513 *)
  let actual = r.a514.#b513 in
  let expected = 2 in
  mark_test_run 3905;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3905 failed";
  (* Paths of depth 3 *)
  (* .a514.#a513.#a42 *)
  let actual = r.a514.#a513.#a42 in
  let expected = #0l in
  mark_test_run 3906;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3906 failed";
  (* .a514.#a513.#b42 *)
  let actual = r.a514.#a513.#b42 in
  let expected = #1l in
  mark_test_run 3907;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3907 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a514 = a5141 } { a514 = a5142 } -> (fun #{ a513 = a5131; b513 = b5131 } #{ a513 = a5132; b513 = b5132 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a5131 a5132 && (fun a b -> Int.equal a b) b5131 b5132) a5141 a5142) in
  let next_r = { a514 = #{ a513 = #{ a42 = #100l; b42 = #101l }; b513 = 102 } } in
  let r_expected = { a514 = #{ a513 = #{ a42 = #0l; b42 = #1l }; b513 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a514 *)
  r.a514 <- next_r.a514;
  let r_expected = { r_expected with a514 = next_r.a514 } in
  mark_test_run 3908;
  let test = eq r r_expected in
  if not test then failwithf "test 3908 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a514 = #{ a513 = #{ a42; b42 }; b513 } } = r in
  let expected_b513 = 102 in
  mark_test_run 3909;
  let test = (fun a b -> Int.equal a b) expected_b513 b513 in
  if not test then failwithf "test 3909 failed";
  let expected_a42 = #100l in
  mark_test_run 3910;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 3910 failed";
  let expected_b42 = #101l in
  mark_test_run 3911;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 3911 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a514 } = r in
  let expected_a514 = #{ a513 = #{ a42 = #100l; b42 = #101l }; b513 = 102 } in
  mark_test_run 3912;
  let test = (fun #{ a513 = a5131; b513 = b5131 } #{ a513 = a5132; b513 = b5132 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a5131 a5132 && (fun a b -> Int.equal a b) b5131 b5132) expected_a514 a514 in
  if not test then failwithf "test 3912 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t516 = { #{ #{ int32#; int32# }; int32# } }   *)
  (***************************************************)
  let r = { a516 = #{ a515 = #{ a42 = #0l; b42 = #1l }; b515 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a516 *)
  let actual = r.a516 in
  let expected = #{ a515 = #{ a42 = #0l; b42 = #1l }; b515 = #2l } in
  mark_test_run 3913;
  let test = (fun #{ a515 = a5151; b515 = b5151 } #{ a515 = a5152; b515 = b5152 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a5151 a5152 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b5151 b5152) actual expected in
  if not test then failwithf "test 3913 failed";
  (* Paths of depth 2 *)
  (* .a516.#a515 *)
  let actual = r.a516.#a515 in
  let expected = #{ a42 = #0l; b42 = #1l } in
  mark_test_run 3914;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) actual expected in
  if not test then failwithf "test 3914 failed";
  (* .a516.#b515 *)
  let actual = r.a516.#b515 in
  let expected = #2l in
  mark_test_run 3915;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3915 failed";
  (* Paths of depth 3 *)
  (* .a516.#a515.#a42 *)
  let actual = r.a516.#a515.#a42 in
  let expected = #0l in
  mark_test_run 3916;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3916 failed";
  (* .a516.#a515.#b42 *)
  let actual = r.a516.#a515.#b42 in
  let expected = #1l in
  mark_test_run 3917;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 3917 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a516 = a5161 } { a516 = a5162 } -> (fun #{ a515 = a5151; b515 = b5151 } #{ a515 = a5152; b515 = b5152 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a5151 a5152 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b5151 b5152) a5161 a5162) in
  let next_r = { a516 = #{ a515 = #{ a42 = #100l; b42 = #101l }; b515 = #102l } } in
  let r_expected = { a516 = #{ a515 = #{ a42 = #0l; b42 = #1l }; b515 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a516 *)
  r.a516 <- next_r.a516;
  let r_expected = { r_expected with a516 = next_r.a516 } in
  mark_test_run 3918;
  let test = eq r r_expected in
  if not test then failwithf "test 3918 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a516 = #{ a515 = #{ a42; b42 }; b515 } } = r in
  let expected_b515 = #102l in
  mark_test_run 3919;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b515 b515 in
  if not test then failwithf "test 3919 failed";
  let expected_a42 = #100l in
  mark_test_run 3920;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a42 a42 in
  if not test then failwithf "test 3920 failed";
  let expected_b42 = #101l in
  mark_test_run 3921;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b42 b42 in
  if not test then failwithf "test 3921 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a516 } = r in
  let expected_a516 = #{ a515 = #{ a42 = #100l; b42 = #101l }; b515 = #102l } in
  mark_test_run 3922;
  let test = (fun #{ a515 = a5151; b515 = b5151 } #{ a515 = a5152; b515 = b5152 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a421 a422 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b421 b422) a5151 a5152 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b5151 b5152) expected_a516 a516 in
  if not test then failwithf "test 3922 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t518 = { #{ #{ unit_u; unit_u }; string } }   *)
  (***************************************************)
  let r = { a518 = #{ a517 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) }; b517 = "0" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a518 *)
  let actual = r.a518 in
  let expected = #{ a517 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) }; b517 = "0" } in
  mark_test_run 3923;
  let test = (fun #{ a517 = a5171; b517 = b5171 } #{ a517 = a5172; b517 = b5172 } -> (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) a5171 a5172 && (fun a b -> String.equal (globalize a) (globalize b)) b5171 b5172) actual expected in
  if not test then failwithf "test 3923 failed";
  (* Paths of depth 2 *)
  (* .a518.#a517 *)
  let actual = r.a518.#a517 in
  let expected = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) } in
  mark_test_run 3924;
  let test = (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) actual expected in
  if not test then failwithf "test 3924 failed";
  (* .a518.#b517 *)
  let actual = r.a518.#b517 in
  let expected = "0" in
  mark_test_run 3925;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3925 failed";
  (* Paths of depth 3 *)
  (* .a518.#a517.#a266 *)
  let actual = r.a518.#a517.#a266 in
  let expected = (unbox_unit ()) in
  mark_test_run 3926;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3926 failed";
  (* .a518.#a517.#b266 *)
  let actual = r.a518.#a517.#b266 in
  let expected = (unbox_unit ()) in
  mark_test_run 3927;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3927 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a518 = a5181 } { a518 = a5182 } -> (fun #{ a517 = a5171; b517 = b5171 } #{ a517 = a5172; b517 = b5172 } -> (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) a5171 a5172 && (fun a b -> String.equal (globalize a) (globalize b)) b5171 b5172) a5181 a5182) in
  let next_r = { a518 = #{ a517 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) }; b517 = "100" } } in
  let r_expected = { a518 = #{ a517 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) }; b517 = "0" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a518 *)
  r.a518 <- next_r.a518;
  let r_expected = { r_expected with a518 = next_r.a518 } in
  mark_test_run 3928;
  let test = eq r r_expected in
  if not test then failwithf "test 3928 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a518 = #{ a517 = #{ a266; b266 }; b517 } } = r in
  let expected_b517 = "100" in
  mark_test_run 3929;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b517 b517 in
  if not test then failwithf "test 3929 failed";
  let expected_a266 = (unbox_unit ()) in
  mark_test_run 3930;
  let test = (fun _ _ -> true) expected_a266 a266 in
  if not test then failwithf "test 3930 failed";
  let expected_b266 = (unbox_unit ()) in
  mark_test_run 3931;
  let test = (fun _ _ -> true) expected_b266 b266 in
  if not test then failwithf "test 3931 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a518 } = r in
  let expected_a518 = #{ a517 = #{ a266 = (unbox_unit ()); b266 = (unbox_unit ()) }; b517 = "100" } in
  mark_test_run 3932;
  let test = (fun #{ a517 = a5171; b517 = b5171 } #{ a517 = a5172; b517 = b5172 } -> (fun #{ a266 = a2661; b266 = b2661 } #{ a266 = a2662; b266 = b2662 } -> (fun _ _ -> true) a2661 a2662 && (fun _ _ -> true) b2661 b2662) a5171 a5172 && (fun a b -> String.equal (globalize a) (globalize b)) b5171 b5172) expected_a518 a518 in
  if not test then failwithf "test 3932 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t520 = { #{ #{ unit_u; string }; unit_u } }   *)
  (***************************************************)
  let r = { a520 = #{ a519 = #{ a160 = (unbox_unit ()); b160 = "0" }; b519 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a520 *)
  let actual = r.a520 in
  let expected = #{ a519 = #{ a160 = (unbox_unit ()); b160 = "0" }; b519 = (unbox_unit ()) } in
  mark_test_run 3933;
  let test = (fun #{ a519 = a5191; b519 = b5191 } #{ a519 = a5192; b519 = b5192 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a5191 a5192 && (fun _ _ -> true) b5191 b5192) actual expected in
  if not test then failwithf "test 3933 failed";
  (* Paths of depth 2 *)
  (* .a520.#a519 *)
  let actual = r.a520.#a519 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "0" } in
  mark_test_run 3934;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 3934 failed";
  (* .a520.#b519 *)
  let actual = r.a520.#b519 in
  let expected = (unbox_unit ()) in
  mark_test_run 3935;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3935 failed";
  (* Paths of depth 3 *)
  (* .a520.#a519.#a160 *)
  let actual = r.a520.#a519.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 3936;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3936 failed";
  (* .a520.#a519.#b160 *)
  let actual = r.a520.#a519.#b160 in
  let expected = "0" in
  mark_test_run 3937;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3937 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a520 = a5201 } { a520 = a5202 } -> (fun #{ a519 = a5191; b519 = b5191 } #{ a519 = a5192; b519 = b5192 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a5191 a5192 && (fun _ _ -> true) b5191 b5192) a5201 a5202) in
  let next_r = { a520 = #{ a519 = #{ a160 = (unbox_unit ()); b160 = "100" }; b519 = (unbox_unit ()) } } in
  let r_expected = { a520 = #{ a519 = #{ a160 = (unbox_unit ()); b160 = "0" }; b519 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a520 *)
  r.a520 <- next_r.a520;
  let r_expected = { r_expected with a520 = next_r.a520 } in
  mark_test_run 3938;
  let test = eq r r_expected in
  if not test then failwithf "test 3938 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a520 = #{ a519 = #{ a160; b160 }; b519 } } = r in
  let expected_b519 = (unbox_unit ()) in
  mark_test_run 3939;
  let test = (fun _ _ -> true) expected_b519 b519 in
  if not test then failwithf "test 3939 failed";
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 3940;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 3940 failed";
  let expected_b160 = "100" in
  mark_test_run 3941;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 3941 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a520 } = r in
  let expected_a520 = #{ a519 = #{ a160 = (unbox_unit ()); b160 = "100" }; b519 = (unbox_unit ()) } in
  mark_test_run 3942;
  let test = (fun #{ a519 = a5191; b519 = b5191 } #{ a519 = a5192; b519 = b5192 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a5191 a5192 && (fun _ _ -> true) b5191 b5192) expected_a520 a520 in
  if not test then failwithf "test 3942 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t522 = { #{ #{ unit_u; string }; string } }   *)
  (***************************************************)
  let r = { a522 = #{ a521 = #{ a160 = (unbox_unit ()); b160 = "0" }; b521 = "1" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a522 *)
  let actual = r.a522 in
  let expected = #{ a521 = #{ a160 = (unbox_unit ()); b160 = "0" }; b521 = "1" } in
  mark_test_run 3943;
  let test = (fun #{ a521 = a5211; b521 = b5211 } #{ a521 = a5212; b521 = b5212 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a5211 a5212 && (fun a b -> String.equal (globalize a) (globalize b)) b5211 b5212) actual expected in
  if not test then failwithf "test 3943 failed";
  (* Paths of depth 2 *)
  (* .a522.#a521 *)
  let actual = r.a522.#a521 in
  let expected = #{ a160 = (unbox_unit ()); b160 = "0" } in
  mark_test_run 3944;
  let test = (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) actual expected in
  if not test then failwithf "test 3944 failed";
  (* .a522.#b521 *)
  let actual = r.a522.#b521 in
  let expected = "1" in
  mark_test_run 3945;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3945 failed";
  (* Paths of depth 3 *)
  (* .a522.#a521.#a160 *)
  let actual = r.a522.#a521.#a160 in
  let expected = (unbox_unit ()) in
  mark_test_run 3946;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 3946 failed";
  (* .a522.#a521.#b160 *)
  let actual = r.a522.#a521.#b160 in
  let expected = "0" in
  mark_test_run 3947;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3947 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a522 = a5221 } { a522 = a5222 } -> (fun #{ a521 = a5211; b521 = b5211 } #{ a521 = a5212; b521 = b5212 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a5211 a5212 && (fun a b -> String.equal (globalize a) (globalize b)) b5211 b5212) a5221 a5222) in
  let next_r = { a522 = #{ a521 = #{ a160 = (unbox_unit ()); b160 = "100" }; b521 = "101" } } in
  let r_expected = { a522 = #{ a521 = #{ a160 = (unbox_unit ()); b160 = "0" }; b521 = "1" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a522 *)
  r.a522 <- next_r.a522;
  let r_expected = { r_expected with a522 = next_r.a522 } in
  mark_test_run 3948;
  let test = eq r r_expected in
  if not test then failwithf "test 3948 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a522 = #{ a521 = #{ a160; b160 }; b521 } } = r in
  let expected_b521 = "101" in
  mark_test_run 3949;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b521 b521 in
  if not test then failwithf "test 3949 failed";
  let expected_a160 = (unbox_unit ()) in
  mark_test_run 3950;
  let test = (fun _ _ -> true) expected_a160 a160 in
  if not test then failwithf "test 3950 failed";
  let expected_b160 = "100" in
  mark_test_run 3951;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 3951 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a522 } = r in
  let expected_a522 = #{ a521 = #{ a160 = (unbox_unit ()); b160 = "100" }; b521 = "101" } in
  mark_test_run 3952;
  let test = (fun #{ a521 = a5211; b521 = b5211 } #{ a521 = a5212; b521 = b5212 } -> (fun #{ a160 = a1601; b160 = b1601 } #{ a160 = a1602; b160 = b1602 } -> (fun _ _ -> true) a1601 a1602 && (fun a b -> String.equal (globalize a) (globalize b)) b1601 b1602) a5211 a5212 && (fun a b -> String.equal (globalize a) (globalize b)) b5211 b5212) expected_a522 a522 in
  if not test then failwithf "test 3952 failed";

  ()
;;

let () =
  (********************************************)
  (*   t524 = { #{ #{ float; int }; int } }   *)
  (********************************************)
  let r = { a524 = #{ a523 = #{ a49 = 0.; b49 = 1 }; b523 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a524 *)
  let actual = r.a524 in
  let expected = #{ a523 = #{ a49 = 0.; b49 = 1 }; b523 = 2 } in
  mark_test_run 3953;
  let test = (fun #{ a523 = a5231; b523 = b5231 } #{ a523 = a5232; b523 = b5232 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a5231 a5232 && (fun a b -> Int.equal a b) b5231 b5232) actual expected in
  if not test then failwithf "test 3953 failed";
  (* Paths of depth 2 *)
  (* .a524.#a523 *)
  let actual = r.a524.#a523 in
  let expected = #{ a49 = 0.; b49 = 1 } in
  mark_test_run 3954;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 3954 failed";
  (* .a524.#b523 *)
  let actual = r.a524.#b523 in
  let expected = 2 in
  mark_test_run 3955;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3955 failed";
  (* Paths of depth 3 *)
  (* .a524.#a523.#a49 *)
  let actual = r.a524.#a523.#a49 in
  let expected = 0. in
  mark_test_run 3956;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3956 failed";
  (* .a524.#a523.#b49 *)
  let actual = r.a524.#a523.#b49 in
  let expected = 1 in
  mark_test_run 3957;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3957 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a524 = a5241 } { a524 = a5242 } -> (fun #{ a523 = a5231; b523 = b5231 } #{ a523 = a5232; b523 = b5232 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a5231 a5232 && (fun a b -> Int.equal a b) b5231 b5232) a5241 a5242) in
  let next_r = { a524 = #{ a523 = #{ a49 = 100.; b49 = 101 }; b523 = 102 } } in
  let r_expected = { a524 = #{ a523 = #{ a49 = 0.; b49 = 1 }; b523 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a524 *)
  r.a524 <- next_r.a524;
  let r_expected = { r_expected with a524 = next_r.a524 } in
  mark_test_run 3958;
  let test = eq r r_expected in
  if not test then failwithf "test 3958 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a524 = #{ a523 = #{ a49; b49 }; b523 } } = r in
  let expected_b523 = 102 in
  mark_test_run 3959;
  let test = (fun a b -> Int.equal a b) expected_b523 b523 in
  if not test then failwithf "test 3959 failed";
  let expected_a49 = 100. in
  mark_test_run 3960;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 3960 failed";
  let expected_b49 = 101 in
  mark_test_run 3961;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 3961 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a524 } = r in
  let expected_a524 = #{ a523 = #{ a49 = 100.; b49 = 101 }; b523 = 102 } in
  mark_test_run 3962;
  let test = (fun #{ a523 = a5231; b523 = b5231 } #{ a523 = a5232; b523 = b5232 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a5231 a5232 && (fun a b -> Int.equal a b) b5231 b5232) expected_a524 a524 in
  if not test then failwithf "test 3962 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t526 = { #{ #{ float; int }; float } }   *)
  (**********************************************)
  let r = { a526 = #{ a525 = #{ a49 = 0.; b49 = 1 }; b525 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a526 *)
  let actual = r.a526 in
  let expected = #{ a525 = #{ a49 = 0.; b49 = 1 }; b525 = 2. } in
  mark_test_run 3963;
  let test = (fun #{ a525 = a5251; b525 = b5251 } #{ a525 = a5252; b525 = b5252 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a5251 a5252 && (fun a b -> Float.equal (globalize a) (globalize b)) b5251 b5252) actual expected in
  if not test then failwithf "test 3963 failed";
  (* Paths of depth 2 *)
  (* .a526.#a525 *)
  let actual = r.a526.#a525 in
  let expected = #{ a49 = 0.; b49 = 1 } in
  mark_test_run 3964;
  let test = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) actual expected in
  if not test then failwithf "test 3964 failed";
  (* .a526.#b525 *)
  let actual = r.a526.#b525 in
  let expected = 2. in
  mark_test_run 3965;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3965 failed";
  (* Paths of depth 3 *)
  (* .a526.#a525.#a49 *)
  let actual = r.a526.#a525.#a49 in
  let expected = 0. in
  mark_test_run 3966;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3966 failed";
  (* .a526.#a525.#b49 *)
  let actual = r.a526.#a525.#b49 in
  let expected = 1 in
  mark_test_run 3967;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3967 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a526 = a5261 } { a526 = a5262 } -> (fun #{ a525 = a5251; b525 = b5251 } #{ a525 = a5252; b525 = b5252 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a5251 a5252 && (fun a b -> Float.equal (globalize a) (globalize b)) b5251 b5252) a5261 a5262) in
  let next_r = { a526 = #{ a525 = #{ a49 = 100.; b49 = 101 }; b525 = 102. } } in
  let r_expected = { a526 = #{ a525 = #{ a49 = 0.; b49 = 1 }; b525 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a526 *)
  r.a526 <- next_r.a526;
  let r_expected = { r_expected with a526 = next_r.a526 } in
  mark_test_run 3968;
  let test = eq r r_expected in
  if not test then failwithf "test 3968 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a526 = #{ a525 = #{ a49; b49 }; b525 } } = r in
  let expected_b525 = 102. in
  mark_test_run 3969;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b525 b525 in
  if not test then failwithf "test 3969 failed";
  let expected_a49 = 100. in
  mark_test_run 3970;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a49 a49 in
  if not test then failwithf "test 3970 failed";
  let expected_b49 = 101 in
  mark_test_run 3971;
  let test = (fun a b -> Int.equal a b) expected_b49 b49 in
  if not test then failwithf "test 3971 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a526 } = r in
  let expected_a526 = #{ a525 = #{ a49 = 100.; b49 = 101 }; b525 = 102. } in
  mark_test_run 3972;
  let test = (fun #{ a525 = a5251; b525 = b5251 } #{ a525 = a5252; b525 = b5252 } -> (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int.equal a b) b491 b492) a5251 a5252 && (fun a b -> Float.equal (globalize a) (globalize b)) b5251 b5252) expected_a526 a526 in
  if not test then failwithf "test 3972 failed";

  ()
;;

let () =
  (**********************************************)
  (*   t528 = { #{ #{ float; float }; int } }   *)
  (**********************************************)
  let r = { a528 = #{ a527 = #{ a51 = 0.; b51 = 1. }; b527 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a528 *)
  let actual = r.a528 in
  let expected = #{ a527 = #{ a51 = 0.; b51 = 1. }; b527 = 2 } in
  mark_test_run 3973;
  let test = (fun #{ a527 = a5271; b527 = b5271 } #{ a527 = a5272; b527 = b5272 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a5271 a5272 && (fun a b -> Int.equal a b) b5271 b5272) actual expected in
  if not test then failwithf "test 3973 failed";
  (* Paths of depth 2 *)
  (* .a528.#a527 *)
  let actual = r.a528.#a527 in
  let expected = #{ a51 = 0.; b51 = 1. } in
  mark_test_run 3974;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 3974 failed";
  (* .a528.#b527 *)
  let actual = r.a528.#b527 in
  let expected = 2 in
  mark_test_run 3975;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 3975 failed";
  (* Paths of depth 3 *)
  (* .a528.#a527.#a51 *)
  let actual = r.a528.#a527.#a51 in
  let expected = 0. in
  mark_test_run 3976;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3976 failed";
  (* .a528.#a527.#b51 *)
  let actual = r.a528.#a527.#b51 in
  let expected = 1. in
  mark_test_run 3977;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3977 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a528 = a5281 } { a528 = a5282 } -> (fun #{ a527 = a5271; b527 = b5271 } #{ a527 = a5272; b527 = b5272 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a5271 a5272 && (fun a b -> Int.equal a b) b5271 b5272) a5281 a5282) in
  let next_r = { a528 = #{ a527 = #{ a51 = 100.; b51 = 101. }; b527 = 102 } } in
  let r_expected = { a528 = #{ a527 = #{ a51 = 0.; b51 = 1. }; b527 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a528 *)
  r.a528 <- next_r.a528;
  let r_expected = { r_expected with a528 = next_r.a528 } in
  mark_test_run 3978;
  let test = eq r r_expected in
  if not test then failwithf "test 3978 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a528 = #{ a527 = #{ a51; b51 }; b527 } } = r in
  let expected_b527 = 102 in
  mark_test_run 3979;
  let test = (fun a b -> Int.equal a b) expected_b527 b527 in
  if not test then failwithf "test 3979 failed";
  let expected_a51 = 100. in
  mark_test_run 3980;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 3980 failed";
  let expected_b51 = 101. in
  mark_test_run 3981;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 3981 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a528 } = r in
  let expected_a528 = #{ a527 = #{ a51 = 100.; b51 = 101. }; b527 = 102 } in
  mark_test_run 3982;
  let test = (fun #{ a527 = a5271; b527 = b5271 } #{ a527 = a5272; b527 = b5272 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a5271 a5272 && (fun a b -> Int.equal a b) b5271 b5272) expected_a528 a528 in
  if not test then failwithf "test 3982 failed";

  ()
;;

let () =
  (************************************************)
  (*   t530 = { #{ #{ float; float }; float } }   *)
  (************************************************)
  let r = { a530 = #{ a529 = #{ a51 = 0.; b51 = 1. }; b529 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a530 *)
  let actual = r.a530 in
  let expected = #{ a529 = #{ a51 = 0.; b51 = 1. }; b529 = 2. } in
  mark_test_run 3983;
  let test = (fun #{ a529 = a5291; b529 = b5291 } #{ a529 = a5292; b529 = b5292 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a5291 a5292 && (fun a b -> Float.equal (globalize a) (globalize b)) b5291 b5292) actual expected in
  if not test then failwithf "test 3983 failed";
  (* Paths of depth 2 *)
  (* .a530.#a529 *)
  let actual = r.a530.#a529 in
  let expected = #{ a51 = 0.; b51 = 1. } in
  mark_test_run 3984;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 3984 failed";
  (* .a530.#b529 *)
  let actual = r.a530.#b529 in
  let expected = 2. in
  mark_test_run 3985;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3985 failed";
  (* Paths of depth 3 *)
  (* .a530.#a529.#a51 *)
  let actual = r.a530.#a529.#a51 in
  let expected = 0. in
  mark_test_run 3986;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3986 failed";
  (* .a530.#a529.#b51 *)
  let actual = r.a530.#a529.#b51 in
  let expected = 1. in
  mark_test_run 3987;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3987 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a530 = a5301 } { a530 = a5302 } -> (fun #{ a529 = a5291; b529 = b5291 } #{ a529 = a5292; b529 = b5292 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a5291 a5292 && (fun a b -> Float.equal (globalize a) (globalize b)) b5291 b5292) a5301 a5302) in
  let next_r = { a530 = #{ a529 = #{ a51 = 100.; b51 = 101. }; b529 = 102. } } in
  let r_expected = { a530 = #{ a529 = #{ a51 = 0.; b51 = 1. }; b529 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a530 *)
  r.a530 <- next_r.a530;
  let r_expected = { r_expected with a530 = next_r.a530 } in
  mark_test_run 3988;
  let test = eq r r_expected in
  if not test then failwithf "test 3988 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a530 = #{ a529 = #{ a51; b51 }; b529 } } = r in
  let expected_b529 = 102. in
  mark_test_run 3989;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b529 b529 in
  if not test then failwithf "test 3989 failed";
  let expected_a51 = 100. in
  mark_test_run 3990;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 3990 failed";
  let expected_b51 = 101. in
  mark_test_run 3991;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 3991 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a530 } = r in
  let expected_a530 = #{ a529 = #{ a51 = 100.; b51 = 101. }; b529 = 102. } in
  mark_test_run 3992;
  let test = (fun #{ a529 = a5291; b529 = b5291 } #{ a529 = a5292; b529 = b5292 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a5291 a5292 && (fun a b -> Float.equal (globalize a) (globalize b)) b5291 b5292) expected_a530 a530 in
  if not test then failwithf "test 3992 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t532 = { #{ #{ float; float }; float# } }   *)
  (*************************************************)
  let r = { a532 = #{ a531 = #{ a51 = 0.; b51 = 1. }; b531 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a532 *)
  let actual = r.a532 in
  let expected = #{ a531 = #{ a51 = 0.; b51 = 1. }; b531 = #2. } in
  mark_test_run 3993;
  let test = (fun #{ a531 = a5311; b531 = b5311 } #{ a531 = a5312; b531 = b5312 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a5311 a5312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5311 b5312) actual expected in
  if not test then failwithf "test 3993 failed";
  (* Paths of depth 2 *)
  (* .a532.#a531 *)
  let actual = r.a532.#a531 in
  let expected = #{ a51 = 0.; b51 = 1. } in
  mark_test_run 3994;
  let test = (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) actual expected in
  if not test then failwithf "test 3994 failed";
  (* .a532.#b531 *)
  let actual = r.a532.#b531 in
  let expected = #2. in
  mark_test_run 3995;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 3995 failed";
  (* Paths of depth 3 *)
  (* .a532.#a531.#a51 *)
  let actual = r.a532.#a531.#a51 in
  let expected = 0. in
  mark_test_run 3996;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3996 failed";
  (* .a532.#a531.#b51 *)
  let actual = r.a532.#a531.#b51 in
  let expected = 1. in
  mark_test_run 3997;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 3997 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a532 = a5321 } { a532 = a5322 } -> (fun #{ a531 = a5311; b531 = b5311 } #{ a531 = a5312; b531 = b5312 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a5311 a5312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5311 b5312) a5321 a5322) in
  let next_r = { a532 = #{ a531 = #{ a51 = 100.; b51 = 101. }; b531 = #102. } } in
  let r_expected = { a532 = #{ a531 = #{ a51 = 0.; b51 = 1. }; b531 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a532 *)
  r.a532 <- next_r.a532;
  let r_expected = { r_expected with a532 = next_r.a532 } in
  mark_test_run 3998;
  let test = eq r r_expected in
  if not test then failwithf "test 3998 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a532 = #{ a531 = #{ a51; b51 }; b531 } } = r in
  let expected_b531 = #102. in
  mark_test_run 3999;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b531 b531 in
  if not test then failwithf "test 3999 failed";
  let expected_a51 = 100. in
  mark_test_run 4000;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a51 a51 in
  if not test then failwithf "test 4000 failed";
  let expected_b51 = 101. in
  mark_test_run 4001;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b51 b51 in
  if not test then failwithf "test 4001 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a532 } = r in
  let expected_a532 = #{ a531 = #{ a51 = 100.; b51 = 101. }; b531 = #102. } in
  mark_test_run 4002;
  let test = (fun #{ a531 = a5311; b531 = b5311 } #{ a531 = a5312; b531 = b5312 } -> (fun #{ a51 = a511; b51 = b511 } #{ a51 = a512; b51 = b512 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512) a5311 a5312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5311 b5312) expected_a532 a532 in
  if not test then failwithf "test 4002 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t534 = { #{ #{ float; float# }; float } }   *)
  (*************************************************)
  let r = { a534 = #{ a533 = #{ a211 = 0.; b211 = #1. }; b533 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a534 *)
  let actual = r.a534 in
  let expected = #{ a533 = #{ a211 = 0.; b211 = #1. }; b533 = 2. } in
  mark_test_run 4003;
  let test = (fun #{ a533 = a5331; b533 = b5331 } #{ a533 = a5332; b533 = b5332 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a5331 a5332 && (fun a b -> Float.equal (globalize a) (globalize b)) b5331 b5332) actual expected in
  if not test then failwithf "test 4003 failed";
  (* Paths of depth 2 *)
  (* .a534.#a533 *)
  let actual = r.a534.#a533 in
  let expected = #{ a211 = 0.; b211 = #1. } in
  mark_test_run 4004;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 4004 failed";
  (* .a534.#b533 *)
  let actual = r.a534.#b533 in
  let expected = 2. in
  mark_test_run 4005;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4005 failed";
  (* Paths of depth 3 *)
  (* .a534.#a533.#a211 *)
  let actual = r.a534.#a533.#a211 in
  let expected = 0. in
  mark_test_run 4006;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4006 failed";
  (* .a534.#a533.#b211 *)
  let actual = r.a534.#a533.#b211 in
  let expected = #1. in
  mark_test_run 4007;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4007 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a534 = a5341 } { a534 = a5342 } -> (fun #{ a533 = a5331; b533 = b5331 } #{ a533 = a5332; b533 = b5332 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a5331 a5332 && (fun a b -> Float.equal (globalize a) (globalize b)) b5331 b5332) a5341 a5342) in
  let next_r = { a534 = #{ a533 = #{ a211 = 100.; b211 = #101. }; b533 = 102. } } in
  let r_expected = { a534 = #{ a533 = #{ a211 = 0.; b211 = #1. }; b533 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a534 *)
  r.a534 <- next_r.a534;
  let r_expected = { r_expected with a534 = next_r.a534 } in
  mark_test_run 4008;
  let test = eq r r_expected in
  if not test then failwithf "test 4008 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a534 = #{ a533 = #{ a211; b211 }; b533 } } = r in
  let expected_b533 = 102. in
  mark_test_run 4009;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b533 b533 in
  if not test then failwithf "test 4009 failed";
  let expected_a211 = 100. in
  mark_test_run 4010;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 4010 failed";
  let expected_b211 = #101. in
  mark_test_run 4011;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 4011 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a534 } = r in
  let expected_a534 = #{ a533 = #{ a211 = 100.; b211 = #101. }; b533 = 102. } in
  mark_test_run 4012;
  let test = (fun #{ a533 = a5331; b533 = b5331 } #{ a533 = a5332; b533 = b5332 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a5331 a5332 && (fun a b -> Float.equal (globalize a) (globalize b)) b5331 b5332) expected_a534 a534 in
  if not test then failwithf "test 4012 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t536 = { #{ #{ float; float# }; float# } }   *)
  (**************************************************)
  let r = { a536 = #{ a535 = #{ a211 = 0.; b211 = #1. }; b535 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a536 *)
  let actual = r.a536 in
  let expected = #{ a535 = #{ a211 = 0.; b211 = #1. }; b535 = #2. } in
  mark_test_run 4013;
  let test = (fun #{ a535 = a5351; b535 = b5351 } #{ a535 = a5352; b535 = b5352 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a5351 a5352 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5351 b5352) actual expected in
  if not test then failwithf "test 4013 failed";
  (* Paths of depth 2 *)
  (* .a536.#a535 *)
  let actual = r.a536.#a535 in
  let expected = #{ a211 = 0.; b211 = #1. } in
  mark_test_run 4014;
  let test = (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) actual expected in
  if not test then failwithf "test 4014 failed";
  (* .a536.#b535 *)
  let actual = r.a536.#b535 in
  let expected = #2. in
  mark_test_run 4015;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4015 failed";
  (* Paths of depth 3 *)
  (* .a536.#a535.#a211 *)
  let actual = r.a536.#a535.#a211 in
  let expected = 0. in
  mark_test_run 4016;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4016 failed";
  (* .a536.#a535.#b211 *)
  let actual = r.a536.#a535.#b211 in
  let expected = #1. in
  mark_test_run 4017;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4017 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a536 = a5361 } { a536 = a5362 } -> (fun #{ a535 = a5351; b535 = b5351 } #{ a535 = a5352; b535 = b5352 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a5351 a5352 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5351 b5352) a5361 a5362) in
  let next_r = { a536 = #{ a535 = #{ a211 = 100.; b211 = #101. }; b535 = #102. } } in
  let r_expected = { a536 = #{ a535 = #{ a211 = 0.; b211 = #1. }; b535 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a536 *)
  r.a536 <- next_r.a536;
  let r_expected = { r_expected with a536 = next_r.a536 } in
  mark_test_run 4018;
  let test = eq r r_expected in
  if not test then failwithf "test 4018 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a536 = #{ a535 = #{ a211; b211 }; b535 } } = r in
  let expected_b535 = #102. in
  mark_test_run 4019;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b535 b535 in
  if not test then failwithf "test 4019 failed";
  let expected_a211 = 100. in
  mark_test_run 4020;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a211 a211 in
  if not test then failwithf "test 4020 failed";
  let expected_b211 = #101. in
  mark_test_run 4021;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b211 b211 in
  if not test then failwithf "test 4021 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a536 } = r in
  let expected_a536 = #{ a535 = #{ a211 = 100.; b211 = #101. }; b535 = #102. } in
  mark_test_run 4022;
  let test = (fun #{ a535 = a5351; b535 = b5351 } #{ a535 = a5352; b535 = b5352 } -> (fun #{ a211 = a2111; b211 = b2111 } #{ a211 = a2112; b211 = b2112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2111 a2112 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2111 b2112) a5351 a5352 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5351 b5352) expected_a536 a536 in
  if not test then failwithf "test 4022 failed";

  ()
;;

let () =
  (*************************************************)
  (*   t538 = { #{ #{ float#; float }; float } }   *)
  (*************************************************)
  let r = { a538 = #{ a537 = #{ a219 = #0.; b219 = 1. }; b537 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a538 *)
  let actual = r.a538 in
  let expected = #{ a537 = #{ a219 = #0.; b219 = 1. }; b537 = 2. } in
  mark_test_run 4023;
  let test = (fun #{ a537 = a5371; b537 = b5371 } #{ a537 = a5372; b537 = b5372 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a5371 a5372 && (fun a b -> Float.equal (globalize a) (globalize b)) b5371 b5372) actual expected in
  if not test then failwithf "test 4023 failed";
  (* Paths of depth 2 *)
  (* .a538.#a537 *)
  let actual = r.a538.#a537 in
  let expected = #{ a219 = #0.; b219 = 1. } in
  mark_test_run 4024;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 4024 failed";
  (* .a538.#b537 *)
  let actual = r.a538.#b537 in
  let expected = 2. in
  mark_test_run 4025;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4025 failed";
  (* Paths of depth 3 *)
  (* .a538.#a537.#a219 *)
  let actual = r.a538.#a537.#a219 in
  let expected = #0. in
  mark_test_run 4026;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4026 failed";
  (* .a538.#a537.#b219 *)
  let actual = r.a538.#a537.#b219 in
  let expected = 1. in
  mark_test_run 4027;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4027 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a538 = a5381 } { a538 = a5382 } -> (fun #{ a537 = a5371; b537 = b5371 } #{ a537 = a5372; b537 = b5372 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a5371 a5372 && (fun a b -> Float.equal (globalize a) (globalize b)) b5371 b5372) a5381 a5382) in
  let next_r = { a538 = #{ a537 = #{ a219 = #100.; b219 = 101. }; b537 = 102. } } in
  let r_expected = { a538 = #{ a537 = #{ a219 = #0.; b219 = 1. }; b537 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a538 *)
  r.a538 <- next_r.a538;
  let r_expected = { r_expected with a538 = next_r.a538 } in
  mark_test_run 4028;
  let test = eq r r_expected in
  if not test then failwithf "test 4028 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a538 = #{ a537 = #{ a219; b219 }; b537 } } = r in
  let expected_b537 = 102. in
  mark_test_run 4029;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b537 b537 in
  if not test then failwithf "test 4029 failed";
  let expected_a219 = #100. in
  mark_test_run 4030;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 4030 failed";
  let expected_b219 = 101. in
  mark_test_run 4031;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 4031 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a538 } = r in
  let expected_a538 = #{ a537 = #{ a219 = #100.; b219 = 101. }; b537 = 102. } in
  mark_test_run 4032;
  let test = (fun #{ a537 = a5371; b537 = b5371 } #{ a537 = a5372; b537 = b5372 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a5371 a5372 && (fun a b -> Float.equal (globalize a) (globalize b)) b5371 b5372) expected_a538 a538 in
  if not test then failwithf "test 4032 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t540 = { #{ #{ float#; float }; float# } }   *)
  (**************************************************)
  let r = { a540 = #{ a539 = #{ a219 = #0.; b219 = 1. }; b539 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a540 *)
  let actual = r.a540 in
  let expected = #{ a539 = #{ a219 = #0.; b219 = 1. }; b539 = #2. } in
  mark_test_run 4033;
  let test = (fun #{ a539 = a5391; b539 = b5391 } #{ a539 = a5392; b539 = b5392 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a5391 a5392 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5391 b5392) actual expected in
  if not test then failwithf "test 4033 failed";
  (* Paths of depth 2 *)
  (* .a540.#a539 *)
  let actual = r.a540.#a539 in
  let expected = #{ a219 = #0.; b219 = 1. } in
  mark_test_run 4034;
  let test = (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) actual expected in
  if not test then failwithf "test 4034 failed";
  (* .a540.#b539 *)
  let actual = r.a540.#b539 in
  let expected = #2. in
  mark_test_run 4035;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4035 failed";
  (* Paths of depth 3 *)
  (* .a540.#a539.#a219 *)
  let actual = r.a540.#a539.#a219 in
  let expected = #0. in
  mark_test_run 4036;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4036 failed";
  (* .a540.#a539.#b219 *)
  let actual = r.a540.#a539.#b219 in
  let expected = 1. in
  mark_test_run 4037;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4037 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a540 = a5401 } { a540 = a5402 } -> (fun #{ a539 = a5391; b539 = b5391 } #{ a539 = a5392; b539 = b5392 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a5391 a5392 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5391 b5392) a5401 a5402) in
  let next_r = { a540 = #{ a539 = #{ a219 = #100.; b219 = 101. }; b539 = #102. } } in
  let r_expected = { a540 = #{ a539 = #{ a219 = #0.; b219 = 1. }; b539 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a540 *)
  r.a540 <- next_r.a540;
  let r_expected = { r_expected with a540 = next_r.a540 } in
  mark_test_run 4038;
  let test = eq r r_expected in
  if not test then failwithf "test 4038 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a540 = #{ a539 = #{ a219; b219 }; b539 } } = r in
  let expected_b539 = #102. in
  mark_test_run 4039;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b539 b539 in
  if not test then failwithf "test 4039 failed";
  let expected_a219 = #100. in
  mark_test_run 4040;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a219 a219 in
  if not test then failwithf "test 4040 failed";
  let expected_b219 = 101. in
  mark_test_run 4041;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b219 b219 in
  if not test then failwithf "test 4041 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a540 } = r in
  let expected_a540 = #{ a539 = #{ a219 = #100.; b219 = 101. }; b539 = #102. } in
  mark_test_run 4042;
  let test = (fun #{ a539 = a5391; b539 = b5391 } #{ a539 = a5392; b539 = b5392 } -> (fun #{ a219 = a2191; b219 = b2191 } #{ a219 = a2192; b219 = b2192 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2191 a2192 && (fun a b -> Float.equal (globalize a) (globalize b)) b2191 b2192) a5391 a5392 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5391 b5392) expected_a540 a540 in
  if not test then failwithf "test 4042 failed";

  ()
;;

let () =
  (**************************************************)
  (*   t542 = { #{ #{ float#; float# }; float } }   *)
  (**************************************************)
  let r = { a542 = #{ a541 = #{ a221 = #0.; b221 = #1. }; b541 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a542 *)
  let actual = r.a542 in
  let expected = #{ a541 = #{ a221 = #0.; b221 = #1. }; b541 = 2. } in
  mark_test_run 4043;
  let test = (fun #{ a541 = a5411; b541 = b5411 } #{ a541 = a5412; b541 = b5412 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a5411 a5412 && (fun a b -> Float.equal (globalize a) (globalize b)) b5411 b5412) actual expected in
  if not test then failwithf "test 4043 failed";
  (* Paths of depth 2 *)
  (* .a542.#a541 *)
  let actual = r.a542.#a541 in
  let expected = #{ a221 = #0.; b221 = #1. } in
  mark_test_run 4044;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 4044 failed";
  (* .a542.#b541 *)
  let actual = r.a542.#b541 in
  let expected = 2. in
  mark_test_run 4045;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4045 failed";
  (* Paths of depth 3 *)
  (* .a542.#a541.#a221 *)
  let actual = r.a542.#a541.#a221 in
  let expected = #0. in
  mark_test_run 4046;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4046 failed";
  (* .a542.#a541.#b221 *)
  let actual = r.a542.#a541.#b221 in
  let expected = #1. in
  mark_test_run 4047;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4047 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a542 = a5421 } { a542 = a5422 } -> (fun #{ a541 = a5411; b541 = b5411 } #{ a541 = a5412; b541 = b5412 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a5411 a5412 && (fun a b -> Float.equal (globalize a) (globalize b)) b5411 b5412) a5421 a5422) in
  let next_r = { a542 = #{ a541 = #{ a221 = #100.; b221 = #101. }; b541 = 102. } } in
  let r_expected = { a542 = #{ a541 = #{ a221 = #0.; b221 = #1. }; b541 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a542 *)
  r.a542 <- next_r.a542;
  let r_expected = { r_expected with a542 = next_r.a542 } in
  mark_test_run 4048;
  let test = eq r r_expected in
  if not test then failwithf "test 4048 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a542 = #{ a541 = #{ a221; b221 }; b541 } } = r in
  let expected_b541 = 102. in
  mark_test_run 4049;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b541 b541 in
  if not test then failwithf "test 4049 failed";
  let expected_a221 = #100. in
  mark_test_run 4050;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 4050 failed";
  let expected_b221 = #101. in
  mark_test_run 4051;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 4051 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a542 } = r in
  let expected_a542 = #{ a541 = #{ a221 = #100.; b221 = #101. }; b541 = 102. } in
  mark_test_run 4052;
  let test = (fun #{ a541 = a5411; b541 = b5411 } #{ a541 = a5412; b541 = b5412 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a5411 a5412 && (fun a b -> Float.equal (globalize a) (globalize b)) b5411 b5412) expected_a542 a542 in
  if not test then failwithf "test 4052 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t544 = { #{ #{ float#; float# }; float# } }   *)
  (***************************************************)
  let r = { a544 = #{ a543 = #{ a221 = #0.; b221 = #1. }; b543 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a544 *)
  let actual = r.a544 in
  let expected = #{ a543 = #{ a221 = #0.; b221 = #1. }; b543 = #2. } in
  mark_test_run 4053;
  let test = (fun #{ a543 = a5431; b543 = b5431 } #{ a543 = a5432; b543 = b5432 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a5431 a5432 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5431 b5432) actual expected in
  if not test then failwithf "test 4053 failed";
  (* Paths of depth 2 *)
  (* .a544.#a543 *)
  let actual = r.a544.#a543 in
  let expected = #{ a221 = #0.; b221 = #1. } in
  mark_test_run 4054;
  let test = (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) actual expected in
  if not test then failwithf "test 4054 failed";
  (* .a544.#b543 *)
  let actual = r.a544.#b543 in
  let expected = #2. in
  mark_test_run 4055;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4055 failed";
  (* Paths of depth 3 *)
  (* .a544.#a543.#a221 *)
  let actual = r.a544.#a543.#a221 in
  let expected = #0. in
  mark_test_run 4056;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4056 failed";
  (* .a544.#a543.#b221 *)
  let actual = r.a544.#a543.#b221 in
  let expected = #1. in
  mark_test_run 4057;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 4057 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a544 = a5441 } { a544 = a5442 } -> (fun #{ a543 = a5431; b543 = b5431 } #{ a543 = a5432; b543 = b5432 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a5431 a5432 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5431 b5432) a5441 a5442) in
  let next_r = { a544 = #{ a543 = #{ a221 = #100.; b221 = #101. }; b543 = #102. } } in
  let r_expected = { a544 = #{ a543 = #{ a221 = #0.; b221 = #1. }; b543 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a544 *)
  r.a544 <- next_r.a544;
  let r_expected = { r_expected with a544 = next_r.a544 } in
  mark_test_run 4058;
  let test = eq r r_expected in
  if not test then failwithf "test 4058 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a544 = #{ a543 = #{ a221; b221 }; b543 } } = r in
  let expected_b543 = #102. in
  mark_test_run 4059;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b543 b543 in
  if not test then failwithf "test 4059 failed";
  let expected_a221 = #100. in
  mark_test_run 4060;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a221 a221 in
  if not test then failwithf "test 4060 failed";
  let expected_b221 = #101. in
  mark_test_run 4061;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b221 b221 in
  if not test then failwithf "test 4061 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a544 } = r in
  let expected_a544 = #{ a543 = #{ a221 = #100.; b221 = #101. }; b543 = #102. } in
  mark_test_run 4062;
  let test = (fun #{ a543 = a5431; b543 = b5431 } #{ a543 = a5432; b543 = b5432 } -> (fun #{ a221 = a2211; b221 = b2211 } #{ a221 = a2212; b221 = b2212 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2211 a2212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2211 b2212) a5431 a5432 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b5431 b5432) expected_a544 a544 in
  if not test then failwithf "test 4062 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t546 = { #{ #{ string; unit_u }; unit_u } }   *)
  (***************************************************)
  let r = { a546 = #{ a545 = #{ a166 = "0"; b166 = (unbox_unit ()) }; b545 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a546 *)
  let actual = r.a546 in
  let expected = #{ a545 = #{ a166 = "0"; b166 = (unbox_unit ()) }; b545 = (unbox_unit ()) } in
  mark_test_run 4063;
  let test = (fun #{ a545 = a5451; b545 = b5451 } #{ a545 = a5452; b545 = b5452 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a5451 a5452 && (fun _ _ -> true) b5451 b5452) actual expected in
  if not test then failwithf "test 4063 failed";
  (* Paths of depth 2 *)
  (* .a546.#a545 *)
  let actual = r.a546.#a545 in
  let expected = #{ a166 = "0"; b166 = (unbox_unit ()) } in
  mark_test_run 4064;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 4064 failed";
  (* .a546.#b545 *)
  let actual = r.a546.#b545 in
  let expected = (unbox_unit ()) in
  mark_test_run 4065;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 4065 failed";
  (* Paths of depth 3 *)
  (* .a546.#a545.#a166 *)
  let actual = r.a546.#a545.#a166 in
  let expected = "0" in
  mark_test_run 4066;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4066 failed";
  (* .a546.#a545.#b166 *)
  let actual = r.a546.#a545.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 4067;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 4067 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a546 = a5461 } { a546 = a5462 } -> (fun #{ a545 = a5451; b545 = b5451 } #{ a545 = a5452; b545 = b5452 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a5451 a5452 && (fun _ _ -> true) b5451 b5452) a5461 a5462) in
  let next_r = { a546 = #{ a545 = #{ a166 = "100"; b166 = (unbox_unit ()) }; b545 = (unbox_unit ()) } } in
  let r_expected = { a546 = #{ a545 = #{ a166 = "0"; b166 = (unbox_unit ()) }; b545 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a546 *)
  r.a546 <- next_r.a546;
  let r_expected = { r_expected with a546 = next_r.a546 } in
  mark_test_run 4068;
  let test = eq r r_expected in
  if not test then failwithf "test 4068 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a546 = #{ a545 = #{ a166; b166 }; b545 } } = r in
  let expected_b545 = (unbox_unit ()) in
  mark_test_run 4069;
  let test = (fun _ _ -> true) expected_b545 b545 in
  if not test then failwithf "test 4069 failed";
  let expected_a166 = "100" in
  mark_test_run 4070;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 4070 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 4071;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 4071 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a546 } = r in
  let expected_a546 = #{ a545 = #{ a166 = "100"; b166 = (unbox_unit ()) }; b545 = (unbox_unit ()) } in
  mark_test_run 4072;
  let test = (fun #{ a545 = a5451; b545 = b5451 } #{ a545 = a5452; b545 = b5452 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a5451 a5452 && (fun _ _ -> true) b5451 b5452) expected_a546 a546 in
  if not test then failwithf "test 4072 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t548 = { #{ #{ string; unit_u }; string } }   *)
  (***************************************************)
  let r = { a548 = #{ a547 = #{ a166 = "0"; b166 = (unbox_unit ()) }; b547 = "1" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a548 *)
  let actual = r.a548 in
  let expected = #{ a547 = #{ a166 = "0"; b166 = (unbox_unit ()) }; b547 = "1" } in
  mark_test_run 4073;
  let test = (fun #{ a547 = a5471; b547 = b5471 } #{ a547 = a5472; b547 = b5472 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a5471 a5472 && (fun a b -> String.equal (globalize a) (globalize b)) b5471 b5472) actual expected in
  if not test then failwithf "test 4073 failed";
  (* Paths of depth 2 *)
  (* .a548.#a547 *)
  let actual = r.a548.#a547 in
  let expected = #{ a166 = "0"; b166 = (unbox_unit ()) } in
  mark_test_run 4074;
  let test = (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) actual expected in
  if not test then failwithf "test 4074 failed";
  (* .a548.#b547 *)
  let actual = r.a548.#b547 in
  let expected = "1" in
  mark_test_run 4075;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4075 failed";
  (* Paths of depth 3 *)
  (* .a548.#a547.#a166 *)
  let actual = r.a548.#a547.#a166 in
  let expected = "0" in
  mark_test_run 4076;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4076 failed";
  (* .a548.#a547.#b166 *)
  let actual = r.a548.#a547.#b166 in
  let expected = (unbox_unit ()) in
  mark_test_run 4077;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 4077 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a548 = a5481 } { a548 = a5482 } -> (fun #{ a547 = a5471; b547 = b5471 } #{ a547 = a5472; b547 = b5472 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a5471 a5472 && (fun a b -> String.equal (globalize a) (globalize b)) b5471 b5472) a5481 a5482) in
  let next_r = { a548 = #{ a547 = #{ a166 = "100"; b166 = (unbox_unit ()) }; b547 = "101" } } in
  let r_expected = { a548 = #{ a547 = #{ a166 = "0"; b166 = (unbox_unit ()) }; b547 = "1" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a548 *)
  r.a548 <- next_r.a548;
  let r_expected = { r_expected with a548 = next_r.a548 } in
  mark_test_run 4078;
  let test = eq r r_expected in
  if not test then failwithf "test 4078 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a548 = #{ a547 = #{ a166; b166 }; b547 } } = r in
  let expected_b547 = "101" in
  mark_test_run 4079;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b547 b547 in
  if not test then failwithf "test 4079 failed";
  let expected_a166 = "100" in
  mark_test_run 4080;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a166 a166 in
  if not test then failwithf "test 4080 failed";
  let expected_b166 = (unbox_unit ()) in
  mark_test_run 4081;
  let test = (fun _ _ -> true) expected_b166 b166 in
  if not test then failwithf "test 4081 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a548 } = r in
  let expected_a548 = #{ a547 = #{ a166 = "100"; b166 = (unbox_unit ()) }; b547 = "101" } in
  mark_test_run 4082;
  let test = (fun #{ a547 = a5471; b547 = b5471 } #{ a547 = a5472; b547 = b5472 } -> (fun #{ a166 = a1661; b166 = b1661 } #{ a166 = a1662; b166 = b1662 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1661 a1662 && (fun _ _ -> true) b1661 b1662) a5471 a5472 && (fun a b -> String.equal (globalize a) (globalize b)) b5471 b5472) expected_a548 a548 in
  if not test then failwithf "test 4082 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t550 = { #{ #{ string; string }; unit_u } }   *)
  (***************************************************)
  let r = { a550 = #{ a549 = #{ a168 = "0"; b168 = "1" }; b549 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a550 *)
  let actual = r.a550 in
  let expected = #{ a549 = #{ a168 = "0"; b168 = "1" }; b549 = (unbox_unit ()) } in
  mark_test_run 4083;
  let test = (fun #{ a549 = a5491; b549 = b5491 } #{ a549 = a5492; b549 = b5492 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a5491 a5492 && (fun _ _ -> true) b5491 b5492) actual expected in
  if not test then failwithf "test 4083 failed";
  (* Paths of depth 2 *)
  (* .a550.#a549 *)
  let actual = r.a550.#a549 in
  let expected = #{ a168 = "0"; b168 = "1" } in
  mark_test_run 4084;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 4084 failed";
  (* .a550.#b549 *)
  let actual = r.a550.#b549 in
  let expected = (unbox_unit ()) in
  mark_test_run 4085;
  let test = (fun _ _ -> true) actual expected in
  if not test then failwithf "test 4085 failed";
  (* Paths of depth 3 *)
  (* .a550.#a549.#a168 *)
  let actual = r.a550.#a549.#a168 in
  let expected = "0" in
  mark_test_run 4086;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4086 failed";
  (* .a550.#a549.#b168 *)
  let actual = r.a550.#a549.#b168 in
  let expected = "1" in
  mark_test_run 4087;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4087 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a550 = a5501 } { a550 = a5502 } -> (fun #{ a549 = a5491; b549 = b5491 } #{ a549 = a5492; b549 = b5492 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a5491 a5492 && (fun _ _ -> true) b5491 b5492) a5501 a5502) in
  let next_r = { a550 = #{ a549 = #{ a168 = "100"; b168 = "101" }; b549 = (unbox_unit ()) } } in
  let r_expected = { a550 = #{ a549 = #{ a168 = "0"; b168 = "1" }; b549 = (unbox_unit ()) } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a550 *)
  r.a550 <- next_r.a550;
  let r_expected = { r_expected with a550 = next_r.a550 } in
  mark_test_run 4088;
  let test = eq r r_expected in
  if not test then failwithf "test 4088 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a550 = #{ a549 = #{ a168; b168 }; b549 } } = r in
  let expected_b549 = (unbox_unit ()) in
  mark_test_run 4089;
  let test = (fun _ _ -> true) expected_b549 b549 in
  if not test then failwithf "test 4089 failed";
  let expected_a168 = "100" in
  mark_test_run 4090;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 4090 failed";
  let expected_b168 = "101" in
  mark_test_run 4091;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 4091 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a550 } = r in
  let expected_a550 = #{ a549 = #{ a168 = "100"; b168 = "101" }; b549 = (unbox_unit ()) } in
  mark_test_run 4092;
  let test = (fun #{ a549 = a5491; b549 = b5491 } #{ a549 = a5492; b549 = b5492 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a5491 a5492 && (fun _ _ -> true) b5491 b5492) expected_a550 a550 in
  if not test then failwithf "test 4092 failed";

  ()
;;

let () =
  (***************************************************)
  (*   t552 = { #{ #{ string; string }; string } }   *)
  (***************************************************)
  let r = { a552 = #{ a551 = #{ a168 = "0"; b168 = "1" }; b551 = "2" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a552 *)
  let actual = r.a552 in
  let expected = #{ a551 = #{ a168 = "0"; b168 = "1" }; b551 = "2" } in
  mark_test_run 4093;
  let test = (fun #{ a551 = a5511; b551 = b5511 } #{ a551 = a5512; b551 = b5512 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a5511 a5512 && (fun a b -> String.equal (globalize a) (globalize b)) b5511 b5512) actual expected in
  if not test then failwithf "test 4093 failed";
  (* Paths of depth 2 *)
  (* .a552.#a551 *)
  let actual = r.a552.#a551 in
  let expected = #{ a168 = "0"; b168 = "1" } in
  mark_test_run 4094;
  let test = (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) actual expected in
  if not test then failwithf "test 4094 failed";
  (* .a552.#b551 *)
  let actual = r.a552.#b551 in
  let expected = "2" in
  mark_test_run 4095;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4095 failed";
  (* Paths of depth 3 *)
  (* .a552.#a551.#a168 *)
  let actual = r.a552.#a551.#a168 in
  let expected = "0" in
  mark_test_run 4096;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4096 failed";
  (* .a552.#a551.#b168 *)
  let actual = r.a552.#a551.#b168 in
  let expected = "1" in
  mark_test_run 4097;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 4097 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a552 = a5521 } { a552 = a5522 } -> (fun #{ a551 = a5511; b551 = b5511 } #{ a551 = a5512; b551 = b5512 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a5511 a5512 && (fun a b -> String.equal (globalize a) (globalize b)) b5511 b5512) a5521 a5522) in
  let next_r = { a552 = #{ a551 = #{ a168 = "100"; b168 = "101" }; b551 = "102" } } in
  let r_expected = { a552 = #{ a551 = #{ a168 = "0"; b168 = "1" }; b551 = "2" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a552 *)
  r.a552 <- next_r.a552;
  let r_expected = { r_expected with a552 = next_r.a552 } in
  mark_test_run 4098;
  let test = eq r r_expected in
  if not test then failwithf "test 4098 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a552 = #{ a551 = #{ a168; b168 }; b551 } } = r in
  let expected_b551 = "102" in
  mark_test_run 4099;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b551 b551 in
  if not test then failwithf "test 4099 failed";
  let expected_a168 = "100" in
  mark_test_run 4100;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a168 a168 in
  if not test then failwithf "test 4100 failed";
  let expected_b168 = "101" in
  mark_test_run 4101;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b168 b168 in
  if not test then failwithf "test 4101 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a552 } = r in
  let expected_a552 = #{ a551 = #{ a168 = "100"; b168 = "101" }; b551 = "102" } in
  mark_test_run 4102;
  let test = (fun #{ a551 = a5511; b551 = b5511 } #{ a551 = a5512; b551 = b5512 } -> (fun #{ a168 = a1681; b168 = b1681 } #{ a168 = a1682; b168 = b1682 } -> (fun a b -> String.equal (globalize a) (globalize b)) a1681 a1682 && (fun a b -> String.equal (globalize a) (globalize b)) b1681 b1682) a5511 a5512 && (fun a b -> String.equal (globalize a) (globalize b)) b5511 b5512) expected_a552 a552 in
  if not test then failwithf "test 4102 failed";

  ()
;;

for i = 1 to 4102 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
