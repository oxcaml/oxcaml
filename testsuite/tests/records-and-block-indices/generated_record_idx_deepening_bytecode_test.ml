(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 modules = "idx_repr.ml stubs.c";
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
type unit_u : void mod everything
external unbox_unit : unit -> unit_u = "%unbox_unit"
external globalize : local_ 'a -> 'a = "%obj_dup";;
let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any mod separable) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any mod separable) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int } (* { int } *)
type t1 = { mutable a1 : int; mutable b1 : int } (* { int; int } *)
type t2 = { mutable a2 : int; mutable b2 : nativeint# } (* { int; nativeint# } *)
type t3 = { mutable a3 : int; mutable b3 : unit_u } (* { int; unit_u } *)
type t4 = { mutable a4 : int; mutable b4 : float } (* { int; float } *)
type t5 = #{ a5 : int; b5 : float } (* #{ int; float } *)
type t6 = { mutable a6 : int; mutable b6 : t5 } (* { int; #{ int; float } } *)
type t7 = { mutable a7 : int64; mutable b7 : int64 } (* { int64; int64 } *)
type t8 = { mutable a8 : int64; mutable b8 : nativeint# } (* { int64; nativeint# } *)
type t9 = { mutable a9 : int64#; mutable b9 : int64 } (* { int64#; int64 } *)
type t10 = { mutable a10 : int64#; mutable b10 : int64# } (* { int64#; int64# } *)
type t11 = { mutable a11 : int64#; mutable b11 : nativeint# } (* { int64#; nativeint# } *)
type t12 = { mutable a12 : int32#; mutable b12 : int32#; mutable c12 : int32# } (* { int32#; int32#; int32# } *)
type t13 = #{ a13 : int; b13 : int } (* #{ int; int } *)
type t14 = { mutable a14 : int32#; mutable b14 : t13 } (* { int32#; #{ int; int } } *)
type v15 = C15_0 of unit_u (* (| unit_u) *)
type t16 = { mutable a16 : nativeint#; mutable b16 : v15 } (* { nativeint#; (| unit_u) } *)
type t17 = { mutable a17 : float; mutable b17 : int; mutable c17 : int } (* { float; int; int } *)
type t18 = { mutable a18 : float; mutable b18 : int64 } (* { float; int64 } *)
type t19 = { mutable a19 : float; mutable b19 : int64# } (* { float; int64# } *)
type t20 = { mutable a20 : float; mutable b20 : nativeint# } (* { float; nativeint# } *)
type t21 = { mutable a21 : float; mutable b21 : float } (* { float; float } *)
type t22 = { mutable a22 : float; mutable b22 : float; mutable c22 : float } (* { float; float; float } *)
type t23 = { mutable a23 : float; mutable b23 : float; mutable c23 : float# } (* { float; float; float# } *)
type t24 = { mutable a24 : float; mutable b24 : float# } (* { float; float# } *)
type t25 = { mutable a25 : float; mutable b25 : float#; mutable c25 : float# } (* { float; float#; float# } *)
type t26 = #{ a26 : float } (* #{ float } *)
type t27 = { mutable a27 : float; mutable b27 : t26 } (* { float; #{ float } } *)
type t28 = #{ a28 : float; b28 : float } (* #{ float; float } *)
type t29 = { mutable a29 : float; mutable b29 : t28 } (* { float; #{ float; float } } *)
type t30 = { mutable a30 : float# } (* { float# } *)
type t31 = { mutable a31 : float#; mutable b31 : float } (* { float#; float } *)
type t32 = { mutable a32 : float#; mutable b32 : float# } (* { float#; float# } *)
type t33 = { mutable a33 : float#; mutable b33 : t28 } (* { float#; #{ float; float } } *)
type t34 = #{ a34 : float#; b34 : float } (* #{ float#; float } *)
type t35 = { mutable a35 : float#; mutable b35 : t34 } (* { float#; #{ float#; float } } *)
type t36 = { mutable a36 : string; mutable b36 : string; mutable c36 : unit_u } (* { string; string; unit_u } *)
type t37 = #{ a37 : string; b37 : string } (* #{ string; string } *)
type t38 = { mutable a38 : string; mutable b38 : t37 } (* { string; #{ string; string } } *)
type t39 = { mutable a39 : v15; mutable b39 : nativeint# } (* { (| unit_u); nativeint# } *)
type t40 = { mutable a40 : v15; mutable b40 : unit_u } (* { (| unit_u); unit_u } *)
type t41 = { mutable a41 : v15; mutable b41 : v15 } (* { (| unit_u); (| unit_u) } *)
type t42 = #{ a42 : int } (* #{ int } *)
type t43 = { mutable a43 : t42 } (* { #{ int } } *)
type t44 = { mutable a44 : t42; mutable b44 : int } (* { #{ int }; int } *)
type t45 = { mutable a45 : t42; mutable b45 : int32# } (* { #{ int }; int32# } *)
type t46 = { mutable a46 : t13 } (* { #{ int; int } } *)
type t47 = { mutable a47 : t13; mutable b47 : int } (* { #{ int; int }; int } *)
type t48 = { mutable a48 : t13; mutable b48 : int32# } (* { #{ int; int }; int32# } *)
type t49 = #{ a49 : int; b49 : int32# } (* #{ int; int32# } *)
type t50 = { mutable a50 : t49; mutable b50 : int } (* { #{ int; int32# }; int } *)
type t51 = { mutable a51 : t5; mutable b51 : int } (* { #{ int; float }; int } *)
type t52 = #{ a52 : int64; b52 : int64# } (* #{ int64; int64# } *)
type t53 = #{ a53 : int64#; b53 : float# } (* #{ int64#; float# } *)
type t54 = { mutable a54 : t52; mutable b54 : t53 } (* { #{ int64; int64# }; #{ int64#; float# } } *)
type t55 = #{ a55 : int32# } (* #{ int32# } *)
type t56 = { mutable a56 : t55 } (* { #{ int32# } } *)
type t57 = { mutable a57 : t55; mutable b57 : int32# } (* { #{ int32# }; int32# } *)
type t58 = { mutable a58 : t26 } (* { #{ float } } *)
type t59 = #{ a59 : float; b59 : int } (* #{ float; int } *)
type t60 = { mutable a60 : t59; mutable b60 : int } (* { #{ float; int }; int } *)
type t61 = { mutable a61 : t28 } (* { #{ float; float } } *)
type t62 = #{ a62 : float; b62 : float# } (* #{ float; float# } *)
type t63 = { mutable a63 : t62; mutable b63 : float# } (* { #{ float; float# }; float# } *)
type t64 = #{ a64 : float# } (* #{ float# } *)
type t65 = { mutable a65 : t64; mutable b65 : float# } (* { #{ float# }; float# } *)
type t66 = { mutable a66 : t37; mutable b66 : unit_u } (* { #{ string; string }; unit_u } *)

let to_run () =
  (********************)
  (*   t0 = { int }   *)
  (********************)
  (* Deepening to (.a0) *)
  let idx : (t0, _) idx_mut = (.a0) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a0) *)
    let shallow : (t0, _) idx_mut = (.a0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1 failed %d" i;
  );

  (*************************)
  (*   t1 = { int; int }   *)
  (*************************)
  (* Deepening to (.a1) *)
  let idx : (t1, _) idx_mut = (.a1) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a1) *)
    let shallow : (t1, _) idx_mut = (.a1) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 2;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 2 failed %d" i;
  );
  (* Deepening to (.b1) *)
  let idx : (t1, _) idx_mut = (.b1) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b1) *)
    let shallow : (t1, _) idx_mut = (.b1) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 3;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 3 failed %d" i;
  );

  (********************************)
  (*   t2 = { int; nativeint# }   *)
  (********************************)
  (* Deepening to (.a2) *)
  let idx : (t2, _) idx_mut = (.a2) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a2) *)
    let shallow : (t2, _) idx_mut = (.a2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 4;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 4 failed %d" i;
  );
  (* Deepening to (.b2) *)
  let idx : (t2, _) idx_mut = (.b2) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b2) *)
    let shallow : (t2, _) idx_mut = (.b2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 5;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 5 failed %d" i;
  );

  (****************************)
  (*   t3 = { int; unit_u }   *)
  (****************************)
  (* Deepening to (.a3) *)
  let idx : (t3, _) idx_mut = (.a3) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a3) *)
    let shallow : (t3, _) idx_mut = (.a3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 6;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 6 failed %d" i;
  );
  (* Deepening to (.b3) *)
  let idx : (t3, _) idx_mut = (.b3) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b3) *)
    let shallow : (t3, _) idx_mut = (.b3) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (***************************)
  (*   t4 = { int; float }   *)
  (***************************)
  (* Deepening to (.a4) *)
  let idx : (t4, _) idx_mut = (.a4) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a4) *)
    let shallow : (t4, _) idx_mut = (.a4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 7;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 7 failed %d" i;
  );
  (* Deepening to (.b4) *)
  let idx : (t4, _) idx_mut = (.b4) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b4) *)
    let shallow : (t4, _) idx_mut = (.b4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 8;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 8 failed %d" i;
  );

  (*************************************)
  (*   t6 = { int; #{ int; float } }   *)
  (*************************************)
  (* Deepening to (.a6) *)
  let idx : (t6, _) idx_mut = (.a6) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a6) *)
    let shallow : (t6, _) idx_mut = (.a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 9;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 9 failed %d" i;
  );
  (* Deepening to (.b6) *)
  let idx : (t6, _) idx_mut = (.b6) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b6) *)
    let shallow : (t6, _) idx_mut = (.b6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 10;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 10 failed %d" i;
  );
  (* Deepening to (.b6.#a5) *)
  let idx : (t6, _) idx_mut = (.b6.#a5) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b6) *)
    let shallow : (t6, _) idx_mut = (.b6) in
    let deepened = (.idx_mut(shallow).#a5) in
    mark_test_run 11;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 11 failed %d" i;
    (* from (.b6.#a5) *)
    let shallow : (t6, _) idx_mut = (.b6.#a5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 12;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 12 failed %d" i;
  );
  (* Deepening to (.b6.#b5) *)
  let idx : (t6, _) idx_mut = (.b6.#b5) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b6) *)
    let shallow : (t6, _) idx_mut = (.b6) in
    let deepened = (.idx_mut(shallow).#b5) in
    mark_test_run 13;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 13 failed %d" i;
    (* from (.b6.#b5) *)
    let shallow : (t6, _) idx_mut = (.b6.#b5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 14;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 14 failed %d" i;
  );

  (*****************************)
  (*   t7 = { int64; int64 }   *)
  (*****************************)
  (* Deepening to (.a7) *)
  let idx : (t7, _) idx_mut = (.a7) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a7) *)
    let shallow : (t7, _) idx_mut = (.a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 15;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 15 failed %d" i;
  );
  (* Deepening to (.b7) *)
  let idx : (t7, _) idx_mut = (.b7) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b7) *)
    let shallow : (t7, _) idx_mut = (.b7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 16;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 16 failed %d" i;
  );

  (**********************************)
  (*   t8 = { int64; nativeint# }   *)
  (**********************************)
  (* Deepening to (.a8) *)
  let idx : (t8, _) idx_mut = (.a8) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a8) *)
    let shallow : (t8, _) idx_mut = (.a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 17;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 17 failed %d" i;
  );
  (* Deepening to (.b8) *)
  let idx : (t8, _) idx_mut = (.b8) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b8) *)
    let shallow : (t8, _) idx_mut = (.b8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 18;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 18 failed %d" i;
  );

  (******************************)
  (*   t9 = { int64#; int64 }   *)
  (******************************)
  (* Deepening to (.a9) *)
  let idx : (t9, _) idx_mut = (.a9) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a9) *)
    let shallow : (t9, _) idx_mut = (.a9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 19;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 19 failed %d" i;
  );
  (* Deepening to (.b9) *)
  let idx : (t9, _) idx_mut = (.b9) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b9) *)
    let shallow : (t9, _) idx_mut = (.b9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 20;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 20 failed %d" i;
  );

  (********************************)
  (*   t10 = { int64#; int64# }   *)
  (********************************)
  (* Deepening to (.a10) *)
  let idx : (t10, _) idx_mut = (.a10) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a10) *)
    let shallow : (t10, _) idx_mut = (.a10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 21;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 21 failed %d" i;
  );
  (* Deepening to (.b10) *)
  let idx : (t10, _) idx_mut = (.b10) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b10) *)
    let shallow : (t10, _) idx_mut = (.b10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 22;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 22 failed %d" i;
  );

  (************************************)
  (*   t11 = { int64#; nativeint# }   *)
  (************************************)
  (* Deepening to (.a11) *)
  let idx : (t11, _) idx_mut = (.a11) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a11) *)
    let shallow : (t11, _) idx_mut = (.a11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 23;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 23 failed %d" i;
  );
  (* Deepening to (.b11) *)
  let idx : (t11, _) idx_mut = (.b11) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b11) *)
    let shallow : (t11, _) idx_mut = (.b11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 24;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 24 failed %d" i;
  );

  (****************************************)
  (*   t12 = { int32#; int32#; int32# }   *)
  (****************************************)
  (* Deepening to (.a12) *)
  let idx : (t12, _) idx_mut = (.a12) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a12) *)
    let shallow : (t12, _) idx_mut = (.a12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 25;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 25 failed %d" i;
  );
  (* Deepening to (.b12) *)
  let idx : (t12, _) idx_mut = (.b12) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b12) *)
    let shallow : (t12, _) idx_mut = (.b12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 26;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 26 failed %d" i;
  );
  (* Deepening to (.c12) *)
  let idx : (t12, _) idx_mut = (.c12) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c12) *)
    let shallow : (t12, _) idx_mut = (.c12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 27;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 27 failed %d" i;
  );

  (***************************************)
  (*   t14 = { int32#; #{ int; int } }   *)
  (***************************************)
  (* Deepening to (.a14) *)
  let idx : (t14, _) idx_mut = (.a14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a14) *)
    let shallow : (t14, _) idx_mut = (.a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 28;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 28 failed %d" i;
  );
  (* Deepening to (.b14) *)
  let idx : (t14, _) idx_mut = (.b14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b14) *)
    let shallow : (t14, _) idx_mut = (.b14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 29;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 29 failed %d" i;
  );
  (* Deepening to (.b14.#a13) *)
  let idx : (t14, _) idx_mut = (.b14.#a13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b14) *)
    let shallow : (t14, _) idx_mut = (.b14) in
    let deepened = (.idx_mut(shallow).#a13) in
    mark_test_run 30;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 30 failed %d" i;
    (* from (.b14.#a13) *)
    let shallow : (t14, _) idx_mut = (.b14.#a13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 31;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 31 failed %d" i;
  );
  (* Deepening to (.b14.#b13) *)
  let idx : (t14, _) idx_mut = (.b14.#b13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b14) *)
    let shallow : (t14, _) idx_mut = (.b14) in
    let deepened = (.idx_mut(shallow).#b13) in
    mark_test_run 32;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 32 failed %d" i;
    (* from (.b14.#b13) *)
    let shallow : (t14, _) idx_mut = (.b14.#b13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 33;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 33 failed %d" i;
  );

  (****************************************)
  (*   t16 = { nativeint#; (| unit_u) }   *)
  (****************************************)
  (* Deepening to (.a16) *)
  let idx : (t16, _) idx_mut = (.a16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a16) *)
    let shallow : (t16, _) idx_mut = (.a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 34;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 34 failed %d" i;
  );
  (* Deepening to (.b16) *)
  let idx : (t16, _) idx_mut = (.b16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b16) *)
    let shallow : (t16, _) idx_mut = (.b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 35;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 35 failed %d" i;
  );

  (*********************************)
  (*   t17 = { float; int; int }   *)
  (*********************************)
  (* Deepening to (.a17) *)
  let idx : (t17, _) idx_mut = (.a17) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a17) *)
    let shallow : (t17, _) idx_mut = (.a17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 36;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 36 failed %d" i;
  );
  (* Deepening to (.b17) *)
  let idx : (t17, _) idx_mut = (.b17) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b17) *)
    let shallow : (t17, _) idx_mut = (.b17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 37;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 37 failed %d" i;
  );
  (* Deepening to (.c17) *)
  let idx : (t17, _) idx_mut = (.c17) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c17) *)
    let shallow : (t17, _) idx_mut = (.c17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 38;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 38 failed %d" i;
  );

  (******************************)
  (*   t18 = { float; int64 }   *)
  (******************************)
  (* Deepening to (.a18) *)
  let idx : (t18, _) idx_mut = (.a18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a18) *)
    let shallow : (t18, _) idx_mut = (.a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 39;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 39 failed %d" i;
  );
  (* Deepening to (.b18) *)
  let idx : (t18, _) idx_mut = (.b18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b18) *)
    let shallow : (t18, _) idx_mut = (.b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 40;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 40 failed %d" i;
  );

  (*******************************)
  (*   t19 = { float; int64# }   *)
  (*******************************)
  (* Deepening to (.a19) *)
  let idx : (t19, _) idx_mut = (.a19) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a19) *)
    let shallow : (t19, _) idx_mut = (.a19) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 41;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 41 failed %d" i;
  );
  (* Deepening to (.b19) *)
  let idx : (t19, _) idx_mut = (.b19) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b19) *)
    let shallow : (t19, _) idx_mut = (.b19) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 42;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 42 failed %d" i;
  );

  (***********************************)
  (*   t20 = { float; nativeint# }   *)
  (***********************************)
  (* Deepening to (.a20) *)
  let idx : (t20, _) idx_mut = (.a20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a20) *)
    let shallow : (t20, _) idx_mut = (.a20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 43;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 43 failed %d" i;
  );
  (* Deepening to (.b20) *)
  let idx : (t20, _) idx_mut = (.b20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b20) *)
    let shallow : (t20, _) idx_mut = (.b20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 44;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 44 failed %d" i;
  );

  (******************************)
  (*   t21 = { float; float }   *)
  (******************************)
  (* Deepening to (.a21) *)
  let idx : (t21, _) idx_mut = (.a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a21) *)
    let shallow : (t21, _) idx_mut = (.a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 45;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 45 failed %d" i;
  );
  (* Deepening to (.b21) *)
  let idx : (t21, _) idx_mut = (.b21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b21) *)
    let shallow : (t21, _) idx_mut = (.b21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 46;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 46 failed %d" i;
  );

  (*************************************)
  (*   t22 = { float; float; float }   *)
  (*************************************)
  (* Deepening to (.a22) *)
  let idx : (t22, _) idx_mut = (.a22) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a22) *)
    let shallow : (t22, _) idx_mut = (.a22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 47;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 47 failed %d" i;
  );
  (* Deepening to (.b22) *)
  let idx : (t22, _) idx_mut = (.b22) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b22) *)
    let shallow : (t22, _) idx_mut = (.b22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 48;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 48 failed %d" i;
  );
  (* Deepening to (.c22) *)
  let idx : (t22, _) idx_mut = (.c22) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c22) *)
    let shallow : (t22, _) idx_mut = (.c22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 49;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 49 failed %d" i;
  );

  (**************************************)
  (*   t23 = { float; float; float# }   *)
  (**************************************)
  (* Deepening to (.a23) *)
  let idx : (t23, _) idx_mut = (.a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a23) *)
    let shallow : (t23, _) idx_mut = (.a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 50;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 50 failed %d" i;
  );
  (* Deepening to (.b23) *)
  let idx : (t23, _) idx_mut = (.b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b23) *)
    let shallow : (t23, _) idx_mut = (.b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 51;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 51 failed %d" i;
  );
  (* Deepening to (.c23) *)
  let idx : (t23, _) idx_mut = (.c23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c23) *)
    let shallow : (t23, _) idx_mut = (.c23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 52;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 52 failed %d" i;
  );

  (*******************************)
  (*   t24 = { float; float# }   *)
  (*******************************)
  (* Deepening to (.a24) *)
  let idx : (t24, _) idx_mut = (.a24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a24) *)
    let shallow : (t24, _) idx_mut = (.a24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 53;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 53 failed %d" i;
  );
  (* Deepening to (.b24) *)
  let idx : (t24, _) idx_mut = (.b24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b24) *)
    let shallow : (t24, _) idx_mut = (.b24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 54;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 54 failed %d" i;
  );

  (***************************************)
  (*   t25 = { float; float#; float# }   *)
  (***************************************)
  (* Deepening to (.a25) *)
  let idx : (t25, _) idx_mut = (.a25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a25) *)
    let shallow : (t25, _) idx_mut = (.a25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 55;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 55 failed %d" i;
  );
  (* Deepening to (.b25) *)
  let idx : (t25, _) idx_mut = (.b25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b25) *)
    let shallow : (t25, _) idx_mut = (.b25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 56;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 56 failed %d" i;
  );
  (* Deepening to (.c25) *)
  let idx : (t25, _) idx_mut = (.c25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c25) *)
    let shallow : (t25, _) idx_mut = (.c25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 57;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 57 failed %d" i;
  );

  (***********************************)
  (*   t27 = { float; #{ float } }   *)
  (***********************************)
  (* Deepening to (.a27) *)
  let idx : (t27, _) idx_mut = (.a27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a27) *)
    let shallow : (t27, _) idx_mut = (.a27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 58;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 58 failed %d" i;
  );
  (* Deepening to (.b27) *)
  let idx : (t27, _) idx_mut = (.b27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b27) *)
    let shallow : (t27, _) idx_mut = (.b27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 59;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 59 failed %d" i;
  );
  (* Deepening to (.b27.#a26) *)
  let idx : (t27, _) idx_mut = (.b27.#a26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.b27) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.b27.#a26) *)
    let shallow : (t27, _) idx_mut = (.b27.#a26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 60;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 60 failed %d" i;
  );

  (******************************************)
  (*   t29 = { float; #{ float; float } }   *)
  (******************************************)
  (* Deepening to (.a29) *)
  let idx : (t29, _) idx_mut = (.a29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a29) *)
    let shallow : (t29, _) idx_mut = (.a29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 61;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 61 failed %d" i;
  );
  (* Deepening to (.b29) *)
  let idx : (t29, _) idx_mut = (.b29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b29) *)
    let shallow : (t29, _) idx_mut = (.b29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 62;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 62 failed %d" i;
  );
  (* Deepening to (.b29.#a28) *)
  let idx : (t29, _) idx_mut = (.b29.#a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b29) *)
    let shallow : (t29, _) idx_mut = (.b29) in
    let deepened = (.idx_mut(shallow).#a28) in
    mark_test_run 63;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 63 failed %d" i;
    (* from (.b29.#a28) *)
    let shallow : (t29, _) idx_mut = (.b29.#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 64;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 64 failed %d" i;
  );
  (* Deepening to (.b29.#b28) *)
  let idx : (t29, _) idx_mut = (.b29.#b28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b29) *)
    let shallow : (t29, _) idx_mut = (.b29) in
    let deepened = (.idx_mut(shallow).#b28) in
    mark_test_run 65;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 65 failed %d" i;
    (* from (.b29.#b28) *)
    let shallow : (t29, _) idx_mut = (.b29.#b28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 66;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 66 failed %d" i;
  );

  (************************)
  (*   t30 = { float# }   *)
  (************************)
  (* Deepening to (.a30) *)
  let idx : (t30, _) idx_mut = (.a30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a30) *)
    let shallow : (t30, _) idx_mut = (.a30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 67;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 67 failed %d" i;
  );

  (*******************************)
  (*   t31 = { float#; float }   *)
  (*******************************)
  (* Deepening to (.a31) *)
  let idx : (t31, _) idx_mut = (.a31) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a31) *)
    let shallow : (t31, _) idx_mut = (.a31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 68;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 68 failed %d" i;
  );
  (* Deepening to (.b31) *)
  let idx : (t31, _) idx_mut = (.b31) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b31) *)
    let shallow : (t31, _) idx_mut = (.b31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 69;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 69 failed %d" i;
  );

  (********************************)
  (*   t32 = { float#; float# }   *)
  (********************************)
  (* Deepening to (.a32) *)
  let idx : (t32, _) idx_mut = (.a32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a32) *)
    let shallow : (t32, _) idx_mut = (.a32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 70;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 70 failed %d" i;
  );
  (* Deepening to (.b32) *)
  let idx : (t32, _) idx_mut = (.b32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b32) *)
    let shallow : (t32, _) idx_mut = (.b32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 71;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 71 failed %d" i;
  );

  (*******************************************)
  (*   t33 = { float#; #{ float; float } }   *)
  (*******************************************)
  (* Deepening to (.a33) *)
  let idx : (t33, _) idx_mut = (.a33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a33) *)
    let shallow : (t33, _) idx_mut = (.a33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 72;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 72 failed %d" i;
  );
  (* Deepening to (.b33) *)
  let idx : (t33, _) idx_mut = (.b33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b33) *)
    let shallow : (t33, _) idx_mut = (.b33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 73;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 73 failed %d" i;
  );
  (* Deepening to (.b33.#a28) *)
  let idx : (t33, _) idx_mut = (.b33.#a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b33) *)
    let shallow : (t33, _) idx_mut = (.b33) in
    let deepened = (.idx_mut(shallow).#a28) in
    mark_test_run 74;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 74 failed %d" i;
    (* from (.b33.#a28) *)
    let shallow : (t33, _) idx_mut = (.b33.#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 75;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 75 failed %d" i;
  );
  (* Deepening to (.b33.#b28) *)
  let idx : (t33, _) idx_mut = (.b33.#b28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b33) *)
    let shallow : (t33, _) idx_mut = (.b33) in
    let deepened = (.idx_mut(shallow).#b28) in
    mark_test_run 76;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 76 failed %d" i;
    (* from (.b33.#b28) *)
    let shallow : (t33, _) idx_mut = (.b33.#b28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 77;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 77 failed %d" i;
  );

  (********************************************)
  (*   t35 = { float#; #{ float#; float } }   *)
  (********************************************)
  (* Deepening to (.a35) *)
  let idx : (t35, _) idx_mut = (.a35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a35) *)
    let shallow : (t35, _) idx_mut = (.a35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 78;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 78 failed %d" i;
  );
  (* Deepening to (.b35) *)
  let idx : (t35, _) idx_mut = (.b35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b35) *)
    let shallow : (t35, _) idx_mut = (.b35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 79;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 79 failed %d" i;
  );
  (* Deepening to (.b35.#a34) *)
  let idx : (t35, _) idx_mut = (.b35.#a34) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b35) *)
    let shallow : (t35, _) idx_mut = (.b35) in
    let deepened = (.idx_mut(shallow).#a34) in
    mark_test_run 80;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 80 failed %d" i;
    (* from (.b35.#a34) *)
    let shallow : (t35, _) idx_mut = (.b35.#a34) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 81;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 81 failed %d" i;
  );
  (* Deepening to (.b35.#b34) *)
  let idx : (t35, _) idx_mut = (.b35.#b34) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b35) *)
    let shallow : (t35, _) idx_mut = (.b35) in
    let deepened = (.idx_mut(shallow).#b34) in
    mark_test_run 82;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 82 failed %d" i;
    (* from (.b35.#b34) *)
    let shallow : (t35, _) idx_mut = (.b35.#b34) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 83;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 83 failed %d" i;
  );

  (****************************************)
  (*   t36 = { string; string; unit_u }   *)
  (****************************************)
  (* Deepening to (.a36) *)
  let idx : (t36, _) idx_mut = (.a36) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a36) *)
    let shallow : (t36, _) idx_mut = (.a36) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 84;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 84 failed %d" i;
  );
  (* Deepening to (.b36) *)
  let idx : (t36, _) idx_mut = (.b36) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b36) *)
    let shallow : (t36, _) idx_mut = (.b36) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 85;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 85 failed %d" i;
  );
  (* Deepening to (.c36) *)
  let idx : (t36, _) idx_mut = (.c36) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c36) *)
    let shallow : (t36, _) idx_mut = (.c36) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (*********************************************)
  (*   t38 = { string; #{ string; string } }   *)
  (*********************************************)
  (* Deepening to (.a38) *)
  let idx : (t38, _) idx_mut = (.a38) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a38) *)
    let shallow : (t38, _) idx_mut = (.a38) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 86;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 86 failed %d" i;
  );
  (* Deepening to (.b38) *)
  let idx : (t38, _) idx_mut = (.b38) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b38) *)
    let shallow : (t38, _) idx_mut = (.b38) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 87;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 87 failed %d" i;
  );
  (* Deepening to (.b38.#a37) *)
  let idx : (t38, _) idx_mut = (.b38.#a37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b38) *)
    let shallow : (t38, _) idx_mut = (.b38) in
    let deepened = (.idx_mut(shallow).#a37) in
    mark_test_run 88;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 88 failed %d" i;
    (* from (.b38.#a37) *)
    let shallow : (t38, _) idx_mut = (.b38.#a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 89;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 89 failed %d" i;
  );
  (* Deepening to (.b38.#b37) *)
  let idx : (t38, _) idx_mut = (.b38.#b37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b38) *)
    let shallow : (t38, _) idx_mut = (.b38) in
    let deepened = (.idx_mut(shallow).#b37) in
    mark_test_run 90;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 90 failed %d" i;
    (* from (.b38.#b37) *)
    let shallow : (t38, _) idx_mut = (.b38.#b37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 91;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 91 failed %d" i;
  );

  (****************************************)
  (*   t39 = { (| unit_u); nativeint# }   *)
  (****************************************)
  (* Deepening to (.a39) *)
  let idx : (t39, _) idx_mut = (.a39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a39) *)
    let shallow : (t39, _) idx_mut = (.a39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 92;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 92 failed %d" i;
  );
  (* Deepening to (.b39) *)
  let idx : (t39, _) idx_mut = (.b39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b39) *)
    let shallow : (t39, _) idx_mut = (.b39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 93;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 93 failed %d" i;
  );

  (************************************)
  (*   t40 = { (| unit_u); unit_u }   *)
  (************************************)
  (* Deepening to (.a40) *)
  let idx : (t40, _) idx_mut = (.a40) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a40) *)
    let shallow : (t40, _) idx_mut = (.a40) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 94;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 94 failed %d" i;
  );
  (* Deepening to (.b40) *)
  let idx : (t40, _) idx_mut = (.b40) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b40) *)
    let shallow : (t40, _) idx_mut = (.b40) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  (****************************************)
  (*   t41 = { (| unit_u); (| unit_u) }   *)
  (****************************************)
  (* Deepening to (.a41) *)
  let idx : (t41, _) idx_mut = (.a41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a41) *)
    let shallow : (t41, _) idx_mut = (.a41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 95;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 95 failed %d" i;
  );
  (* Deepening to (.b41) *)
  let idx : (t41, _) idx_mut = (.b41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b41) *)
    let shallow : (t41, _) idx_mut = (.b41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 96;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 96 failed %d" i;
  );

  (**************************)
  (*   t43 = { #{ int } }   *)
  (**************************)
  (* Deepening to (.a43) *)
  let idx : (t43, _) idx_mut = (.a43) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a43) *)
    let shallow : (t43, _) idx_mut = (.a43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 97;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 97 failed %d" i;
  );
  (* Deepening to (.a43.#a42) *)
  let idx : (t43, _) idx_mut = (.a43.#a42) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a43) *)
    let shallow : (t43, _) idx_mut = (.a43) in
    let deepened = (.idx_mut(shallow).#a42) in
    mark_test_run 98;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 98 failed %d" i;
    (* from (.a43.#a42) *)
    let shallow : (t43, _) idx_mut = (.a43.#a42) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 99;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 99 failed %d" i;
  );

  (*******************************)
  (*   t44 = { #{ int }; int }   *)
  (*******************************)
  (* Deepening to (.a44) *)
  let idx : (t44, _) idx_mut = (.a44) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a44) *)
    let shallow : (t44, _) idx_mut = (.a44) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 100;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 100 failed %d" i;
  );
  (* Deepening to (.a44.#a42) *)
  let idx : (t44, _) idx_mut = (.a44.#a42) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a44) *)
    let shallow : (t44, _) idx_mut = (.a44) in
    let deepened = (.idx_mut(shallow).#a42) in
    mark_test_run 101;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 101 failed %d" i;
    (* from (.a44.#a42) *)
    let shallow : (t44, _) idx_mut = (.a44.#a42) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 102;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 102 failed %d" i;
  );
  (* Deepening to (.b44) *)
  let idx : (t44, _) idx_mut = (.b44) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b44) *)
    let shallow : (t44, _) idx_mut = (.b44) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 103;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 103 failed %d" i;
  );

  (**********************************)
  (*   t45 = { #{ int }; int32# }   *)
  (**********************************)
  (* Deepening to (.a45) *)
  let idx : (t45, _) idx_mut = (.a45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a45) *)
    let shallow : (t45, _) idx_mut = (.a45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 104;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 104 failed %d" i;
  );
  (* Deepening to (.a45.#a42) *)
  let idx : (t45, _) idx_mut = (.a45.#a42) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a45) *)
    let shallow : (t45, _) idx_mut = (.a45) in
    let deepened = (.idx_mut(shallow).#a42) in
    mark_test_run 105;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 105 failed %d" i;
    (* from (.a45.#a42) *)
    let shallow : (t45, _) idx_mut = (.a45.#a42) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 106;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 106 failed %d" i;
  );
  (* Deepening to (.b45) *)
  let idx : (t45, _) idx_mut = (.b45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b45) *)
    let shallow : (t45, _) idx_mut = (.b45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 107;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 107 failed %d" i;
  );

  (*******************************)
  (*   t46 = { #{ int; int } }   *)
  (*******************************)
  (* Deepening to (.a46) *)
  let idx : (t46, _) idx_mut = (.a46) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a46) *)
    let shallow : (t46, _) idx_mut = (.a46) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 108;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 108 failed %d" i;
  );
  (* Deepening to (.a46.#a13) *)
  let idx : (t46, _) idx_mut = (.a46.#a13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a46) *)
    let shallow : (t46, _) idx_mut = (.a46) in
    let deepened = (.idx_mut(shallow).#a13) in
    mark_test_run 109;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 109 failed %d" i;
    (* from (.a46.#a13) *)
    let shallow : (t46, _) idx_mut = (.a46.#a13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 110;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 110 failed %d" i;
  );
  (* Deepening to (.a46.#b13) *)
  let idx : (t46, _) idx_mut = (.a46.#b13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a46) *)
    let shallow : (t46, _) idx_mut = (.a46) in
    let deepened = (.idx_mut(shallow).#b13) in
    mark_test_run 111;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 111 failed %d" i;
    (* from (.a46.#b13) *)
    let shallow : (t46, _) idx_mut = (.a46.#b13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 112;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 112 failed %d" i;
  );

  (************************************)
  (*   t47 = { #{ int; int }; int }   *)
  (************************************)
  (* Deepening to (.a47) *)
  let idx : (t47, _) idx_mut = (.a47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a47) *)
    let shallow : (t47, _) idx_mut = (.a47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 113;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 113 failed %d" i;
  );
  (* Deepening to (.a47.#a13) *)
  let idx : (t47, _) idx_mut = (.a47.#a13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a47) *)
    let shallow : (t47, _) idx_mut = (.a47) in
    let deepened = (.idx_mut(shallow).#a13) in
    mark_test_run 114;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 114 failed %d" i;
    (* from (.a47.#a13) *)
    let shallow : (t47, _) idx_mut = (.a47.#a13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 115;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 115 failed %d" i;
  );
  (* Deepening to (.a47.#b13) *)
  let idx : (t47, _) idx_mut = (.a47.#b13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a47) *)
    let shallow : (t47, _) idx_mut = (.a47) in
    let deepened = (.idx_mut(shallow).#b13) in
    mark_test_run 116;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 116 failed %d" i;
    (* from (.a47.#b13) *)
    let shallow : (t47, _) idx_mut = (.a47.#b13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 117;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 117 failed %d" i;
  );
  (* Deepening to (.b47) *)
  let idx : (t47, _) idx_mut = (.b47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b47) *)
    let shallow : (t47, _) idx_mut = (.b47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 118;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 118 failed %d" i;
  );

  (***************************************)
  (*   t48 = { #{ int; int }; int32# }   *)
  (***************************************)
  (* Deepening to (.a48) *)
  let idx : (t48, _) idx_mut = (.a48) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a48) *)
    let shallow : (t48, _) idx_mut = (.a48) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 119;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 119 failed %d" i;
  );
  (* Deepening to (.a48.#a13) *)
  let idx : (t48, _) idx_mut = (.a48.#a13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a48) *)
    let shallow : (t48, _) idx_mut = (.a48) in
    let deepened = (.idx_mut(shallow).#a13) in
    mark_test_run 120;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 120 failed %d" i;
    (* from (.a48.#a13) *)
    let shallow : (t48, _) idx_mut = (.a48.#a13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 121;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 121 failed %d" i;
  );
  (* Deepening to (.a48.#b13) *)
  let idx : (t48, _) idx_mut = (.a48.#b13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a48) *)
    let shallow : (t48, _) idx_mut = (.a48) in
    let deepened = (.idx_mut(shallow).#b13) in
    mark_test_run 122;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 122 failed %d" i;
    (* from (.a48.#b13) *)
    let shallow : (t48, _) idx_mut = (.a48.#b13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 123;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 123 failed %d" i;
  );
  (* Deepening to (.b48) *)
  let idx : (t48, _) idx_mut = (.b48) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b48) *)
    let shallow : (t48, _) idx_mut = (.b48) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 124;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 124 failed %d" i;
  );

  (***************************************)
  (*   t50 = { #{ int; int32# }; int }   *)
  (***************************************)
  (* Deepening to (.a50) *)
  let idx : (t50, _) idx_mut = (.a50) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a50) *)
    let shallow : (t50, _) idx_mut = (.a50) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 125;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 125 failed %d" i;
  );
  (* Deepening to (.a50.#a49) *)
  let idx : (t50, _) idx_mut = (.a50.#a49) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a50) *)
    let shallow : (t50, _) idx_mut = (.a50) in
    let deepened = (.idx_mut(shallow).#a49) in
    mark_test_run 126;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 126 failed %d" i;
    (* from (.a50.#a49) *)
    let shallow : (t50, _) idx_mut = (.a50.#a49) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 127;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 127 failed %d" i;
  );
  (* Deepening to (.a50.#b49) *)
  let idx : (t50, _) idx_mut = (.a50.#b49) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a50) *)
    let shallow : (t50, _) idx_mut = (.a50) in
    let deepened = (.idx_mut(shallow).#b49) in
    mark_test_run 128;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 128 failed %d" i;
    (* from (.a50.#b49) *)
    let shallow : (t50, _) idx_mut = (.a50.#b49) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 129;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 129 failed %d" i;
  );
  (* Deepening to (.b50) *)
  let idx : (t50, _) idx_mut = (.b50) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b50) *)
    let shallow : (t50, _) idx_mut = (.b50) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 130;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 130 failed %d" i;
  );

  (**************************************)
  (*   t51 = { #{ int; float }; int }   *)
  (**************************************)
  (* Deepening to (.a51) *)
  let idx : (t51, _) idx_mut = (.a51) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a51) *)
    let shallow : (t51, _) idx_mut = (.a51) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 131;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 131 failed %d" i;
  );
  (* Deepening to (.a51.#a5) *)
  let idx : (t51, _) idx_mut = (.a51.#a5) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a51) *)
    let shallow : (t51, _) idx_mut = (.a51) in
    let deepened = (.idx_mut(shallow).#a5) in
    mark_test_run 132;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 132 failed %d" i;
    (* from (.a51.#a5) *)
    let shallow : (t51, _) idx_mut = (.a51.#a5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 133;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 133 failed %d" i;
  );
  (* Deepening to (.a51.#b5) *)
  let idx : (t51, _) idx_mut = (.a51.#b5) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a51) *)
    let shallow : (t51, _) idx_mut = (.a51) in
    let deepened = (.idx_mut(shallow).#b5) in
    mark_test_run 134;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 134 failed %d" i;
    (* from (.a51.#b5) *)
    let shallow : (t51, _) idx_mut = (.a51.#b5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 135;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 135 failed %d" i;
  );
  (* Deepening to (.b51) *)
  let idx : (t51, _) idx_mut = (.b51) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b51) *)
    let shallow : (t51, _) idx_mut = (.b51) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 136;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 136 failed %d" i;
  );

  (*********************************************************)
  (*   t54 = { #{ int64; int64# }; #{ int64#; float# } }   *)
  (*********************************************************)
  (* Deepening to (.a54) *)
  let idx : (t54, _) idx_mut = (.a54) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a54) *)
    let shallow : (t54, _) idx_mut = (.a54) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 137;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 137 failed %d" i;
  );
  (* Deepening to (.a54.#a52) *)
  let idx : (t54, _) idx_mut = (.a54.#a52) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a54) *)
    let shallow : (t54, _) idx_mut = (.a54) in
    let deepened = (.idx_mut(shallow).#a52) in
    mark_test_run 138;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 138 failed %d" i;
    (* from (.a54.#a52) *)
    let shallow : (t54, _) idx_mut = (.a54.#a52) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 139;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 139 failed %d" i;
  );
  (* Deepening to (.a54.#b52) *)
  let idx : (t54, _) idx_mut = (.a54.#b52) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a54) *)
    let shallow : (t54, _) idx_mut = (.a54) in
    let deepened = (.idx_mut(shallow).#b52) in
    mark_test_run 140;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 140 failed %d" i;
    (* from (.a54.#b52) *)
    let shallow : (t54, _) idx_mut = (.a54.#b52) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 141;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 141 failed %d" i;
  );
  (* Deepening to (.b54) *)
  let idx : (t54, _) idx_mut = (.b54) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b54) *)
    let shallow : (t54, _) idx_mut = (.b54) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 142;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 142 failed %d" i;
  );
  (* Deepening to (.b54.#a53) *)
  let idx : (t54, _) idx_mut = (.b54.#a53) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b54) *)
    let shallow : (t54, _) idx_mut = (.b54) in
    let deepened = (.idx_mut(shallow).#a53) in
    mark_test_run 143;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 143 failed %d" i;
    (* from (.b54.#a53) *)
    let shallow : (t54, _) idx_mut = (.b54.#a53) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 144;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 144 failed %d" i;
  );
  (* Deepening to (.b54.#b53) *)
  let idx : (t54, _) idx_mut = (.b54.#b53) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b54) *)
    let shallow : (t54, _) idx_mut = (.b54) in
    let deepened = (.idx_mut(shallow).#b53) in
    mark_test_run 145;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 145 failed %d" i;
    (* from (.b54.#b53) *)
    let shallow : (t54, _) idx_mut = (.b54.#b53) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 146;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 146 failed %d" i;
  );

  (*****************************)
  (*   t56 = { #{ int32# } }   *)
  (*****************************)
  (* Deepening to (.a56) *)
  let idx : (t56, _) idx_mut = (.a56) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a56) *)
    let shallow : (t56, _) idx_mut = (.a56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 147;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 147 failed %d" i;
  );
  (* Deepening to (.a56.#a55) *)
  let idx : (t56, _) idx_mut = (.a56.#a55) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a56) *)
    let shallow : (t56, _) idx_mut = (.a56) in
    let deepened = (.idx_mut(shallow).#a55) in
    mark_test_run 148;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 148 failed %d" i;
    (* from (.a56.#a55) *)
    let shallow : (t56, _) idx_mut = (.a56.#a55) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 149;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 149 failed %d" i;
  );

  (*************************************)
  (*   t57 = { #{ int32# }; int32# }   *)
  (*************************************)
  (* Deepening to (.a57) *)
  let idx : (t57, _) idx_mut = (.a57) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a57) *)
    let shallow : (t57, _) idx_mut = (.a57) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 150;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 150 failed %d" i;
  );
  (* Deepening to (.a57.#a55) *)
  let idx : (t57, _) idx_mut = (.a57.#a55) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a57) *)
    let shallow : (t57, _) idx_mut = (.a57) in
    let deepened = (.idx_mut(shallow).#a55) in
    mark_test_run 151;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 151 failed %d" i;
    (* from (.a57.#a55) *)
    let shallow : (t57, _) idx_mut = (.a57.#a55) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 152;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 152 failed %d" i;
  );
  (* Deepening to (.b57) *)
  let idx : (t57, _) idx_mut = (.b57) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b57) *)
    let shallow : (t57, _) idx_mut = (.b57) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 153;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 153 failed %d" i;
  );

  (****************************)
  (*   t58 = { #{ float } }   *)
  (****************************)
  (* Deepening to (.a58) *)
  let idx : (t58, _) idx_mut = (.a58) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a58) *)
    let shallow : (t58, _) idx_mut = (.a58) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 154;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 154 failed %d" i;
  );
  (* Deepening to (.a58.#a26) *)
  let idx : (t58, _) idx_mut = (.a58.#a26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.a58) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.a58.#a26) *)
    let shallow : (t58, _) idx_mut = (.a58.#a26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 155;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 155 failed %d" i;
  );

  (**************************************)
  (*   t60 = { #{ float; int }; int }   *)
  (**************************************)
  (* Deepening to (.a60) *)
  let idx : (t60, _) idx_mut = (.a60) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a60) *)
    let shallow : (t60, _) idx_mut = (.a60) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 156;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 156 failed %d" i;
  );
  (* Deepening to (.a60.#a59) *)
  let idx : (t60, _) idx_mut = (.a60.#a59) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a60) *)
    let shallow : (t60, _) idx_mut = (.a60) in
    let deepened = (.idx_mut(shallow).#a59) in
    mark_test_run 157;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 157 failed %d" i;
    (* from (.a60.#a59) *)
    let shallow : (t60, _) idx_mut = (.a60.#a59) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 158;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 158 failed %d" i;
  );
  (* Deepening to (.a60.#b59) *)
  let idx : (t60, _) idx_mut = (.a60.#b59) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a60) *)
    let shallow : (t60, _) idx_mut = (.a60) in
    let deepened = (.idx_mut(shallow).#b59) in
    mark_test_run 159;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 159 failed %d" i;
    (* from (.a60.#b59) *)
    let shallow : (t60, _) idx_mut = (.a60.#b59) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 160;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 160 failed %d" i;
  );
  (* Deepening to (.b60) *)
  let idx : (t60, _) idx_mut = (.b60) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b60) *)
    let shallow : (t60, _) idx_mut = (.b60) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 161;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 161 failed %d" i;
  );

  (***********************************)
  (*   t61 = { #{ float; float } }   *)
  (***********************************)
  (* Deepening to (.a61) *)
  let idx : (t61, _) idx_mut = (.a61) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a61) *)
    let shallow : (t61, _) idx_mut = (.a61) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 162;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 162 failed %d" i;
  );
  (* Deepening to (.a61.#a28) *)
  let idx : (t61, _) idx_mut = (.a61.#a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a61) *)
    let shallow : (t61, _) idx_mut = (.a61) in
    let deepened = (.idx_mut(shallow).#a28) in
    mark_test_run 163;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 163 failed %d" i;
    (* from (.a61.#a28) *)
    let shallow : (t61, _) idx_mut = (.a61.#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 164;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 164 failed %d" i;
  );
  (* Deepening to (.a61.#b28) *)
  let idx : (t61, _) idx_mut = (.a61.#b28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a61) *)
    let shallow : (t61, _) idx_mut = (.a61) in
    let deepened = (.idx_mut(shallow).#b28) in
    mark_test_run 165;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 165 failed %d" i;
    (* from (.a61.#b28) *)
    let shallow : (t61, _) idx_mut = (.a61.#b28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 166;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 166 failed %d" i;
  );

  (********************************************)
  (*   t63 = { #{ float; float# }; float# }   *)
  (********************************************)
  (* Deepening to (.a63) *)
  let idx : (t63, _) idx_mut = (.a63) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a63) *)
    let shallow : (t63, _) idx_mut = (.a63) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 167;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 167 failed %d" i;
  );
  (* Deepening to (.a63.#a62) *)
  let idx : (t63, _) idx_mut = (.a63.#a62) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a63) *)
    let shallow : (t63, _) idx_mut = (.a63) in
    let deepened = (.idx_mut(shallow).#a62) in
    mark_test_run 168;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 168 failed %d" i;
    (* from (.a63.#a62) *)
    let shallow : (t63, _) idx_mut = (.a63.#a62) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 169;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 169 failed %d" i;
  );
  (* Deepening to (.a63.#b62) *)
  let idx : (t63, _) idx_mut = (.a63.#b62) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a63) *)
    let shallow : (t63, _) idx_mut = (.a63) in
    let deepened = (.idx_mut(shallow).#b62) in
    mark_test_run 170;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 170 failed %d" i;
    (* from (.a63.#b62) *)
    let shallow : (t63, _) idx_mut = (.a63.#b62) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 171;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 171 failed %d" i;
  );
  (* Deepening to (.b63) *)
  let idx : (t63, _) idx_mut = (.b63) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b63) *)
    let shallow : (t63, _) idx_mut = (.b63) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 172;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 172 failed %d" i;
  );

  (*************************************)
  (*   t65 = { #{ float# }; float# }   *)
  (*************************************)
  (* Deepening to (.a65) *)
  let idx : (t65, _) idx_mut = (.a65) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a65) *)
    let shallow : (t65, _) idx_mut = (.a65) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 173;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 173 failed %d" i;
  );
  (* Deepening to (.a65.#a64) *)
  let idx : (t65, _) idx_mut = (.a65.#a64) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a65) *)
    let shallow : (t65, _) idx_mut = (.a65) in
    let deepened = (.idx_mut(shallow).#a64) in
    mark_test_run 174;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 174 failed %d" i;
    (* from (.a65.#a64) *)
    let shallow : (t65, _) idx_mut = (.a65.#a64) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 175;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 175 failed %d" i;
  );
  (* Deepening to (.b65) *)
  let idx : (t65, _) idx_mut = (.b65) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b65) *)
    let shallow : (t65, _) idx_mut = (.b65) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 176;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 176 failed %d" i;
  );

  (*********************************************)
  (*   t66 = { #{ string; string }; unit_u }   *)
  (*********************************************)
  (* Deepening to (.a66) *)
  let idx : (t66, _) idx_mut = (.a66) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a66) *)
    let shallow : (t66, _) idx_mut = (.a66) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 177;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 177 failed %d" i;
  );
  (* Deepening to (.a66.#a37) *)
  let idx : (t66, _) idx_mut = (.a66.#a37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a66) *)
    let shallow : (t66, _) idx_mut = (.a66) in
    let deepened = (.idx_mut(shallow).#a37) in
    mark_test_run 178;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 178 failed %d" i;
    (* from (.a66.#a37) *)
    let shallow : (t66, _) idx_mut = (.a66.#a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 179;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 179 failed %d" i;
  );
  (* Deepening to (.a66.#b37) *)
  let idx : (t66, _) idx_mut = (.a66.#b37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a66) *)
    let shallow : (t66, _) idx_mut = (.a66) in
    let deepened = (.idx_mut(shallow).#b37) in
    mark_test_run 180;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 180 failed %d" i;
    (* from (.a66.#b37) *)
    let shallow : (t66, _) idx_mut = (.a66.#b37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 181;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 181 failed %d" i;
  );
  (* Deepening to (.b66) *)
  let idx : (t66, _) idx_mut = (.b66) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b66) *)
    let shallow : (t66, _) idx_mut = (.b66) in
    let deepened = (.idx_mut(shallow)) in
    (* No guarantees on representation of idx to void *)
    let _ignore = #(idx, deepened) in
    ();
  );

  ()
;;
let () = to_run ();;

for i = 1 to 181 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
