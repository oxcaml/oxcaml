(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 modules = "idx_repr.ml stubs.c";
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
type unit_u : void mod everything
external unbox_unit : unit -> unit_u = "%unbox_unit"
external globalize : local_ 'a -> 'a = "%obj_dup";;
let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any mod separable) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any mod separable) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int; mutable b0 : int; mutable c0 : float } (* { int; int; float } *)
type t1 = { mutable a1 : int; mutable b1 : int64 } (* { int; int64 } *)
type t2 = { mutable a2 : int; mutable b2 : int32# } (* { int; int32# } *)
type t3 = { mutable a3 : int; mutable b3 : float } (* { int; float } *)
type t4 = #{ a4 : int } (* #{ int } *)
type t5 = { mutable a5 : int; mutable b5 : t4 } (* { int; #{ int } } *)
type t6 = #{ a6 : int; b6 : int } (* #{ int; int } *)
type t7 = { mutable a7 : int; mutable b7 : t6 } (* { int; #{ int; int } } *)
type t8 = { mutable a8 : int64 } (* { int64 } *)
type t9 = { mutable a9 : int64; mutable b9 : nativeint# } (* { int64; nativeint# } *)
type t10 = { mutable a10 : int64; mutable b10 : unit_u } (* { int64; unit_u } *)
type t11 = { mutable a11 : int32#; mutable b11 : int } (* { int32#; int } *)
type t12 = { mutable a12 : int32#; mutable b12 : int; mutable c12 : int32# } (* { int32#; int; int32# } *)
type t13 = { mutable a13 : int32#; mutable b13 : float } (* { int32#; float } *)
type t14 = #{ a14 : int; b14 : int32# } (* #{ int; int32# } *)
type t15 = { mutable a15 : int32#; mutable b15 : t14 } (* { int32#; #{ int; int32# } } *)
type t16 = #{ a16 : int32#; b16 : int32# } (* #{ int32#; int32# } *)
type t17 = { mutable a17 : int32#; mutable b17 : t16 } (* { int32#; #{ int32#; int32# } } *)
type t18 = { mutable a18 : nativeint#; mutable b18 : int64# } (* { nativeint#; int64# } *)
type t19 = { mutable a19 : unit_u; mutable b19 : int32# } (* { unit_u; int32# } *)
type t20 = { mutable a20 : unit_u; mutable b20 : string; mutable c20 : string } (* { unit_u; string; string } *)
type t21 = { mutable a21 : float; mutable b21 : int; mutable c21 : float } (* { float; int; float } *)
type t22 = { mutable a22 : float; mutable b22 : int64 } (* { float; int64 } *)
type t23 = { mutable a23 : float; mutable b23 : float# } (* { float; float# } *)
type t24 = { mutable a24 : float; mutable b24 : t4 } (* { float; #{ int } } *)
type t25 = { mutable a25 : float; mutable b25 : t6 } (* { float; #{ int; int } } *)
type t26 = #{ a26 : float; b26 : int } (* #{ float; int } *)
type t27 = { mutable a27 : float; mutable b27 : t26 } (* { float; #{ float; int } } *)
type t28 = #{ a28 : float; b28 : float } (* #{ float; float } *)
type t29 = { mutable a29 : float; mutable b29 : t28 } (* { float; #{ float; float } } *)
type t30 = #{ a30 : float#; b30 : float# } (* #{ float#; float# } *)
type t31 = { mutable a31 : float; mutable b31 : t30 } (* { float; #{ float#; float# } } *)
type t32 = { mutable a32 : float#; mutable b32 : float } (* { float#; float } *)
type t33 = { mutable a33 : float#; mutable b33 : float#; mutable c33 : float } (* { float#; float#; float } *)
type t34 = { mutable a34 : float#; mutable b34 : float#; mutable c34 : float# } (* { float#; float#; float# } *)
type t35 = #{ a35 : string; b35 : string } (* #{ string; string } *)
type t36 = { mutable a36 : string; mutable b36 : t35 } (* { string; #{ string; string } } *)
type v37 = C37_0 of unit_u (* (| unit_u) *)
type t38 = { mutable a38 : v37; mutable b38 : int64# } (* { (| unit_u); int64# } *)
type t39 = { mutable a39 : v37; mutable b39 : int32# } (* { (| unit_u); int32# } *)
type t40 = { mutable a40 : v37; mutable b40 : nativeint# } (* { (| unit_u); nativeint# } *)
type t41 = { mutable a41 : t4; mutable b41 : int } (* { #{ int }; int } *)
type t42 = { mutable a42 : t6; mutable b42 : int32# } (* { #{ int; int }; int32# } *)
type t43 = { mutable a43 : t14; mutable b43 : int } (* { #{ int; int32# }; int } *)
type t44 = { mutable a44 : t14; mutable b44 : int32# } (* { #{ int; int32# }; int32# } *)
type t45 = #{ a45 : float } (* #{ float } *)
type t46 = { mutable a46 : t45 } (* { #{ float } } *)
type t47 = { mutable a47 : t45; mutable b47 : int } (* { #{ float }; int } *)
type t48 = { mutable a48 : t45; mutable b48 : float } (* { #{ float }; float } *)
type t49 = { mutable a49 : t45; mutable b49 : float# } (* { #{ float }; float# } *)
type t50 = { mutable a50 : t28; mutable b50 : float } (* { #{ float; float }; float } *)
type t51 = #{ a51 : float# } (* #{ float# } *)
type t52 = { mutable a52 : t51; mutable b52 : float } (* { #{ float# }; float } *)
type t53 = #{ a53 : float#; b53 : float } (* #{ float#; float } *)
type t54 = { mutable a54 : t53 } (* { #{ float#; float } } *)
type t55 = { mutable a55 : t30 } (* { #{ float#; float# } } *)
type t56 = { mutable a56 : t30; mutable b56 : float } (* { #{ float#; float# }; float } *)
type t57 = { mutable a57 : t30; mutable b57 : float# } (* { #{ float#; float# }; float# } *)
type t58 = #{ a58 : string; b58 : unit_u } (* #{ string; unit_u } *)
type t59 = { mutable a59 : t58 } (* { #{ string; unit_u } } *)
type t60 = { mutable a60 : t58; mutable b60 : unit_u } (* { #{ string; unit_u }; unit_u } *)

let to_run () =
  (********************************)
  (*   t0 = { int; int; float }   *)
  (********************************)
  let r = { a0 = 0; b0 = 1; c0 = 2. } in
  mark_test_run 1;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 1 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************)
  (*   t1 = { int; int64 }   *)
  (***************************)
  let r = { a1 = 0; b1 = 1L } in
  mark_test_run 2;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 2 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************)
  (*   t2 = { int; int32# }   *)
  (****************************)
  let r = { a2 = 0; b2 = #1l } in
  mark_test_run 3;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 3 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************)
  (*   t3 = { int; float }   *)
  (***************************)
  let r = { a3 = 0; b3 = 1. } in
  mark_test_run 4;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 4 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************)
  (*   t5 = { int; #{ int } }   *)
  (******************************)
  let r = { a5 = 0; b5 = #{ a4 = 1 } } in
  mark_test_run 5;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 5 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t7 = { int; #{ int; int } }   *)
  (***********************************)
  let r = { a7 = 0; b7 = #{ a6 = 1; b6 = 2 } } in
  mark_test_run 6;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 6 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (**********************)
  (*   t8 = { int64 }   *)
  (**********************)
  let r = { a8 = 0L } in
  mark_test_run 7;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 7 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (**********************************)
  (*   t9 = { int64; nativeint# }   *)
  (**********************************)
  let r = { a9 = 0L; b9 = #1n } in
  mark_test_run 8;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 8 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t10 = { int64; unit_u }   *)
  (*******************************)
  let r = { a10 = 0L; b10 = (unbox_unit ()) } in
  mark_test_run 9;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 9 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*****************************)
  (*   t11 = { int32#; int }   *)
  (*****************************)
  let r = { a11 = #0l; b11 = 1 } in
  mark_test_run 10;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 10 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t12 = { int32#; int; int32# }   *)
  (*************************************)
  let r = { a12 = #0l; b12 = 1; c12 = #2l } in
  mark_test_run 11;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 11 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t13 = { int32#; float }   *)
  (*******************************)
  let r = { a13 = #0l; b13 = 1. } in
  mark_test_run 12;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 12 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************************)
  (*   t15 = { int32#; #{ int; int32# } }   *)
  (******************************************)
  let r = { a15 = #0l; b15 = #{ a14 = 1; b14 = #2l } } in
  mark_test_run 13;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 13 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t17 = { int32#; #{ int32#; int32# } }   *)
  (*********************************************)
  let r = { a17 = #0l; b17 = #{ a16 = #1l; b16 = #2l } } in
  mark_test_run 14;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 14 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t18 = { nativeint#; int64# }   *)
  (************************************)
  let r = { a18 = #0n; b18 = #1L } in
  mark_test_run 15;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 15 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************)
  (*   t19 = { unit_u; int32# }   *)
  (********************************)
  let r = { a19 = (unbox_unit ()); b19 = #0l } in
  mark_test_run 16;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 16 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t20 = { unit_u; string; string }   *)
  (****************************************)
  let r = { a20 = (unbox_unit ()); b20 = "0"; c20 = "1" } in
  mark_test_run 17;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 17 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t21 = { float; int; float }   *)
  (***********************************)
  let r = { a21 = 0.; b21 = 1; c21 = 2. } in
  mark_test_run 18;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 18 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************)
  (*   t22 = { float; int64 }   *)
  (******************************)
  let r = { a22 = 0.; b22 = 1L } in
  mark_test_run 19;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 19 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t23 = { float; float# }   *)
  (*******************************)
  let r = { a23 = 0.; b23 = #1. } in
  mark_test_run 20;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 20 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************)
  (*   t24 = { float; #{ int } }   *)
  (*********************************)
  let r = { a24 = 0.; b24 = #{ a4 = 1 } } in
  mark_test_run 21;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 21 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (**************************************)
  (*   t25 = { float; #{ int; int } }   *)
  (**************************************)
  let r = { a25 = 0.; b25 = #{ a6 = 1; b6 = 2 } } in
  mark_test_run 22;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 22 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t27 = { float; #{ float; int } }   *)
  (****************************************)
  let r = { a27 = 0.; b27 = #{ a26 = 1.; b26 = 2 } } in
  mark_test_run 23;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 23 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************************)
  (*   t29 = { float; #{ float; float } }   *)
  (******************************************)
  let r = { a29 = 0.; b29 = #{ a28 = 1.; b28 = 2. } } in
  mark_test_run 24;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 24 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************************)
  (*   t31 = { float; #{ float#; float# } }   *)
  (********************************************)
  let r = { a31 = 0.; b31 = #{ a30 = #1.; b30 = #2. } } in
  mark_test_run 25;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 25 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t32 = { float#; float }   *)
  (*******************************)
  let r = { a32 = #0.; b32 = 1. } in
  mark_test_run 26;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 26 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************************)
  (*   t33 = { float#; float#; float }   *)
  (***************************************)
  let r = { a33 = #0.; b33 = #1.; c33 = 2. } in
  mark_test_run 27;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 27 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t34 = { float#; float#; float# }   *)
  (****************************************)
  let r = { a34 = #0.; b34 = #1.; c34 = #2. } in
  mark_test_run 28;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 28 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t36 = { string; #{ string; string } }   *)
  (*********************************************)
  let r = { a36 = "0"; b36 = #{ a35 = "1"; b35 = "2" } } in
  mark_test_run 29;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 29 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t38 = { (| unit_u); int64# }   *)
  (************************************)
  let r = { a38 = (C37_0 (unbox_unit ())); b38 = #0L } in
  mark_test_run 30;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 30 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t39 = { (| unit_u); int32# }   *)
  (************************************)
  let r = { a39 = (C37_0 (unbox_unit ())); b39 = #0l } in
  mark_test_run 31;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 31 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************************)
  (*   t40 = { (| unit_u); nativeint# }   *)
  (****************************************)
  let r = { a40 = (C37_0 (unbox_unit ())); b40 = #0n } in
  mark_test_run 32;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 32 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*******************************)
  (*   t41 = { #{ int }; int }   *)
  (*******************************)
  let r = { a41 = #{ a4 = 0 }; b41 = 1 } in
  mark_test_run 33;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 33 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************************)
  (*   t42 = { #{ int; int }; int32# }   *)
  (***************************************)
  let r = { a42 = #{ a6 = 0; b6 = 1 }; b42 = #2l } in
  mark_test_run 34;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 34 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***************************************)
  (*   t43 = { #{ int; int32# }; int }   *)
  (***************************************)
  let r = { a43 = #{ a14 = 0; b14 = #1l }; b43 = 2 } in
  mark_test_run 35;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 35 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************************)
  (*   t44 = { #{ int; int32# }; int32# }   *)
  (******************************************)
  let r = { a44 = #{ a14 = 0; b14 = #1l }; b44 = #2l } in
  mark_test_run 36;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 36 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (****************************)
  (*   t46 = { #{ float } }   *)
  (****************************)
  let r = { a46 = #{ a45 = 0. } } in
  mark_test_run 37;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 37 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************)
  (*   t47 = { #{ float }; int }   *)
  (*********************************)
  let r = { a47 = #{ a45 = 0. }; b47 = 1 } in
  mark_test_run 38;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 38 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (***********************************)
  (*   t48 = { #{ float }; float }   *)
  (***********************************)
  let r = { a48 = #{ a45 = 0. }; b48 = 1. } in
  mark_test_run 39;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 39 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t49 = { #{ float }; float# }   *)
  (************************************)
  let r = { a49 = #{ a45 = 0. }; b49 = #1. } in
  mark_test_run 40;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 40 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (******************************************)
  (*   t50 = { #{ float; float }; float }   *)
  (******************************************)
  let r = { a50 = #{ a28 = 0.; b28 = 1. }; b50 = 2. } in
  mark_test_run 41;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 41 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t52 = { #{ float# }; float }   *)
  (************************************)
  let r = { a52 = #{ a51 = #0. }; b52 = 1. } in
  mark_test_run 42;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 42 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (************************************)
  (*   t54 = { #{ float#; float } }   *)
  (************************************)
  let r = { a54 = #{ a53 = #0.; b53 = 1. } } in
  mark_test_run 43;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 43 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t55 = { #{ float#; float# } }   *)
  (*************************************)
  let r = { a55 = #{ a30 = #0.; b30 = #1. } } in
  mark_test_run 44;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 44 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (********************************************)
  (*   t56 = { #{ float#; float# }; float }   *)
  (********************************************)
  let r = { a56 = #{ a30 = #0.; b30 = #1. }; b56 = 2. } in
  mark_test_run 45;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 45 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t57 = { #{ float#; float# }; float# }   *)
  (*********************************************)
  let r = { a57 = #{ a30 = #0.; b30 = #1. }; b57 = #2. } in
  mark_test_run 46;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 46 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*************************************)
  (*   t59 = { #{ string; unit_u } }   *)
  (*************************************)
  let r = { a59 = #{ a58 = "0"; b58 = (unbox_unit ()) } } in
  mark_test_run 47;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 47 failed";

  ()
;;
let () = to_run ();;

let to_run () =
  (*********************************************)
  (*   t60 = { #{ string; unit_u }; unit_u }   *)
  (*********************************************)
  let r = { a60 = #{ a58 = "0"; b58 = (unbox_unit ()) }; b60 = (unbox_unit ()) } in
  mark_test_run 48;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 48 failed";

  ()
;;
let () = to_run ();;

for i = 1 to 48 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
