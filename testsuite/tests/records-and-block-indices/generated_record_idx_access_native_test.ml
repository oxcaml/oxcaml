(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 modules = "idx_repr.ml stubs.c";
 flags = "-extension simd_beta -extension layouts_alpha";
 flambda2;
 stack-allocation;
 native;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
type unit_u : void mod everything
external unbox_unit : unit -> unit_u = "%unbox_unit"
external globalize : local_ 'a -> 'a = "%obj_dup";;
external box_int64x2 : int64x2# -> int64x2 = "%box_vec128"
external unbox_int64x2 : int64x2 -> int64x2# = "%unbox_vec128"
external interleave_low_64 : int64x2# -> int64x2# -> int64x2# = "caml_vec128_unreachable" "caml_simd_vec128_interleave_low_64" [@@unboxed] [@@builtin]
external interleave_high_64 : int64x2# -> int64x2# -> int64x2# = "caml_vec128_unreachable" "caml_simd_vec128_interleave_high_64" [@@unboxed] [@@builtin]
external int64x2_of_int64 : int64 -> int64x2# = "caml_vec128_unreachable" "caml_int64x2_low_of_int64" [@@unboxed] [@@builtin]
external int64_of_int64x2 : int64x2# -> int64 = "caml_vec128_unreachable" "caml_int64x2_low_to_int64" [@@unboxed] [@@builtin]

let int64x2_u_equal i1 i2 =
    let a1 = int64_of_int64x2 i1 in
    let b1 = int64_of_int64x2 (interleave_high_64 i1 i1) in
    let a2 = int64_of_int64x2 i2 in
    let b2 = int64_of_int64x2 (interleave_high_64 i2 i2) in
    Int64.equal a1 a2 && Int64.equal b1 b2

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any mod separable) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any mod separable) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any mod separable) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int } (* { int } *)
type t1 = { mutable a1 : int; mutable b1 : nativeint# } (* { int; nativeint# } *)
type t2 = { mutable a2 : int; mutable b2 : float } (* { int; float } *)
type t3 = #{ a3 : int } (* #{ int } *)
type t4 = { mutable a4 : int; mutable b4 : t3 } (* { int; #{ int } } *)
type t5 = #{ a5 : int; b5 : int } (* #{ int; int } *)
type t6 = { mutable a6 : int; mutable b6 : t5 } (* { int; #{ int; int } } *)
type t7 = #{ a7 : int; b7 : int64x2# } (* #{ int; int64x2# } *)
type t8 = { mutable a8 : int; mutable b8 : t7 } (* { int; #{ int; int64x2# } } *)
type t9 = #{ a9 : float } (* #{ float } *)
type t10 = { mutable a10 : int; mutable b10 : t9 } (* { int; #{ float } } *)
type t11 = { mutable a11 : int64; mutable b11 : int32# } (* { int64; int32# } *)
type t12 = { mutable a12 : int32# } (* { int32# } *)
type t13 = { mutable a13 : int32#; mutable b13 : int } (* { int32#; int } *)
type t14 = { mutable a14 : int32#; mutable b14 : int32# } (* { int32#; int32# } *)
type t15 = { mutable a15 : int32#; mutable b15 : t5 } (* { int32#; #{ int; int } } *)
type t16 = #{ a16 : int32# } (* #{ int32# } *)
type t17 = { mutable a17 : int32#; mutable b17 : t16 } (* { int32#; #{ int32# } } *)
type t18 = #{ a18 : int32#; b18 : int } (* #{ int32#; int } *)
type t19 = { mutable a19 : int32#; mutable b19 : t18 } (* { int32#; #{ int32#; int } } *)
type t20 = #{ a20 : int32#; b20 : int32# } (* #{ int32#; int32# } *)
type t21 = { mutable a21 : int32#; mutable b21 : t20 } (* { int32#; #{ int32#; int32# } } *)
type t22 = { mutable a22 : nativeint#; mutable b22 : int64# } (* { nativeint#; int64# } *)
type t23 = { mutable a23 : nativeint#; mutable b23 : int32# } (* { nativeint#; int32# } *)
type t24 = { mutable a24 : unit_u; mutable b24 : float } (* { unit_u; float } *)
type t25 = { mutable a25 : float } (* { float } *)
type t26 = { mutable a26 : float; mutable b26 : int } (* { float; int } *)
type t27 = { mutable a27 : float; mutable b27 : int; mutable c27 : int } (* { float; int; int } *)
type t28 = { mutable a28 : float; mutable b28 : int64 } (* { float; int64 } *)
type t29 = { mutable a29 : float; mutable b29 : float; mutable c29 : float# } (* { float; float; float# } *)
type t30 = { mutable a30 : float; mutable b30 : t5 } (* { float; #{ int; int } } *)
type t31 = { mutable a31 : float; mutable b31 : t9 } (* { float; #{ float } } *)
type t32 = #{ a32 : float; b32 : int } (* #{ float; int } *)
type t33 = { mutable a33 : float; mutable b33 : t32 } (* { float; #{ float; int } } *)
type t34 = #{ a34 : float#; b34 : float } (* #{ float#; float } *)
type t35 = { mutable a35 : float; mutable b35 : t34 } (* { float; #{ float#; float } } *)
type t36 = #{ a36 : float#; b36 : float# } (* #{ float#; float# } *)
type t37 = { mutable a37 : float; mutable b37 : t36 } (* { float; #{ float#; float# } } *)
type t38 = { mutable a38 : float#; mutable b38 : float; mutable c38 : float# } (* { float#; float; float# } *)
type t39 = { mutable a39 : float#; mutable b39 : float# } (* { float#; float# } *)
type t40 = { mutable a40 : float#; mutable b40 : float#; mutable c40 : float } (* { float#; float#; float } *)
type t41 = #{ a41 : float# } (* #{ float# } *)
type t42 = { mutable a42 : float#; mutable b42 : t41 } (* { float#; #{ float# } } *)
type t43 = { mutable a43 : float#; mutable b43 : t36 } (* { float#; #{ float#; float# } } *)
type t44 = { mutable a44 : string } (* { string } *)
type t45 = { mutable a45 : int64x2#; mutable b45 : int; mutable c45 : int } (* { int64x2#; int; int } *)
type t46 = { mutable a46 : int64x2#; mutable b46 : int64x2# } (* { int64x2#; int64x2# } *)
type t47 = { mutable a47 : int64x2#; mutable b47 : int64x2#; mutable c47 : int64x2# } (* { int64x2#; int64x2#; int64x2# } *)
type t48 = { mutable a48 : int64x2#; mutable b48 : t7 } (* { int64x2#; #{ int; int64x2# } } *)
type t49 = #{ a49 : int64x2#; b49 : int64x2# } (* #{ int64x2#; int64x2# } *)
type t50 = { mutable a50 : int64x2#; mutable b50 : t49 } (* { int64x2#; #{ int64x2#; int64x2# } } *)
type v51 = C51_0 of unit_u (* (| unit_u) *)
type t52 = { mutable a52 : v51 } (* { (| unit_u) } *)
type t53 = { mutable a53 : v51; mutable b53 : int64 } (* { (| unit_u); int64 } *)
type t54 = { mutable a54 : v51; mutable b54 : int64# } (* { (| unit_u); int64# } *)
type t55 = { mutable a55 : t3 } (* { #{ int } } *)
type t56 = { mutable a56 : t3; mutable b56 : int } (* { #{ int }; int } *)
type t57 = { mutable a57 : t5; mutable b57 : int32# } (* { #{ int; int }; int32# } *)
type t58 = #{ a58 : int; b58 : int32# } (* #{ int; int32# } *)
type t59 = { mutable a59 : t58; mutable b59 : int } (* { #{ int; int32# }; int } *)
type t60 = #{ a60 : int; b60 : float } (* #{ int; float } *)
type t61 = { mutable a61 : t60; mutable b61 : int } (* { #{ int; float }; int } *)
type t62 = #{ a62 : unit_u } (* #{ unit_u } *)
type t63 = { mutable a63 : t62; mutable b63 : string } (* { #{ unit_u }; string } *)
type t64 = #{ a64 : unit_u; b64 : string } (* #{ unit_u; string } *)
type t65 = { mutable a65 : t64 } (* { #{ unit_u; string } } *)
type t66 = #{ a66 : float; b66 : float } (* #{ float; float } *)
type t67 = { mutable a67 : t66 } (* { #{ float; float } } *)
type t68 = { mutable a68 : t66; mutable b68 : int } (* { #{ float; float }; int } *)
type t69 = #{ a69 : string } (* #{ string } *)
type t70 = { mutable a70 : t69; mutable b70 : unit_u } (* { #{ string }; unit_u } *)
type t71 = { mutable a71 : t69; mutable b71 : string } (* { #{ string }; string } *)
type t72 = #{ a72 : string; b72 : unit_u } (* #{ string; unit_u } *)
type t73 = { mutable a73 : t72; mutable b73 : string } (* { #{ string; unit_u }; string } *)
type t74 = #{ a74 : int64x2# } (* #{ int64x2# } *)
type t75 = { mutable a75 : t74; mutable b75 : int } (* { #{ int64x2# }; int } *)
type t76 = { mutable a76 : t74; mutable b76 : int64x2# } (* { #{ int64x2# }; int64x2# } *)

let to_run () =
  (********************)
  (*   t0 = { int }   *)
  (********************)
  let eq = (fun { a0 = a01 } { a0 = a02 } -> (fun a b -> Int.equal a b) a01 a02) in
  let r = { a0 = 0 } in
  (* Paths of depth 1 *)
  let next_r = { a0 = 100 } in
  (* .a0 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a0 = next_r.a0 } in
  Idx_mut.unsafe_set r ((.a0) : (t0, _) idx_mut) next_r.a0;
  mark_test_run 1;
  let test = eq r expected in
  if not test then failwithf "test 1 failed";
  mark_test_run 2;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a0) : (t0, _) idx_mut)) next_r.a0 in
  if not test then failwithf "test 2 failed";
  (********************************)
  (*   t1 = { int; nativeint# }   *)
  (********************************)
  let eq = (fun { a1 = a11; b1 = b11 } { a1 = a12; b1 = b12 } -> (fun a b -> Int.equal a b) a11 a12 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b11 b12) in
  let r = { a1 = 0; b1 = #1n } in
  (* Paths of depth 1 *)
  let next_r = { a1 = 100; b1 = #101n } in
  (* .a1 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a1 = next_r.a1 } in
  Idx_mut.unsafe_set r ((.a1) : (t1, _) idx_mut) next_r.a1;
  mark_test_run 3;
  let test = eq r expected in
  if not test then failwithf "test 3 failed";
  mark_test_run 4;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a1) : (t1, _) idx_mut)) next_r.a1 in
  if not test then failwithf "test 4 failed";
  let r = { a1 = 0; b1 = #1n } in
  (* Paths of depth 1 *)
  let next_r = { a1 = 100; b1 = #101n } in
  (* .b1 *)
  let sub_eq = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) in
  let expected = { r with b1 = next_r.b1 } in
  Idx_mut.unsafe_set r ((.b1) : (t1, _) idx_mut) next_r.b1;
  mark_test_run 5;
  let test = eq r expected in
  if not test then failwithf "test 5 failed";
  mark_test_run 6;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b1) : (t1, _) idx_mut)) next_r.b1 in
  if not test then failwithf "test 6 failed";
  (***************************)
  (*   t2 = { int; float }   *)
  (***************************)
  let eq = (fun { a2 = a21; b2 = b21 } { a2 = a22; b2 = b22 } -> (fun a b -> Int.equal a b) a21 a22 && (fun a b -> Float.equal (globalize a) (globalize b)) b21 b22) in
  let r = { a2 = 0; b2 = 1. } in
  (* Paths of depth 1 *)
  let next_r = { a2 = 100; b2 = 101. } in
  (* .a2 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a2 = next_r.a2 } in
  Idx_mut.unsafe_set r ((.a2) : (t2, _) idx_mut) next_r.a2;
  mark_test_run 7;
  let test = eq r expected in
  if not test then failwithf "test 7 failed";
  mark_test_run 8;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a2) : (t2, _) idx_mut)) next_r.a2 in
  if not test then failwithf "test 8 failed";
  let r = { a2 = 0; b2 = 1. } in
  (* Paths of depth 1 *)
  let next_r = { a2 = 100; b2 = 101. } in
  (* .b2 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with b2 = next_r.b2 } in
  Idx_mut.unsafe_set r ((.b2) : (t2, _) idx_mut) next_r.b2;
  mark_test_run 9;
  let test = eq r expected in
  if not test then failwithf "test 9 failed";
  mark_test_run 10;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b2) : (t2, _) idx_mut)) next_r.b2 in
  if not test then failwithf "test 10 failed";
  (******************************)
  (*   t4 = { int; #{ int } }   *)
  (******************************)
  let eq = (fun { a4 = a41; b4 = b41 } { a4 = a42; b4 = b42 } -> (fun a b -> Int.equal a b) a41 a42 && (fun #{ a3 = a31 } #{ a3 = a32 } -> (fun a b -> Int.equal a b) a31 a32) b41 b42) in
  let r = { a4 = 0; b4 = #{ a3 = 1 } } in
  (* Paths of depth 1 *)
  let next_r = { a4 = 100; b4 = #{ a3 = 101 } } in
  (* .a4 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a4 = next_r.a4 } in
  Idx_mut.unsafe_set r ((.a4) : (t4, _) idx_mut) next_r.a4;
  mark_test_run 11;
  let test = eq r expected in
  if not test then failwithf "test 11 failed";
  mark_test_run 12;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a4) : (t4, _) idx_mut)) next_r.a4 in
  if not test then failwithf "test 12 failed";
  let r = { a4 = 0; b4 = #{ a3 = 1 } } in
  (* Paths of depth 1 *)
  let next_r = { a4 = 100; b4 = #{ a3 = 101 } } in
  (* .b4 *)
  let sub_eq = (fun #{ a3 = a31 } #{ a3 = a32 } -> (fun a b -> Int.equal a b) a31 a32) in
  let expected = { r with b4 = next_r.b4 } in
  Idx_mut.unsafe_set r ((.b4) : (t4, _) idx_mut) next_r.b4;
  mark_test_run 13;
  let test = eq r expected in
  if not test then failwithf "test 13 failed";
  mark_test_run 14;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b4) : (t4, _) idx_mut)) next_r.b4 in
  if not test then failwithf "test 14 failed";
  (* Paths of depth 2 *)
  let next_r = { a4 = 200; b4 = #{ a3 = 201 } } in
  (* .b4.#a3 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b4 = #{ r.b4 with a3 = next_r.b4.#a3 } } in
  Idx_mut.unsafe_set r ((.b4.#a3) : (t4, _) idx_mut) next_r.b4.#a3;
  mark_test_run 15;
  let test = eq r expected in
  if not test then failwithf "test 15 failed";
  mark_test_run 16;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b4.#a3) : (t4, _) idx_mut)) next_r.b4.#a3 in
  if not test then failwithf "test 16 failed";
  (***********************************)
  (*   t6 = { int; #{ int; int } }   *)
  (***********************************)
  let eq = (fun { a6 = a61; b6 = b61 } { a6 = a62; b6 = b62 } -> (fun a b -> Int.equal a b) a61 a62 && (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int.equal a b) a51 a52 && (fun a b -> Int.equal a b) b51 b52) b61 b62) in
  let r = { a6 = 0; b6 = #{ a5 = 1; b5 = 2 } } in
  (* Paths of depth 1 *)
  let next_r = { a6 = 100; b6 = #{ a5 = 101; b5 = 102 } } in
  (* .a6 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a6 = next_r.a6 } in
  Idx_mut.unsafe_set r ((.a6) : (t6, _) idx_mut) next_r.a6;
  mark_test_run 17;
  let test = eq r expected in
  if not test then failwithf "test 17 failed";
  mark_test_run 18;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a6) : (t6, _) idx_mut)) next_r.a6 in
  if not test then failwithf "test 18 failed";
  let r = { a6 = 0; b6 = #{ a5 = 1; b5 = 2 } } in
  (* Paths of depth 1 *)
  let next_r = { a6 = 100; b6 = #{ a5 = 101; b5 = 102 } } in
  (* .b6 *)
  let sub_eq = (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int.equal a b) a51 a52 && (fun a b -> Int.equal a b) b51 b52) in
  let expected = { r with b6 = next_r.b6 } in
  Idx_mut.unsafe_set r ((.b6) : (t6, _) idx_mut) next_r.b6;
  mark_test_run 19;
  let test = eq r expected in
  if not test then failwithf "test 19 failed";
  mark_test_run 20;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b6) : (t6, _) idx_mut)) next_r.b6 in
  if not test then failwithf "test 20 failed";
  (* Paths of depth 2 *)
  let next_r = { a6 = 200; b6 = #{ a5 = 201; b5 = 202 } } in
  (* .b6.#a5 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b6 = #{ r.b6 with a5 = next_r.b6.#a5 } } in
  Idx_mut.unsafe_set r ((.b6.#a5) : (t6, _) idx_mut) next_r.b6.#a5;
  mark_test_run 21;
  let test = eq r expected in
  if not test then failwithf "test 21 failed";
  mark_test_run 22;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b6.#a5) : (t6, _) idx_mut)) next_r.b6.#a5 in
  if not test then failwithf "test 22 failed";
  (* .b6.#b5 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b6 = #{ r.b6 with b5 = next_r.b6.#b5 } } in
  Idx_mut.unsafe_set r ((.b6.#b5) : (t6, _) idx_mut) next_r.b6.#b5;
  mark_test_run 23;
  let test = eq r expected in
  if not test then failwithf "test 23 failed";
  mark_test_run 24;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b6.#b5) : (t6, _) idx_mut)) next_r.b6.#b5 in
  if not test then failwithf "test 24 failed";
  (****************************************)
  (*   t8 = { int; #{ int; int64x2# } }   *)
  (****************************************)
  let eq = (fun { a8 = a81; b8 = b81 } { a8 = a82; b8 = b82 } -> (fun a b -> Int.equal a b) a81 a82 && (fun #{ a7 = a71; b7 = b71 } #{ a7 = a72; b7 = b72 } -> (fun a b -> Int.equal a b) a71 a72 && int64x2_u_equal b71 b72) b81 b82) in
  let r = { a8 = 0; b8 = #{ a7 = 1; b7 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)) } } in
  (* Paths of depth 1 *)
  let next_r = { a8 = 100; b8 = #{ a7 = 101; b7 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)) } } in
  (* .a8 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a8 = next_r.a8 } in
  Idx_mut.unsafe_set r ((.a8) : (t8, _) idx_mut) next_r.a8;
  mark_test_run 25;
  let test = eq r expected in
  if not test then failwithf "test 25 failed";
  mark_test_run 26;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a8) : (t8, _) idx_mut)) next_r.a8 in
  if not test then failwithf "test 26 failed";
  let r = { a8 = 0; b8 = #{ a7 = 1; b7 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)) } } in
  (* Paths of depth 1 *)
  let next_r = { a8 = 100; b8 = #{ a7 = 101; b7 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)) } } in
  (* .b8 *)
  let sub_eq = (fun #{ a7 = a71; b7 = b71 } #{ a7 = a72; b7 = b72 } -> (fun a b -> Int.equal a b) a71 a72 && int64x2_u_equal b71 b72) in
  let expected = { r with b8 = next_r.b8 } in
  Idx_mut.unsafe_set r ((.b8) : (t8, _) idx_mut) next_r.b8;
  mark_test_run 27;
  let test = eq r expected in
  if not test then failwithf "test 27 failed";
  mark_test_run 28;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b8) : (t8, _) idx_mut)) next_r.b8 in
  if not test then failwithf "test 28 failed";
  (* Paths of depth 2 *)
  let next_r = { a8 = 200; b8 = #{ a7 = 201; b7 = (interleave_low_64 (int64x2_of_int64 202L) (int64x2_of_int64 203L)) } } in
  (* .b8.#a7 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b8 = #{ r.b8 with a7 = next_r.b8.#a7 } } in
  Idx_mut.unsafe_set r ((.b8.#a7) : (t8, _) idx_mut) next_r.b8.#a7;
  mark_test_run 29;
  let test = eq r expected in
  if not test then failwithf "test 29 failed";
  mark_test_run 30;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b8.#a7) : (t8, _) idx_mut)) next_r.b8.#a7 in
  if not test then failwithf "test 30 failed";
  (* .b8.#b7 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with b8 = #{ r.b8 with b7 = next_r.b8.#b7 } } in
  Idx_mut.unsafe_set r ((.b8.#b7) : (t8, _) idx_mut) next_r.b8.#b7;
  mark_test_run 31;
  let test = eq r expected in
  if not test then failwithf "test 31 failed";
  mark_test_run 32;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b8.#b7) : (t8, _) idx_mut)) next_r.b8.#b7 in
  if not test then failwithf "test 32 failed";
  (*********************************)
  (*   t10 = { int; #{ float } }   *)
  (*********************************)
  let eq = (fun { a10 = a101; b10 = b101 } { a10 = a102; b10 = b102 } -> (fun a b -> Int.equal a b) a101 a102 && (fun #{ a9 = a91 } #{ a9 = a92 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a91 a92) b101 b102) in
  let r = { a10 = 0; b10 = #{ a9 = 1. } } in
  (* Paths of depth 1 *)
  let next_r = { a10 = 100; b10 = #{ a9 = 101. } } in
  (* .a10 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a10 = next_r.a10 } in
  Idx_mut.unsafe_set r ((.a10) : (t10, _) idx_mut) next_r.a10;
  mark_test_run 33;
  let test = eq r expected in
  if not test then failwithf "test 33 failed";
  mark_test_run 34;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a10) : (t10, _) idx_mut)) next_r.a10 in
  if not test then failwithf "test 34 failed";
  let r = { a10 = 0; b10 = #{ a9 = 1. } } in
  (* Paths of depth 1 *)
  let next_r = { a10 = 100; b10 = #{ a9 = 101. } } in
  (* .b10 *)
  let sub_eq = (fun #{ a9 = a91 } #{ a9 = a92 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a91 a92) in
  let expected = { r with b10 = next_r.b10 } in
  Idx_mut.unsafe_set r ((.b10) : (t10, _) idx_mut) next_r.b10;
  mark_test_run 35;
  let test = eq r expected in
  if not test then failwithf "test 35 failed";
  mark_test_run 36;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b10) : (t10, _) idx_mut)) next_r.b10 in
  if not test then failwithf "test 36 failed";
  (* Paths of depth 2 *)
  let next_r = { a10 = 200; b10 = #{ a9 = 201. } } in
  (* .b10.#a9 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with b10 = #{ r.b10 with a9 = next_r.b10.#a9 } } in
  Idx_mut.unsafe_set r ((.b10.#a9) : (t10, _) idx_mut) next_r.b10.#a9;
  mark_test_run 37;
  let test = eq r expected in
  if not test then failwithf "test 37 failed";
  mark_test_run 38;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b10.#a9) : (t10, _) idx_mut)) next_r.b10.#a9 in
  if not test then failwithf "test 38 failed";
  (*******************************)
  (*   t11 = { int64; int32# }   *)
  (*******************************)
  let eq = (fun { a11 = a111; b11 = b111 } { a11 = a112; b11 = b112 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a111 a112 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b111 b112) in
  let r = { a11 = 0L; b11 = #1l } in
  (* Paths of depth 1 *)
  let next_r = { a11 = 100L; b11 = #101l } in
  (* .a11 *)
  let sub_eq = (fun a b -> Int64.equal (globalize a) (globalize b)) in
  let expected = { r with a11 = next_r.a11 } in
  Idx_mut.unsafe_set r ((.a11) : (t11, _) idx_mut) next_r.a11;
  mark_test_run 39;
  let test = eq r expected in
  if not test then failwithf "test 39 failed";
  mark_test_run 40;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a11) : (t11, _) idx_mut)) next_r.a11 in
  if not test then failwithf "test 40 failed";
  let r = { a11 = 0L; b11 = #1l } in
  (* Paths of depth 1 *)
  let next_r = { a11 = 100L; b11 = #101l } in
  (* .b11 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with b11 = next_r.b11 } in
  Idx_mut.unsafe_set r ((.b11) : (t11, _) idx_mut) next_r.b11;
  mark_test_run 41;
  let test = eq r expected in
  if not test then failwithf "test 41 failed";
  mark_test_run 42;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b11) : (t11, _) idx_mut)) next_r.b11 in
  if not test then failwithf "test 42 failed";
  (************************)
  (*   t12 = { int32# }   *)
  (************************)
  let eq = (fun { a12 = a121 } { a12 = a122 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a121 a122) in
  let r = { a12 = #0l } in
  (* Paths of depth 1 *)
  let next_r = { a12 = #100l } in
  (* .a12 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with a12 = next_r.a12 } in
  Idx_mut.unsafe_set r ((.a12) : (t12, _) idx_mut) next_r.a12;
  mark_test_run 43;
  let test = eq r expected in
  if not test then failwithf "test 43 failed";
  mark_test_run 44;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a12) : (t12, _) idx_mut)) next_r.a12 in
  if not test then failwithf "test 44 failed";
  (*****************************)
  (*   t13 = { int32#; int }   *)
  (*****************************)
  let eq = (fun { a13 = a131; b13 = b131 } { a13 = a132; b13 = b132 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a131 a132 && (fun a b -> Int.equal a b) b131 b132) in
  let r = { a13 = #0l; b13 = 1 } in
  (* Paths of depth 1 *)
  let next_r = { a13 = #100l; b13 = 101 } in
  (* .a13 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with a13 = next_r.a13 } in
  Idx_mut.unsafe_set r ((.a13) : (t13, _) idx_mut) next_r.a13;
  mark_test_run 45;
  let test = eq r expected in
  if not test then failwithf "test 45 failed";
  mark_test_run 46;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a13) : (t13, _) idx_mut)) next_r.a13 in
  if not test then failwithf "test 46 failed";
  let r = { a13 = #0l; b13 = 1 } in
  (* Paths of depth 1 *)
  let next_r = { a13 = #100l; b13 = 101 } in
  (* .b13 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b13 = next_r.b13 } in
  Idx_mut.unsafe_set r ((.b13) : (t13, _) idx_mut) next_r.b13;
  mark_test_run 47;
  let test = eq r expected in
  if not test then failwithf "test 47 failed";
  mark_test_run 48;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b13) : (t13, _) idx_mut)) next_r.b13 in
  if not test then failwithf "test 48 failed";
  (********************************)
  (*   t14 = { int32#; int32# }   *)
  (********************************)
  let eq = (fun { a14 = a141; b14 = b141 } { a14 = a142; b14 = b142 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a141 a142 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b141 b142) in
  let r = { a14 = #0l; b14 = #1l } in
  (* Paths of depth 1 *)
  let next_r = { a14 = #100l; b14 = #101l } in
  (* .a14 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with a14 = next_r.a14 } in
  Idx_mut.unsafe_set r ((.a14) : (t14, _) idx_mut) next_r.a14;
  mark_test_run 49;
  let test = eq r expected in
  if not test then failwithf "test 49 failed";
  mark_test_run 50;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a14) : (t14, _) idx_mut)) next_r.a14 in
  if not test then failwithf "test 50 failed";
  let r = { a14 = #0l; b14 = #1l } in
  (* Paths of depth 1 *)
  let next_r = { a14 = #100l; b14 = #101l } in
  (* .b14 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with b14 = next_r.b14 } in
  Idx_mut.unsafe_set r ((.b14) : (t14, _) idx_mut) next_r.b14;
  mark_test_run 51;
  let test = eq r expected in
  if not test then failwithf "test 51 failed";
  mark_test_run 52;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b14) : (t14, _) idx_mut)) next_r.b14 in
  if not test then failwithf "test 52 failed";
  (***************************************)
  (*   t15 = { int32#; #{ int; int } }   *)
  (***************************************)
  let eq = (fun { a15 = a151; b15 = b151 } { a15 = a152; b15 = b152 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a151 a152 && (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int.equal a b) a51 a52 && (fun a b -> Int.equal a b) b51 b52) b151 b152) in
  let r = { a15 = #0l; b15 = #{ a5 = 1; b5 = 2 } } in
  (* Paths of depth 1 *)
  let next_r = { a15 = #100l; b15 = #{ a5 = 101; b5 = 102 } } in
  (* .a15 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with a15 = next_r.a15 } in
  Idx_mut.unsafe_set r ((.a15) : (t15, _) idx_mut) next_r.a15;
  mark_test_run 53;
  let test = eq r expected in
  if not test then failwithf "test 53 failed";
  mark_test_run 54;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a15) : (t15, _) idx_mut)) next_r.a15 in
  if not test then failwithf "test 54 failed";
  let r = { a15 = #0l; b15 = #{ a5 = 1; b5 = 2 } } in
  (* Paths of depth 1 *)
  let next_r = { a15 = #100l; b15 = #{ a5 = 101; b5 = 102 } } in
  (* .b15 *)
  let sub_eq = (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int.equal a b) a51 a52 && (fun a b -> Int.equal a b) b51 b52) in
  let expected = { r with b15 = next_r.b15 } in
  Idx_mut.unsafe_set r ((.b15) : (t15, _) idx_mut) next_r.b15;
  mark_test_run 55;
  let test = eq r expected in
  if not test then failwithf "test 55 failed";
  mark_test_run 56;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b15) : (t15, _) idx_mut)) next_r.b15 in
  if not test then failwithf "test 56 failed";
  (* Paths of depth 2 *)
  let next_r = { a15 = #200l; b15 = #{ a5 = 201; b5 = 202 } } in
  (* .b15.#a5 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b15 = #{ r.b15 with a5 = next_r.b15.#a5 } } in
  Idx_mut.unsafe_set r ((.b15.#a5) : (t15, _) idx_mut) next_r.b15.#a5;
  mark_test_run 57;
  let test = eq r expected in
  if not test then failwithf "test 57 failed";
  mark_test_run 58;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b15.#a5) : (t15, _) idx_mut)) next_r.b15.#a5 in
  if not test then failwithf "test 58 failed";
  (* .b15.#b5 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b15 = #{ r.b15 with b5 = next_r.b15.#b5 } } in
  Idx_mut.unsafe_set r ((.b15.#b5) : (t15, _) idx_mut) next_r.b15.#b5;
  mark_test_run 59;
  let test = eq r expected in
  if not test then failwithf "test 59 failed";
  mark_test_run 60;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b15.#b5) : (t15, _) idx_mut)) next_r.b15.#b5 in
  if not test then failwithf "test 60 failed";
  (*************************************)
  (*   t17 = { int32#; #{ int32# } }   *)
  (*************************************)
  let eq = (fun { a17 = a171; b17 = b171 } { a17 = a172; b17 = b172 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a171 a172 && (fun #{ a16 = a161 } #{ a16 = a162 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a161 a162) b171 b172) in
  let r = { a17 = #0l; b17 = #{ a16 = #1l } } in
  (* Paths of depth 1 *)
  let next_r = { a17 = #100l; b17 = #{ a16 = #101l } } in
  (* .a17 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with a17 = next_r.a17 } in
  Idx_mut.unsafe_set r ((.a17) : (t17, _) idx_mut) next_r.a17;
  mark_test_run 61;
  let test = eq r expected in
  if not test then failwithf "test 61 failed";
  mark_test_run 62;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a17) : (t17, _) idx_mut)) next_r.a17 in
  if not test then failwithf "test 62 failed";
  let r = { a17 = #0l; b17 = #{ a16 = #1l } } in
  (* Paths of depth 1 *)
  let next_r = { a17 = #100l; b17 = #{ a16 = #101l } } in
  (* .b17 *)
  let sub_eq = (fun #{ a16 = a161 } #{ a16 = a162 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a161 a162) in
  let expected = { r with b17 = next_r.b17 } in
  Idx_mut.unsafe_set r ((.b17) : (t17, _) idx_mut) next_r.b17;
  mark_test_run 63;
  let test = eq r expected in
  if not test then failwithf "test 63 failed";
  mark_test_run 64;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b17) : (t17, _) idx_mut)) next_r.b17 in
  if not test then failwithf "test 64 failed";
  (* Paths of depth 2 *)
  let next_r = { a17 = #200l; b17 = #{ a16 = #201l } } in
  (* .b17.#a16 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with b17 = #{ r.b17 with a16 = next_r.b17.#a16 } } in
  Idx_mut.unsafe_set r ((.b17.#a16) : (t17, _) idx_mut) next_r.b17.#a16;
  mark_test_run 65;
  let test = eq r expected in
  if not test then failwithf "test 65 failed";
  mark_test_run 66;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b17.#a16) : (t17, _) idx_mut)) next_r.b17.#a16 in
  if not test then failwithf "test 66 failed";
  (******************************************)
  (*   t19 = { int32#; #{ int32#; int } }   *)
  (******************************************)
  let eq = (fun { a19 = a191; b19 = b191 } { a19 = a192; b19 = b192 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a191 a192 && (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a181 a182 && (fun a b -> Int.equal a b) b181 b182) b191 b192) in
  let r = { a19 = #0l; b19 = #{ a18 = #1l; b18 = 2 } } in
  (* Paths of depth 1 *)
  let next_r = { a19 = #100l; b19 = #{ a18 = #101l; b18 = 102 } } in
  (* .a19 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with a19 = next_r.a19 } in
  Idx_mut.unsafe_set r ((.a19) : (t19, _) idx_mut) next_r.a19;
  mark_test_run 67;
  let test = eq r expected in
  if not test then failwithf "test 67 failed";
  mark_test_run 68;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a19) : (t19, _) idx_mut)) next_r.a19 in
  if not test then failwithf "test 68 failed";
  let r = { a19 = #0l; b19 = #{ a18 = #1l; b18 = 2 } } in
  (* Paths of depth 1 *)
  let next_r = { a19 = #100l; b19 = #{ a18 = #101l; b18 = 102 } } in
  (* .b19 *)
  let sub_eq = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a181 a182 && (fun a b -> Int.equal a b) b181 b182) in
  let expected = { r with b19 = next_r.b19 } in
  Idx_mut.unsafe_set r ((.b19) : (t19, _) idx_mut) next_r.b19;
  mark_test_run 69;
  let test = eq r expected in
  if not test then failwithf "test 69 failed";
  mark_test_run 70;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b19) : (t19, _) idx_mut)) next_r.b19 in
  if not test then failwithf "test 70 failed";
  (* Paths of depth 2 *)
  let next_r = { a19 = #200l; b19 = #{ a18 = #201l; b18 = 202 } } in
  (* .b19.#a18 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with b19 = #{ r.b19 with a18 = next_r.b19.#a18 } } in
  Idx_mut.unsafe_set r ((.b19.#a18) : (t19, _) idx_mut) next_r.b19.#a18;
  mark_test_run 71;
  let test = eq r expected in
  if not test then failwithf "test 71 failed";
  mark_test_run 72;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b19.#a18) : (t19, _) idx_mut)) next_r.b19.#a18 in
  if not test then failwithf "test 72 failed";
  (* .b19.#b18 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b19 = #{ r.b19 with b18 = next_r.b19.#b18 } } in
  Idx_mut.unsafe_set r ((.b19.#b18) : (t19, _) idx_mut) next_r.b19.#b18;
  mark_test_run 73;
  let test = eq r expected in
  if not test then failwithf "test 73 failed";
  mark_test_run 74;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b19.#b18) : (t19, _) idx_mut)) next_r.b19.#b18 in
  if not test then failwithf "test 74 failed";
  (*********************************************)
  (*   t21 = { int32#; #{ int32#; int32# } }   *)
  (*********************************************)
  let eq = (fun { a21 = a211; b21 = b211 } { a21 = a212; b21 = b212 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a211 a212 && (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a201 a202 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b201 b202) b211 b212) in
  let r = { a21 = #0l; b21 = #{ a20 = #1l; b20 = #2l } } in
  (* Paths of depth 1 *)
  let next_r = { a21 = #100l; b21 = #{ a20 = #101l; b20 = #102l } } in
  (* .a21 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with a21 = next_r.a21 } in
  Idx_mut.unsafe_set r ((.a21) : (t21, _) idx_mut) next_r.a21;
  mark_test_run 75;
  let test = eq r expected in
  if not test then failwithf "test 75 failed";
  mark_test_run 76;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a21) : (t21, _) idx_mut)) next_r.a21 in
  if not test then failwithf "test 76 failed";
  let r = { a21 = #0l; b21 = #{ a20 = #1l; b20 = #2l } } in
  (* Paths of depth 1 *)
  let next_r = { a21 = #100l; b21 = #{ a20 = #101l; b20 = #102l } } in
  (* .b21 *)
  let sub_eq = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a201 a202 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b201 b202) in
  let expected = { r with b21 = next_r.b21 } in
  Idx_mut.unsafe_set r ((.b21) : (t21, _) idx_mut) next_r.b21;
  mark_test_run 77;
  let test = eq r expected in
  if not test then failwithf "test 77 failed";
  mark_test_run 78;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b21) : (t21, _) idx_mut)) next_r.b21 in
  if not test then failwithf "test 78 failed";
  (* Paths of depth 2 *)
  let next_r = { a21 = #200l; b21 = #{ a20 = #201l; b20 = #202l } } in
  (* .b21.#a20 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with b21 = #{ r.b21 with a20 = next_r.b21.#a20 } } in
  Idx_mut.unsafe_set r ((.b21.#a20) : (t21, _) idx_mut) next_r.b21.#a20;
  mark_test_run 79;
  let test = eq r expected in
  if not test then failwithf "test 79 failed";
  mark_test_run 80;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b21.#a20) : (t21, _) idx_mut)) next_r.b21.#a20 in
  if not test then failwithf "test 80 failed";
  (* .b21.#b20 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with b21 = #{ r.b21 with b20 = next_r.b21.#b20 } } in
  Idx_mut.unsafe_set r ((.b21.#b20) : (t21, _) idx_mut) next_r.b21.#b20;
  mark_test_run 81;
  let test = eq r expected in
  if not test then failwithf "test 81 failed";
  mark_test_run 82;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b21.#b20) : (t21, _) idx_mut)) next_r.b21.#b20 in
  if not test then failwithf "test 82 failed";
  (************************************)
  (*   t22 = { nativeint#; int64# }   *)
  (************************************)
  let eq = (fun { a22 = a221; b22 = b221 } { a22 = a222; b22 = b222 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a221 a222 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b221 b222) in
  let r = { a22 = #0n; b22 = #1L } in
  (* Paths of depth 1 *)
  let next_r = { a22 = #100n; b22 = #101L } in
  (* .a22 *)
  let sub_eq = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) in
  let expected = { r with a22 = next_r.a22 } in
  Idx_mut.unsafe_set r ((.a22) : (t22, _) idx_mut) next_r.a22;
  mark_test_run 83;
  let test = eq r expected in
  if not test then failwithf "test 83 failed";
  mark_test_run 84;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a22) : (t22, _) idx_mut)) next_r.a22 in
  if not test then failwithf "test 84 failed";
  let r = { a22 = #0n; b22 = #1L } in
  (* Paths of depth 1 *)
  let next_r = { a22 = #100n; b22 = #101L } in
  (* .b22 *)
  let sub_eq = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) in
  let expected = { r with b22 = next_r.b22 } in
  Idx_mut.unsafe_set r ((.b22) : (t22, _) idx_mut) next_r.b22;
  mark_test_run 85;
  let test = eq r expected in
  if not test then failwithf "test 85 failed";
  mark_test_run 86;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b22) : (t22, _) idx_mut)) next_r.b22 in
  if not test then failwithf "test 86 failed";
  (************************************)
  (*   t23 = { nativeint#; int32# }   *)
  (************************************)
  let eq = (fun { a23 = a231; b23 = b231 } { a23 = a232; b23 = b232 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a231 a232 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b231 b232) in
  let r = { a23 = #0n; b23 = #1l } in
  (* Paths of depth 1 *)
  let next_r = { a23 = #100n; b23 = #101l } in
  (* .a23 *)
  let sub_eq = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) in
  let expected = { r with a23 = next_r.a23 } in
  Idx_mut.unsafe_set r ((.a23) : (t23, _) idx_mut) next_r.a23;
  mark_test_run 87;
  let test = eq r expected in
  if not test then failwithf "test 87 failed";
  mark_test_run 88;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a23) : (t23, _) idx_mut)) next_r.a23 in
  if not test then failwithf "test 88 failed";
  let r = { a23 = #0n; b23 = #1l } in
  (* Paths of depth 1 *)
  let next_r = { a23 = #100n; b23 = #101l } in
  (* .b23 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with b23 = next_r.b23 } in
  Idx_mut.unsafe_set r ((.b23) : (t23, _) idx_mut) next_r.b23;
  mark_test_run 89;
  let test = eq r expected in
  if not test then failwithf "test 89 failed";
  mark_test_run 90;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b23) : (t23, _) idx_mut)) next_r.b23 in
  if not test then failwithf "test 90 failed";
  (*******************************)
  (*   t24 = { unit_u; float }   *)
  (*******************************)
  let eq = (fun { a24 = a241; b24 = b241 } { a24 = a242; b24 = b242 } -> (fun _ _ -> true) a241 a242 && (fun a b -> Float.equal (globalize a) (globalize b)) b241 b242) in
  let r = { a24 = (unbox_unit ()); b24 = 0. } in
  (* Paths of depth 1 *)
  let next_r = { a24 = (unbox_unit ()); b24 = 100. } in
  (* .a24 *)
  let sub_eq = (fun _ _ -> true) in
  let expected = { r with a24 = next_r.a24 } in
  Idx_mut.unsafe_set r ((.a24) : (t24, _) idx_mut) next_r.a24;
  mark_test_run 91;
  let test = eq r expected in
  if not test then failwithf "test 91 failed";
  mark_test_run 92;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a24) : (t24, _) idx_mut)) next_r.a24 in
  if not test then failwithf "test 92 failed";
  let r = { a24 = (unbox_unit ()); b24 = 0. } in
  (* Paths of depth 1 *)
  let next_r = { a24 = (unbox_unit ()); b24 = 100. } in
  (* .b24 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with b24 = next_r.b24 } in
  Idx_mut.unsafe_set r ((.b24) : (t24, _) idx_mut) next_r.b24;
  mark_test_run 93;
  let test = eq r expected in
  if not test then failwithf "test 93 failed";
  mark_test_run 94;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b24) : (t24, _) idx_mut)) next_r.b24 in
  if not test then failwithf "test 94 failed";
  (***********************)
  (*   t25 = { float }   *)
  (***********************)
  let eq = (fun { a25 = a251 } { a25 = a252 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a251 a252) in
  let r = { a25 = 0. } in
  (* Paths of depth 1 *)
  let next_r = { a25 = 100. } in
  (* .a25 *)
  (* ff *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with a25 = next_r.a25 } in
  Idx_mut.unsafe_set r ((.a25) : (t25, _) idx_mut) (Float_u.of_float next_r.a25);
  mark_test_run 95;
  let test = eq r expected in
  if not test then failwithf "test 95 failed";
  mark_test_run 96;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a25) : (t25, _) idx_mut)) (Float_u.of_float next_r.a25) in
  if not test then failwithf "test 96 failed";
  (****************************)
  (*   t26 = { float; int }   *)
  (****************************)
  let eq = (fun { a26 = a261; b26 = b261 } { a26 = a262; b26 = b262 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a261 a262 && (fun a b -> Int.equal a b) b261 b262) in
  let r = { a26 = 0.; b26 = 1 } in
  (* Paths of depth 1 *)
  let next_r = { a26 = 100.; b26 = 101 } in
  (* .a26 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a26 = next_r.a26 } in
  Idx_mut.unsafe_set r ((.a26) : (t26, _) idx_mut) next_r.a26;
  mark_test_run 97;
  let test = eq r expected in
  if not test then failwithf "test 97 failed";
  mark_test_run 98;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a26) : (t26, _) idx_mut)) next_r.a26 in
  if not test then failwithf "test 98 failed";
  let r = { a26 = 0.; b26 = 1 } in
  (* Paths of depth 1 *)
  let next_r = { a26 = 100.; b26 = 101 } in
  (* .b26 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b26 = next_r.b26 } in
  Idx_mut.unsafe_set r ((.b26) : (t26, _) idx_mut) next_r.b26;
  mark_test_run 99;
  let test = eq r expected in
  if not test then failwithf "test 99 failed";
  mark_test_run 100;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b26) : (t26, _) idx_mut)) next_r.b26 in
  if not test then failwithf "test 100 failed";
  (*********************************)
  (*   t27 = { float; int; int }   *)
  (*********************************)
  let eq = (fun { a27 = a271; b27 = b271; c27 = c271 } { a27 = a272; b27 = b272; c27 = c272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272 && (fun a b -> Int.equal a b) b271 b272 && (fun a b -> Int.equal a b) c271 c272) in
  let r = { a27 = 0.; b27 = 1; c27 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a27 = 100.; b27 = 101; c27 = 102 } in
  (* .a27 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a27 = next_r.a27 } in
  Idx_mut.unsafe_set r ((.a27) : (t27, _) idx_mut) next_r.a27;
  mark_test_run 101;
  let test = eq r expected in
  if not test then failwithf "test 101 failed";
  mark_test_run 102;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a27) : (t27, _) idx_mut)) next_r.a27 in
  if not test then failwithf "test 102 failed";
  let r = { a27 = 0.; b27 = 1; c27 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a27 = 100.; b27 = 101; c27 = 102 } in
  (* .b27 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b27 = next_r.b27 } in
  Idx_mut.unsafe_set r ((.b27) : (t27, _) idx_mut) next_r.b27;
  mark_test_run 103;
  let test = eq r expected in
  if not test then failwithf "test 103 failed";
  mark_test_run 104;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b27) : (t27, _) idx_mut)) next_r.b27 in
  if not test then failwithf "test 104 failed";
  let r = { a27 = 0.; b27 = 1; c27 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a27 = 100.; b27 = 101; c27 = 102 } in
  (* .c27 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with c27 = next_r.c27 } in
  Idx_mut.unsafe_set r ((.c27) : (t27, _) idx_mut) next_r.c27;
  mark_test_run 105;
  let test = eq r expected in
  if not test then failwithf "test 105 failed";
  mark_test_run 106;
  let test = sub_eq (Idx_mut.unsafe_get r ((.c27) : (t27, _) idx_mut)) next_r.c27 in
  if not test then failwithf "test 106 failed";
  (******************************)
  (*   t28 = { float; int64 }   *)
  (******************************)
  let eq = (fun { a28 = a281; b28 = b281 } { a28 = a282; b28 = b282 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a281 a282 && (fun a b -> Int64.equal (globalize a) (globalize b)) b281 b282) in
  let r = { a28 = 0.; b28 = 1L } in
  (* Paths of depth 1 *)
  let next_r = { a28 = 100.; b28 = 101L } in
  (* .a28 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a28 = next_r.a28 } in
  Idx_mut.unsafe_set r ((.a28) : (t28, _) idx_mut) next_r.a28;
  mark_test_run 107;
  let test = eq r expected in
  if not test then failwithf "test 107 failed";
  mark_test_run 108;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a28) : (t28, _) idx_mut)) next_r.a28 in
  if not test then failwithf "test 108 failed";
  let r = { a28 = 0.; b28 = 1L } in
  (* Paths of depth 1 *)
  let next_r = { a28 = 100.; b28 = 101L } in
  (* .b28 *)
  let sub_eq = (fun a b -> Int64.equal (globalize a) (globalize b)) in
  let expected = { r with b28 = next_r.b28 } in
  Idx_mut.unsafe_set r ((.b28) : (t28, _) idx_mut) next_r.b28;
  mark_test_run 109;
  let test = eq r expected in
  if not test then failwithf "test 109 failed";
  mark_test_run 110;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b28) : (t28, _) idx_mut)) next_r.b28 in
  if not test then failwithf "test 110 failed";
  (**************************************)
  (*   t29 = { float; float; float# }   *)
  (**************************************)
  let eq = (fun { a29 = a291; b29 = b291; c29 = c291 } { a29 = a292; b29 = b292; c29 = c292 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a291 a292 && (fun a b -> Float.equal (globalize a) (globalize b)) b291 b292 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) c291 c292) in
  let r = { a29 = 0.; b29 = 1.; c29 = #2. } in
  (* Paths of depth 1 *)
  let next_r = { a29 = 100.; b29 = 101.; c29 = #102. } in
  (* .a29 *)
  (* ff *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with a29 = next_r.a29 } in
  Idx_mut.unsafe_set r ((.a29) : (t29, _) idx_mut) (Float_u.of_float next_r.a29);
  mark_test_run 111;
  let test = eq r expected in
  if not test then failwithf "test 111 failed";
  mark_test_run 112;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a29) : (t29, _) idx_mut)) (Float_u.of_float next_r.a29) in
  if not test then failwithf "test 112 failed";
  let r = { a29 = 0.; b29 = 1.; c29 = #2. } in
  (* Paths of depth 1 *)
  let next_r = { a29 = 100.; b29 = 101.; c29 = #102. } in
  (* .b29 *)
  (* ff *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b29 = next_r.b29 } in
  Idx_mut.unsafe_set r ((.b29) : (t29, _) idx_mut) (Float_u.of_float next_r.b29);
  mark_test_run 113;
  let test = eq r expected in
  if not test then failwithf "test 113 failed";
  mark_test_run 114;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b29) : (t29, _) idx_mut)) (Float_u.of_float next_r.b29) in
  if not test then failwithf "test 114 failed";
  let r = { a29 = 0.; b29 = 1.; c29 = #2. } in
  (* Paths of depth 1 *)
  let next_r = { a29 = 100.; b29 = 101.; c29 = #102. } in
  (* .c29 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with c29 = next_r.c29 } in
  Idx_mut.unsafe_set r ((.c29) : (t29, _) idx_mut) next_r.c29;
  mark_test_run 115;
  let test = eq r expected in
  if not test then failwithf "test 115 failed";
  mark_test_run 116;
  let test = sub_eq (Idx_mut.unsafe_get r ((.c29) : (t29, _) idx_mut)) next_r.c29 in
  if not test then failwithf "test 116 failed";
  (**************************************)
  (*   t30 = { float; #{ int; int } }   *)
  (**************************************)
  let eq = (fun { a30 = a301; b30 = b301 } { a30 = a302; b30 = b302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a301 a302 && (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int.equal a b) a51 a52 && (fun a b -> Int.equal a b) b51 b52) b301 b302) in
  let r = { a30 = 0.; b30 = #{ a5 = 1; b5 = 2 } } in
  (* Paths of depth 1 *)
  let next_r = { a30 = 100.; b30 = #{ a5 = 101; b5 = 102 } } in
  (* .a30 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a30 = next_r.a30 } in
  Idx_mut.unsafe_set r ((.a30) : (t30, _) idx_mut) next_r.a30;
  mark_test_run 117;
  let test = eq r expected in
  if not test then failwithf "test 117 failed";
  mark_test_run 118;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a30) : (t30, _) idx_mut)) next_r.a30 in
  if not test then failwithf "test 118 failed";
  let r = { a30 = 0.; b30 = #{ a5 = 1; b5 = 2 } } in
  (* Paths of depth 1 *)
  let next_r = { a30 = 100.; b30 = #{ a5 = 101; b5 = 102 } } in
  (* .b30 *)
  let sub_eq = (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int.equal a b) a51 a52 && (fun a b -> Int.equal a b) b51 b52) in
  let expected = { r with b30 = next_r.b30 } in
  Idx_mut.unsafe_set r ((.b30) : (t30, _) idx_mut) next_r.b30;
  mark_test_run 119;
  let test = eq r expected in
  if not test then failwithf "test 119 failed";
  mark_test_run 120;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b30) : (t30, _) idx_mut)) next_r.b30 in
  if not test then failwithf "test 120 failed";
  (* Paths of depth 2 *)
  let next_r = { a30 = 200.; b30 = #{ a5 = 201; b5 = 202 } } in
  (* .b30.#a5 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b30 = #{ r.b30 with a5 = next_r.b30.#a5 } } in
  Idx_mut.unsafe_set r ((.b30.#a5) : (t30, _) idx_mut) next_r.b30.#a5;
  mark_test_run 121;
  let test = eq r expected in
  if not test then failwithf "test 121 failed";
  mark_test_run 122;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b30.#a5) : (t30, _) idx_mut)) next_r.b30.#a5 in
  if not test then failwithf "test 122 failed";
  (* .b30.#b5 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b30 = #{ r.b30 with b5 = next_r.b30.#b5 } } in
  Idx_mut.unsafe_set r ((.b30.#b5) : (t30, _) idx_mut) next_r.b30.#b5;
  mark_test_run 123;
  let test = eq r expected in
  if not test then failwithf "test 123 failed";
  mark_test_run 124;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b30.#b5) : (t30, _) idx_mut)) next_r.b30.#b5 in
  if not test then failwithf "test 124 failed";
  (***********************************)
  (*   t31 = { float; #{ float } }   *)
  (***********************************)
  let eq = (fun { a31 = a311; b31 = b311 } { a31 = a312; b31 = b312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a311 a312 && (fun #{ a9 = a91 } #{ a9 = a92 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a91 a92) b311 b312) in
  let r = { a31 = 0.; b31 = #{ a9 = 1. } } in
  (* Paths of depth 1 *)
  let next_r = { a31 = 100.; b31 = #{ a9 = 101. } } in
  (* .a31 *)
  (* ff *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with a31 = next_r.a31 } in
  Idx_mut.unsafe_set r ((.a31) : (t31, _) idx_mut) (Float_u.of_float next_r.a31);
  mark_test_run 125;
  let test = eq r expected in
  if not test then failwithf "test 125 failed";
  mark_test_run 126;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a31) : (t31, _) idx_mut)) (Float_u.of_float next_r.a31) in
  if not test then failwithf "test 126 failed";
  let r = { a31 = 0.; b31 = #{ a9 = 1. } } in
  (* Paths of depth 1 *)
  let next_r = { a31 = 100.; b31 = #{ a9 = 101. } } in
  (* .b31 *)
  (* ff *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b31 = next_r.b31 } in
  Idx_mut.unsafe_set r ((.b31) : (t31, _) idx_mut) (Float_u.of_float next_r.b31.#a9);
  mark_test_run 127;
  let test = eq r expected in
  if not test then failwithf "test 127 failed";
  mark_test_run 128;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b31) : (t31, _) idx_mut)) (Float_u.of_float next_r.b31.#a9) in
  if not test then failwithf "test 128 failed";
  (* Paths of depth 2 *)
  let next_r = { a31 = 200.; b31 = #{ a9 = 201. } } in
  (* .b31.#a9 *)
  (* ff *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b31 = #{ r.b31 with a9 = next_r.b31.#a9 } } in
  Idx_mut.unsafe_set r ((.b31.#a9) : (t31, _) idx_mut) (Float_u.of_float next_r.b31.#a9);
  mark_test_run 129;
  let test = eq r expected in
  if not test then failwithf "test 129 failed";
  mark_test_run 130;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b31.#a9) : (t31, _) idx_mut)) (Float_u.of_float next_r.b31.#a9) in
  if not test then failwithf "test 130 failed";
  (****************************************)
  (*   t33 = { float; #{ float; int } }   *)
  (****************************************)
  let eq = (fun { a33 = a331; b33 = b331 } { a33 = a332; b33 = b332 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a331 a332 && (fun #{ a32 = a321; b32 = b321 } #{ a32 = a322; b32 = b322 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a321 a322 && (fun a b -> Int.equal a b) b321 b322) b331 b332) in
  let r = { a33 = 0.; b33 = #{ a32 = 1.; b32 = 2 } } in
  (* Paths of depth 1 *)
  let next_r = { a33 = 100.; b33 = #{ a32 = 101.; b32 = 102 } } in
  (* .a33 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a33 = next_r.a33 } in
  Idx_mut.unsafe_set r ((.a33) : (t33, _) idx_mut) next_r.a33;
  mark_test_run 131;
  let test = eq r expected in
  if not test then failwithf "test 131 failed";
  mark_test_run 132;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a33) : (t33, _) idx_mut)) next_r.a33 in
  if not test then failwithf "test 132 failed";
  let r = { a33 = 0.; b33 = #{ a32 = 1.; b32 = 2 } } in
  (* Paths of depth 1 *)
  let next_r = { a33 = 100.; b33 = #{ a32 = 101.; b32 = 102 } } in
  (* .b33 *)
  let sub_eq = (fun #{ a32 = a321; b32 = b321 } #{ a32 = a322; b32 = b322 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a321 a322 && (fun a b -> Int.equal a b) b321 b322) in
  let expected = { r with b33 = next_r.b33 } in
  Idx_mut.unsafe_set r ((.b33) : (t33, _) idx_mut) next_r.b33;
  mark_test_run 133;
  let test = eq r expected in
  if not test then failwithf "test 133 failed";
  mark_test_run 134;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b33) : (t33, _) idx_mut)) next_r.b33 in
  if not test then failwithf "test 134 failed";
  (* Paths of depth 2 *)
  let next_r = { a33 = 200.; b33 = #{ a32 = 201.; b32 = 202 } } in
  (* .b33.#a32 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with b33 = #{ r.b33 with a32 = next_r.b33.#a32 } } in
  Idx_mut.unsafe_set r ((.b33.#a32) : (t33, _) idx_mut) next_r.b33.#a32;
  mark_test_run 135;
  let test = eq r expected in
  if not test then failwithf "test 135 failed";
  mark_test_run 136;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b33.#a32) : (t33, _) idx_mut)) next_r.b33.#a32 in
  if not test then failwithf "test 136 failed";
  (* .b33.#b32 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b33 = #{ r.b33 with b32 = next_r.b33.#b32 } } in
  Idx_mut.unsafe_set r ((.b33.#b32) : (t33, _) idx_mut) next_r.b33.#b32;
  mark_test_run 137;
  let test = eq r expected in
  if not test then failwithf "test 137 failed";
  mark_test_run 138;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b33.#b32) : (t33, _) idx_mut)) next_r.b33.#b32 in
  if not test then failwithf "test 138 failed";
  (*******************************************)
  (*   t35 = { float; #{ float#; float } }   *)
  (*******************************************)
  let eq = (fun { a35 = a351; b35 = b351 } { a35 = a352; b35 = b352 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a351 a352 && (fun #{ a34 = a341; b34 = b341 } #{ a34 = a342; b34 = b342 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a341 a342 && (fun a b -> Float.equal (globalize a) (globalize b)) b341 b342) b351 b352) in
  let r = { a35 = 0.; b35 = #{ a34 = #1.; b34 = 2. } } in
  (* Paths of depth 1 *)
  let next_r = { a35 = 100.; b35 = #{ a34 = #101.; b34 = 102. } } in
  (* .a35 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a35 = next_r.a35 } in
  Idx_mut.unsafe_set r ((.a35) : (t35, _) idx_mut) next_r.a35;
  mark_test_run 139;
  let test = eq r expected in
  if not test then failwithf "test 139 failed";
  mark_test_run 140;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a35) : (t35, _) idx_mut)) next_r.a35 in
  if not test then failwithf "test 140 failed";
  let r = { a35 = 0.; b35 = #{ a34 = #1.; b34 = 2. } } in
  (* Paths of depth 1 *)
  let next_r = { a35 = 100.; b35 = #{ a34 = #101.; b34 = 102. } } in
  (* .b35 *)
  let sub_eq = (fun #{ a34 = a341; b34 = b341 } #{ a34 = a342; b34 = b342 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a341 a342 && (fun a b -> Float.equal (globalize a) (globalize b)) b341 b342) in
  let expected = { r with b35 = next_r.b35 } in
  Idx_mut.unsafe_set r ((.b35) : (t35, _) idx_mut) next_r.b35;
  mark_test_run 141;
  let test = eq r expected in
  if not test then failwithf "test 141 failed";
  mark_test_run 142;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b35) : (t35, _) idx_mut)) next_r.b35 in
  if not test then failwithf "test 142 failed";
  (* Paths of depth 2 *)
  let next_r = { a35 = 200.; b35 = #{ a34 = #201.; b34 = 202. } } in
  (* .b35.#a34 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b35 = #{ r.b35 with a34 = next_r.b35.#a34 } } in
  Idx_mut.unsafe_set r ((.b35.#a34) : (t35, _) idx_mut) next_r.b35.#a34;
  mark_test_run 143;
  let test = eq r expected in
  if not test then failwithf "test 143 failed";
  mark_test_run 144;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b35.#a34) : (t35, _) idx_mut)) next_r.b35.#a34 in
  if not test then failwithf "test 144 failed";
  (* .b35.#b34 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with b35 = #{ r.b35 with b34 = next_r.b35.#b34 } } in
  Idx_mut.unsafe_set r ((.b35.#b34) : (t35, _) idx_mut) next_r.b35.#b34;
  mark_test_run 145;
  let test = eq r expected in
  if not test then failwithf "test 145 failed";
  mark_test_run 146;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b35.#b34) : (t35, _) idx_mut)) next_r.b35.#b34 in
  if not test then failwithf "test 146 failed";
  (********************************************)
  (*   t37 = { float; #{ float#; float# } }   *)
  (********************************************)
  let eq = (fun { a37 = a371; b37 = b371 } { a37 = a372; b37 = b372 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a371 a372 && (fun #{ a36 = a361; b36 = b361 } #{ a36 = a362; b36 = b362 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a361 a362 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b361 b362) b371 b372) in
  let r = { a37 = 0.; b37 = #{ a36 = #1.; b36 = #2. } } in
  (* Paths of depth 1 *)
  let next_r = { a37 = 100.; b37 = #{ a36 = #101.; b36 = #102. } } in
  (* .a37 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a37 = next_r.a37 } in
  Idx_mut.unsafe_set r ((.a37) : (t37, _) idx_mut) next_r.a37;
  mark_test_run 147;
  let test = eq r expected in
  if not test then failwithf "test 147 failed";
  mark_test_run 148;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a37) : (t37, _) idx_mut)) next_r.a37 in
  if not test then failwithf "test 148 failed";
  let r = { a37 = 0.; b37 = #{ a36 = #1.; b36 = #2. } } in
  (* Paths of depth 1 *)
  let next_r = { a37 = 100.; b37 = #{ a36 = #101.; b36 = #102. } } in
  (* .b37 *)
  let sub_eq = (fun #{ a36 = a361; b36 = b361 } #{ a36 = a362; b36 = b362 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a361 a362 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b361 b362) in
  let expected = { r with b37 = next_r.b37 } in
  Idx_mut.unsafe_set r ((.b37) : (t37, _) idx_mut) next_r.b37;
  mark_test_run 149;
  let test = eq r expected in
  if not test then failwithf "test 149 failed";
  mark_test_run 150;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b37) : (t37, _) idx_mut)) next_r.b37 in
  if not test then failwithf "test 150 failed";
  (* Paths of depth 2 *)
  let next_r = { a37 = 200.; b37 = #{ a36 = #201.; b36 = #202. } } in
  (* .b37.#a36 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b37 = #{ r.b37 with a36 = next_r.b37.#a36 } } in
  Idx_mut.unsafe_set r ((.b37.#a36) : (t37, _) idx_mut) next_r.b37.#a36;
  mark_test_run 151;
  let test = eq r expected in
  if not test then failwithf "test 151 failed";
  mark_test_run 152;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b37.#a36) : (t37, _) idx_mut)) next_r.b37.#a36 in
  if not test then failwithf "test 152 failed";
  (* .b37.#b36 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b37 = #{ r.b37 with b36 = next_r.b37.#b36 } } in
  Idx_mut.unsafe_set r ((.b37.#b36) : (t37, _) idx_mut) next_r.b37.#b36;
  mark_test_run 153;
  let test = eq r expected in
  if not test then failwithf "test 153 failed";
  mark_test_run 154;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b37.#b36) : (t37, _) idx_mut)) next_r.b37.#b36 in
  if not test then failwithf "test 154 failed";
  (***************************************)
  (*   t38 = { float#; float; float# }   *)
  (***************************************)
  let eq = (fun { a38 = a381; b38 = b381; c38 = c381 } { a38 = a382; b38 = b382; c38 = c382 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a381 a382 && (fun a b -> Float.equal (globalize a) (globalize b)) b381 b382 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) c381 c382) in
  let r = { a38 = #0.; b38 = 1.; c38 = #2. } in
  (* Paths of depth 1 *)
  let next_r = { a38 = #100.; b38 = 101.; c38 = #102. } in
  (* .a38 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with a38 = next_r.a38 } in
  Idx_mut.unsafe_set r ((.a38) : (t38, _) idx_mut) next_r.a38;
  mark_test_run 155;
  let test = eq r expected in
  if not test then failwithf "test 155 failed";
  mark_test_run 156;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a38) : (t38, _) idx_mut)) next_r.a38 in
  if not test then failwithf "test 156 failed";
  let r = { a38 = #0.; b38 = 1.; c38 = #2. } in
  (* Paths of depth 1 *)
  let next_r = { a38 = #100.; b38 = 101.; c38 = #102. } in
  (* .b38 *)
  (* ff *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b38 = next_r.b38 } in
  Idx_mut.unsafe_set r ((.b38) : (t38, _) idx_mut) (Float_u.of_float next_r.b38);
  mark_test_run 157;
  let test = eq r expected in
  if not test then failwithf "test 157 failed";
  mark_test_run 158;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b38) : (t38, _) idx_mut)) (Float_u.of_float next_r.b38) in
  if not test then failwithf "test 158 failed";
  let r = { a38 = #0.; b38 = 1.; c38 = #2. } in
  (* Paths of depth 1 *)
  let next_r = { a38 = #100.; b38 = 101.; c38 = #102. } in
  (* .c38 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with c38 = next_r.c38 } in
  Idx_mut.unsafe_set r ((.c38) : (t38, _) idx_mut) next_r.c38;
  mark_test_run 159;
  let test = eq r expected in
  if not test then failwithf "test 159 failed";
  mark_test_run 160;
  let test = sub_eq (Idx_mut.unsafe_get r ((.c38) : (t38, _) idx_mut)) next_r.c38 in
  if not test then failwithf "test 160 failed";
  (********************************)
  (*   t39 = { float#; float# }   *)
  (********************************)
  let eq = (fun { a39 = a391; b39 = b391 } { a39 = a392; b39 = b392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a391 a392 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b391 b392) in
  let r = { a39 = #0.; b39 = #1. } in
  (* Paths of depth 1 *)
  let next_r = { a39 = #100.; b39 = #101. } in
  (* .a39 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with a39 = next_r.a39 } in
  Idx_mut.unsafe_set r ((.a39) : (t39, _) idx_mut) next_r.a39;
  mark_test_run 161;
  let test = eq r expected in
  if not test then failwithf "test 161 failed";
  mark_test_run 162;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a39) : (t39, _) idx_mut)) next_r.a39 in
  if not test then failwithf "test 162 failed";
  let r = { a39 = #0.; b39 = #1. } in
  (* Paths of depth 1 *)
  let next_r = { a39 = #100.; b39 = #101. } in
  (* .b39 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b39 = next_r.b39 } in
  Idx_mut.unsafe_set r ((.b39) : (t39, _) idx_mut) next_r.b39;
  mark_test_run 163;
  let test = eq r expected in
  if not test then failwithf "test 163 failed";
  mark_test_run 164;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b39) : (t39, _) idx_mut)) next_r.b39 in
  if not test then failwithf "test 164 failed";
  (***************************************)
  (*   t40 = { float#; float#; float }   *)
  (***************************************)
  let eq = (fun { a40 = a401; b40 = b401; c40 = c401 } { a40 = a402; b40 = b402; c40 = c402 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a401 a402 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b401 b402 && (fun a b -> Float.equal (globalize a) (globalize b)) c401 c402) in
  let r = { a40 = #0.; b40 = #1.; c40 = 2. } in
  (* Paths of depth 1 *)
  let next_r = { a40 = #100.; b40 = #101.; c40 = 102. } in
  (* .a40 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with a40 = next_r.a40 } in
  Idx_mut.unsafe_set r ((.a40) : (t40, _) idx_mut) next_r.a40;
  mark_test_run 165;
  let test = eq r expected in
  if not test then failwithf "test 165 failed";
  mark_test_run 166;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a40) : (t40, _) idx_mut)) next_r.a40 in
  if not test then failwithf "test 166 failed";
  let r = { a40 = #0.; b40 = #1.; c40 = 2. } in
  (* Paths of depth 1 *)
  let next_r = { a40 = #100.; b40 = #101.; c40 = 102. } in
  (* .b40 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b40 = next_r.b40 } in
  Idx_mut.unsafe_set r ((.b40) : (t40, _) idx_mut) next_r.b40;
  mark_test_run 167;
  let test = eq r expected in
  if not test then failwithf "test 167 failed";
  mark_test_run 168;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b40) : (t40, _) idx_mut)) next_r.b40 in
  if not test then failwithf "test 168 failed";
  let r = { a40 = #0.; b40 = #1.; c40 = 2. } in
  (* Paths of depth 1 *)
  let next_r = { a40 = #100.; b40 = #101.; c40 = 102. } in
  (* .c40 *)
  (* ff *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with c40 = next_r.c40 } in
  Idx_mut.unsafe_set r ((.c40) : (t40, _) idx_mut) (Float_u.of_float next_r.c40);
  mark_test_run 169;
  let test = eq r expected in
  if not test then failwithf "test 169 failed";
  mark_test_run 170;
  let test = sub_eq (Idx_mut.unsafe_get r ((.c40) : (t40, _) idx_mut)) (Float_u.of_float next_r.c40) in
  if not test then failwithf "test 170 failed";
  (*************************************)
  (*   t42 = { float#; #{ float# } }   *)
  (*************************************)
  let eq = (fun { a42 = a421; b42 = b421 } { a42 = a422; b42 = b422 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a421 a422 && (fun #{ a41 = a411 } #{ a41 = a412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a411 a412) b421 b422) in
  let r = { a42 = #0.; b42 = #{ a41 = #1. } } in
  (* Paths of depth 1 *)
  let next_r = { a42 = #100.; b42 = #{ a41 = #101. } } in
  (* .a42 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with a42 = next_r.a42 } in
  Idx_mut.unsafe_set r ((.a42) : (t42, _) idx_mut) next_r.a42;
  mark_test_run 171;
  let test = eq r expected in
  if not test then failwithf "test 171 failed";
  mark_test_run 172;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a42) : (t42, _) idx_mut)) next_r.a42 in
  if not test then failwithf "test 172 failed";
  let r = { a42 = #0.; b42 = #{ a41 = #1. } } in
  (* Paths of depth 1 *)
  let next_r = { a42 = #100.; b42 = #{ a41 = #101. } } in
  (* .b42 *)
  let sub_eq = (fun #{ a41 = a411 } #{ a41 = a412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a411 a412) in
  let expected = { r with b42 = next_r.b42 } in
  Idx_mut.unsafe_set r ((.b42) : (t42, _) idx_mut) next_r.b42;
  mark_test_run 173;
  let test = eq r expected in
  if not test then failwithf "test 173 failed";
  mark_test_run 174;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b42) : (t42, _) idx_mut)) next_r.b42 in
  if not test then failwithf "test 174 failed";
  (* Paths of depth 2 *)
  let next_r = { a42 = #200.; b42 = #{ a41 = #201. } } in
  (* .b42.#a41 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b42 = #{ r.b42 with a41 = next_r.b42.#a41 } } in
  Idx_mut.unsafe_set r ((.b42.#a41) : (t42, _) idx_mut) next_r.b42.#a41;
  mark_test_run 175;
  let test = eq r expected in
  if not test then failwithf "test 175 failed";
  mark_test_run 176;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b42.#a41) : (t42, _) idx_mut)) next_r.b42.#a41 in
  if not test then failwithf "test 176 failed";
  (*********************************************)
  (*   t43 = { float#; #{ float#; float# } }   *)
  (*********************************************)
  let eq = (fun { a43 = a431; b43 = b431 } { a43 = a432; b43 = b432 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a431 a432 && (fun #{ a36 = a361; b36 = b361 } #{ a36 = a362; b36 = b362 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a361 a362 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b361 b362) b431 b432) in
  let r = { a43 = #0.; b43 = #{ a36 = #1.; b36 = #2. } } in
  (* Paths of depth 1 *)
  let next_r = { a43 = #100.; b43 = #{ a36 = #101.; b36 = #102. } } in
  (* .a43 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with a43 = next_r.a43 } in
  Idx_mut.unsafe_set r ((.a43) : (t43, _) idx_mut) next_r.a43;
  mark_test_run 177;
  let test = eq r expected in
  if not test then failwithf "test 177 failed";
  mark_test_run 178;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a43) : (t43, _) idx_mut)) next_r.a43 in
  if not test then failwithf "test 178 failed";
  let r = { a43 = #0.; b43 = #{ a36 = #1.; b36 = #2. } } in
  (* Paths of depth 1 *)
  let next_r = { a43 = #100.; b43 = #{ a36 = #101.; b36 = #102. } } in
  (* .b43 *)
  let sub_eq = (fun #{ a36 = a361; b36 = b361 } #{ a36 = a362; b36 = b362 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a361 a362 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b361 b362) in
  let expected = { r with b43 = next_r.b43 } in
  Idx_mut.unsafe_set r ((.b43) : (t43, _) idx_mut) next_r.b43;
  mark_test_run 179;
  let test = eq r expected in
  if not test then failwithf "test 179 failed";
  mark_test_run 180;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b43) : (t43, _) idx_mut)) next_r.b43 in
  if not test then failwithf "test 180 failed";
  (* Paths of depth 2 *)
  let next_r = { a43 = #200.; b43 = #{ a36 = #201.; b36 = #202. } } in
  (* .b43.#a36 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b43 = #{ r.b43 with a36 = next_r.b43.#a36 } } in
  Idx_mut.unsafe_set r ((.b43.#a36) : (t43, _) idx_mut) next_r.b43.#a36;
  mark_test_run 181;
  let test = eq r expected in
  if not test then failwithf "test 181 failed";
  mark_test_run 182;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b43.#a36) : (t43, _) idx_mut)) next_r.b43.#a36 in
  if not test then failwithf "test 182 failed";
  (* .b43.#b36 *)
  let sub_eq = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) in
  let expected = { r with b43 = #{ r.b43 with b36 = next_r.b43.#b36 } } in
  Idx_mut.unsafe_set r ((.b43.#b36) : (t43, _) idx_mut) next_r.b43.#b36;
  mark_test_run 183;
  let test = eq r expected in
  if not test then failwithf "test 183 failed";
  mark_test_run 184;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b43.#b36) : (t43, _) idx_mut)) next_r.b43.#b36 in
  if not test then failwithf "test 184 failed";
  (************************)
  (*   t44 = { string }   *)
  (************************)
  let eq = (fun { a44 = a441 } { a44 = a442 } -> (fun a b -> String.equal (globalize a) (globalize b)) a441 a442) in
  let r = { a44 = "0" } in
  (* Paths of depth 1 *)
  let next_r = { a44 = "100" } in
  (* .a44 *)
  let sub_eq = (fun a b -> String.equal (globalize a) (globalize b)) in
  let expected = { r with a44 = next_r.a44 } in
  Idx_mut.unsafe_set r ((.a44) : (t44, _) idx_mut) next_r.a44;
  mark_test_run 185;
  let test = eq r expected in
  if not test then failwithf "test 185 failed";
  mark_test_run 186;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a44) : (t44, _) idx_mut)) next_r.a44 in
  if not test then failwithf "test 186 failed";
  (************************************)
  (*   t45 = { int64x2#; int; int }   *)
  (************************************)
  let eq = (fun { a45 = a451; b45 = b451; c45 = c451 } { a45 = a452; b45 = b452; c45 = c452 } -> int64x2_u_equal a451 a452 && (fun a b -> Int.equal a b) b451 b452 && (fun a b -> Int.equal a b) c451 c452) in
  let r = { a45 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b45 = 2; c45 = 3 } in
  (* Paths of depth 1 *)
  let next_r = { a45 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b45 = 102; c45 = 103 } in
  (* .a45 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with a45 = next_r.a45 } in
  Idx_mut.unsafe_set r ((.a45) : (t45, _) idx_mut) next_r.a45;
  mark_test_run 187;
  let test = eq r expected in
  if not test then failwithf "test 187 failed";
  mark_test_run 188;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a45) : (t45, _) idx_mut)) next_r.a45 in
  if not test then failwithf "test 188 failed";
  let r = { a45 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b45 = 2; c45 = 3 } in
  (* Paths of depth 1 *)
  let next_r = { a45 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b45 = 102; c45 = 103 } in
  (* .b45 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b45 = next_r.b45 } in
  Idx_mut.unsafe_set r ((.b45) : (t45, _) idx_mut) next_r.b45;
  mark_test_run 189;
  let test = eq r expected in
  if not test then failwithf "test 189 failed";
  mark_test_run 190;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b45) : (t45, _) idx_mut)) next_r.b45 in
  if not test then failwithf "test 190 failed";
  let r = { a45 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b45 = 2; c45 = 3 } in
  (* Paths of depth 1 *)
  let next_r = { a45 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b45 = 102; c45 = 103 } in
  (* .c45 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with c45 = next_r.c45 } in
  Idx_mut.unsafe_set r ((.c45) : (t45, _) idx_mut) next_r.c45;
  mark_test_run 191;
  let test = eq r expected in
  if not test then failwithf "test 191 failed";
  mark_test_run 192;
  let test = sub_eq (Idx_mut.unsafe_get r ((.c45) : (t45, _) idx_mut)) next_r.c45 in
  if not test then failwithf "test 192 failed";
  (************************************)
  (*   t46 = { int64x2#; int64x2# }   *)
  (************************************)
  let eq = (fun { a46 = a461; b46 = b461 } { a46 = a462; b46 = b462 } -> int64x2_u_equal a461 a462 && int64x2_u_equal b461 b462) in
  let r = { a46 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b46 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)) } in
  (* Paths of depth 1 *)
  let next_r = { a46 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b46 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)) } in
  (* .a46 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with a46 = next_r.a46 } in
  Idx_mut.unsafe_set r ((.a46) : (t46, _) idx_mut) next_r.a46;
  mark_test_run 193;
  let test = eq r expected in
  if not test then failwithf "test 193 failed";
  mark_test_run 194;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a46) : (t46, _) idx_mut)) next_r.a46 in
  if not test then failwithf "test 194 failed";
  let r = { a46 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b46 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)) } in
  (* Paths of depth 1 *)
  let next_r = { a46 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b46 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)) } in
  (* .b46 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with b46 = next_r.b46 } in
  Idx_mut.unsafe_set r ((.b46) : (t46, _) idx_mut) next_r.b46;
  mark_test_run 195;
  let test = eq r expected in
  if not test then failwithf "test 195 failed";
  mark_test_run 196;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b46) : (t46, _) idx_mut)) next_r.b46 in
  if not test then failwithf "test 196 failed";
  (**********************************************)
  (*   t47 = { int64x2#; int64x2#; int64x2# }   *)
  (**********************************************)
  let eq = (fun { a47 = a471; b47 = b471; c47 = c471 } { a47 = a472; b47 = b472; c47 = c472 } -> int64x2_u_equal a471 a472 && int64x2_u_equal b471 b472 && int64x2_u_equal c471 c472) in
  let r = { a47 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b47 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)); c47 = (interleave_low_64 (int64x2_of_int64 4L) (int64x2_of_int64 5L)) } in
  (* Paths of depth 1 *)
  let next_r = { a47 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b47 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)); c47 = (interleave_low_64 (int64x2_of_int64 104L) (int64x2_of_int64 105L)) } in
  (* .a47 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with a47 = next_r.a47 } in
  Idx_mut.unsafe_set r ((.a47) : (t47, _) idx_mut) next_r.a47;
  mark_test_run 197;
  let test = eq r expected in
  if not test then failwithf "test 197 failed";
  mark_test_run 198;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a47) : (t47, _) idx_mut)) next_r.a47 in
  if not test then failwithf "test 198 failed";
  let r = { a47 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b47 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)); c47 = (interleave_low_64 (int64x2_of_int64 4L) (int64x2_of_int64 5L)) } in
  (* Paths of depth 1 *)
  let next_r = { a47 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b47 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)); c47 = (interleave_low_64 (int64x2_of_int64 104L) (int64x2_of_int64 105L)) } in
  (* .b47 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with b47 = next_r.b47 } in
  Idx_mut.unsafe_set r ((.b47) : (t47, _) idx_mut) next_r.b47;
  mark_test_run 199;
  let test = eq r expected in
  if not test then failwithf "test 199 failed";
  mark_test_run 200;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b47) : (t47, _) idx_mut)) next_r.b47 in
  if not test then failwithf "test 200 failed";
  let r = { a47 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b47 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)); c47 = (interleave_low_64 (int64x2_of_int64 4L) (int64x2_of_int64 5L)) } in
  (* Paths of depth 1 *)
  let next_r = { a47 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b47 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)); c47 = (interleave_low_64 (int64x2_of_int64 104L) (int64x2_of_int64 105L)) } in
  (* .c47 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with c47 = next_r.c47 } in
  Idx_mut.unsafe_set r ((.c47) : (t47, _) idx_mut) next_r.c47;
  mark_test_run 201;
  let test = eq r expected in
  if not test then failwithf "test 201 failed";
  mark_test_run 202;
  let test = sub_eq (Idx_mut.unsafe_get r ((.c47) : (t47, _) idx_mut)) next_r.c47 in
  if not test then failwithf "test 202 failed";
  (**********************************************)
  (*   t48 = { int64x2#; #{ int; int64x2# } }   *)
  (**********************************************)
  let eq = (fun { a48 = a481; b48 = b481 } { a48 = a482; b48 = b482 } -> int64x2_u_equal a481 a482 && (fun #{ a7 = a71; b7 = b71 } #{ a7 = a72; b7 = b72 } -> (fun a b -> Int.equal a b) a71 a72 && int64x2_u_equal b71 b72) b481 b482) in
  let r = { a48 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b48 = #{ a7 = 2; b7 = (interleave_low_64 (int64x2_of_int64 3L) (int64x2_of_int64 4L)) } } in
  (* Paths of depth 1 *)
  let next_r = { a48 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b48 = #{ a7 = 102; b7 = (interleave_low_64 (int64x2_of_int64 103L) (int64x2_of_int64 104L)) } } in
  (* .a48 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with a48 = next_r.a48 } in
  Idx_mut.unsafe_set r ((.a48) : (t48, _) idx_mut) next_r.a48;
  mark_test_run 203;
  let test = eq r expected in
  if not test then failwithf "test 203 failed";
  mark_test_run 204;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a48) : (t48, _) idx_mut)) next_r.a48 in
  if not test then failwithf "test 204 failed";
  let r = { a48 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b48 = #{ a7 = 2; b7 = (interleave_low_64 (int64x2_of_int64 3L) (int64x2_of_int64 4L)) } } in
  (* Paths of depth 1 *)
  let next_r = { a48 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b48 = #{ a7 = 102; b7 = (interleave_low_64 (int64x2_of_int64 103L) (int64x2_of_int64 104L)) } } in
  (* .b48 *)
  let sub_eq = (fun #{ a7 = a71; b7 = b71 } #{ a7 = a72; b7 = b72 } -> (fun a b -> Int.equal a b) a71 a72 && int64x2_u_equal b71 b72) in
  let expected = { r with b48 = next_r.b48 } in
  Idx_mut.unsafe_set r ((.b48) : (t48, _) idx_mut) next_r.b48;
  mark_test_run 205;
  let test = eq r expected in
  if not test then failwithf "test 205 failed";
  mark_test_run 206;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b48) : (t48, _) idx_mut)) next_r.b48 in
  if not test then failwithf "test 206 failed";
  (* Paths of depth 2 *)
  let next_r = { a48 = (interleave_low_64 (int64x2_of_int64 200L) (int64x2_of_int64 201L)); b48 = #{ a7 = 202; b7 = (interleave_low_64 (int64x2_of_int64 203L) (int64x2_of_int64 204L)) } } in
  (* .b48.#a7 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b48 = #{ r.b48 with a7 = next_r.b48.#a7 } } in
  Idx_mut.unsafe_set r ((.b48.#a7) : (t48, _) idx_mut) next_r.b48.#a7;
  mark_test_run 207;
  let test = eq r expected in
  if not test then failwithf "test 207 failed";
  mark_test_run 208;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b48.#a7) : (t48, _) idx_mut)) next_r.b48.#a7 in
  if not test then failwithf "test 208 failed";
  (* .b48.#b7 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with b48 = #{ r.b48 with b7 = next_r.b48.#b7 } } in
  Idx_mut.unsafe_set r ((.b48.#b7) : (t48, _) idx_mut) next_r.b48.#b7;
  mark_test_run 209;
  let test = eq r expected in
  if not test then failwithf "test 209 failed";
  mark_test_run 210;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b48.#b7) : (t48, _) idx_mut)) next_r.b48.#b7 in
  if not test then failwithf "test 210 failed";
  (***************************************************)
  (*   t50 = { int64x2#; #{ int64x2#; int64x2# } }   *)
  (***************************************************)
  let eq = (fun { a50 = a501; b50 = b501 } { a50 = a502; b50 = b502 } -> int64x2_u_equal a501 a502 && (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> int64x2_u_equal a491 a492 && int64x2_u_equal b491 b492) b501 b502) in
  let r = { a50 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b50 = #{ a49 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)); b49 = (interleave_low_64 (int64x2_of_int64 4L) (int64x2_of_int64 5L)) } } in
  (* Paths of depth 1 *)
  let next_r = { a50 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b50 = #{ a49 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)); b49 = (interleave_low_64 (int64x2_of_int64 104L) (int64x2_of_int64 105L)) } } in
  (* .a50 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with a50 = next_r.a50 } in
  Idx_mut.unsafe_set r ((.a50) : (t50, _) idx_mut) next_r.a50;
  mark_test_run 211;
  let test = eq r expected in
  if not test then failwithf "test 211 failed";
  mark_test_run 212;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a50) : (t50, _) idx_mut)) next_r.a50 in
  if not test then failwithf "test 212 failed";
  let r = { a50 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)); b50 = #{ a49 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)); b49 = (interleave_low_64 (int64x2_of_int64 4L) (int64x2_of_int64 5L)) } } in
  (* Paths of depth 1 *)
  let next_r = { a50 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)); b50 = #{ a49 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)); b49 = (interleave_low_64 (int64x2_of_int64 104L) (int64x2_of_int64 105L)) } } in
  (* .b50 *)
  let sub_eq = (fun #{ a49 = a491; b49 = b491 } #{ a49 = a492; b49 = b492 } -> int64x2_u_equal a491 a492 && int64x2_u_equal b491 b492) in
  let expected = { r with b50 = next_r.b50 } in
  Idx_mut.unsafe_set r ((.b50) : (t50, _) idx_mut) next_r.b50;
  mark_test_run 213;
  let test = eq r expected in
  if not test then failwithf "test 213 failed";
  mark_test_run 214;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b50) : (t50, _) idx_mut)) next_r.b50 in
  if not test then failwithf "test 214 failed";
  (* Paths of depth 2 *)
  let next_r = { a50 = (interleave_low_64 (int64x2_of_int64 200L) (int64x2_of_int64 201L)); b50 = #{ a49 = (interleave_low_64 (int64x2_of_int64 202L) (int64x2_of_int64 203L)); b49 = (interleave_low_64 (int64x2_of_int64 204L) (int64x2_of_int64 205L)) } } in
  (* .b50.#a49 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with b50 = #{ r.b50 with a49 = next_r.b50.#a49 } } in
  Idx_mut.unsafe_set r ((.b50.#a49) : (t50, _) idx_mut) next_r.b50.#a49;
  mark_test_run 215;
  let test = eq r expected in
  if not test then failwithf "test 215 failed";
  mark_test_run 216;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b50.#a49) : (t50, _) idx_mut)) next_r.b50.#a49 in
  if not test then failwithf "test 216 failed";
  (* .b50.#b49 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with b50 = #{ r.b50 with b49 = next_r.b50.#b49 } } in
  Idx_mut.unsafe_set r ((.b50.#b49) : (t50, _) idx_mut) next_r.b50.#b49;
  mark_test_run 217;
  let test = eq r expected in
  if not test then failwithf "test 217 failed";
  mark_test_run 218;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b50.#b49) : (t50, _) idx_mut)) next_r.b50.#b49 in
  if not test then failwithf "test 218 failed";
  (****************************)
  (*   t52 = { (| unit_u) }   *)
  (****************************)
  let eq = (fun { a52 = a521 } { a52 = a522 } -> (fun a b -> match a, b with C51_0(a0), C51_0(b0) -> (fun _ _ -> true) a0 b0) a521 a522) in
  let r = { a52 = (C51_0 (unbox_unit ())) } in
  (* Paths of depth 1 *)
  let next_r = { a52 = (C51_0 (unbox_unit ())) } in
  (* .a52 *)
  let sub_eq = (fun a b -> match a, b with C51_0(a0), C51_0(b0) -> (fun _ _ -> true) a0 b0) in
  let expected = { r with a52 = next_r.a52 } in
  Idx_mut.unsafe_set r ((.a52) : (t52, _) idx_mut) next_r.a52;
  mark_test_run 219;
  let test = eq r expected in
  if not test then failwithf "test 219 failed";
  mark_test_run 220;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a52) : (t52, _) idx_mut)) next_r.a52 in
  if not test then failwithf "test 220 failed";
  (***********************************)
  (*   t53 = { (| unit_u); int64 }   *)
  (***********************************)
  let eq = (fun { a53 = a531; b53 = b531 } { a53 = a532; b53 = b532 } -> (fun a b -> match a, b with C51_0(a0), C51_0(b0) -> (fun _ _ -> true) a0 b0) a531 a532 && (fun a b -> Int64.equal (globalize a) (globalize b)) b531 b532) in
  let r = { a53 = (C51_0 (unbox_unit ())); b53 = 0L } in
  (* Paths of depth 1 *)
  let next_r = { a53 = (C51_0 (unbox_unit ())); b53 = 100L } in
  (* .a53 *)
  let sub_eq = (fun a b -> match a, b with C51_0(a0), C51_0(b0) -> (fun _ _ -> true) a0 b0) in
  let expected = { r with a53 = next_r.a53 } in
  Idx_mut.unsafe_set r ((.a53) : (t53, _) idx_mut) next_r.a53;
  mark_test_run 221;
  let test = eq r expected in
  if not test then failwithf "test 221 failed";
  mark_test_run 222;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a53) : (t53, _) idx_mut)) next_r.a53 in
  if not test then failwithf "test 222 failed";
  let r = { a53 = (C51_0 (unbox_unit ())); b53 = 0L } in
  (* Paths of depth 1 *)
  let next_r = { a53 = (C51_0 (unbox_unit ())); b53 = 100L } in
  (* .b53 *)
  let sub_eq = (fun a b -> Int64.equal (globalize a) (globalize b)) in
  let expected = { r with b53 = next_r.b53 } in
  Idx_mut.unsafe_set r ((.b53) : (t53, _) idx_mut) next_r.b53;
  mark_test_run 223;
  let test = eq r expected in
  if not test then failwithf "test 223 failed";
  mark_test_run 224;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b53) : (t53, _) idx_mut)) next_r.b53 in
  if not test then failwithf "test 224 failed";
  (************************************)
  (*   t54 = { (| unit_u); int64# }   *)
  (************************************)
  let eq = (fun { a54 = a541; b54 = b541 } { a54 = a542; b54 = b542 } -> (fun a b -> match a, b with C51_0(a0), C51_0(b0) -> (fun _ _ -> true) a0 b0) a541 a542 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b541 b542) in
  let r = { a54 = (C51_0 (unbox_unit ())); b54 = #0L } in
  (* Paths of depth 1 *)
  let next_r = { a54 = (C51_0 (unbox_unit ())); b54 = #100L } in
  (* .a54 *)
  let sub_eq = (fun a b -> match a, b with C51_0(a0), C51_0(b0) -> (fun _ _ -> true) a0 b0) in
  let expected = { r with a54 = next_r.a54 } in
  Idx_mut.unsafe_set r ((.a54) : (t54, _) idx_mut) next_r.a54;
  mark_test_run 225;
  let test = eq r expected in
  if not test then failwithf "test 225 failed";
  mark_test_run 226;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a54) : (t54, _) idx_mut)) next_r.a54 in
  if not test then failwithf "test 226 failed";
  let r = { a54 = (C51_0 (unbox_unit ())); b54 = #0L } in
  (* Paths of depth 1 *)
  let next_r = { a54 = (C51_0 (unbox_unit ())); b54 = #100L } in
  (* .b54 *)
  let sub_eq = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) in
  let expected = { r with b54 = next_r.b54 } in
  Idx_mut.unsafe_set r ((.b54) : (t54, _) idx_mut) next_r.b54;
  mark_test_run 227;
  let test = eq r expected in
  if not test then failwithf "test 227 failed";
  mark_test_run 228;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b54) : (t54, _) idx_mut)) next_r.b54 in
  if not test then failwithf "test 228 failed";
  (**************************)
  (*   t55 = { #{ int } }   *)
  (**************************)
  let eq = (fun { a55 = a551 } { a55 = a552 } -> (fun #{ a3 = a31 } #{ a3 = a32 } -> (fun a b -> Int.equal a b) a31 a32) a551 a552) in
  let r = { a55 = #{ a3 = 0 } } in
  (* Paths of depth 1 *)
  let next_r = { a55 = #{ a3 = 100 } } in
  (* .a55 *)
  let sub_eq = (fun #{ a3 = a31 } #{ a3 = a32 } -> (fun a b -> Int.equal a b) a31 a32) in
  let expected = { r with a55 = next_r.a55 } in
  Idx_mut.unsafe_set r ((.a55) : (t55, _) idx_mut) next_r.a55;
  mark_test_run 229;
  let test = eq r expected in
  if not test then failwithf "test 229 failed";
  mark_test_run 230;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a55) : (t55, _) idx_mut)) next_r.a55 in
  if not test then failwithf "test 230 failed";
  (* Paths of depth 2 *)
  let next_r = { a55 = #{ a3 = 200 } } in
  (* .a55.#a3 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a55 = #{ r.a55 with a3 = next_r.a55.#a3 } } in
  Idx_mut.unsafe_set r ((.a55.#a3) : (t55, _) idx_mut) next_r.a55.#a3;
  mark_test_run 231;
  let test = eq r expected in
  if not test then failwithf "test 231 failed";
  mark_test_run 232;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a55.#a3) : (t55, _) idx_mut)) next_r.a55.#a3 in
  if not test then failwithf "test 232 failed";
  (*******************************)
  (*   t56 = { #{ int }; int }   *)
  (*******************************)
  let eq = (fun { a56 = a561; b56 = b561 } { a56 = a562; b56 = b562 } -> (fun #{ a3 = a31 } #{ a3 = a32 } -> (fun a b -> Int.equal a b) a31 a32) a561 a562 && (fun a b -> Int.equal a b) b561 b562) in
  let r = { a56 = #{ a3 = 0 }; b56 = 1 } in
  (* Paths of depth 1 *)
  let next_r = { a56 = #{ a3 = 100 }; b56 = 101 } in
  (* .a56 *)
  let sub_eq = (fun #{ a3 = a31 } #{ a3 = a32 } -> (fun a b -> Int.equal a b) a31 a32) in
  let expected = { r with a56 = next_r.a56 } in
  Idx_mut.unsafe_set r ((.a56) : (t56, _) idx_mut) next_r.a56;
  mark_test_run 233;
  let test = eq r expected in
  if not test then failwithf "test 233 failed";
  mark_test_run 234;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a56) : (t56, _) idx_mut)) next_r.a56 in
  if not test then failwithf "test 234 failed";
  (* Paths of depth 2 *)
  let next_r = { a56 = #{ a3 = 200 }; b56 = 201 } in
  (* .a56.#a3 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a56 = #{ r.a56 with a3 = next_r.a56.#a3 } } in
  Idx_mut.unsafe_set r ((.a56.#a3) : (t56, _) idx_mut) next_r.a56.#a3;
  mark_test_run 235;
  let test = eq r expected in
  if not test then failwithf "test 235 failed";
  mark_test_run 236;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a56.#a3) : (t56, _) idx_mut)) next_r.a56.#a3 in
  if not test then failwithf "test 236 failed";
  let r = { a56 = #{ a3 = 0 }; b56 = 1 } in
  (* Paths of depth 1 *)
  let next_r = { a56 = #{ a3 = 100 }; b56 = 101 } in
  (* .b56 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b56 = next_r.b56 } in
  Idx_mut.unsafe_set r ((.b56) : (t56, _) idx_mut) next_r.b56;
  mark_test_run 237;
  let test = eq r expected in
  if not test then failwithf "test 237 failed";
  mark_test_run 238;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b56) : (t56, _) idx_mut)) next_r.b56 in
  if not test then failwithf "test 238 failed";
  (***************************************)
  (*   t57 = { #{ int; int }; int32# }   *)
  (***************************************)
  let eq = (fun { a57 = a571; b57 = b571 } { a57 = a572; b57 = b572 } -> (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int.equal a b) a51 a52 && (fun a b -> Int.equal a b) b51 b52) a571 a572 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b571 b572) in
  let r = { a57 = #{ a5 = 0; b5 = 1 }; b57 = #2l } in
  (* Paths of depth 1 *)
  let next_r = { a57 = #{ a5 = 100; b5 = 101 }; b57 = #102l } in
  (* .a57 *)
  let sub_eq = (fun #{ a5 = a51; b5 = b51 } #{ a5 = a52; b5 = b52 } -> (fun a b -> Int.equal a b) a51 a52 && (fun a b -> Int.equal a b) b51 b52) in
  let expected = { r with a57 = next_r.a57 } in
  Idx_mut.unsafe_set r ((.a57) : (t57, _) idx_mut) next_r.a57;
  mark_test_run 239;
  let test = eq r expected in
  if not test then failwithf "test 239 failed";
  mark_test_run 240;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a57) : (t57, _) idx_mut)) next_r.a57 in
  if not test then failwithf "test 240 failed";
  (* Paths of depth 2 *)
  let next_r = { a57 = #{ a5 = 200; b5 = 201 }; b57 = #202l } in
  (* .a57.#a5 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a57 = #{ r.a57 with a5 = next_r.a57.#a5 } } in
  Idx_mut.unsafe_set r ((.a57.#a5) : (t57, _) idx_mut) next_r.a57.#a5;
  mark_test_run 241;
  let test = eq r expected in
  if not test then failwithf "test 241 failed";
  mark_test_run 242;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a57.#a5) : (t57, _) idx_mut)) next_r.a57.#a5 in
  if not test then failwithf "test 242 failed";
  (* .a57.#b5 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a57 = #{ r.a57 with b5 = next_r.a57.#b5 } } in
  Idx_mut.unsafe_set r ((.a57.#b5) : (t57, _) idx_mut) next_r.a57.#b5;
  mark_test_run 243;
  let test = eq r expected in
  if not test then failwithf "test 243 failed";
  mark_test_run 244;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a57.#b5) : (t57, _) idx_mut)) next_r.a57.#b5 in
  if not test then failwithf "test 244 failed";
  let r = { a57 = #{ a5 = 0; b5 = 1 }; b57 = #2l } in
  (* Paths of depth 1 *)
  let next_r = { a57 = #{ a5 = 100; b5 = 101 }; b57 = #102l } in
  (* .b57 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with b57 = next_r.b57 } in
  Idx_mut.unsafe_set r ((.b57) : (t57, _) idx_mut) next_r.b57;
  mark_test_run 245;
  let test = eq r expected in
  if not test then failwithf "test 245 failed";
  mark_test_run 246;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b57) : (t57, _) idx_mut)) next_r.b57 in
  if not test then failwithf "test 246 failed";
  (***************************************)
  (*   t59 = { #{ int; int32# }; int }   *)
  (***************************************)
  let eq = (fun { a59 = a591; b59 = b591 } { a59 = a592; b59 = b592 } -> (fun #{ a58 = a581; b58 = b581 } #{ a58 = a582; b58 = b582 } -> (fun a b -> Int.equal a b) a581 a582 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b581 b582) a591 a592 && (fun a b -> Int.equal a b) b591 b592) in
  let r = { a59 = #{ a58 = 0; b58 = #1l }; b59 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a59 = #{ a58 = 100; b58 = #101l }; b59 = 102 } in
  (* .a59 *)
  let sub_eq = (fun #{ a58 = a581; b58 = b581 } #{ a58 = a582; b58 = b582 } -> (fun a b -> Int.equal a b) a581 a582 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b581 b582) in
  let expected = { r with a59 = next_r.a59 } in
  Idx_mut.unsafe_set r ((.a59) : (t59, _) idx_mut) next_r.a59;
  mark_test_run 247;
  let test = eq r expected in
  if not test then failwithf "test 247 failed";
  mark_test_run 248;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a59) : (t59, _) idx_mut)) next_r.a59 in
  if not test then failwithf "test 248 failed";
  (* Paths of depth 2 *)
  let next_r = { a59 = #{ a58 = 200; b58 = #201l }; b59 = 202 } in
  (* .a59.#a58 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a59 = #{ r.a59 with a58 = next_r.a59.#a58 } } in
  Idx_mut.unsafe_set r ((.a59.#a58) : (t59, _) idx_mut) next_r.a59.#a58;
  mark_test_run 249;
  let test = eq r expected in
  if not test then failwithf "test 249 failed";
  mark_test_run 250;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a59.#a58) : (t59, _) idx_mut)) next_r.a59.#a58 in
  if not test then failwithf "test 250 failed";
  (* .a59.#b58 *)
  let sub_eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let expected = { r with a59 = #{ r.a59 with b58 = next_r.a59.#b58 } } in
  Idx_mut.unsafe_set r ((.a59.#b58) : (t59, _) idx_mut) next_r.a59.#b58;
  mark_test_run 251;
  let test = eq r expected in
  if not test then failwithf "test 251 failed";
  mark_test_run 252;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a59.#b58) : (t59, _) idx_mut)) next_r.a59.#b58 in
  if not test then failwithf "test 252 failed";
  let r = { a59 = #{ a58 = 0; b58 = #1l }; b59 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a59 = #{ a58 = 100; b58 = #101l }; b59 = 102 } in
  (* .b59 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b59 = next_r.b59 } in
  Idx_mut.unsafe_set r ((.b59) : (t59, _) idx_mut) next_r.b59;
  mark_test_run 253;
  let test = eq r expected in
  if not test then failwithf "test 253 failed";
  mark_test_run 254;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b59) : (t59, _) idx_mut)) next_r.b59 in
  if not test then failwithf "test 254 failed";
  (**************************************)
  (*   t61 = { #{ int; float }; int }   *)
  (**************************************)
  let eq = (fun { a61 = a611; b61 = b611 } { a61 = a612; b61 = b612 } -> (fun #{ a60 = a601; b60 = b601 } #{ a60 = a602; b60 = b602 } -> (fun a b -> Int.equal a b) a601 a602 && (fun a b -> Float.equal (globalize a) (globalize b)) b601 b602) a611 a612 && (fun a b -> Int.equal a b) b611 b612) in
  let r = { a61 = #{ a60 = 0; b60 = 1. }; b61 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a61 = #{ a60 = 100; b60 = 101. }; b61 = 102 } in
  (* .a61 *)
  let sub_eq = (fun #{ a60 = a601; b60 = b601 } #{ a60 = a602; b60 = b602 } -> (fun a b -> Int.equal a b) a601 a602 && (fun a b -> Float.equal (globalize a) (globalize b)) b601 b602) in
  let expected = { r with a61 = next_r.a61 } in
  Idx_mut.unsafe_set r ((.a61) : (t61, _) idx_mut) next_r.a61;
  mark_test_run 255;
  let test = eq r expected in
  if not test then failwithf "test 255 failed";
  mark_test_run 256;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a61) : (t61, _) idx_mut)) next_r.a61 in
  if not test then failwithf "test 256 failed";
  (* Paths of depth 2 *)
  let next_r = { a61 = #{ a60 = 200; b60 = 201. }; b61 = 202 } in
  (* .a61.#a60 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with a61 = #{ r.a61 with a60 = next_r.a61.#a60 } } in
  Idx_mut.unsafe_set r ((.a61.#a60) : (t61, _) idx_mut) next_r.a61.#a60;
  mark_test_run 257;
  let test = eq r expected in
  if not test then failwithf "test 257 failed";
  mark_test_run 258;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a61.#a60) : (t61, _) idx_mut)) next_r.a61.#a60 in
  if not test then failwithf "test 258 failed";
  (* .a61.#b60 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a61 = #{ r.a61 with b60 = next_r.a61.#b60 } } in
  Idx_mut.unsafe_set r ((.a61.#b60) : (t61, _) idx_mut) next_r.a61.#b60;
  mark_test_run 259;
  let test = eq r expected in
  if not test then failwithf "test 259 failed";
  mark_test_run 260;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a61.#b60) : (t61, _) idx_mut)) next_r.a61.#b60 in
  if not test then failwithf "test 260 failed";
  let r = { a61 = #{ a60 = 0; b60 = 1. }; b61 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a61 = #{ a60 = 100; b60 = 101. }; b61 = 102 } in
  (* .b61 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b61 = next_r.b61 } in
  Idx_mut.unsafe_set r ((.b61) : (t61, _) idx_mut) next_r.b61;
  mark_test_run 261;
  let test = eq r expected in
  if not test then failwithf "test 261 failed";
  mark_test_run 262;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b61) : (t61, _) idx_mut)) next_r.b61 in
  if not test then failwithf "test 262 failed";
  (*************************************)
  (*   t63 = { #{ unit_u }; string }   *)
  (*************************************)
  let eq = (fun { a63 = a631; b63 = b631 } { a63 = a632; b63 = b632 } -> (fun #{ a62 = a621 } #{ a62 = a622 } -> (fun _ _ -> true) a621 a622) a631 a632 && (fun a b -> String.equal (globalize a) (globalize b)) b631 b632) in
  let r = { a63 = #{ a62 = (unbox_unit ()) }; b63 = "0" } in
  (* Paths of depth 1 *)
  let next_r = { a63 = #{ a62 = (unbox_unit ()) }; b63 = "100" } in
  (* .a63 *)
  let sub_eq = (fun #{ a62 = a621 } #{ a62 = a622 } -> (fun _ _ -> true) a621 a622) in
  let expected = { r with a63 = next_r.a63 } in
  Idx_mut.unsafe_set r ((.a63) : (t63, _) idx_mut) next_r.a63;
  mark_test_run 263;
  let test = eq r expected in
  if not test then failwithf "test 263 failed";
  mark_test_run 264;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a63) : (t63, _) idx_mut)) next_r.a63 in
  if not test then failwithf "test 264 failed";
  (* Paths of depth 2 *)
  let next_r = { a63 = #{ a62 = (unbox_unit ()) }; b63 = "200" } in
  (* .a63.#a62 *)
  let sub_eq = (fun _ _ -> true) in
  let expected = { r with a63 = #{ r.a63 with a62 = next_r.a63.#a62 } } in
  Idx_mut.unsafe_set r ((.a63.#a62) : (t63, _) idx_mut) next_r.a63.#a62;
  mark_test_run 265;
  let test = eq r expected in
  if not test then failwithf "test 265 failed";
  mark_test_run 266;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a63.#a62) : (t63, _) idx_mut)) next_r.a63.#a62 in
  if not test then failwithf "test 266 failed";
  let r = { a63 = #{ a62 = (unbox_unit ()) }; b63 = "0" } in
  (* Paths of depth 1 *)
  let next_r = { a63 = #{ a62 = (unbox_unit ()) }; b63 = "100" } in
  (* .b63 *)
  let sub_eq = (fun a b -> String.equal (globalize a) (globalize b)) in
  let expected = { r with b63 = next_r.b63 } in
  Idx_mut.unsafe_set r ((.b63) : (t63, _) idx_mut) next_r.b63;
  mark_test_run 267;
  let test = eq r expected in
  if not test then failwithf "test 267 failed";
  mark_test_run 268;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b63) : (t63, _) idx_mut)) next_r.b63 in
  if not test then failwithf "test 268 failed";
  (*************************************)
  (*   t65 = { #{ unit_u; string } }   *)
  (*************************************)
  let eq = (fun { a65 = a651 } { a65 = a652 } -> (fun #{ a64 = a641; b64 = b641 } #{ a64 = a642; b64 = b642 } -> (fun _ _ -> true) a641 a642 && (fun a b -> String.equal (globalize a) (globalize b)) b641 b642) a651 a652) in
  let r = { a65 = #{ a64 = (unbox_unit ()); b64 = "0" } } in
  (* Paths of depth 1 *)
  let next_r = { a65 = #{ a64 = (unbox_unit ()); b64 = "100" } } in
  (* .a65 *)
  let sub_eq = (fun #{ a64 = a641; b64 = b641 } #{ a64 = a642; b64 = b642 } -> (fun _ _ -> true) a641 a642 && (fun a b -> String.equal (globalize a) (globalize b)) b641 b642) in
  let expected = { r with a65 = next_r.a65 } in
  Idx_mut.unsafe_set r ((.a65) : (t65, _) idx_mut) next_r.a65;
  mark_test_run 269;
  let test = eq r expected in
  if not test then failwithf "test 269 failed";
  mark_test_run 270;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a65) : (t65, _) idx_mut)) next_r.a65 in
  if not test then failwithf "test 270 failed";
  (* Paths of depth 2 *)
  let next_r = { a65 = #{ a64 = (unbox_unit ()); b64 = "200" } } in
  (* .a65.#a64 *)
  let sub_eq = (fun _ _ -> true) in
  let expected = { r with a65 = #{ r.a65 with a64 = next_r.a65.#a64 } } in
  Idx_mut.unsafe_set r ((.a65.#a64) : (t65, _) idx_mut) next_r.a65.#a64;
  mark_test_run 271;
  let test = eq r expected in
  if not test then failwithf "test 271 failed";
  mark_test_run 272;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a65.#a64) : (t65, _) idx_mut)) next_r.a65.#a64 in
  if not test then failwithf "test 272 failed";
  (* .a65.#b64 *)
  let sub_eq = (fun a b -> String.equal (globalize a) (globalize b)) in
  let expected = { r with a65 = #{ r.a65 with b64 = next_r.a65.#b64 } } in
  Idx_mut.unsafe_set r ((.a65.#b64) : (t65, _) idx_mut) next_r.a65.#b64;
  mark_test_run 273;
  let test = eq r expected in
  if not test then failwithf "test 273 failed";
  mark_test_run 274;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a65.#b64) : (t65, _) idx_mut)) next_r.a65.#b64 in
  if not test then failwithf "test 274 failed";
  (***********************************)
  (*   t67 = { #{ float; float } }   *)
  (***********************************)
  let eq = (fun { a67 = a671 } { a67 = a672 } -> (fun #{ a66 = a661; b66 = b661 } #{ a66 = a662; b66 = b662 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a661 a662 && (fun a b -> Float.equal (globalize a) (globalize b)) b661 b662) a671 a672) in
  let r = { a67 = #{ a66 = 0.; b66 = 1. } } in
  (* Paths of depth 1 *)
  let next_r = { a67 = #{ a66 = 100.; b66 = 101. } } in
  (* .a67 *)
  let sub_eq = (fun #{ a66 = a661; b66 = b661 } #{ a66 = a662; b66 = b662 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a661 a662 && (fun a b -> Float.equal (globalize a) (globalize b)) b661 b662) in
  let expected = { r with a67 = next_r.a67 } in
  Idx_mut.unsafe_set r ((.a67) : (t67, _) idx_mut) next_r.a67;
  mark_test_run 275;
  let test = eq r expected in
  if not test then failwithf "test 275 failed";
  mark_test_run 276;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a67) : (t67, _) idx_mut)) next_r.a67 in
  if not test then failwithf "test 276 failed";
  (* Paths of depth 2 *)
  let next_r = { a67 = #{ a66 = 200.; b66 = 201. } } in
  (* .a67.#a66 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a67 = #{ r.a67 with a66 = next_r.a67.#a66 } } in
  Idx_mut.unsafe_set r ((.a67.#a66) : (t67, _) idx_mut) next_r.a67.#a66;
  mark_test_run 277;
  let test = eq r expected in
  if not test then failwithf "test 277 failed";
  mark_test_run 278;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a67.#a66) : (t67, _) idx_mut)) next_r.a67.#a66 in
  if not test then failwithf "test 278 failed";
  (* .a67.#b66 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a67 = #{ r.a67 with b66 = next_r.a67.#b66 } } in
  Idx_mut.unsafe_set r ((.a67.#b66) : (t67, _) idx_mut) next_r.a67.#b66;
  mark_test_run 279;
  let test = eq r expected in
  if not test then failwithf "test 279 failed";
  mark_test_run 280;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a67.#b66) : (t67, _) idx_mut)) next_r.a67.#b66 in
  if not test then failwithf "test 280 failed";
  (****************************************)
  (*   t68 = { #{ float; float }; int }   *)
  (****************************************)
  let eq = (fun { a68 = a681; b68 = b681 } { a68 = a682; b68 = b682 } -> (fun #{ a66 = a661; b66 = b661 } #{ a66 = a662; b66 = b662 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a661 a662 && (fun a b -> Float.equal (globalize a) (globalize b)) b661 b662) a681 a682 && (fun a b -> Int.equal a b) b681 b682) in
  let r = { a68 = #{ a66 = 0.; b66 = 1. }; b68 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a68 = #{ a66 = 100.; b66 = 101. }; b68 = 102 } in
  (* .a68 *)
  let sub_eq = (fun #{ a66 = a661; b66 = b661 } #{ a66 = a662; b66 = b662 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a661 a662 && (fun a b -> Float.equal (globalize a) (globalize b)) b661 b662) in
  let expected = { r with a68 = next_r.a68 } in
  Idx_mut.unsafe_set r ((.a68) : (t68, _) idx_mut) next_r.a68;
  mark_test_run 281;
  let test = eq r expected in
  if not test then failwithf "test 281 failed";
  mark_test_run 282;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a68) : (t68, _) idx_mut)) next_r.a68 in
  if not test then failwithf "test 282 failed";
  (* Paths of depth 2 *)
  let next_r = { a68 = #{ a66 = 200.; b66 = 201. }; b68 = 202 } in
  (* .a68.#a66 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a68 = #{ r.a68 with a66 = next_r.a68.#a66 } } in
  Idx_mut.unsafe_set r ((.a68.#a66) : (t68, _) idx_mut) next_r.a68.#a66;
  mark_test_run 283;
  let test = eq r expected in
  if not test then failwithf "test 283 failed";
  mark_test_run 284;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a68.#a66) : (t68, _) idx_mut)) next_r.a68.#a66 in
  if not test then failwithf "test 284 failed";
  (* .a68.#b66 *)
  let sub_eq = (fun a b -> Float.equal (globalize a) (globalize b)) in
  let expected = { r with a68 = #{ r.a68 with b66 = next_r.a68.#b66 } } in
  Idx_mut.unsafe_set r ((.a68.#b66) : (t68, _) idx_mut) next_r.a68.#b66;
  mark_test_run 285;
  let test = eq r expected in
  if not test then failwithf "test 285 failed";
  mark_test_run 286;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a68.#b66) : (t68, _) idx_mut)) next_r.a68.#b66 in
  if not test then failwithf "test 286 failed";
  let r = { a68 = #{ a66 = 0.; b66 = 1. }; b68 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a68 = #{ a66 = 100.; b66 = 101. }; b68 = 102 } in
  (* .b68 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b68 = next_r.b68 } in
  Idx_mut.unsafe_set r ((.b68) : (t68, _) idx_mut) next_r.b68;
  mark_test_run 287;
  let test = eq r expected in
  if not test then failwithf "test 287 failed";
  mark_test_run 288;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b68) : (t68, _) idx_mut)) next_r.b68 in
  if not test then failwithf "test 288 failed";
  (*************************************)
  (*   t70 = { #{ string }; unit_u }   *)
  (*************************************)
  let eq = (fun { a70 = a701; b70 = b701 } { a70 = a702; b70 = b702 } -> (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun a b -> String.equal (globalize a) (globalize b)) a691 a692) a701 a702 && (fun _ _ -> true) b701 b702) in
  let r = { a70 = #{ a69 = "0" }; b70 = (unbox_unit ()) } in
  (* Paths of depth 1 *)
  let next_r = { a70 = #{ a69 = "100" }; b70 = (unbox_unit ()) } in
  (* .a70 *)
  let sub_eq = (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun a b -> String.equal (globalize a) (globalize b)) a691 a692) in
  let expected = { r with a70 = next_r.a70 } in
  Idx_mut.unsafe_set r ((.a70) : (t70, _) idx_mut) next_r.a70;
  mark_test_run 289;
  let test = eq r expected in
  if not test then failwithf "test 289 failed";
  mark_test_run 290;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a70) : (t70, _) idx_mut)) next_r.a70 in
  if not test then failwithf "test 290 failed";
  (* Paths of depth 2 *)
  let next_r = { a70 = #{ a69 = "200" }; b70 = (unbox_unit ()) } in
  (* .a70.#a69 *)
  let sub_eq = (fun a b -> String.equal (globalize a) (globalize b)) in
  let expected = { r with a70 = #{ r.a70 with a69 = next_r.a70.#a69 } } in
  Idx_mut.unsafe_set r ((.a70.#a69) : (t70, _) idx_mut) next_r.a70.#a69;
  mark_test_run 291;
  let test = eq r expected in
  if not test then failwithf "test 291 failed";
  mark_test_run 292;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a70.#a69) : (t70, _) idx_mut)) next_r.a70.#a69 in
  if not test then failwithf "test 292 failed";
  let r = { a70 = #{ a69 = "0" }; b70 = (unbox_unit ()) } in
  (* Paths of depth 1 *)
  let next_r = { a70 = #{ a69 = "100" }; b70 = (unbox_unit ()) } in
  (* .b70 *)
  let sub_eq = (fun _ _ -> true) in
  let expected = { r with b70 = next_r.b70 } in
  Idx_mut.unsafe_set r ((.b70) : (t70, _) idx_mut) next_r.b70;
  mark_test_run 293;
  let test = eq r expected in
  if not test then failwithf "test 293 failed";
  mark_test_run 294;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b70) : (t70, _) idx_mut)) next_r.b70 in
  if not test then failwithf "test 294 failed";
  (*************************************)
  (*   t71 = { #{ string }; string }   *)
  (*************************************)
  let eq = (fun { a71 = a711; b71 = b711 } { a71 = a712; b71 = b712 } -> (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun a b -> String.equal (globalize a) (globalize b)) a691 a692) a711 a712 && (fun a b -> String.equal (globalize a) (globalize b)) b711 b712) in
  let r = { a71 = #{ a69 = "0" }; b71 = "1" } in
  (* Paths of depth 1 *)
  let next_r = { a71 = #{ a69 = "100" }; b71 = "101" } in
  (* .a71 *)
  let sub_eq = (fun #{ a69 = a691 } #{ a69 = a692 } -> (fun a b -> String.equal (globalize a) (globalize b)) a691 a692) in
  let expected = { r with a71 = next_r.a71 } in
  Idx_mut.unsafe_set r ((.a71) : (t71, _) idx_mut) next_r.a71;
  mark_test_run 295;
  let test = eq r expected in
  if not test then failwithf "test 295 failed";
  mark_test_run 296;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a71) : (t71, _) idx_mut)) next_r.a71 in
  if not test then failwithf "test 296 failed";
  (* Paths of depth 2 *)
  let next_r = { a71 = #{ a69 = "200" }; b71 = "201" } in
  (* .a71.#a69 *)
  let sub_eq = (fun a b -> String.equal (globalize a) (globalize b)) in
  let expected = { r with a71 = #{ r.a71 with a69 = next_r.a71.#a69 } } in
  Idx_mut.unsafe_set r ((.a71.#a69) : (t71, _) idx_mut) next_r.a71.#a69;
  mark_test_run 297;
  let test = eq r expected in
  if not test then failwithf "test 297 failed";
  mark_test_run 298;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a71.#a69) : (t71, _) idx_mut)) next_r.a71.#a69 in
  if not test then failwithf "test 298 failed";
  let r = { a71 = #{ a69 = "0" }; b71 = "1" } in
  (* Paths of depth 1 *)
  let next_r = { a71 = #{ a69 = "100" }; b71 = "101" } in
  (* .b71 *)
  let sub_eq = (fun a b -> String.equal (globalize a) (globalize b)) in
  let expected = { r with b71 = next_r.b71 } in
  Idx_mut.unsafe_set r ((.b71) : (t71, _) idx_mut) next_r.b71;
  mark_test_run 299;
  let test = eq r expected in
  if not test then failwithf "test 299 failed";
  mark_test_run 300;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b71) : (t71, _) idx_mut)) next_r.b71 in
  if not test then failwithf "test 300 failed";
  (*********************************************)
  (*   t73 = { #{ string; unit_u }; string }   *)
  (*********************************************)
  let eq = (fun { a73 = a731; b73 = b731 } { a73 = a732; b73 = b732 } -> (fun #{ a72 = a721; b72 = b721 } #{ a72 = a722; b72 = b722 } -> (fun a b -> String.equal (globalize a) (globalize b)) a721 a722 && (fun _ _ -> true) b721 b722) a731 a732 && (fun a b -> String.equal (globalize a) (globalize b)) b731 b732) in
  let r = { a73 = #{ a72 = "0"; b72 = (unbox_unit ()) }; b73 = "1" } in
  (* Paths of depth 1 *)
  let next_r = { a73 = #{ a72 = "100"; b72 = (unbox_unit ()) }; b73 = "101" } in
  (* .a73 *)
  let sub_eq = (fun #{ a72 = a721; b72 = b721 } #{ a72 = a722; b72 = b722 } -> (fun a b -> String.equal (globalize a) (globalize b)) a721 a722 && (fun _ _ -> true) b721 b722) in
  let expected = { r with a73 = next_r.a73 } in
  Idx_mut.unsafe_set r ((.a73) : (t73, _) idx_mut) next_r.a73;
  mark_test_run 301;
  let test = eq r expected in
  if not test then failwithf "test 301 failed";
  mark_test_run 302;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a73) : (t73, _) idx_mut)) next_r.a73 in
  if not test then failwithf "test 302 failed";
  (* Paths of depth 2 *)
  let next_r = { a73 = #{ a72 = "200"; b72 = (unbox_unit ()) }; b73 = "201" } in
  (* .a73.#a72 *)
  let sub_eq = (fun a b -> String.equal (globalize a) (globalize b)) in
  let expected = { r with a73 = #{ r.a73 with a72 = next_r.a73.#a72 } } in
  Idx_mut.unsafe_set r ((.a73.#a72) : (t73, _) idx_mut) next_r.a73.#a72;
  mark_test_run 303;
  let test = eq r expected in
  if not test then failwithf "test 303 failed";
  mark_test_run 304;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a73.#a72) : (t73, _) idx_mut)) next_r.a73.#a72 in
  if not test then failwithf "test 304 failed";
  (* .a73.#b72 *)
  let sub_eq = (fun _ _ -> true) in
  let expected = { r with a73 = #{ r.a73 with b72 = next_r.a73.#b72 } } in
  Idx_mut.unsafe_set r ((.a73.#b72) : (t73, _) idx_mut) next_r.a73.#b72;
  mark_test_run 305;
  let test = eq r expected in
  if not test then failwithf "test 305 failed";
  mark_test_run 306;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a73.#b72) : (t73, _) idx_mut)) next_r.a73.#b72 in
  if not test then failwithf "test 306 failed";
  let r = { a73 = #{ a72 = "0"; b72 = (unbox_unit ()) }; b73 = "1" } in
  (* Paths of depth 1 *)
  let next_r = { a73 = #{ a72 = "100"; b72 = (unbox_unit ()) }; b73 = "101" } in
  (* .b73 *)
  let sub_eq = (fun a b -> String.equal (globalize a) (globalize b)) in
  let expected = { r with b73 = next_r.b73 } in
  Idx_mut.unsafe_set r ((.b73) : (t73, _) idx_mut) next_r.b73;
  mark_test_run 307;
  let test = eq r expected in
  if not test then failwithf "test 307 failed";
  mark_test_run 308;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b73) : (t73, _) idx_mut)) next_r.b73 in
  if not test then failwithf "test 308 failed";
  (************************************)
  (*   t75 = { #{ int64x2# }; int }   *)
  (************************************)
  let eq = (fun { a75 = a751; b75 = b751 } { a75 = a752; b75 = b752 } -> (fun #{ a74 = a741 } #{ a74 = a742 } -> int64x2_u_equal a741 a742) a751 a752 && (fun a b -> Int.equal a b) b751 b752) in
  let r = { a75 = #{ a74 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)) }; b75 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a75 = #{ a74 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)) }; b75 = 102 } in
  (* .a75 *)
  let sub_eq = (fun #{ a74 = a741 } #{ a74 = a742 } -> int64x2_u_equal a741 a742) in
  let expected = { r with a75 = next_r.a75 } in
  Idx_mut.unsafe_set r ((.a75) : (t75, _) idx_mut) next_r.a75;
  mark_test_run 309;
  let test = eq r expected in
  if not test then failwithf "test 309 failed";
  mark_test_run 310;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a75) : (t75, _) idx_mut)) next_r.a75 in
  if not test then failwithf "test 310 failed";
  (* Paths of depth 2 *)
  let next_r = { a75 = #{ a74 = (interleave_low_64 (int64x2_of_int64 200L) (int64x2_of_int64 201L)) }; b75 = 202 } in
  (* .a75.#a74 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with a75 = #{ r.a75 with a74 = next_r.a75.#a74 } } in
  Idx_mut.unsafe_set r ((.a75.#a74) : (t75, _) idx_mut) next_r.a75.#a74;
  mark_test_run 311;
  let test = eq r expected in
  if not test then failwithf "test 311 failed";
  mark_test_run 312;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a75.#a74) : (t75, _) idx_mut)) next_r.a75.#a74 in
  if not test then failwithf "test 312 failed";
  let r = { a75 = #{ a74 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)) }; b75 = 2 } in
  (* Paths of depth 1 *)
  let next_r = { a75 = #{ a74 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)) }; b75 = 102 } in
  (* .b75 *)
  let sub_eq = (fun a b -> Int.equal a b) in
  let expected = { r with b75 = next_r.b75 } in
  Idx_mut.unsafe_set r ((.b75) : (t75, _) idx_mut) next_r.b75;
  mark_test_run 313;
  let test = eq r expected in
  if not test then failwithf "test 313 failed";
  mark_test_run 314;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b75) : (t75, _) idx_mut)) next_r.b75 in
  if not test then failwithf "test 314 failed";
  (*****************************************)
  (*   t76 = { #{ int64x2# }; int64x2# }   *)
  (*****************************************)
  let eq = (fun { a76 = a761; b76 = b761 } { a76 = a762; b76 = b762 } -> (fun #{ a74 = a741 } #{ a74 = a742 } -> int64x2_u_equal a741 a742) a761 a762 && int64x2_u_equal b761 b762) in
  let r = { a76 = #{ a74 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)) }; b76 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)) } in
  (* Paths of depth 1 *)
  let next_r = { a76 = #{ a74 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)) }; b76 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)) } in
  (* .a76 *)
  let sub_eq = (fun #{ a74 = a741 } #{ a74 = a742 } -> int64x2_u_equal a741 a742) in
  let expected = { r with a76 = next_r.a76 } in
  Idx_mut.unsafe_set r ((.a76) : (t76, _) idx_mut) next_r.a76;
  mark_test_run 315;
  let test = eq r expected in
  if not test then failwithf "test 315 failed";
  mark_test_run 316;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a76) : (t76, _) idx_mut)) next_r.a76 in
  if not test then failwithf "test 316 failed";
  (* Paths of depth 2 *)
  let next_r = { a76 = #{ a74 = (interleave_low_64 (int64x2_of_int64 200L) (int64x2_of_int64 201L)) }; b76 = (interleave_low_64 (int64x2_of_int64 202L) (int64x2_of_int64 203L)) } in
  (* .a76.#a74 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with a76 = #{ r.a76 with a74 = next_r.a76.#a74 } } in
  Idx_mut.unsafe_set r ((.a76.#a74) : (t76, _) idx_mut) next_r.a76.#a74;
  mark_test_run 317;
  let test = eq r expected in
  if not test then failwithf "test 317 failed";
  mark_test_run 318;
  let test = sub_eq (Idx_mut.unsafe_get r ((.a76.#a74) : (t76, _) idx_mut)) next_r.a76.#a74 in
  if not test then failwithf "test 318 failed";
  let r = { a76 = #{ a74 = (interleave_low_64 (int64x2_of_int64 0L) (int64x2_of_int64 1L)) }; b76 = (interleave_low_64 (int64x2_of_int64 2L) (int64x2_of_int64 3L)) } in
  (* Paths of depth 1 *)
  let next_r = { a76 = #{ a74 = (interleave_low_64 (int64x2_of_int64 100L) (int64x2_of_int64 101L)) }; b76 = (interleave_low_64 (int64x2_of_int64 102L) (int64x2_of_int64 103L)) } in
  (* .b76 *)
  let sub_eq = int64x2_u_equal in
  let expected = { r with b76 = next_r.b76 } in
  Idx_mut.unsafe_set r ((.b76) : (t76, _) idx_mut) next_r.b76;
  mark_test_run 319;
  let test = eq r expected in
  if not test then failwithf "test 319 failed";
  mark_test_run 320;
  let test = sub_eq (Idx_mut.unsafe_get r ((.b76) : (t76, _) idx_mut)) next_r.b76 in
  if not test then failwithf "test 320 failed";
  ()
;;
let () = to_run ();;

for i = 1 to 320 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
